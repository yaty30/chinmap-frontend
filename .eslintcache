[{"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Backend/frontendData/cveScanOutput.tsx":"1","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Backend/frontendData/isScanning.tsx":"2","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Backend/frontendData/getPortStatus.tsx":"3","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Backend/frontendData/Result.tsx":"4","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/HomeSettings/HomeSettings.tsx":"5","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/Home.tsx":"6","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/ScanResult.tsx":"7","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Mobx/Models/homeSettingsStatus.tsx":"8","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/ScanResults/ScanDetails.tsx":"9","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/ScanResults/WhoIs.tsx":"10","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Backend/frontendData/whoisScan.tsx":"11","/Users/yipjames/Desktop/INS/FYP/chinmap/src/index.tsx":"12","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Views/DefaultScanMode.tsx":"13","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Views/ScanComparison.tsx":"14","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/defaultScanModes/fullPortsScanMode.tsx":"15","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/defaultScanModes/intenseScanMode.tsx":"16","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/defaultScanModes/top100portsScanMode.tsx":"17","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Views/Home.tsx":"18","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Mobx/Models/defaultScanModeStatus.tsx":"19","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/NSE.tsx":"20","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Vulnerability/HTTP.tsx":"21","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Discovery/Targets.tsx":"22","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Discovery/Database.tsx":"23","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/ScanResults/NmapOutput.tsx":"24"},{"size":90,"mtime":1614241604891,"results":"25","hashOfConfig":"26"},{"size":33,"mtime":1614245740684,"results":"27","hashOfConfig":"26"},{"size":313,"mtime":1614242191874,"results":"28","hashOfConfig":"26"},{"size":54,"mtime":1614241985688,"results":"29","hashOfConfig":"26"},{"size":18071,"mtime":1614246017933,"results":"30","hashOfConfig":"26"},{"size":15851,"mtime":1614262875491,"results":"31","hashOfConfig":"26"},{"size":10468,"mtime":1614179894501,"results":"32","hashOfConfig":"26"},{"size":1017,"mtime":1614182788594,"results":"33","hashOfConfig":"26"},{"size":18880,"mtime":1613844862323,"results":"34","hashOfConfig":"26"},{"size":703,"mtime":1614180203274,"results":"35","hashOfConfig":"26"},{"size":88,"mtime":1614241979701,"results":"36","hashOfConfig":"26"},{"size":500,"mtime":1612188541082,"results":"37","hashOfConfig":"26"},{"size":211,"mtime":1612328485908,"results":"38","hashOfConfig":"26"},{"size":207,"mtime":1612324657583,"results":"39","hashOfConfig":"26"},{"size":8996,"mtime":1613489966000,"results":"40","hashOfConfig":"26"},{"size":9062,"mtime":1613489966000,"results":"41","hashOfConfig":"26"},{"size":7700,"mtime":1613489966000,"results":"42","hashOfConfig":"26"},{"size":167,"mtime":1612256006489,"results":"43","hashOfConfig":"26"},{"size":3852,"mtime":1614006373442,"results":"44","hashOfConfig":"26"},{"size":7765,"mtime":1613489966000,"results":"45","hashOfConfig":"26"},{"size":4495,"mtime":1613489966000,"results":"46","hashOfConfig":"26"},{"size":4500,"mtime":1613489966000,"results":"47","hashOfConfig":"26"},{"size":4503,"mtime":1613489966000,"results":"48","hashOfConfig":"26"},{"size":990,"mtime":1614245542639,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1122jn7",{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":31,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":28,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"70"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"84","messages":"85","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"86","messages":"87","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"warningCount":35,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"94","messages":"95","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"96","messages":"97","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"98","messages":"99","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"100","messages":"101","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102"},"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Backend/frontendData/cveScanOutput.tsx",[],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Backend/frontendData/isScanning.tsx",[],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Backend/frontendData/getPortStatus.tsx",[],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Backend/frontendData/Result.tsx",[],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/HomeSettings/HomeSettings.tsx",["103","104","105","106","107","108","109","110","111","112"],"import React, {useState} from 'react';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Paper from '@material-ui/core/Paper';\nimport Collapse from '@material-ui/core/Collapse';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Divider from '@material-ui/core/Divider';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport ExpandLessIcon from '@material-ui/icons/ExpandLess';\n\n// Components\nimport scanTechniquesData from './json/ScanTechniques/data.json'\nimport hostDiscovery from './json/HostDiscovery/data.json'\nimport osDetection from './json/OSDetection/data.json'\nimport outputOpt from './json/Output/data.json'\nimport portSpecification from './json/PortSpecification/data.json'\nimport serviceAndVersionDetectiony from './json/ServiceAndVersionDetectiony/data.json'\n\n// Mobx\nimport settingsStatus from '../../Mobx/Models/homeSettingsStatus'\n\nimport SetFlags from './SetFlags'\nimport { automation, cveDetection } from './homeSettingsData'\nimport { targetData } from '../target'\nimport { settings } from 'cluster';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n    },\n    container: {\n      display: 'flex',\n    },\n    polygon: {\n      fill: theme.palette.common.white,\n      stroke: theme.palette.divider,\n      strokeWidth: 1,\n    },\n  }),\n);\n\nexport default () => {\n  const classes = useStyles();\n  const [open, setOpen] = useState(false);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleCancel = () => {\n    setOpen(false);\n    settingsStatus.setAuto(false)\n    settingsStatus.setCve(false)\n    setOthers({\n      automation: false,\n      cveDetect: false,\n      pn: false,\n      whoIs: false,\n    })\n  }\n\n  const [others, setOthers] = useState({\n    automation: false,\n    cveDetect: false,\n    pn: false,\n    whoIs: false,\n  });\n\n  const handleOthersChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setOthers({ ...others, [event.target.name]: event.target.checked });\n  };\n\n  const [setRange, setSetRange] = useState('none');\n\n  const handleSetRange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSetRange((event.target as HTMLInputElement).value);\n    settingsStatus.setRange((event.target as HTMLInputElement).value);\n    if (/.0\\/\\d\\d$/.test(settingsStatus.target) === false){\n      settingsStatus.setRange('none');\n      setSetRange('none')\n    }\n  };\n\n  return (\n    <div className={classes.root}>\n      <Button \n        onClick={handleClickOpen}\n        style={{\n          textTransform: \"none\"\n        }}\n        disabled={settingsStatus.target.length > 0 ? false : true}\n      >\n        Settings\n      </Button>\n      <Dialog\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle id=\"alert-dialog-title\">{\"Add-on Features\"}</DialogTitle>\n        <DialogContent>\n          <Divider variant=\"middle\" style={{marginBottom: 25}}/>\n          <Grid container spacing={6}>\n            <Grid item xs={12}>\n              <Paper style={{background: \"#f9f9f9\", padding: \"15px 15px\", textAlign: \"center\"}} elevation={0}>\n                  <Typography>Target:&nbsp;{settingsStatus.target}</Typography>\n              </Paper>\n            </Grid>\n            {/* Set Range */}\n            <Grid item xs={12}>\n              <Tooltip title=\"Scan range only for the target with range, e.g. 192.168.1.0/24\" arrow placement=\"top\" disableHoverListener={/.0\\/\\d\\d$/.test(settingsStatus.target) === true ? true : false}>\n                <Paper style={{background: \"#f9f9f9\", padding: \"15px 15px\"}} elevation={0}>\n                <FormControl component=\"fieldset\">\n                  <FormLabel component=\"legend\">Set Range</FormLabel>\n                  <RadioGroup aria-label=\"gender\" name=\"gender1\" value={setRange} onChange={handleSetRange} style={{marginLeft: 65,marginTop:15}}>\n                    <table>\n                      <tr>\n                      {/* disabled={'.0\\/\\d+$'.test(homeSettings.target) === true ? false : true} */}\n                        <td>\n                          <FormControlLabel value=\"oddOnly\" control={<Radio  disabled={/.0\\/\\d\\d$/.test(settingsStatus.target) === true ? false : true}/>} label=\"Odd Numbers Only\" />\n                        </td>\n                        <td>\n                          <FormControlLabel value=\"even\" control={<Radio  disabled={/.0\\/\\d\\d$/.test(settingsStatus.target) === true ? false : true}/>} label=\"Even Numbers Only\" />\n                        </td>\n                      </tr>\n                      <tr>\n                        <td>\n                          <FormControlLabel value=\"every5hosts\" control={<Radio  disabled={/.0\\/\\d\\d$/.test(settingsStatus.target) === true ? false : true}/>} label=\"Every 5 hosts\" />\n                        </td>\n                        <td>\n                          <FormControlLabel value=\"every10hosts\" control={<Radio  disabled={/.0\\/\\d\\d$/.test(settingsStatus.target) === true ? false : true}/>} label=\"Every 10 hosts\" />\n                        </td>\n                      </tr>\n                      <tr>\n                        <td>\n                          <FormControlLabel value=\"every15hosts\" control={<Radio  disabled={/.0\\/\\d\\d$/.test(settingsStatus.target) === true ? false : true}/>} label=\"Every 15 hosts\" />\n                        </td>\n                        <td>\n                          <FormControlLabel value=\"every20hosts\" control={<Radio  disabled={/.0\\/\\d\\d$/.test(settingsStatus.target) === true ? false : true}/>} label=\"Every 20 hosts\" />\n                        </td>\n                      </tr>\n                      <tr>\n                        <td>\n                          <FormControlLabel value=\"none\" control={<Radio  disabled={/.0\\/\\d\\d$/.test(settingsStatus.target) === true ? false : true}/>} label=\"None\" />\n\n                        </td>\n                      </tr>\n                    </table>\n                  </RadioGroup>\n                </FormControl>\n              </Paper>\n              </Tooltip>\n            </Grid>\n            {/* Set Flags */}\n            <Grid item xs={12} style={{textAlign: \"left\"}}>\n              <Paper style={{background: \"#f9f9f9\", padding: \"15px 15px\", textAlign: \"center\"}} elevation={0}>\n                <Typography style={{textAlign: \"left\",marginBottom: 12,}}>Scan Techniques</Typography>\n                {scanTechniquesData.map((data, index) => {\n                  const [opt, setOpt] = useState(false)\n\n                  return(\n                    <Tooltip title={data.tooltip} arrow placement=\"top\">\n                      <FormControlLabel\n                          value={opt}\n                          control={\n                              <Checkbox \n                                  color=\"primary\" \n                                  checked={opt}\n                                  onChange={(event: React.ChangeEvent<HTMLInputElement>)=> {\n                                    settingsStatus.setFlag(settingsStatus.flag + 1); \n                                    console.log(settingsStatus.flag);\n                                    setOpt(event.target.checked);\n                                  }}\n                              />\n                          }\n                          label={data.flag}\n                          labelPlacement=\"end\"\n                      />\n                    </Tooltip>\n                  )\n                })}\n                <Divider variant=\"middle\" style={{marginTop: 10, marginBottom: 20,}}/>\n                \n                <Typography style={{textAlign: \"left\",marginBottom: 12,}}>Host Discovery</Typography>\n                {hostDiscovery.map((data, index) => {\n                    const [opt, setOpt] = useState(false)\n\n                  return(\n                    <Tooltip title={data.tooltip} arrow placement=\"top\">\n                      <FormControlLabel\n                          value={opt}\n                          control={\n                              <Checkbox \n                                  color=\"primary\" \n                                  checked={opt}\n                                  onChange={(event: React.ChangeEvent<HTMLInputElement>)=> {\n                                    settingsStatus.setFlag(settingsStatus.flag + 1); \n                                    console.log(settingsStatus.flag);\n                                    setOpt(event.target.checked);\n                                  }}\n                              />\n                          }\n                          label={data.flag}\n                          labelPlacement=\"end\"\n                      />\n                    </Tooltip>\n                  )\n                })}\n                <Divider variant=\"middle\" style={{marginTop: 10, marginBottom: 20,}}/>\n\n                <Typography style={{textAlign: \"left\",marginBottom: 12,}}>OS Detection</Typography>\n                {osDetection.map((data, index) => {\n                    const [opt, setOpt] = useState(false)\n\n                  return(\n                    <Tooltip title={data.tooltip} arrow placement=\"top\">\n                      <FormControlLabel\n                          value={opt}\n                          control={\n                              <Checkbox \n                                  color=\"primary\" \n                                  checked={opt}\n                                  onChange={(event: React.ChangeEvent<HTMLInputElement>)=> {\n                                    settingsStatus.setFlag(settingsStatus.flag + 1); \n                                    console.log(settingsStatus.flag);\n                                    setOpt(event.target.checked);\n                                  }}\n                              />\n                          }\n                          label={data.flag}\n                          labelPlacement=\"end\"\n                      />\n                    </Tooltip>\n                  )\n                })}\n                <Divider variant=\"middle\" style={{marginTop: 10, marginBottom: 20,}}/>\n\n                <Typography style={{textAlign: \"left\",marginBottom: 12,}}>Output</Typography>\n                {outputOpt.map((data, index) => {\n                    const [opt, setOpt] = useState(false)\n\n                  return(\n                    <Tooltip title={data.tooltip} arrow placement=\"top\">\n                      <FormControlLabel\n                          value={opt}\n                          control={\n                              <Checkbox \n                                  color=\"primary\" \n                                  checked={opt}\n                                  onChange={(event: React.ChangeEvent<HTMLInputElement>)=> {\n                                    settingsStatus.setFlag(settingsStatus.flag + 1); \n                                    console.log(settingsStatus.flag);\n                                    setOpt(event.target.checked);\n                                  }}\n                              />\n                          }\n                          label={data.flag}\n                          labelPlacement=\"end\"\n                      />\n                    </Tooltip>\n                  )\n                })}\n                <Divider variant=\"middle\" style={{marginTop: 10, marginBottom: 20,}}/>\n\n                <Typography style={{textAlign: \"left\",marginBottom: 12,}}>Port Specification</Typography>\n                {portSpecification.map((data, index) => {\n                    const [opt, setOpt] = useState(false)\n\n                  return(\n                    <Tooltip title={data.tooltip} arrow placement=\"top\">\n                      <FormControlLabel\n                          value={opt}\n                          control={\n                              <Checkbox \n                                  color=\"primary\" \n                                  checked={opt}\n                                  onChange={(event: React.ChangeEvent<HTMLInputElement>)=> {\n                                    settingsStatus.setFlag(settingsStatus.flag + 1); \n                                    console.log(settingsStatus.flag);\n                                    setOpt(event.target.checked);\n                                  }}\n                              />\n                          }\n                          label={data.flag}\n                          labelPlacement=\"end\"\n                      />\n                    </Tooltip>\n                  )\n                })}\n                <Divider variant=\"middle\" style={{marginTop: 10, marginBottom: 20,}}/>\n\n                <Typography style={{textAlign: \"left\",marginBottom: 12,}}>Service And Version Detectiony</Typography>\n                {serviceAndVersionDetectiony.map((data, index) => {\n                    const [opt, setOpt] = useState(false)\n\n                  return(\n                    <Tooltip title={data.tooltip} arrow placement=\"top\">\n                      <FormControlLabel\n                          value={opt}\n                          control={\n                              <Checkbox \n                                  color=\"primary\" \n                                  checked={opt}\n                                  onChange={(event: React.ChangeEvent<HTMLInputElement>)=> {\n                                    settingsStatus.setFlag(settingsStatus.flag + 1); \n                                    console.log(settingsStatus.flag);\n                                    setOpt(event.target.checked);\n                                  }}\n                              />\n                          }\n                          label={data.flag}\n                          labelPlacement=\"end\"\n                      />\n                    </Tooltip>\n                  )\n                })}\n                <Divider variant=\"middle\" style={{marginTop: 10, marginBottom: 20,}}/>\n                \n              </Paper>\n            </Grid>\n            {/* Others */}\n            <Grid item xs={6}>\n              <Paper style={{background: \"#f9f9f9\", padding: \"15px 15px\"}} elevation={0}>\n                <Tooltip title=\"When the system scan find out the result output as no host is alive, automation will allow the scan run again until there is at least one host is alive or all the hosts in desinated range is scanned.\" arrow placement=\"top\">\n                  <FormControlLabel\n                    label=\"Automation\"\n                    control={\n                      <Switch\n                        checked={others.automation}\n                        onChange={handleOthersChange}\n                        onClick={() => settingsStatus.setAuto(!settingsStatus.automation)}\n                        name=\"automation\"\n                        inputProps={{ 'aria-label': 'Automation' }}\n                      />\n                    }\n                  />\n                </Tooltip>\n              </Paper>\n            </Grid>\n            <Grid item xs={6}>\n              <Paper style={{background: \"#f9f9f9\", padding: \"15px 15px\"}} elevation={0}>\n                <FormControlLabel\n                  label=\"CVE Detection\"\n                  control={\n                    <Switch\n                      checked={others.cveDetect}\n                      onChange={handleOthersChange}\n                      onClick={() => settingsStatus.setCve(!settingsStatus.cve)}\n                      name=\"cveDetect\"\n                      inputProps={{ 'aria-label': 'CVE Detection' }}\n                    />\n                  }\n                />\n              </Paper>\n            </Grid>\n            <Grid item xs={6}>\n              <Paper style={{background: \"#f9f9f9\", padding: \"15px 15px\"}} elevation={0}>\n                <FormControlLabel\n                  label=\"Ping Block Bypassing\"\n                  control={\n                    <Switch\n                      checked={others.pn}\n                      onChange={handleOthersChange}\n                      onClick={() => settingsStatus.setPn(!settingsStatus.pn)}\n                      name=\"pn\"\n                      inputProps={{ 'aria-label': 'Ping Block Bypassing' }}\n                    />\n                  }\n                />\n              </Paper>\n            </Grid>\n            <Grid item xs={6}>\n              <Paper style={{background: \"#f9f9f9\", padding: \"15px 15px\"}} elevation={0}>\n                <FormControlLabel\n                  label=\"WhoIs\"\n                  control={\n                    <Switch\n                      checked={others.whoIs}\n                      onChange={handleOthersChange}\n                      onClick={() => settingsStatus.setWhoIs(!settingsStatus.whoIs)}\n                      name=\"whoIs\"\n                      inputProps={{ 'aria-label': 'WhoIs' }}\n                    />\n                  }\n                />\n              </Paper>\n            </Grid>\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleCancel} color=\"secondary\">\n            Cancel\n          </Button>\n          <Button onClick={handleClose} color=\"primary\" autoFocus>\n            Save\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n\n\n","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/Home.tsx",["113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/ScanResult.tsx",["144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Mobx/Models/homeSettingsStatus.tsx",[],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/ScanResults/ScanDetails.tsx",["165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192"],"import React, {useState} from 'react';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport Divider from '@material-ui/core/Divider';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Tooltip from '@material-ui/core/Tooltip';\n\nimport { scanTarget, targetData, targetTime, chosenMode, scanDate } from '../target'\n\n// Backend\nimport { isScanning } from '../../Backend/frontendData/isScanning'\nimport { pureOutput } from '../../Backend/frontendData/Result'\nimport scannedIn from '../../Backend/frontendData/scannedIn.json'\nimport scannedTarget from '../../Backend/frontendData/scannedTargetForSelect.json'\nimport { rows } from '../../Backend/frontendData/getPortStatus'\n\n// Mobx Global Status\nimport storeTarget from '../../Mobx/Models/resultSelectStatus'\n\nconst mainStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    paper: {\n      padding: theme.spacing(2),\n      textAlign: 'left',\n      backgroundColor: \"#fefefe\",\n      color: \"#333333\",\n    },\n    centerGrid: {\n        textAlign: \"center\",\n        marginTop: 15,\n    },\n    btnTabs: {\n        textTransform: \"capitalize\",\n    },\n    cardRoot: {\n        marginTop: 25,\n    },\n    title: {\n        fontSize: 14,\n        whiteSpace: \"pre-line\",\n    },\n    pos: {\n        marginBottom: 12,\n    },\n    defaultShow: {\n\n    },\n    defaultHide: {\n        display: \"none\",\n    },\n    centering: {\n      textAlignLast: \"center\",\n      width: \"70%\",\n      userSelect: \"none\",\n    },\n    datepicker: {\n      marginLeft: theme.spacing(1),\n      marginRight: theme.spacing(1),\n      width: 200,\n    },\n  }),\n);\n\nexport default () => {\n  const classes = mainStyles();\n\n  const handleClick = () => {\n    console.log(targetData);\n  }\n\n  return (\n    <>\n        {scannedIn.map((data) => (\n          data.id !=  storeTarget.target ||  storeTarget.target === \"\" || data.target === \"\" ?\n              null\n                  :\n              <>\n              {/* <button onClick={handleClick}>click</button> */}\n              <form \n                  className={classes.root} \n                  noValidate \n                  autoComplete=\"off\"\n              >\n                  <br/>\n                  <Grid container justify=\"center\" spacing={2} style={{width: \"100%\", textAlign: \"center\"}}>\n                    <>\n                      <Grid item xs={12} style={{width: \"100%\", marginBottom: 15,}}>\n                        <div style={{textAlign: \"left\"}}><FormLabel component=\"legend\">Basic Details: </FormLabel></div>\n                      </Grid>\n\n                      <Grid item xs={12} style={{width: \"100%\", marginBottom: 55}}>\n                        <TextField\n                            className={classes.centering} \n                            id=\"outlined-basic\" \n                            label=\"Scan Target\" \n                            variant=\"outlined\" \n                            multiline\n                            style={{\n                              width: \"85%\",\n                            }}\n                            value={data.target}\n                            inputProps={{\n                                readOnly: true,\n                            }}\n                        />\n                      </Grid>\n                    \n\n                      <Grid item xs={6} style={{width: \"100%\", marginBottom: 55}}>\n                        <TextField\n                            className={classes.centering} \n                            id=\"outlined-basic\" \n                            label=\"Scan Time\" \n                            variant=\"outlined\" \n                            value={data.time}\n                            inputProps={{\n                                readOnly: true,\n                            }}\n                        />\n                      </Grid>\n\n                      <Grid item xs={6} style={{width: \"100%\"}}>\n                        <TextField\n                            className={classes.centering} \n                            id=\"outlined-basic\" \n                            label=\"Chosen Scan Mode\" \n                            variant=\"outlined\" \n                            value={\n                              data.scanMode == \"\" ? \"Regular Scan\" : data.scanMode\n                            }\n                            inputProps={{\n                                readOnly: true,\n                            }}\n                          />\n                      </Grid>\n                      \n                      <Grid item xs={6} style={{width: \"100%\", marginBottom: 55}}>\n                        <Tooltip \n                          arrow \n                          placement=\"top\"\n                          title={\n                            (parseInt(data.runTime)/60).toFixed(3) + \" min; \" + (parseInt(data.runTime)/60/60).toFixed(3) + \" hr\"\n                          } \n                        >\n                          <TextField\n                              className={classes.centering} \n                              id=\"outlined-basic\" \n                              label=\"Target Scanned In\" \n                              variant=\"outlined\" \n                              value={data.runTime}\n                              inputProps={{\n                                  readOnly: true,\n                              }}\n                            />\n                          </Tooltip>\n                      </Grid>\n                  \n                  \n                      <Grid item xs={6} style={{width: \"100%\"}}>\n                        <TextField\n                          className={classes.centering} \n                          id=\"outlined-basic\" \n                          label='Scan Date [Y-M-D]' \n                          variant=\"outlined\" \n                          value={data.date}\n                          inputProps={{\n                              readOnly: true,\n                          }}\n                        />\n                      </Grid>\n                      \n                      <Grid item xs={6} style={{width: \"100%\", marginBottom: 55}}>\n                        <TextField\n                            className={classes.centering} \n                            id=\"outlined-basic\" \n                            label=\"Scan Latency\" \n                            variant=\"outlined\" \n                            multiline={\n                              data.latency.length > 17 ? true : false\n                            }\n                            value={\n                              data.latency == '' ? \"Target host is down\" \n                              //   :\n                              // data.latency.length > 17 ? data.target + \": \" + data.latency\n                                 :\n                              data.latency\n                            }\n                            inputProps={{\n                                readOnly: true,\n                            }}\n                          />\n                      </Grid>\n\n                      <Grid item xs={6} style={{width: \"100%\", marginBottom: 55}}>\n                        <TextField\n                            className={classes.centering} \n                            id=\"outlined-basic\" \n                            label=\"Up Host\" \n                            variant=\"outlined\" \n                            value={data.upHost == '' ? \"Target host is down\" : data.upHost}\n                            inputProps={{\n                                readOnly: true,\n                            }}\n                          />\n                      </Grid>\n                      \n                      <Grid item xs={6} style={{width: \"100%\", marginBottom: 55}}>\n                        <TextField\n                            className={classes.centering} \n                            id=\"outlined-basic\" \n                            label=\"Closed Port Qty.\" \n                            variant=\"outlined\" \n                            multiline={\n                              data.notShown.length > 15 ? true : false\n                            }\n                            value={data.notShown == '' ? \"Target host is down\" : data.notShown}\n                            inputProps={{\n                                readOnly: true,\n                            }}\n                          />\n                      </Grid>\n\n                      <Grid item xs={6} style={{width: \"100%\", marginBottom: 55}}>\n                        <TextField\n                            className={classes.centering} \n                            id=\"outlined-basic\" \n                            label=\"Nmap Version\" \n                            variant=\"outlined\" \n                            multiline\n                            value={data.nmapVer}\n                            inputProps={{\n                                readOnly: true,\n                            }}\n                          />\n                      </Grid>\n\n                    <Grid item xs={12} style={{width: \"100%\", marginBottom: 15, marginTop: 25,}}>\n                      <Divider /><br/>\n                      <div style={{textAlign: \"left\"}}><FormLabel component=\"legend\">Advanced Details: </FormLabel></div>\n                    </Grid>\n                      \n                      <Grid item xs={12} style={{width: \"100%\", marginBottom: 55}}>\n                        <TextField\n                            className={classes.centering} \n                            id=\"outlined-basic\" \n                            label=\"Target OS\" \n                            variant=\"outlined\" \n                            style={{\n                              width: \"85%\",\n                            }}\n                            multiline={\n                              data.os.length > 5 ? true : false\n                            }\n                            value={\n                              data.os == \"\" ? \"No OS found or target is currently down\" : data.os\n                            }\n                            inputProps={{\n                                readOnly: true,\n                            }}\n                          />\n                      </Grid>\n\n                      <Grid item xs={6} style={{width: \"100%\", marginBottom: 55}}>\n                        <TextField\n                            className={classes.centering} \n                            id=\"outlined-basic\" \n                            label=\"Network Distance\" \n                            variant=\"outlined\" \n                            multiline={\n                              data.hop.length > 5 ? true : false\n                            }\n                            value={\n                              data.hop == \"\" ? \n                                \"Enable -v to discover\" \n                                : \n                              data.hop\n\n                            }\n                            inputProps={{\n                                readOnly: true,\n                            }}\n                          />\n                      </Grid>\n                      \n                      <Grid item xs={6} style={{width: \"100%\", marginBottom: 55}}>\n                        <TextField\n                            className={classes.centering} \n                            id=\"outlined-basic\" \n                            label=\"TCP Sequence Prediction\" \n                            variant=\"outlined\" \n                            multiline={\n                              data.notShown.length > 15 ? true : false\n                            }\n                            value={data.difficulty == '' ? \"Target host is down\" : data.difficulty}\n                            inputProps={{\n                                readOnly: true,\n                            }}\n                          />\n                      </Grid>\n                      \n                      <Grid item xs={6} style={{width: \"100%\", marginBottom: 55}}>\n                        <TextField\n                            className={classes.centering} \n                            id=\"outlined-basic\" \n                            label=\"Device Type\" \n                            variant=\"outlined\" \n                            multiline={\n                              data.macAddr.length > 17 ? true : false\n                            }\n                            value={\n                              data.deviceType == \"\" ? \"Enable -v to discover\" : data.deviceType\n                            }\n                            inputProps={{\n                                readOnly: true,\n                            }}\n                          />\n                      </Grid>\n\n                      <Grid item xs={6} style={{width: \"100%\", marginBottom: 55}}>\n                        <TextField\n                            className={classes.centering} \n                            id=\"outlined-basic\" \n                            label=\"MAC Address\" \n                            variant=\"outlined\" \n                            multiline={\n                              data.macAddr.length > 28 ? true : false\n                            }\n                            value={\n                              data.macAddr == \"\" ? \"MAC Address not found\" : data.macAddr\n                            }\n                            inputProps={{\n                                readOnly: true,\n                            }}\n                          />\n                      </Grid>\n\n                      <Grid item xs={12} style={{width: \"100%\", marginBottom: 55}}>\n                        <TextField\n                            className={classes.centering} \n                            id=\"outlined-basic\" \n                            label=\"Up Time\" \n                            variant=\"outlined\" \n                            multiline\n                            style={{\n                              width: \"85%\",\n                            }}\n                            value={\n                              data.uptime == \"\" ? \"Enable -v to discover\" : data.uptime\n                            }\n                            inputProps={{\n                                readOnly: true,\n                            }}\n                          />\n                      </Grid>\n\n                      <Grid item xs={6} style={{width: \"100%\", marginBottom: 55}}>\n                        <TextField\n                            className={classes.centering} \n                            id=\"outlined-basic\" \n                            label=\"Raw Packets Sent\" \n                            variant=\"outlined\" \n                            value={\n                              data.rawPacket == \"\" ? \"Enable -v to discover\" : data.rawPacket\n                            }\n                            inputProps={{\n                                readOnly: true,\n                            }}\n                          />\n                      </Grid>\n\n                      <Grid item xs={6} style={{width: \"100%\", marginBottom: 55}}>\n                        <TextField\n                            className={classes.centering} \n                            id=\"outlined-basic\" \n                            label=\"Raw Packets Received\" \n                            variant=\"outlined\" \n                            value={\n                              data.rcvd == \"\" ? \"Enable -v to discover\" : data.rcvd\n                            }\n                            inputProps={{\n                                readOnly: true,\n                            }}\n                          />\n                      </Grid>\n\n\n                    <Grid item xs={12} style={{width: \"100%\", marginBottom: 15, marginTop: 25,}}>\n                      <Divider /><br/>\n                      <div style={{textAlign: \"left\"}}><FormLabel component=\"legend\">Scan Settings</FormLabel></div>\n                    </Grid>\n\n                        <Grid item xs={6} style={{width: \"100%\", marginBottom: 55}}>\n                          <TextField\n                              className={classes.centering} \n                              id=\"outlined-basic\" \n                              label=\"Automation\" \n                              variant=\"outlined\" \n                              value={\n                                data.auto == \"True\" ? \"Enabled\" : \"Disabled\"\n                              }\n                              inputProps={{\n                                  readOnly: true,\n                              }}\n                            />\n                        </Grid>\n                        <Grid item xs={6} style={{width: \"100%\", marginBottom: 55}}>\n                          <TextField\n                              className={classes.centering} \n                              id=\"outlined-basic\" \n                              label=\"CVE Detection\" \n                              variant=\"outlined\" \n                              value={\n                                data.cveDetect == \"True\" ? \"Enabled\" : \"Disabled\"\n                              }\n                              inputProps={{\n                                  readOnly: true,\n                              }}\n                            />\n                        </Grid>\n                        <Grid item xs={6} style={{width: \"100%\", marginBottom: 55}}>\n                          <TextField\n                              className={classes.centering} \n                              id=\"outlined-basic\" \n                              label=\"Scan Range\" \n                              variant=\"outlined\" \n                              value={\n                                data.setRange == \" \" ? \"Not Specify\" : data.setRange\n                              }\n                              inputProps={{\n                                  readOnly: true,\n                              }}\n                            />\n                        </Grid>\n                        <Grid item xs={6} style={{width: \"100%\", marginBottom: 55}}>\n                          <TextField\n                              className={classes.centering} \n                              id=\"outlined-basic\" \n                              label=\"Set Flags\" \n                              variant=\"outlined\" \n                              multiline\n                              value={\n                                data.flags == \" \" ? \"Null\" : data.flags\n                              }\n                              inputProps={{\n                                  readOnly: true,\n                              }}\n                            />\n                        </Grid>\n                      </>\n                    \n                  </Grid>\n              </form>\n              </>\n        ))}\n    </>\n  );\n}\n",["193","194"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/ScanResults/WhoIs.tsx",["195","196","197"],"import React, {useState} from 'react'\nimport Typography from '@material-ui/core/Typography'\n\n// Mobx\nimport storeTarget from '../../Mobx/Models/resultSelectStatus'\n\n// Backend\nimport { whoisScanOutput } from '../../Backend/frontendData/whoisScan'\nimport store from '../../Mobx/Models/homeSettingsStatus'\n\nexport default () => {\n    return(\n        <>\n            {whoisScanOutput.map((data, index) => \n            \n               storeTarget.target === data.scanId ?\n                <>\n                    <Typography key={data.scanId} style={{whiteSpace: \"pre-line\"}}>\n                        {data.output}\n                    </Typography>\n                </> : null\n            )}\n        </>\n    )\n}","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Backend/frontendData/whoisScan.tsx",[],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/index.tsx",[],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Views/DefaultScanMode.tsx",[],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Views/ScanComparison.tsx",[],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/defaultScanModes/fullPortsScanMode.tsx",["198","199","200","201","202"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/defaultScanModes/intenseScanMode.tsx",["203","204","205","206","207"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/defaultScanModes/top100portsScanMode.tsx",["208","209","210","211","212","213","214"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Views/Home.tsx",[],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Mobx/Models/defaultScanModeStatus.tsx",[],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/NSE.tsx",["215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Vulnerability/HTTP.tsx",["250","251"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Discovery/Targets.tsx",["252","253"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Discovery/Database.tsx",["254","255"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/ScanResults/NmapOutput.tsx",["256","257","258","259","260","261","262","263","264","265"],"import React, {useState, useEffect} from 'react';\nimport Typography from '@material-ui/core/Typography'\n\nimport { scanTarget, targetData, targetTime } from '../target'\n\n// Backend\nimport { isScanning } from '../../Backend/frontendData/isScanning'\nimport { pureOutput } from '../../Backend/frontendData/Result'\nimport scannedIn from '../../Backend/frontendData/scannedIn.json'\nimport { rows } from '../../Backend/frontendData/getPortStatus'\n\n// Mobx Global Status\nimport selectResult from '../../Mobx/Models/resultSelectStatus'\n\nexport default () => {\n\n    return(\n      <>\n          {pureOutput.map((obj) => (\n            <>\n              {\n                obj.id == selectResult.target ?\n                  <>\n                     <Typography style={{whiteSpace: \"pre-line\"}}>\n                        {obj.output}\n                      </Typography>\n                  </>\n                    :\n                  null\n              }\n            </>\n          ))}\n        \n      </>\n    );\n}",{"ruleId":"266","severity":1,"message":"267","line":5,"column":8,"nodeType":"268","messageId":"269","endLine":5,"endColumn":16},{"ruleId":"266","severity":1,"message":"270","line":11,"column":8,"nodeType":"268","messageId":"269","endLine":11,"endColumn":25},{"ruleId":"266","severity":1,"message":"271","line":22,"column":8,"nodeType":"268","messageId":"269","endLine":22,"endColumn":22},{"ruleId":"266","severity":1,"message":"272","line":23,"column":8,"nodeType":"268","messageId":"269","endLine":23,"endColumn":22},{"ruleId":"266","severity":1,"message":"273","line":36,"column":8,"nodeType":"268","messageId":"269","endLine":36,"endColumn":16},{"ruleId":"266","severity":1,"message":"274","line":37,"column":10,"nodeType":"268","messageId":"269","endLine":37,"endColumn":20},{"ruleId":"266","severity":1,"message":"275","line":37,"column":22,"nodeType":"268","messageId":"269","endLine":37,"endColumn":34},{"ruleId":"266","severity":1,"message":"276","line":38,"column":10,"nodeType":"268","messageId":"269","endLine":38,"endColumn":20},{"ruleId":"266","severity":1,"message":"277","line":39,"column":10,"nodeType":"268","messageId":"269","endLine":39,"endColumn":18},{"ruleId":"278","severity":1,"message":"279","line":56,"column":1,"nodeType":"280","endLine":420,"endColumn":2},{"ruleId":"266","severity":1,"message":"281","line":1,"column":26,"nodeType":"268","messageId":"269","endLine":1,"endColumn":35},{"ruleId":"266","severity":1,"message":"282","line":3,"column":10,"nodeType":"268","messageId":"269","endLine":3,"endColumn":16},{"ruleId":"266","severity":1,"message":"283","line":3,"column":18,"nodeType":"268","messageId":"269","endLine":3,"endColumn":23},{"ruleId":"266","severity":1,"message":"284","line":3,"column":31,"nodeType":"268","messageId":"269","endLine":3,"endColumn":44},{"ruleId":"266","severity":1,"message":"285","line":19,"column":8,"nodeType":"268","messageId":"269","endLine":19,"endColumn":15},{"ruleId":"266","severity":1,"message":"267","line":20,"column":8,"nodeType":"268","messageId":"269","endLine":20,"endColumn":16},{"ruleId":"266","severity":1,"message":"286","line":21,"column":8,"nodeType":"268","messageId":"269","endLine":21,"endColumn":15},{"ruleId":"266","severity":1,"message":"287","line":22,"column":8,"nodeType":"268","messageId":"269","endLine":22,"endColumn":28},{"ruleId":"266","severity":1,"message":"288","line":23,"column":8,"nodeType":"268","messageId":"269","endLine":23,"endColumn":12},{"ruleId":"266","severity":1,"message":"289","line":26,"column":8,"nodeType":"268","messageId":"269","endLine":26,"endColumn":22},{"ruleId":"266","severity":1,"message":"290","line":29,"column":10,"nodeType":"268","messageId":"269","endLine":29,"endColumn":29},{"ruleId":"266","severity":1,"message":"291","line":31,"column":10,"nodeType":"268","messageId":"269","endLine":31,"endColumn":20},{"ruleId":"266","severity":1,"message":"276","line":31,"column":22,"nodeType":"268","messageId":"269","endLine":31,"endColumn":32},{"ruleId":"266","severity":1,"message":"292","line":31,"column":34,"nodeType":"268","messageId":"269","endLine":31,"endColumn":44},{"ruleId":"266","severity":1,"message":"293","line":31,"column":46,"nodeType":"268","messageId":"269","endLine":31,"endColumn":56},{"ruleId":"266","severity":1,"message":"294","line":31,"column":58,"nodeType":"268","messageId":"269","endLine":31,"endColumn":66},{"ruleId":"266","severity":1,"message":"295","line":63,"column":7,"nodeType":"268","messageId":"269","endLine":63,"endColumn":21},{"ruleId":"266","severity":1,"message":"296","line":66,"column":9,"nodeType":"268","messageId":"269","endLine":66,"endColumn":20},{"ruleId":"266","severity":1,"message":"297","line":111,"column":10,"nodeType":"268","messageId":"269","endLine":111,"endColumn":17},{"ruleId":"266","severity":1,"message":"298","line":117,"column":10,"nodeType":"268","messageId":"269","endLine":117,"endColumn":16},{"ruleId":"299","severity":1,"message":"300","line":120,"column":54,"nodeType":"301","messageId":"302","endLine":120,"endColumn":56},{"ruleId":"266","severity":1,"message":"303","line":123,"column":10,"nodeType":"268","messageId":"269","endLine":123,"endColumn":15},{"ruleId":"266","severity":1,"message":"304","line":123,"column":17,"nodeType":"268","messageId":"269","endLine":123,"endColumn":25},{"ruleId":"299","severity":1,"message":"300","line":236,"column":66,"nodeType":"301","messageId":"302","endLine":236,"endColumn":68},{"ruleId":"299","severity":1,"message":"300","line":236,"column":100,"nodeType":"301","messageId":"302","endLine":236,"endColumn":102},{"ruleId":"299","severity":1,"message":"300","line":240,"column":60,"nodeType":"301","messageId":"302","endLine":240,"endColumn":62},{"ruleId":"299","severity":1,"message":"300","line":241,"column":60,"nodeType":"301","messageId":"302","endLine":241,"endColumn":62},{"ruleId":"299","severity":1,"message":"300","line":242,"column":60,"nodeType":"301","messageId":"302","endLine":242,"endColumn":62},{"ruleId":"299","severity":1,"message":"300","line":243,"column":60,"nodeType":"301","messageId":"302","endLine":243,"endColumn":62},{"ruleId":"299","severity":1,"message":"300","line":244,"column":60,"nodeType":"301","messageId":"302","endLine":244,"endColumn":62},{"ruleId":"299","severity":1,"message":"300","line":245,"column":60,"nodeType":"301","messageId":"302","endLine":245,"endColumn":62},{"ruleId":"266","severity":1,"message":"305","line":1,"column":16,"nodeType":"268","messageId":"269","endLine":1,"endColumn":24},{"ruleId":"266","severity":1,"message":"306","line":2,"column":43,"nodeType":"268","messageId":"269","endLine":2,"endColumn":50},{"ruleId":"266","severity":1,"message":"282","line":3,"column":10,"nodeType":"268","messageId":"269","endLine":3,"endColumn":16},{"ruleId":"266","severity":1,"message":"283","line":3,"column":18,"nodeType":"268","messageId":"269","endLine":3,"endColumn":23},{"ruleId":"266","severity":1,"message":"307","line":3,"column":25,"nodeType":"268","messageId":"269","endLine":3,"endColumn":29},{"ruleId":"266","severity":1,"message":"284","line":3,"column":31,"nodeType":"268","messageId":"269","endLine":3,"endColumn":44},{"ruleId":"266","severity":1,"message":"308","line":7,"column":8,"nodeType":"268","messageId":"269","endLine":7,"endColumn":17},{"ruleId":"266","severity":1,"message":"309","line":15,"column":8,"nodeType":"268","messageId":"269","endLine":15,"endColumn":19},{"ruleId":"266","severity":1,"message":"288","line":17,"column":8,"nodeType":"268","messageId":"269","endLine":17,"endColumn":12},{"ruleId":"266","severity":1,"message":"310","line":21,"column":10,"nodeType":"268","messageId":"269","endLine":21,"endColumn":14},{"ruleId":"266","severity":1,"message":"311","line":21,"column":16,"nodeType":"268","messageId":"269","endLine":21,"endColumn":20},{"ruleId":"266","severity":1,"message":"312","line":21,"column":22,"nodeType":"268","messageId":"269","endLine":21,"endColumn":26},{"ruleId":"266","severity":1,"message":"313","line":21,"column":28,"nodeType":"268","messageId":"269","endLine":21,"endColumn":36},{"ruleId":"266","severity":1,"message":"314","line":21,"column":38,"nodeType":"268","messageId":"269","endLine":21,"endColumn":48},{"ruleId":"266","severity":1,"message":"315","line":26,"column":10,"nodeType":"268","messageId":"269","endLine":26,"endColumn":20},{"ruleId":"266","severity":1,"message":"316","line":29,"column":10,"nodeType":"268","messageId":"269","endLine":29,"endColumn":14},{"ruleId":"266","severity":1,"message":"317","line":137,"column":9,"nodeType":"268","messageId":"269","endLine":137,"endColumn":22},{"ruleId":"266","severity":1,"message":"318","line":142,"column":10,"nodeType":"268","messageId":"269","endLine":142,"endColumn":17},{"ruleId":"266","severity":1,"message":"319","line":144,"column":9,"nodeType":"268","messageId":"269","endLine":144,"endColumn":20},{"ruleId":"266","severity":1,"message":"320","line":148,"column":9,"nodeType":"268","messageId":"269","endLine":148,"endColumn":21},{"ruleId":"266","severity":1,"message":"321","line":152,"column":12,"nodeType":"268","messageId":"269","endLine":152,"endColumn":23},{"ruleId":"266","severity":1,"message":"305","line":1,"column":16,"nodeType":"268","messageId":"269","endLine":1,"endColumn":24},{"ruleId":"266","severity":1,"message":"291","line":9,"column":10,"nodeType":"268","messageId":"269","endLine":9,"endColumn":20},{"ruleId":"266","severity":1,"message":"292","line":9,"column":34,"nodeType":"268","messageId":"269","endLine":9,"endColumn":44},{"ruleId":"266","severity":1,"message":"293","line":9,"column":46,"nodeType":"268","messageId":"269","endLine":9,"endColumn":56},{"ruleId":"266","severity":1,"message":"294","line":9,"column":58,"nodeType":"268","messageId":"269","endLine":9,"endColumn":66},{"ruleId":"266","severity":1,"message":"322","line":12,"column":10,"nodeType":"268","messageId":"269","endLine":12,"endColumn":20},{"ruleId":"266","severity":1,"message":"315","line":13,"column":10,"nodeType":"268","messageId":"269","endLine":13,"endColumn":20},{"ruleId":"266","severity":1,"message":"323","line":15,"column":8,"nodeType":"268","messageId":"269","endLine":15,"endColumn":21},{"ruleId":"266","severity":1,"message":"316","line":16,"column":10,"nodeType":"268","messageId":"269","endLine":16,"endColumn":14},{"ruleId":"278","severity":1,"message":"279","line":68,"column":1,"nodeType":"280","endLine":461,"endColumn":2},{"ruleId":"266","severity":1,"message":"296","line":71,"column":9,"nodeType":"268","messageId":"269","endLine":71,"endColumn":20},{"ruleId":"299","severity":1,"message":"324","line":78,"column":19,"nodeType":"301","messageId":"302","endLine":78,"endColumn":21},{"ruleId":"299","severity":1,"message":"300","line":133,"column":45,"nodeType":"301","messageId":"302","endLine":133,"endColumn":47},{"ruleId":"299","severity":1,"message":"300","line":186,"column":44,"nodeType":"301","messageId":"302","endLine":186,"endColumn":46},{"ruleId":"299","severity":1,"message":"300","line":204,"column":48,"nodeType":"301","messageId":"302","endLine":204,"endColumn":50},{"ruleId":"299","severity":1,"message":"300","line":220,"column":50,"nodeType":"301","messageId":"302","endLine":220,"endColumn":52},{"ruleId":"299","severity":1,"message":"300","line":259,"column":39,"nodeType":"301","messageId":"302","endLine":259,"endColumn":41},{"ruleId":"299","severity":1,"message":"300","line":277,"column":40,"nodeType":"301","messageId":"302","endLine":277,"endColumn":42},{"ruleId":"299","severity":1,"message":"300","line":298,"column":52,"nodeType":"301","messageId":"302","endLine":298,"endColumn":54},{"ruleId":"299","severity":1,"message":"300","line":315,"column":47,"nodeType":"301","messageId":"302","endLine":315,"endColumn":49},{"ruleId":"299","severity":1,"message":"300","line":333,"column":44,"nodeType":"301","messageId":"302","endLine":333,"endColumn":46},{"ruleId":"299","severity":1,"message":"300","line":352,"column":43,"nodeType":"301","messageId":"302","endLine":352,"endColumn":45},{"ruleId":"299","severity":1,"message":"300","line":367,"column":46,"nodeType":"301","messageId":"302","endLine":367,"endColumn":48},{"ruleId":"299","severity":1,"message":"300","line":382,"column":41,"nodeType":"301","messageId":"302","endLine":382,"endColumn":43},{"ruleId":"299","severity":1,"message":"300","line":403,"column":43,"nodeType":"301","messageId":"302","endLine":403,"endColumn":45},{"ruleId":"299","severity":1,"message":"300","line":417,"column":48,"nodeType":"301","messageId":"302","endLine":417,"endColumn":50},{"ruleId":"299","severity":1,"message":"300","line":431,"column":47,"nodeType":"301","messageId":"302","endLine":431,"endColumn":49},{"ruleId":"299","severity":1,"message":"300","line":446,"column":44,"nodeType":"301","messageId":"302","endLine":446,"endColumn":46},{"ruleId":"325","replacedBy":"326"},{"ruleId":"327","replacedBy":"328"},{"ruleId":"266","severity":1,"message":"305","line":1,"column":16,"nodeType":"268","messageId":"269","endLine":1,"endColumn":24},{"ruleId":"266","severity":1,"message":"329","line":9,"column":8,"nodeType":"268","messageId":"269","endLine":9,"endColumn":13},{"ruleId":"278","severity":1,"message":"279","line":11,"column":1,"nodeType":"280","endLine":25,"endColumn":2},{"ruleId":"266","severity":1,"message":"282","line":3,"column":10,"nodeType":"268","messageId":"269","endLine":3,"endColumn":16},{"ruleId":"266","severity":1,"message":"283","line":3,"column":18,"nodeType":"268","messageId":"269","endLine":3,"endColumn":23},{"ruleId":"266","severity":1,"message":"284","line":3,"column":31,"nodeType":"268","messageId":"269","endLine":3,"endColumn":44},{"ruleId":"266","severity":1,"message":"330","line":15,"column":8,"nodeType":"268","messageId":"269","endLine":15,"endColumn":17},{"ruleId":"266","severity":1,"message":"331","line":23,"column":8,"nodeType":"268","messageId":"269","endLine":23,"endColumn":20},{"ruleId":"266","severity":1,"message":"282","line":3,"column":10,"nodeType":"268","messageId":"269","endLine":3,"endColumn":16},{"ruleId":"266","severity":1,"message":"283","line":3,"column":18,"nodeType":"268","messageId":"269","endLine":3,"endColumn":23},{"ruleId":"266","severity":1,"message":"284","line":3,"column":31,"nodeType":"268","messageId":"269","endLine":3,"endColumn":44},{"ruleId":"266","severity":1,"message":"330","line":15,"column":8,"nodeType":"268","messageId":"269","endLine":15,"endColumn":17},{"ruleId":"266","severity":1,"message":"331","line":23,"column":8,"nodeType":"268","messageId":"269","endLine":23,"endColumn":20},{"ruleId":"266","severity":1,"message":"282","line":3,"column":10,"nodeType":"268","messageId":"269","endLine":3,"endColumn":16},{"ruleId":"266","severity":1,"message":"283","line":3,"column":18,"nodeType":"268","messageId":"269","endLine":3,"endColumn":23},{"ruleId":"266","severity":1,"message":"284","line":3,"column":31,"nodeType":"268","messageId":"269","endLine":3,"endColumn":44},{"ruleId":"266","severity":1,"message":"332","line":11,"column":8,"nodeType":"268","messageId":"269","endLine":11,"endColumn":13},{"ruleId":"266","severity":1,"message":"333","line":12,"column":8,"nodeType":"268","messageId":"269","endLine":12,"endColumn":18},{"ruleId":"266","severity":1,"message":"330","line":15,"column":8,"nodeType":"268","messageId":"269","endLine":15,"endColumn":17},{"ruleId":"266","severity":1,"message":"331","line":23,"column":8,"nodeType":"268","messageId":"269","endLine":23,"endColumn":20},{"ruleId":"266","severity":1,"message":"334","line":3,"column":8,"nodeType":"268","messageId":"269","endLine":3,"endColumn":21},{"ruleId":"266","severity":1,"message":"335","line":9,"column":8,"nodeType":"268","messageId":"269","endLine":9,"endColumn":17},{"ruleId":"266","severity":1,"message":"336","line":10,"column":8,"nodeType":"268","messageId":"269","endLine":10,"endColumn":18},{"ruleId":"266","severity":1,"message":"337","line":11,"column":8,"nodeType":"268","messageId":"269","endLine":11,"endColumn":16},{"ruleId":"266","severity":1,"message":"338","line":12,"column":8,"nodeType":"268","messageId":"269","endLine":12,"endColumn":23},{"ruleId":"266","severity":1,"message":"339","line":15,"column":8,"nodeType":"268","messageId":"269","endLine":15,"endColumn":18},{"ruleId":"266","severity":1,"message":"340","line":16,"column":8,"nodeType":"268","messageId":"269","endLine":16,"endColumn":21},{"ruleId":"299","severity":1,"message":"300","line":87,"column":17,"nodeType":"301","messageId":"302","endLine":87,"endColumn":19},{"ruleId":"299","severity":1,"message":"300","line":90,"column":23,"nodeType":"301","messageId":"302","endLine":90,"endColumn":25},{"ruleId":"299","severity":1,"message":"300","line":100,"column":19,"nodeType":"301","messageId":"302","endLine":100,"endColumn":21},{"ruleId":"299","severity":1,"message":"300","line":103,"column":23,"nodeType":"301","messageId":"302","endLine":103,"endColumn":25},{"ruleId":"299","severity":1,"message":"300","line":113,"column":19,"nodeType":"301","messageId":"302","endLine":113,"endColumn":21},{"ruleId":"299","severity":1,"message":"300","line":116,"column":17,"nodeType":"301","messageId":"302","endLine":116,"endColumn":19},{"ruleId":"299","severity":1,"message":"300","line":128,"column":23,"nodeType":"301","messageId":"302","endLine":128,"endColumn":25},{"ruleId":"299","severity":1,"message":"300","line":141,"column":40,"nodeType":"301","messageId":"302","endLine":141,"endColumn":42},{"ruleId":"299","severity":1,"message":"300","line":142,"column":44,"nodeType":"301","messageId":"302","endLine":142,"endColumn":46},{"ruleId":"299","severity":1,"message":"300","line":143,"column":48,"nodeType":"301","messageId":"302","endLine":143,"endColumn":50},{"ruleId":"299","severity":1,"message":"300","line":144,"column":52,"nodeType":"301","messageId":"302","endLine":144,"endColumn":54},{"ruleId":"299","severity":1,"message":"300","line":145,"column":56,"nodeType":"301","messageId":"302","endLine":145,"endColumn":58},{"ruleId":"299","severity":1,"message":"300","line":146,"column":56,"nodeType":"301","messageId":"302","endLine":146,"endColumn":58},{"ruleId":"299","severity":1,"message":"300","line":147,"column":52,"nodeType":"301","messageId":"302","endLine":147,"endColumn":54},{"ruleId":"299","severity":1,"message":"300","line":148,"column":48,"nodeType":"301","messageId":"302","endLine":148,"endColumn":50},{"ruleId":"299","severity":1,"message":"300","line":149,"column":44,"nodeType":"301","messageId":"302","endLine":149,"endColumn":46},{"ruleId":"299","severity":1,"message":"300","line":150,"column":40,"nodeType":"301","messageId":"302","endLine":150,"endColumn":42},{"ruleId":"299","severity":1,"message":"300","line":158,"column":22,"nodeType":"301","messageId":"302","endLine":158,"endColumn":24},{"ruleId":"299","severity":1,"message":"300","line":171,"column":40,"nodeType":"301","messageId":"302","endLine":171,"endColumn":42},{"ruleId":"299","severity":1,"message":"300","line":172,"column":44,"nodeType":"301","messageId":"302","endLine":172,"endColumn":46},{"ruleId":"299","severity":1,"message":"300","line":173,"column":48,"nodeType":"301","messageId":"302","endLine":173,"endColumn":50},{"ruleId":"299","severity":1,"message":"300","line":174,"column":52,"nodeType":"301","messageId":"302","endLine":174,"endColumn":54},{"ruleId":"299","severity":1,"message":"300","line":182,"column":22,"nodeType":"301","messageId":"302","endLine":182,"endColumn":24},{"ruleId":"299","severity":1,"message":"300","line":195,"column":40,"nodeType":"301","messageId":"302","endLine":195,"endColumn":42},{"ruleId":"299","severity":1,"message":"300","line":196,"column":44,"nodeType":"301","messageId":"302","endLine":196,"endColumn":46},{"ruleId":"299","severity":1,"message":"300","line":197,"column":48,"nodeType":"301","messageId":"302","endLine":197,"endColumn":50},{"ruleId":"299","severity":1,"message":"300","line":198,"column":44,"nodeType":"301","messageId":"302","endLine":198,"endColumn":46},{"ruleId":"299","severity":1,"message":"300","line":199,"column":40,"nodeType":"301","messageId":"302","endLine":199,"endColumn":42},{"ruleId":"266","severity":1,"message":"341","line":17,"column":20,"nodeType":"268","messageId":"269","endLine":17,"endColumn":33},{"ruleId":"266","severity":1,"message":"342","line":81,"column":10,"nodeType":"268","messageId":"269","endLine":81,"endColumn":21},{"ruleId":"266","severity":1,"message":"341","line":17,"column":20,"nodeType":"268","messageId":"269","endLine":17,"endColumn":33},{"ruleId":"266","severity":1,"message":"342","line":81,"column":10,"nodeType":"268","messageId":"269","endLine":81,"endColumn":21},{"ruleId":"266","severity":1,"message":"341","line":17,"column":20,"nodeType":"268","messageId":"269","endLine":17,"endColumn":33},{"ruleId":"266","severity":1,"message":"342","line":81,"column":10,"nodeType":"268","messageId":"269","endLine":81,"endColumn":21},{"ruleId":"266","severity":1,"message":"305","line":1,"column":16,"nodeType":"268","messageId":"269","endLine":1,"endColumn":24},{"ruleId":"266","severity":1,"message":"281","line":1,"column":26,"nodeType":"268","messageId":"269","endLine":1,"endColumn":35},{"ruleId":"266","severity":1,"message":"291","line":4,"column":10,"nodeType":"268","messageId":"269","endLine":4,"endColumn":20},{"ruleId":"266","severity":1,"message":"276","line":4,"column":22,"nodeType":"268","messageId":"269","endLine":4,"endColumn":32},{"ruleId":"266","severity":1,"message":"292","line":4,"column":34,"nodeType":"268","messageId":"269","endLine":4,"endColumn":44},{"ruleId":"266","severity":1,"message":"322","line":7,"column":10,"nodeType":"268","messageId":"269","endLine":7,"endColumn":20},{"ruleId":"266","severity":1,"message":"343","line":9,"column":8,"nodeType":"268","messageId":"269","endLine":9,"endColumn":17},{"ruleId":"266","severity":1,"message":"316","line":10,"column":10,"nodeType":"268","messageId":"269","endLine":10,"endColumn":14},{"ruleId":"278","severity":1,"message":"279","line":15,"column":1,"nodeType":"280","endLine":36,"endColumn":2},{"ruleId":"299","severity":1,"message":"300","line":22,"column":24,"nodeType":"301","messageId":"302","endLine":22,"endColumn":26},"@typescript-eslint/no-unused-vars","'Collapse' is defined but never used.","Identifier","unusedVar","'DialogContentText' is defined but never used.","'ExpandMoreIcon' is defined but never used.","'ExpandLessIcon' is defined but never used.","'SetFlags' is defined but never used.","'automation' is defined but never used.","'cveDetection' is defined but never used.","'targetData' is defined but never used.","'settings' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'useEffect' is defined but never used.","'Switch' is defined but never used.","'Route' is defined but never used.","'BrowserRouter' is defined but never used.","'Divider' is defined but never used.","'Popover' is defined but never used.","'LiveHelpOutlinedIcon' is defined but never used.","'Chip' is defined but never used.","'AutomationIcon' is defined but never used.","'customisedScanModes' is defined but never used.","'scanTarget' is defined but never used.","'targetTime' is defined but never used.","'chosenMode' is defined but never used.","'scanDate' is defined but never used.","'ScanOnProgress' is assigned a value but never used.","'handleClick' is assigned a value but never used.","'isEmpty' is assigned a value but never used.","'target' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'reset' is assigned a value but never used.","'setReset' is assigned a value but never used.","'useState' is defined but never used.","'lighten' is defined but never used.","'Link' is defined but never used.","'TextField' is defined but never used.","'ButtonGroup' is defined but never used.","'Page' is defined but never used.","'Text' is defined but never used.","'View' is defined but never used.","'Document' is defined but never used.","'StyleSheet' is defined but never used.","'pureOutput' is defined but never used.","'rows' is defined but never used.","'handleClickJO' is assigned a value but never used.","'checked' is assigned a value but never used.","'handleClose' is assigned a value but never used.","'handleToggle' is assigned a value but never used.","'FadeOutTime' is defined but never used.","'isScanning' is defined but never used.","'scannedTarget' is defined but never used.","Expected '!==' and instead saw '!='.","no-native-reassign",["344"],"no-negated-in-lhs",["345"],"'store' is defined but never used.","'FormLabel' is defined but never used.","'ScanModeIcon' is defined but never used.","'Radio' is defined but never used.","'RadioGroup' is defined but never used.","'ListSubheader' is defined but never used.","'InboxIcon' is defined but never used.","'DraftsIcon' is defined but never used.","'SendIcon' is defined but never used.","'DynamicFeedIcon' is defined but never used.","'StarBorder' is defined but never used.","'ExtensionIcon' is defined but never used.","'CheckboxProps' is defined but never used.","'handleClick' is defined but never used.","'scannedIn' is defined but never used.","no-global-assign","no-unsafe-negation"]