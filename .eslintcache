[{"/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/index.tsx":"1","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/reportWebVitals.ts":"2","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/App.tsx":"3","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Views/Drawer.tsx":"4","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/Drawer.tsx":"5","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Views/Home.tsx":"6","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Views/ScanResult.tsx":"7","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Views/ScanHistory.tsx":"8","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Views/ScanComparison.tsx":"9","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Views/AdvancedMode.tsx":"10","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Views/DefaultScanMode.tsx":"11","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Views/CustomisedScanMode.tsx":"12","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/defaultScanModes/pingScanMode.tsx":"13","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/defaultScanModes/intenseScanMode.tsx":"14","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/defaultScanModes/fullPortsScanMode.tsx":"15","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/defaultScanModes/nonPingScanMode.tsx":"16","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/defaultScanModes/top100portsScanMode.tsx":"17","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/defaultScanModes/lightningScanMode.tsx":"18","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/Home.tsx":"19","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/ScanResult.tsx":"20","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/ScanComparison.tsx":"21","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/ScanHistory.tsx":"22","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/AdvancedMode.tsx":"23","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/CustomisedScanMode.tsx":"24","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/DefaultScanMode.tsx":"25","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Backend/frontendData/getPortStatus.tsx":"26","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Backend/frontendData/isScanning.tsx":"27","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/NewScanModeTab/customisedModeDialog.tsx":"28","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Mobx/Models/homeSettingsFlagStatus.tsx":"29","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Mobx/Models/defaultScanModeStatus.tsx":"30","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Mobx/Models/resultSelectStatus.tsx":"31","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/defaultScanModes/defaultModeDialog.tsx":"32","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/NewScanMode.tsx":"33","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Backend/frontendData/customisedScanModeStatus.tsx":"34","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/ScanResults/HostsAndPorts.tsx":"35","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/ScanResults/ExportResult.tsx":"36","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/ScanResults/NmapOutput.tsx":"37","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/ScanResults/WhoIs.tsx":"38","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/ScanResults/ScanDetails.tsx":"39","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/ScanResults/CVEResult.tsx":"40","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Mobx/Models/homeSettingsStatus.tsx":"41","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Mobx/Models/advancedModeStatus.tsx":"42","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/HomeSettings/HomeSettings.tsx":"43","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/HomeSettings/ScanRangeDisplay.tsx":"44","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/Whatismyip.tsx":"45","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/NewScanModeTab/Others.tsx":"46","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/NewScanModeTab/Timing.tsx":"47","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/target.tsx":"48","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Backend/frontendData/cveScanOutput.tsx":"49","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Backend/frontendData/whoisScan.tsx":"50","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Backend/frontendData/Result.tsx":"51","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/NewScanModeTab/NewModeOptions.tsx":"52","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/NewScanModeTab/Source.tsx":"53","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/NewScanModeTab/Target.tsx":"54","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/NewScanModeTab/NSE.tsx":"55","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/NewScanModeTab/Ping.tsx":"56","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/nonTCPoptions.tsx":"57","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/TCPoptions.tsx":"58","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/NewScanModeTab/nseData/Discovery/Broadcast.tsx":"59","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/NewScanModeTab/nseData/Discovery/IP.tsx":"60","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/NewScanModeTab/nseData/Discovery/Server.tsx":"61","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/NewScanModeTab/nseData/Discovery/Database.tsx":"62","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/NewScanModeTab/nseData/Discovery/ServerMessageBlock.tsx":"63","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/NewScanModeTab/nseData/Discovery/Targets.tsx":"64","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/NewScanModeTab/nseData/Discovery/SMTP.tsx":"65","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/NewScanModeTab/nseData/Exploit/HTTP.tsx":"66","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/NewScanModeTab/nseData/Exploit/SMB.tsx":"67","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/NewScanModeTab/nseData/Exploit/FTP.tsx":"68","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/NewScanModeTab/nseData/Vulnerability/FTP.tsx":"69","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/NewScanModeTab/nseData/Exploit/Others.tsx":"70","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/NewScanModeTab/nseData/Discovery/Network.tsx":"71","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/NewScanModeTab/nseData/Vulnerability/SMB.tsx":"72","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/NewScanModeTab/nseData/Discovery/Hadoop.tsx":"73","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/NewScanModeTab/nseData/Vulnerability/Others.tsx":"74","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/NewScanModeTab/nseData/Discovery/HTTP.tsx":"75","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/NewScanModeTab/nseData/Vulnerability/HTTP.tsx":"76","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/NewScanModeTab/nseData/Vulnerability/SSL.tsx":"77","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Backend/frontendData/targetGeo.tsx":"78","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/ScanResults/GoogleMapAPI.js":"79","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Backend/frontendData/tracerouteOutput.tsx":"80"},{"size":500,"mtime":1615164963692,"results":"81","hashOfConfig":"82"},{"size":425,"mtime":1615164963692,"results":"83","hashOfConfig":"82"},{"size":897,"mtime":1615164962954,"results":"84","hashOfConfig":"82"},{"size":175,"mtime":1615164963690,"results":"85","hashOfConfig":"82"},{"size":9924,"mtime":1615164963669,"results":"86","hashOfConfig":"82"},{"size":167,"mtime":1615164963690,"results":"87","hashOfConfig":"82"},{"size":191,"mtime":1615164963691,"results":"88","hashOfConfig":"82"},{"size":195,"mtime":1615164963691,"results":"89","hashOfConfig":"82"},{"size":207,"mtime":1615164963691,"results":"90","hashOfConfig":"82"},{"size":199,"mtime":1615164963690,"results":"91","hashOfConfig":"82"},{"size":211,"mtime":1615164963690,"results":"92","hashOfConfig":"82"},{"size":223,"mtime":1615164963690,"results":"93","hashOfConfig":"82"},{"size":8951,"mtime":1615164963687,"results":"94","hashOfConfig":"82"},{"size":9062,"mtime":1615164963686,"results":"95","hashOfConfig":"82"},{"size":8996,"mtime":1615164963686,"results":"96","hashOfConfig":"82"},{"size":8779,"mtime":1615164963687,"results":"97","hashOfConfig":"82"},{"size":7700,"mtime":1615164963687,"results":"98","hashOfConfig":"82"},{"size":10073,"mtime":1615164963686,"results":"99","hashOfConfig":"82"},{"size":20434,"mtime":1615308484098,"results":"100","hashOfConfig":"82"},{"size":10027,"mtime":1615216551848,"results":"101","hashOfConfig":"82"},{"size":51188,"mtime":1615309387379,"results":"102","hashOfConfig":"82"},{"size":6503,"mtime":1615275477140,"results":"103","hashOfConfig":"82"},{"size":3701,"mtime":1615164963668,"results":"104","hashOfConfig":"82"},{"size":4758,"mtime":1615164963668,"results":"105","hashOfConfig":"82"},{"size":3884,"mtime":1615164963669,"results":"106","hashOfConfig":"82"},{"size":2204,"mtime":1615309110733,"results":"107","hashOfConfig":"82"},{"size":33,"mtime":1615309110737,"results":"108","hashOfConfig":"82"},{"size":7174,"mtime":1615164963675,"results":"109","hashOfConfig":"82"},{"size":353,"mtime":1615164963688,"results":"110","hashOfConfig":"82"},{"size":3852,"mtime":1615164963688,"results":"111","hashOfConfig":"82"},{"size":305,"mtime":1615164963688,"results":"112","hashOfConfig":"82"},{"size":11899,"mtime":1615164963685,"results":"113","hashOfConfig":"82"},{"size":12779,"mtime":1615164963674,"results":"114","hashOfConfig":"82"},{"size":3011,"mtime":1615164963339,"results":"115","hashOfConfig":"82"},{"size":3875,"mtime":1615308799375,"results":"116","hashOfConfig":"82"},{"size":6199,"mtime":1615164963683,"results":"117","hashOfConfig":"82"},{"size":990,"mtime":1615164963683,"results":"118","hashOfConfig":"82"},{"size":5187,"mtime":1615289390299,"results":"119","hashOfConfig":"82"},{"size":24480,"mtime":1615310863751,"results":"120","hashOfConfig":"82"},{"size":3692,"mtime":1615275750383,"results":"121","hashOfConfig":"82"},{"size":1176,"mtime":1615164963688,"results":"122","hashOfConfig":"82"},{"size":319,"mtime":1615164963688,"results":"123","hashOfConfig":"82"},{"size":20644,"mtime":1615290930313,"results":"124","hashOfConfig":"82"},{"size":7749,"mtime":1615164963670,"results":"125","hashOfConfig":"82"},{"size":1494,"mtime":1615164963685,"results":"126","hashOfConfig":"82"},{"size":1829,"mtime":1615164963674,"results":"127","hashOfConfig":"82"},{"size":1731,"mtime":1615164963675,"results":"128","hashOfConfig":"82"},{"size":456,"mtime":1615164963687,"results":"129","hashOfConfig":"82"},{"size":27923,"mtime":1615308416098,"results":"130","hashOfConfig":"82"},{"size":374,"mtime":1615308419749,"results":"131","hashOfConfig":"82"},{"size":8837,"mtime":1615309110736,"results":"132","hashOfConfig":"82"},{"size":10883,"mtime":1615164963674,"results":"133","hashOfConfig":"82"},{"size":1731,"mtime":1615164963675,"results":"134","hashOfConfig":"82"},{"size":1780,"mtime":1615164963675,"results":"135","hashOfConfig":"82"},{"size":7765,"mtime":1615164963674,"results":"136","hashOfConfig":"82"},{"size":1727,"mtime":1615164963675,"results":"137","hashOfConfig":"82"},{"size":487,"mtime":1615164963687,"results":"138","hashOfConfig":"82"},{"size":606,"mtime":1615164963684,"results":"139","hashOfConfig":"82"},{"size":4506,"mtime":1615164963676,"results":"140","hashOfConfig":"82"},{"size":4485,"mtime":1615164963676,"results":"141","hashOfConfig":"82"},{"size":4497,"mtime":1615164963677,"results":"142","hashOfConfig":"82"},{"size":4503,"mtime":1615164963676,"results":"143","hashOfConfig":"82"},{"size":4535,"mtime":1615164963677,"results":"144","hashOfConfig":"82"},{"size":4500,"mtime":1615164963677,"results":"145","hashOfConfig":"82"},{"size":4491,"mtime":1615164963676,"results":"146","hashOfConfig":"82"},{"size":4489,"mtime":1615164963679,"results":"147","hashOfConfig":"82"},{"size":4486,"mtime":1615164963679,"results":"148","hashOfConfig":"82"},{"size":4486,"mtime":1615164963679,"results":"149","hashOfConfig":"82"},{"size":4492,"mtime":1615164963680,"results":"150","hashOfConfig":"82"},{"size":4495,"mtime":1615164963679,"results":"151","hashOfConfig":"82"},{"size":4500,"mtime":1615164963676,"results":"152","hashOfConfig":"82"},{"size":4492,"mtime":1615164963681,"results":"153","hashOfConfig":"82"},{"size":4497,"mtime":1615164963676,"results":"154","hashOfConfig":"82"},{"size":4501,"mtime":1615164963681,"results":"155","hashOfConfig":"82"},{"size":4491,"mtime":1615164963676,"results":"156","hashOfConfig":"82"},{"size":4495,"mtime":1615164963680,"results":"157","hashOfConfig":"82"},{"size":4492,"mtime":1615164963681,"results":"158","hashOfConfig":"82"},{"size":322,"mtime":1615308420938,"results":"159","hashOfConfig":"82"},{"size":1006,"mtime":1615288707293,"results":"160","hashOfConfig":"82"},{"size":2505,"mtime":1615309110693,"results":"161","hashOfConfig":"82"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},"eocuh9",{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"164"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"164"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"164"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"164"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"164"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"164"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"164"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"164"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"209","messages":"210","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211","usedDeprecatedRules":"164"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":76,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"214","messages":"215","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"216","messages":"217","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218","usedDeprecatedRules":"164"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221","usedDeprecatedRules":"164"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"224","usedDeprecatedRules":"164"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"229","messages":"230","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231","usedDeprecatedRules":"164"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240","usedDeprecatedRules":"164"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"243","usedDeprecatedRules":"164"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"246","usedDeprecatedRules":"164"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"249","messages":"250","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"251","usedDeprecatedRules":"164"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"254","usedDeprecatedRules":"164"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"257","messages":"258","errorCount":0,"warningCount":30,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"259","messages":"260","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"261","messages":"262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"267","usedDeprecatedRules":"164"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"270","usedDeprecatedRules":"164"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"275","usedDeprecatedRules":"164"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"278","usedDeprecatedRules":"164"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"281","usedDeprecatedRules":"164"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"284","messages":"285","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"286","messages":"287","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"288","messages":"289","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"292","usedDeprecatedRules":"164"},{"filePath":"293","messages":"294","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"295","usedDeprecatedRules":"164"},{"filePath":"296","messages":"297","errorCount":0,"warningCount":35,"fixableErrorCount":0,"fixableWarningCount":0,"source":"298","usedDeprecatedRules":"164"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"301","usedDeprecatedRules":"164"},{"filePath":"302","messages":"303","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"304","messages":"305","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"306","messages":"307","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"308","usedDeprecatedRules":"164"},{"filePath":"309","messages":"310","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"311","usedDeprecatedRules":"164"},{"filePath":"312","messages":"313","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"314","usedDeprecatedRules":"164"},{"filePath":"315","messages":"316","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"317","usedDeprecatedRules":"164"},{"filePath":"318","messages":"319","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"320","usedDeprecatedRules":"164"},{"filePath":"321","messages":"322","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"323","usedDeprecatedRules":"164"},{"filePath":"324","messages":"325","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"326","usedDeprecatedRules":"164"},{"filePath":"327","messages":"328","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"329","usedDeprecatedRules":"164"},{"filePath":"330","messages":"331","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"332","usedDeprecatedRules":"164"},{"filePath":"333","messages":"334","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"335","usedDeprecatedRules":"164"},{"filePath":"336","messages":"337","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"338","usedDeprecatedRules":"164"},{"filePath":"339","messages":"340","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"341","usedDeprecatedRules":"164"},{"filePath":"342","messages":"343","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"344","usedDeprecatedRules":"164"},{"filePath":"345","messages":"346","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"347","usedDeprecatedRules":"164"},{"filePath":"348","messages":"349","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"350","usedDeprecatedRules":"164"},{"filePath":"351","messages":"352","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"353","usedDeprecatedRules":"164"},{"filePath":"354","messages":"355","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"356","usedDeprecatedRules":"164"},{"filePath":"357","messages":"358","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"359","usedDeprecatedRules":"164"},{"filePath":"360","messages":"361","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"362","usedDeprecatedRules":"164"},{"filePath":"363","messages":"364","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"365","messages":"366","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"367","messages":"368","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/index.tsx",[],["369","370"],"/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/reportWebVitals.ts",[],"/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/App.tsx",["371"],"import React, { Suspense} from 'react'\nimport logo from './logo.svg';\nimport './App.css';\nimport Drawer from './Views/Drawer'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\n\nfunction App() {\n  return (\n    <Router>\n      <Suspense fallback={<div>Loading...</div>}>\n        <Switch>\n          \n          <Route path=\"/\">\n            <Drawer />\n          </Route>\n          \n          <Route path=\"/defaultScanModes\">\n            <Drawer />\n          </Route>\n\n          <Route path=\"/customisedScanModes\">\n            <Drawer />\n          </Route>\n\n          <Route path=\"/scanResult\">\n            <Drawer />\n          </Route>\n\n          <Route path=\"/scanComparison\">\n            <Drawer />\n          </Route>\n\n          <Route path=\"/scanHistory\">\n            <Drawer />\n          </Route>\n\n        </Switch>\n      </Suspense>\n    </Router>\n  )\n}\n\nexport default App;\n","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Views/Drawer.tsx",[],"/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/Drawer.tsx",["372","373","374","375","376","377"],"import React, { Suspense } from 'react';\nimport { Switch, Route, Link, BrowserRouter } from \"react-router-dom\";\nimport clsx from 'clsx';\nimport { createStyles, Theme, makeStyles } from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport Button from '@material-ui/core/Button';\nimport List from '@material-ui/core/List';\nimport Divider from '@material-ui/core/Divider';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\nimport MailIcon from '@material-ui/icons/Mail';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport IPIcon from '@material-ui/icons/LocationSearching';\nimport AdvancedModeIcon from '@material-ui/icons/BlurOn';\n\nimport HomeIcon from '@material-ui/icons/Home';\nimport DefaultScanModeIcon from '@material-ui/icons/GpsNotFixed';\nimport CustomisedScanModeIcon from '@material-ui/icons/People';\nimport ScanResultIcon from '@material-ui/icons/Storage';\nimport ResultComparisonIcon from '@material-ui/icons/CompareArrows';\nimport ScanHistoryIcon from '@material-ui/icons/History';\n\n// Components\nimport Home from '../Views/Home'\nimport DefaultScanMode from '../Views/DefaultScanMode'\nimport CustomisedScanMode from '../Views/CustomisedScanMode'\nimport ScanResult from '../Views/ScanResult'\nimport ScanComparison from '../Views/ScanComparison'\nimport ScanHistory from '../Views/ScanHistory'\nimport Whatismyip from '../Views/Whatismyip'\nimport AdvancedMode from '../Views/AdvancedMode'\n\n// Default Scan Modes\nimport PingScanMode from '../Components/defaultScanModes/pingScanMode'\nimport FullPortsScanMode from '../Components/defaultScanModes/fullPortsScanMode'\nimport InenseScanMode from '../Components/defaultScanModes/intenseScanMode'\nimport NonPingScanMode from '../Components/defaultScanModes/nonPingScanMode'\nimport LightningScanMode from '../Components/defaultScanModes/lightningScanMode'\nimport Top100PortsScanMode from '../Components/defaultScanModes/top100portsScanMode'\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        list: {\n            width: 250,\n            },\n            fullList: {\n            width: 'auto',\n            },\n            content: {\n            flexGrow: 1,\n            padding: theme.spacing(3),\n            marginTop: 65,\n        },\n        root: {\n            display: 'flex',\n          },\n          appBar: {\n            zIndex: theme.zIndex.drawer + 1,\n            backgroundColor: \"#333333\",\n          },\n          drawer: {\n            width: drawerWidth,\n            flexShrink: 0,\n          },\n          drawerPaper: {\n            width: drawerWidth,\n          },\n          drawerContainer: {\n            overflow: 'auto',\n          },\n        itemIcon: {\n          color: \"#0E397C\",\n        }\n    }),\n);\n\ntype Anchor = 'left';\n\nexport default () => {\n  const classes = useStyles();\n  const [state, setState] = React.useState({\n    top: false,\n    left: false,\n    bottom: false,\n    right: false,\n  });\n\n  const toggleDrawer = (anchor: Anchor, open: boolean) => (\n    event: React.KeyboardEvent | React.MouseEvent,\n  ) => {\n    if (\n      event.type === 'keydown' &&\n      ((event as React.KeyboardEvent).key === 'Tab' ||\n        (event as React.KeyboardEvent).key === 'Shift')\n    ) {\n      return;\n    }\n\n    setState({ ...state, [anchor]: open });\n  };\n\n  const list = (anchor: Anchor) => (\n    <div\n      className={clsx(classes.list, {\n        [classes.fullList]: anchor === 'left'\n      })}\n      role=\"presentation\"\n      onClick={toggleDrawer(anchor, false)}\n      onKeyDown={toggleDrawer(anchor, false)}\n    > \n      <List id=\"menuList\">\n        <Typography variant=\"h4\" id=\"menuAppTitle\">ChiNmap</Typography>\n            \n            <br /><Divider />\n\n        <Link to='/'>\n            <ListItem button key=\"home\">\n                <ListItemIcon><InboxIcon className={classes.itemIcon}/></ListItemIcon>\n                <ListItemText primary=\"Home\" />\n            </ListItem>\n        </Link>\n        \n        <Link to='/defaultScanMode'>\n            <ListItem button key=\"defaultScanMode\">\n                <ListItemIcon><DefaultScanModeIcon className={classes.itemIcon}/></ListItemIcon>\n                <ListItemText primary=\"Default Scan Modes\" />\n            </ListItem>\n        </Link>\n        \n        <Link to='/customisedScanMode'>\n            <ListItem button key=\"customisedScanMode\">\n                <ListItemIcon><CustomisedScanModeIcon className={classes.itemIcon}/></ListItemIcon>\n                <ListItemText primary=\"Customised Scan Modes\" />\n            </ListItem>\n        </Link>\n            <Divider />\n        <Link to='/scanResult'>\n            <ListItem button key=\"scanResult\">\n                <ListItemIcon><ScanResultIcon className={classes.itemIcon}/></ListItemIcon>\n                <ListItemText primary=\"Scan Result\" />\n            </ListItem>\n        </Link>\n\n        <Link to='/scanComparison'>\n             <ListItem button key=\"scanComparison\">\n                <ListItemIcon><ResultComparisonIcon className={classes.itemIcon}/></ListItemIcon>\n                <ListItemText primary=\"Scan Comparison\" />\n            </ListItem>\n        </Link>\n\n        <Link to='/scanHistory'>\n            <ListItem button key=\"scanHistory\">\n                <ListItemIcon><ScanHistoryIcon className={classes.itemIcon}/></ListItemIcon>\n                <ListItemText primary=\"Scan History\" />\n            </ListItem>\n        </Link>\n      </List>\n    </div>\n  );\n\n  return (\n    <div>\n      {(['left'] as Anchor[]).map((anchor) => (\n        <React.Fragment key={anchor}>\n            <AppBar position=\"fixed\" className={classes.appBar}>\n                <Toolbar>\n                    <Button onClick={toggleDrawer(anchor, true)} id=\"menuBtn\">\n                        <MenuIcon style={{fontSize: 35}}/>\n                    </Button>\n                </Toolbar>\n            </AppBar>\n        <BrowserRouter>\n            <Drawer anchor={anchor} open={state[anchor]} onClose={toggleDrawer(anchor, false)}>\n                {list(anchor)}\n            </Drawer>\n            <main className={classes.content}>\n                <Suspense fallback={<div>Loading...</div>}>\n                    <Switch>\n                        <Route \n                            exact \n                            path=\"/\" \n                            render={ \n                                () => <Home /> \n                            } \n                        />\n\n                        <Route \n                            exact \n                            path=\"/defaultScanMode\" \n                            render={ \n                                () => <DefaultScanMode /> \n                            } \n                        />\n                        \n                        <Route \n                            path=\"/customisedScanMode\" \n                            render={ \n                                () => <CustomisedScanMode />\n                            } \n                        />\n\n                        <Route \n                            path=\"/scanResult\" \n                            render={ \n                                () => <ScanResult />\n                            } \n                        />\n                        <Route \n                            path=\"/scanComparison\" \n                            render={ \n                                () => <ScanComparison />\n                            } \n                        />\n\n                        <Route \n                            path=\"/scanHistory\" \n                            render={ \n                                () => <ScanHistory />\n                            } \n                        />\n\n                        {/* Default Scan Mode Routes */ }\n                        <Route \n                            path=\"/pingScanMode\" \n                            render={ \n                                () => <PingScanMode />\n                            } \n                        />\n\n                        <Route \n                            path=\"/fullPortsScanMode\" \n                            render={ \n                                () => <FullPortsScanMode />\n                            } \n                        />\n\n                        <Route \n                            path=\"/intenseScanMode\" \n                            render={ \n                                () => <InenseScanMode />\n                            } \n                        />\n\n                        <Route \n                            path=\"/nonPingScanMode\" \n                            render={ \n                                () => <NonPingScanMode />\n                            } \n                        />\n\n                        <Route \n                            path=\"/lightningScanMode\" \n                            render={ \n                                () => <LightningScanMode />\n                            } \n                        />\n\n                        <Route \n                            path=\"/top100PortsScanMode\" \n                            render={ \n                                () => <Top100PortsScanMode />\n                            } \n                        />\n                        {/* Customised Scan Mode Routes */ }\n\n                        <Route \n                            path=\"/advancedMode\" \n                            render={ \n                                () => <AdvancedMode />\n                            } \n                        />\n                    </Switch>\n                </Suspense>\n            </main>\n        </BrowserRouter>\n        </React.Fragment>\n      ))}\n    </div>\n  );\n}\n","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Views/Home.tsx",[],"/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Views/ScanResult.tsx",[],"/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Views/ScanHistory.tsx",[],"/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Views/ScanComparison.tsx",[],"/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Views/AdvancedMode.tsx",[],"/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Views/DefaultScanMode.tsx",[],"/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Views/CustomisedScanMode.tsx",[],"/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/defaultScanModes/pingScanMode.tsx",["378","379","380","381","382"],"import React from 'react';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport { Switch, Route, Link, BrowserRouter } from \"react-router-dom\";\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography'\nimport TextField from '@material-ui/core/TextField';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Slider from '@material-ui/core/Slider';\n\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Switcher from '@material-ui/core/Switch';\nimport Button from '@material-ui/core/Button';\n\nimport IconButton from '@material-ui/core/IconButton';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport CloseIcon from '@material-ui/icons/Close';\n\nimport ScanModeIcon from '@material-ui/icons/Settings';\n\nimport '../../Styles/DefaultScanMode.css'\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    paper: {\n      padding: theme.spacing(2),\n      textAlign: 'left',\n      backgroundColor: \"#fefefe\",\n      color: \"#333333\",\n    },\n    centerGrid: {\n        textAlign: \"center\",\n        marginTop: 15,\n    },\n    avatarText: {\n        background: \"#4A92FF\",\n        borderRadius: 6,\n        color: \"#fff\",\n        padding: \"2px 6px\",\n    },  \n    switch: {\n        disaply: \"inline-block\",\n    },\n  }),\n);\n\nexport default function CenteredGrid() {\n  const classes = useStyles();\n  const [value, setValue] = React.useState<number>(4);\n\n  const handleChange = (event: any, newValue: number | number[]) => {\n    setValue(newValue as number);\n  };\n\n  const [state, setState] = React.useState({\n    Pn: true,\n  });\n\n  const handleSwitchChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setState({ ...state, [event.target.name]: event.target.checked });\n  };\n\n  const [open, setOpen] = React.useState(false);\n\n  const handleClick = () => {\n    setOpen(true);\n  };\n\n  const handleClose = (event: React.SyntheticEvent | React.MouseEvent, reason?: string) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    setOpen(false);\n  };\n\n  return (\n    <div className={classes.root}>\n      <Grid container spacing={5} justify=\"center\" alignItems=\"center\">\n       \n        <Grid item xs={10}>\n            <Paper className={classes.paper}>\n                <Typography variant=\"h6\">\n                    Ping Scan Modes\n                </Typography>\n                    <br/>\n                <div>\n                    <TextField \n                        id=\"outlined-basic\" \n                        label=\"Current Command\" \n                        defaultValue=\"nmap -v -sU -sT -p -U:161, T:80 -T0 + [ Target IP / Domain ] \"\n                        variant=\"outlined\" \n                        size=\"small\"\n                        style={{\n                            width: \"80%\",\n                            marginLeft: 85,\n                            textAlignLast: \"center\",\n                        }}\n                        inputProps={{ \n                            readOnly: true, \n                        }}\n                    />\n                </div>\n                    <br/>\n                <div className={classes.root}>\n                    \n                </div>\n            </Paper>\n        </Grid>\n\n        <Grid item xs={10}>\n            <Paper className={classes.paper}>\n                <Typography variant=\"h6\">\n                    Scan Frequency\n                </Typography>\n                    <br/>\n                <div>\n                     <Slider \n                        value={value} \n                        onChange={handleChange} \n                        max={5}\n                        min={0}\n                        step={1}\n                        valueLabelDisplay=\"on\"\n                        style={{\n                            width: \"70%\",\n                            marginLeft: 145,\n                        }}    \n                    />\n                </div>\n                    <br/>\n                <Typography style={{textAlign: \"right\",marginRight: 35}}>\n                    -T&nbsp;\n                    <Tooltip \n                        title=\"[ -T ] --- Specifies the timing (Timing) used in the scanning process, there are always 6 levels (0-5), the level increases, the faster the scanning speed.\" \n                        placement=\"top\" \n                        arrow\n                    >\n                        <span className={classes.avatarText}>{value}</span>\n                    </Tooltip>\n                </Typography>\n            </Paper>\n        </Grid>\n\n        <Grid item xs={10}>\n           <Paper className={classes.paper}>\n                <Typography variant=\"h6\">\n                    Flags\n                </Typography>\n                    <br/>\n                <div style={{textAlign: \"center\"}}>\n                    <FormControl component=\"fieldset\">\n                        <table className=\"scanModeSettingFlagTable\">\n                            <tr>\n                                <td>\n                                    <RadioGroup row aria-label=\"position\" name=\"position\" defaultValue=\"top\">\n                                        <Tooltip title=\"Increase the verbosity level\" placement=\"top\" arrow>\n                                            <FormControlLabel\n                                                value=\"-v\"\n                                                control={<Radio color=\"primary\" />}\n                                                label=\"-v\"\n                                                labelPlacement=\"end\"\n                                            />\n                                        </Tooltip>\n                                        <Tooltip title=\"Use more v for greater effect\" placement=\"top\" arrow>\n                                            <FormControlLabel\n                                                value=\"-vv\"\n                                                control={<Radio color=\"primary\" />}\n                                                label=\"-vv\"\n                                                labelPlacement=\"end\"\n                                            />\n                                        </Tooltip>\n                                    </RadioGroup>\n                                </td>\n                                <td>\n                                    <Tooltip title=\"Disable host discovery. Port scan only.\" placement=\"top\" arrow>\n                                        <FormControlLabel\n                                            control={\n                                                <Switcher\n                                                    checked={state.Pn}\n                                                    onChange={handleSwitchChange}\n                                                    name=\"Pn\"\n                                                    color=\"primary\"\n                                                />\n                                            }\n                                            label=\"-Pn\"\n                                            className={classes.switch}\n                                        />\n                                    </Tooltip>\n                                </td>\n                            </tr>\n                        </table>\n                    </FormControl>\n            \n                </div>\n          </Paper>\n        </Grid>\n\n        <Grid item xs={10} style={{position: \"absolute\", width: 902, bottom: 0}}>\n            <Paper className={classes.paper}>\n                <Link to=\"/defaultScanMode\">\n                    <Button variant=\"contained\">Back</Button>\n                </Link>                \n                <Button variant=\"contained\" style={{float: 'right'}} onClick={handleClick}>Save</Button>\n                <Snackbar\n                    anchorOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'left',\n                    }}\n                    open={open}\n                    autoHideDuration={6000}\n                    onClose={handleClose}\n                    message=\"Settings Save Successfully\"\n                    action={\n                    <React.Fragment>\n                         <Link to=\"/defaultScanMode\">\n                            <IconButton size=\"small\" aria-label=\"close\" color=\"inherit\" onClick={handleClose}>\n                                <CloseIcon fontSize=\"small\" style={{color: \"#fff\"}}/>\n                            </IconButton>\n                        </Link>\n                    </React.Fragment>\n                    }\n                />\n            </Paper>\n        </Grid>\n\n      </Grid>\n      \n    </div>\n  );\n}\n","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/defaultScanModes/intenseScanMode.tsx",["383","384","385","386","387"],"import React from 'react';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport { Switch, Route, Link, BrowserRouter } from \"react-router-dom\";\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography'\nimport TextField from '@material-ui/core/TextField';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Slider from '@material-ui/core/Slider';\n\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Switcher from '@material-ui/core/Switch';\nimport Button from '@material-ui/core/Button';\n\nimport IconButton from '@material-ui/core/IconButton';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport CloseIcon from '@material-ui/icons/Close';\n\nimport ScanModeIcon from '@material-ui/icons/Settings';\n\nimport '../../Styles/DefaultScanMode.css'\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    paper: {\n      padding: theme.spacing(2),\n      textAlign: 'left',\n      backgroundColor: \"#fefefe\",\n      color: \"#333333\",\n    },\n    centerGrid: {\n        textAlign: \"center\",\n        marginTop: 15,\n    },\n    avatarText: {\n        background: \"#4A92FF\",\n        borderRadius: 6,\n        color: \"#fff\",\n        padding: \"2px 6px\",\n    },  \n    switch: {\n        disaply: \"inline-block\",\n    },\n  }),\n);\n\nexport default function CenteredGrid() {\n  const classes = useStyles();\n  const [value, setValue] = React.useState<number>(4);\n\n  const handleChange = (event: any, newValue: number | number[]) => {\n    setValue(newValue as number);\n  };\n\n  const [state, setState] = React.useState({\n    A: true,\n  });\n\n  const handleSwitchChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setState({ ...state, [event.target.name]: event.target.checked });\n  };\n\n  const [open, setOpen] = React.useState(false);\n\n  const handleClick = () => {\n    setOpen(true);\n  };\n\n  const handleClose = (event: React.SyntheticEvent | React.MouseEvent, reason?: string) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    setOpen(false);\n  };\n\n  return (\n    <div className={classes.root}>\n      <Grid container spacing={5} justify=\"center\" alignItems=\"center\">\n       \n        <Grid item xs={10}>\n            <Paper className={classes.paper}>\n                <Typography variant=\"h6\">\n                    Intense Scan Modes\n                </Typography>\n                    <br/>\n                <div>\n                    <TextField \n                        id=\"outlined-basic\" \n                        label=\"Current Command\" \n                        defaultValue={`nmap -T${value} -A -v + [ Target IP / Domain ]`}\n                        variant=\"outlined\" \n                        size=\"small\"\n                        style={{\n                            width: \"80%\",\n                            marginLeft: 85,\n                            textAlignLast: \"center\",\n                        }}\n                        inputProps={{ \n                            readOnly: true, \n                        }}\n                    />\n                </div>\n                    <br/>\n                <div className={classes.root}>\n                    \n                </div>\n            </Paper>\n        </Grid>\n\n        <Grid item xs={10}>\n            <Paper className={classes.paper}>\n                <Typography variant=\"h6\">\n                    Scan Frequency\n                </Typography>\n                    <br/>\n                <div>\n                     <Slider \n                        value={value} \n                        onChange={handleChange} \n                        max={5}\n                        min={0}\n                        step={1}\n                        valueLabelDisplay=\"on\"\n                        style={{\n                            width: \"70%\",\n                            marginLeft: 145,\n                        }}    \n                    />\n                </div>\n                    <br/>\n                <Typography style={{textAlign: \"right\",marginRight: 35}}>\n                    -T&nbsp;\n                    <Tooltip \n                        title=\"[ -T ] --- Specifies the timing (Timing) used in the scanning process, there are always 6 levels (0-5), the level increases, the faster the scanning speed.\" \n                        placement=\"top\" \n                        arrow\n                    >\n                        <span className={classes.avatarText}>{value}</span>\n                    </Tooltip>\n                </Typography>\n            </Paper>\n        </Grid>\n\n        <Grid item xs={10}>\n           <Paper className={classes.paper}>\n                <Typography variant=\"h6\">\n                    Flags\n                </Typography>\n                    <br/>\n                <div style={{textAlign: \"center\"}}>\n                    <FormControl component=\"fieldset\">\n                        <table className=\"scanModeSettingFlagTable\">\n                            <tr>\n                                <td>\n                                    <RadioGroup row aria-label=\"position\" name=\"position\" defaultValue=\"top\">\n                                        <Tooltip title=\"Increase the verbosity level\" placement=\"top\" arrow>\n                                            <FormControlLabel\n                                                value=\"-v\"\n                                                control={<Radio color=\"primary\" />}\n                                                label=\"-v\"\n                                                labelPlacement=\"end\"\n                                            />\n                                        </Tooltip>\n                                        <Tooltip title=\"Use more v for greater effect\" placement=\"top\" arrow>\n                                            <FormControlLabel\n                                                value=\"-vv\"\n                                                control={<Radio color=\"primary\" />}\n                                                label=\"-vv\"\n                                                labelPlacement=\"end\"\n                                            />\n                                        </Tooltip>\n                                    </RadioGroup>\n                                </td>\n                                <td>\n                                    <Tooltip title=\"Enables OS detection, version detection, script scanning, and traceroute. THIS MUST BE CHOSEN.\" placement=\"top\" arrow>\n                                        <FormControlLabel\n                                            control={\n                                                <Switcher\n                                                    checked={state.A}\n                                                    onChange={handleSwitchChange}\n                                                    name=\"A\"\n                                                    color=\"primary\"\n                                                    disabled={true}\n                                                />\n                                            }\n                                            label=\"-A\"\n                                            className={classes.switch}\n                                        />\n                                    </Tooltip>\n                                </td>\n                            </tr>\n                        </table>\n                    </FormControl>\n            \n                </div>\n            </Paper>\n        </Grid>\n\n        <Grid item xs={10} style={{position: \"absolute\", width: 902, bottom: 0}}>\n            <Paper className={classes.paper}>\n                <Link to=\"/defaultScanMode\">\n                    <Button variant=\"contained\">Back</Button>\n                </Link>                \n                <Button variant=\"contained\" style={{float: 'right'}} onClick={handleClick}>Save</Button>\n                <Snackbar\n                    anchorOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'left',\n                    }}\n                    open={open}\n                    autoHideDuration={6000}\n                    onClose={handleClose}\n                    message=\"Settings Save Successfully\"\n                    action={\n                    <React.Fragment>\n                         <Link to=\"/defaultScanMode\">\n                            <IconButton size=\"small\" aria-label=\"close\" color=\"inherit\" onClick={handleClose}>\n                                <CloseIcon fontSize=\"small\" style={{color: \"#fff\"}}/>\n                            </IconButton>\n                        </Link>\n                    </React.Fragment>\n                    }\n                />\n            </Paper>\n        </Grid>\n\n      </Grid>\n      \n    </div>\n  );\n}\n","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/defaultScanModes/fullPortsScanMode.tsx",["388","389","390","391","392"],"import React from 'react';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport { Switch, Route, Link, BrowserRouter } from \"react-router-dom\";\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography'\nimport TextField from '@material-ui/core/TextField';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Slider from '@material-ui/core/Slider';\n\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Switcher from '@material-ui/core/Switch';\nimport Button from '@material-ui/core/Button';\n\nimport IconButton from '@material-ui/core/IconButton';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport CloseIcon from '@material-ui/icons/Close';\n\nimport ScanModeIcon from '@material-ui/icons/Settings';\n\nimport '../../Styles/DefaultScanMode.css'\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    paper: {\n      padding: theme.spacing(2),\n      textAlign: 'left',\n      backgroundColor: \"#fefefe\",\n      color: \"#333333\",\n    },\n    centerGrid: {\n        textAlign: \"center\",\n        marginTop: 15,\n    },\n    avatarText: {\n        background: \"#4A92FF\",\n        borderRadius: 6,\n        color: \"#fff\",\n        padding: \"2px 6px\",\n    },  \n    switch: {\n        disaply: \"inline-block\",\n    },\n  }),\n);\n\nexport default function CenteredGrid() {\n  const classes = useStyles();\n  const [value, setValue] = React.useState<number>(4);\n\n  const handleChange = (event: any, newValue: number | number[]) => {\n    setValue(newValue as number);\n  };\n\n  const [state, setState] = React.useState({\n    p: true,\n  });\n\n  const handleSwitchChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setState({ ...state, [event.target.name]: event.target.checked });\n  };\n\n  const [open, setOpen] = React.useState(false);\n\n  const handleClick = () => {\n    setOpen(true);\n  };\n\n  const handleClose = (event: React.SyntheticEvent | React.MouseEvent, reason?: string) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    setOpen(false);\n  };\n\n  return (\n    <div className={classes.root}>\n      <Grid container spacing={5} justify=\"center\" alignItems=\"center\">\n       \n        <Grid item xs={10}>\n            <Paper className={classes.paper}>\n                <Typography variant=\"h6\">\n                    Full Ports Scan Modes\n                </Typography>\n                    <br/>\n                <div>\n                    <TextField \n                        id=\"outlined-basic\" \n                        label=\"Current Command\" \n                        defaultValue=\"nmap -T4 -p- -v -v + [ Target IP / Domain ] \"\n                        variant=\"outlined\" \n                        size=\"small\"\n                        style={{\n                            width: \"80%\",\n                            marginLeft: 85,\n                            textAlignLast: \"center\",\n                        }}\n                        inputProps={{ \n                            readOnly: true, \n                        }}\n                    />\n                </div>\n                    <br/>\n                <div className={classes.root}>\n                    \n                </div>\n            </Paper>\n        </Grid>\n\n        <Grid item xs={10}>\n            <Paper className={classes.paper}>\n                <Typography variant=\"h6\">\n                    Scan Frequency\n                </Typography>\n                    <br/>\n                <div>\n                     <Slider \n                        value={value} \n                        onChange={handleChange} \n                        max={5}\n                        min={0}\n                        step={1}\n                        valueLabelDisplay=\"on\"\n                        style={{\n                            width: \"70%\",\n                            marginLeft: 145,\n                        }}    \n                    />\n                </div>\n                    <br/>\n                <Typography style={{textAlign: \"right\",marginRight: 35}}>\n                    -T&nbsp;\n                    <Tooltip \n                        title=\"[ -T ] --- Specifies the timing (Timing) used in the scanning process, there are always 6 levels (0-5), the level increases, the faster the scanning speed.\" \n                        placement=\"top\" \n                        arrow\n                    >\n                        <span className={classes.avatarText}>{value}</span>\n                    </Tooltip>\n                </Typography>\n            </Paper>\n        </Grid>\n\n        <Grid item xs={10}>\n           <Paper className={classes.paper}>\n                <Typography variant=\"h6\">\n                    Flags\n                </Typography>\n                    <br/>\n                <div style={{textAlign: \"center\"}}>\n                    <FormControl component=\"fieldset\">\n                        <table className=\"scanModeSettingFlagTable\">\n                            <tr>\n                                <td>\n                                    <RadioGroup row aria-label=\"position\" name=\"position\" defaultValue=\"top\">\n                                        <Tooltip title=\"Increase the verbosity level\" placement=\"top\" arrow>\n                                            <FormControlLabel\n                                                value=\"-v\"\n                                                control={<Radio color=\"primary\" />}\n                                                label=\"-v\"\n                                                labelPlacement=\"end\"\n                                            />\n                                        </Tooltip>\n                                        <Tooltip title=\"Use more v for greater effect\" placement=\"top\" arrow>\n                                            <FormControlLabel\n                                                value=\"-vv\"\n                                                control={<Radio color=\"primary\" />}\n                                                label=\"-vv\"\n                                                labelPlacement=\"end\"\n                                            />\n                                        </Tooltip>\n                                    </RadioGroup>\n                                </td>\n                                <td>\n                                    <Tooltip title=\"Port scan all ports. THIS MUST BE CHOSEN.\" placement=\"top\" arrow>\n                                        <FormControlLabel\n                                            control={\n                                                <Switcher\n                                                    checked={state.p}\n                                                    onChange={handleSwitchChange}\n                                                    name=\"p\"\n                                                    color=\"primary\"\n                                                    disabled={true}\n                                                />\n                                            }\n                                            label=\"-p-\"\n                                            className={classes.switch}\n                                        />\n                                    </Tooltip>\n                                </td>\n                            </tr>\n                        </table>\n                    </FormControl>\n                </div>\n            </Paper>\n        </Grid>\n\n        <Grid item xs={10} style={{position: \"absolute\", width: 902, bottom: 0}}>\n            <Paper className={classes.paper}>\n                <Link to=\"/defaultScanMode\">\n                    <Button variant=\"contained\">Back</Button>\n                </Link>                \n                <Button variant=\"contained\" style={{float: 'right'}} onClick={handleClick}>Save</Button>\n                <Snackbar\n                    anchorOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'left',\n                    }}\n                    open={open}\n                    autoHideDuration={6000}\n                    onClose={handleClose}\n                    message=\"Settings Save Successfully\"\n                    action={\n                    <React.Fragment>\n                         <Link to=\"/defaultScanMode\">\n                            <IconButton size=\"small\" aria-label=\"close\" color=\"inherit\" onClick={handleClose}>\n                                <CloseIcon fontSize=\"small\" style={{color: \"#fff\"}}/>\n                            </IconButton>\n                        </Link>\n                    </React.Fragment>\n                    }\n                />\n            </Paper>\n        </Grid>\n\n      </Grid>\n      \n    </div>\n  );\n}\n","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/defaultScanModes/nonPingScanMode.tsx",["393","394","395","396","397"],"import React from 'react';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport { Switch, Route, Link, BrowserRouter } from \"react-router-dom\";\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography'\nimport TextField from '@material-ui/core/TextField';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Slider from '@material-ui/core/Slider';\n\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Switcher from '@material-ui/core/Switch';\nimport Button from '@material-ui/core/Button';\n\nimport IconButton from '@material-ui/core/IconButton';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport CloseIcon from '@material-ui/icons/Close';\n\nimport ScanModeIcon from '@material-ui/icons/Settings';\n\nimport '../../Styles/DefaultScanMode.css'\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    paper: {\n      padding: theme.spacing(2),\n      textAlign: 'left',\n      backgroundColor: \"#fefefe\",\n      color: \"#333333\",\n    },\n    centerGrid: {\n        textAlign: \"center\",\n        marginTop: 15,\n    },\n    avatarText: {\n        background: \"#4A92FF\",\n        borderRadius: 6,\n        color: \"#fff\",\n        padding: \"2px 6px\",\n    },  \n    switch: {\n        disaply: \"inline-block\",\n    },\n  }),\n);\n\nexport default function CenteredGrid() {\n  const classes = useStyles();\n  const [value, setValue] = React.useState<number>(4);\n\n  const handleChange = (event: any, newValue: number | number[]) => {\n    setValue(newValue as number);\n  };\n\n  const [state, setState] = React.useState({\n    Pn: true,\n  });\n\n  const handleSwitchChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setState({ ...state, [event.target.name]: event.target.checked });\n  };\n\n  const [open, setOpen] = React.useState(false);\n\n  const handleClick = () => {\n    setOpen(true);\n  };\n\n  const handleClose = (event: React.SyntheticEvent | React.MouseEvent, reason?: string) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    setOpen(false);\n  };\n\n  return (\n    <div className={classes.root}>\n      <Grid container spacing={5} justify=\"center\" alignItems=\"center\">\n       \n        <Grid item xs={10}>\n            <Paper className={classes.paper}>\n                <Typography variant=\"h6\">\n                    Non-Ping Scan Modes\n                </Typography>\n                    <br/>\n                <div>\n                    <TextField \n                        id=\"outlined-basic\" \n                        label=\"Current Command\" \n                        defaultValue=\"nmap -v -sU -sT -p -U:161, T:80 -T0 + [ Target IP / Domain ]\"\n                        variant=\"outlined\" \n                        size=\"small\"\n                        style={{\n                            width: \"80%\",\n                            marginLeft: 85,\n                            textAlignLast: \"center\",\n                        }}\n                        inputProps={{ \n                            readOnly: true, \n                        }}\n                    />\n                </div>\n                    <br/>\n                <div className={classes.root}>\n                    \n                </div>\n            </Paper>\n        </Grid>\n\n        <Grid item xs={10}>\n            <Paper className={classes.paper}>\n                <Typography variant=\"h6\">\n                    Scan Frequency\n                </Typography>\n                    <br/>\n                <div>\n                     <Slider \n                        value={value} \n                        onChange={handleChange} \n                        max={5}\n                        min={0}\n                        step={1}\n                        valueLabelDisplay=\"on\"\n                        style={{\n                            width: \"70%\",\n                            marginLeft: 145,\n                        }}    \n                    />\n                </div>\n                    <br/>\n                <Typography style={{textAlign: \"right\",marginRight: 35}}>\n                    -T&nbsp;\n                    <Tooltip \n                        title=\"[ -T ] --- Specifies the timing (Timing) used in the scanning process, there are always 6 levels (0-5), the level increases, the faster the scanning speed.\" \n                        placement=\"top\" \n                        arrow\n                    >\n                        <span className={classes.avatarText}>{value}</span>\n                    </Tooltip>\n                </Typography>\n            </Paper>\n        </Grid>\n\n        <Grid item xs={10}>\n           <Paper className={classes.paper}>\n                <Typography variant=\"h6\">\n                    Flags\n                </Typography>\n                    <br/>\n                <div style={{textAlign: \"center\"}}>\n                    <FormControl component=\"fieldset\">\n                    <table className=\"scanModeSettingFlagTable\">\n                        <tr>\n                            <td>\n                                <RadioGroup row aria-label=\"position\" name=\"position\" defaultValue=\"top\">\n                                    <Tooltip title=\"Increase the verbosity level\" placement=\"top\" arrow>\n                                        <FormControlLabel\n                                            value=\"-v\"\n                                            control={<Radio color=\"primary\" />}\n                                            label=\"-v\"\n                                            labelPlacement=\"end\"\n                                        />\n                                    </Tooltip>\n                                    <Tooltip title=\"Use more v for greater effect\" placement=\"top\" arrow>\n                                        <FormControlLabel\n                                            value=\"-vv\"\n                                            control={<Radio color=\"primary\" />}\n                                            label=\"-vv\"\n                                            labelPlacement=\"end\"\n                                        />\n                                    </Tooltip>\n                                </RadioGroup>\n                            </td>\n                            <td>\n                                <Tooltip title=\"Disable host discovery. Port scan only.\" placement=\"top\" arrow>\n                                    <FormControlLabel\n                                        control={\n                                            <Switcher\n                                                checked={state.Pn}\n                                                onChange={handleSwitchChange}\n                                                name=\"Pn\"\n                                                color=\"primary\"\n                                            />\n                                        }\n                                        label=\"-Pn\"\n                                        className={classes.switch}\n                                    />\n                                </Tooltip>\n                            </td>\n                        </tr>\n                    </table>\n                </FormControl>\n                </div>\n            </Paper>\n        </Grid>\n\n        <Grid item xs={10} style={{position: \"absolute\", width: 902, bottom: 0}}>\n            <Paper className={classes.paper}>\n                <Link to=\"/defaultScanMode\">\n                    <Button variant=\"contained\">Back</Button>\n                </Link>                \n                <Button variant=\"contained\" style={{float: 'right'}} onClick={handleClick}>Save</Button>\n                <Snackbar\n                    anchorOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'left',\n                    }}\n                    open={open}\n                    autoHideDuration={6000}\n                    onClose={handleClose}\n                    message=\"Settings Save Successfully\"\n                    action={\n                    <React.Fragment>\n                         <Link to=\"/defaultScanMode\">\n                            <IconButton size=\"small\" aria-label=\"close\" color=\"inherit\" onClick={handleClose}>\n                                <CloseIcon fontSize=\"small\" style={{color: \"#fff\"}}/>\n                            </IconButton>\n                        </Link>\n                    </React.Fragment>\n                    }\n                />\n            </Paper>\n        </Grid>\n\n      </Grid>\n      \n    </div>\n  );\n}\n","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/defaultScanModes/top100portsScanMode.tsx",["398","399","400","401","402","403","404"],"import React from 'react';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport { Switch, Route, Link, BrowserRouter } from \"react-router-dom\";\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography'\nimport TextField from '@material-ui/core/TextField';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Slider from '@material-ui/core/Slider';\n\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Switcher from '@material-ui/core/Switch';\nimport Button from '@material-ui/core/Button';\n\nimport IconButton from '@material-ui/core/IconButton';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport CloseIcon from '@material-ui/icons/Close';\n\nimport ScanModeIcon from '@material-ui/icons/Settings';\n\nimport '../../Styles/DefaultScanMode.css'\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    paper: {\n      padding: theme.spacing(2),\n      textAlign: 'left',\n      backgroundColor: \"#fefefe\",\n      color: \"#333333\",\n    },\n    centerGrid: {\n        textAlign: \"center\",\n        marginTop: 15,\n    },\n    avatarText: {\n        background: \"#4A92FF\",\n        borderRadius: 6,\n        color: \"#fff\",\n        padding: \"2px 6px\",\n    },  \n    switch: {\n        disaply: \"inline-block\",\n    },\n  }),\n);\n\nexport default function CenteredGrid() {\n  const classes = useStyles();\n  const [value, setValue] = React.useState<number>(4);\n\n  const handleChange = (event: any, newValue: number | number[]) => {\n    setValue(newValue as number);\n  };\n\n  const [state, setState] = React.useState({\n    F: true,\n  });\n\n  const handleSwitchChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setState({ ...state, [event.target.name]: event.target.checked });\n  };\n\n  const [open, setOpen] = React.useState(false);\n\n  const handleClick = () => {\n    setOpen(true);\n  };\n\n  const handleClose = (event: React.SyntheticEvent | React.MouseEvent, reason?: string) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    setOpen(false);\n  };\n\n  return (\n    <div className={classes.root}>\n      <Grid container spacing={5} justify=\"center\" alignItems=\"center\">\n       \n        <Grid item xs={10}>\n            <Paper className={classes.paper}>\n                <Typography variant=\"h6\">\n                    Top 100 Ports Scan Modes\n                </Typography>\n                    <br/>\n                <div>\n                    <TextField \n                        id=\"outlined-basic\" \n                        label=\"Current Command\" \n                        defaultValue=\"nmap -T4 -F + [ Target IP / Domain ] \"\n                        variant=\"outlined\" \n                        size=\"small\"\n                        style={{\n                            width: \"80%\",\n                            marginLeft: 85,\n                            textAlignLast: \"center\",\n                        }}\n                        inputProps={{ \n                            readOnly: true, \n                        }}\n                    />\n                </div>\n                    <br/>\n                <div className={classes.root}>\n                    \n                </div>\n            </Paper>\n        </Grid>\n\n        <Grid item xs={10}>\n            <Paper className={classes.paper}>\n                <Typography variant=\"h6\">\n                    Scan Frequency\n                </Typography>\n                    <br/>\n                <div>\n                     <Slider \n                        value={value} \n                        onChange={handleChange} \n                        max={5}\n                        min={0}\n                        step={1}\n                        valueLabelDisplay=\"on\"\n                        style={{\n                            width: \"70%\",\n                            marginLeft: 145,\n                        }}    \n                    />\n                </div>\n                    <br/>\n                <Typography style={{textAlign: \"right\",marginRight: 35}}>\n                    -T&nbsp;\n                    <Tooltip \n                        title=\"[ -T ] --- Specifies the timing (Timing) used in the scanning process, there are always 6 levels (0-5), the level increases, the faster the scanning speed.\" \n                        placement=\"top\" \n                        arrow\n                    >\n                        <span className={classes.avatarText}>{value}</span>\n                    </Tooltip>\n                </Typography>\n            </Paper>\n        </Grid>\n\n        <Grid item xs={10}>\n           <Paper className={classes.paper}>\n                <Typography variant=\"h6\">\n                    Flags\n                </Typography>\n                    <br/>\n                \n                    <div style={{textAlign: \"center\"}}>\n                    <FormControl component=\"fieldset\">\n                        <table className=\"scanModeSettingFlagTable\">\n                            <tr>\n                                <td>\n                                    <Tooltip title=\"Fast port scan (100 ports). THIS MUST BE CHOSEN.\" placement=\"top\" arrow>\n                                        <FormControlLabel\n                                            control={\n                                                <Switcher\n                                                    checked={state.F}\n                                                    onChange={handleSwitchChange}\n                                                    name=\"F\"\n                                                    color=\"primary\"\n                                                    disabled={true}\n                                                />\n                                            }\n                                            label=\"-F\"\n                                            className={classes.switch}\n                                        />\n                                    </Tooltip>\n                                </td>\n                            </tr>\n                        </table>\n                    </FormControl>\n                </div>\n           </Paper>\n        </Grid>\n\n        <Grid item xs={10} style={{position: \"absolute\", width: 902, bottom: 0}}>\n            <Paper className={classes.paper}>\n                <Link to=\"/defaultScanMode\">\n                    <Button variant=\"contained\">Back</Button>\n                </Link>                \n                <Button variant=\"contained\" style={{float: 'right'}} onClick={handleClick}>Save</Button>\n                <Snackbar\n                    anchorOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'left',\n                    }}\n                    open={open}\n                    autoHideDuration={6000}\n                    onClose={handleClose}\n                    message=\"Settings Save Successfully\"\n                    action={\n                    <React.Fragment>\n                         <Link to=\"/defaultScanMode\">\n                            <IconButton size=\"small\" aria-label=\"close\" color=\"inherit\" onClick={handleClose}>\n                                <CloseIcon fontSize=\"small\" style={{color: \"#fff\"}}/>\n                            </IconButton>\n                        </Link>\n                    </React.Fragment>\n                    }\n                />\n            </Paper>\n        </Grid>\n\n      </Grid>\n      \n    </div>\n  );\n}\n","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/defaultScanModes/lightningScanMode.tsx",["405","406","407","408","409"],"import React from 'react';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport { Switch, Route, Link, BrowserRouter } from \"react-router-dom\";\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography'\nimport TextField from '@material-ui/core/TextField';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Slider from '@material-ui/core/Slider';\n\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Switcher from '@material-ui/core/Switch';\nimport Button from '@material-ui/core/Button';\n\nimport IconButton from '@material-ui/core/IconButton';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport CloseIcon from '@material-ui/icons/Close';\n\nimport ScanModeIcon from '@material-ui/icons/Settings';\n\nimport '../../Styles/DefaultScanMode.css'\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    paper: {\n      padding: theme.spacing(2),\n      backgroundColor: \"#fefefe\",\n      color: \"#333333\",\n    },\n    centerGrid: {\n        textAlign: \"center\",\n        marginTop: 15,\n    },\n    avatarText: {\n        background: \"#4A92FF\",\n        borderRadius: 6,\n        color: \"#fff\",\n        padding: \"2px 6px\",\n    },  \n    switch: {\n        disaply: \"inline-block\",\n    },\n  }),\n);\n\nexport default function CenteredGrid() {\n  const classes = useStyles();\n  const [value, setValue] = React.useState<number>(0);\n\n  const handleChange = (event: any, newValue: number | number[]) => {\n    setValue(newValue as number);\n  };\n\n  const [state, setState] = React.useState({\n    Pn: true,\n    sT: true,\n    sU: true,\n  });\n\n  const handleSwitchChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setState({ ...state, [event.target.name]: event.target.checked });\n  };\n\n  const [open, setOpen] = React.useState(false);\n\n  const handleClick = () => {\n    setOpen(true);\n  };\n\n  const handleClose = (event: React.SyntheticEvent | React.MouseEvent, reason?: string) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    setOpen(false);\n  };\n\n  return (\n    <div className={classes.root}>\n      <Grid container spacing={5} justify=\"center\" alignItems=\"center\">\n       \n        <Grid item xs={10}>\n            <Paper className={classes.paper}>\n                <Typography variant=\"h6\">\n                    Lightning Scan Modes\n                </Typography>\n                    <br/>\n                <div>\n                    <TextField \n                        id=\"outlined-basic\" \n                        label=\"Current Command\" \n                        defaultValue=\"nmap -v -sU -sT -p -U:161, T:80 -T0 + [ Target IP / Domain ] \"\n                        variant=\"outlined\" \n                        size=\"small\"\n                        style={{\n                            width: \"80%\",\n                            marginLeft: 85,\n                            textAlignLast: \"center\",\n                        }}\n                        inputProps={{ \n                            readOnly: true, \n                        }}\n                    />\n                </div>\n                    <br/>\n                <div className={classes.root}>\n                    \n                </div>\n            </Paper>\n        </Grid>\n\n        <Grid item xs={10}>\n            <Paper className={classes.paper}>\n                <Typography variant=\"h6\">\n                    Scan Frequency\n                </Typography>\n                    <br/>\n                <div>\n                     <Slider \n                        value={value} \n                        onChange={handleChange} \n                        max={5}\n                        min={0}\n                        step={1}\n                        valueLabelDisplay=\"on\"\n                        style={{\n                            width: \"70%\",\n                            marginLeft: 145,\n                        }}    \n                    />\n                </div>\n                    <br/>\n                <Typography style={{textAlign: \"right\",marginRight: 35}}>\n                    -T&nbsp;\n                    <Tooltip \n                        title=\"[ -T ] --- Specifies the timing (Timing) used in the scanning process, there are always 6 levels (0-5), the level increases, the faster the scanning speed.\" \n                        placement=\"top\" \n                        arrow\n                    >\n                        <span className={classes.avatarText}>{value}</span>\n                    </Tooltip>\n                </Typography>\n            </Paper>\n        </Grid>\n\n        <Grid item xs={10}>\n           <Paper className={classes.paper}>\n                <Typography variant=\"h6\">\n                    Flags\n                </Typography>\n                    <br/>\n                <div style={{textAlign: \"center\"}}>\n                    <FormControl component=\"fieldset\">\n                        <table className=\"scanModeSettingFlagTable\">\n                            <tr>\n                                <td>\n                                    <RadioGroup row aria-label=\"position\" name=\"position\" defaultValue=\"top\">\n                                        <Tooltip title=\"Increase the verbosity level\" placement=\"top\" arrow>\n                                            <FormControlLabel\n                                                value=\"-v\"\n                                                control={<Radio color=\"primary\" />}\n                                                label=\"-v\"\n                                                labelPlacement=\"end\"\n                                            />\n                                        </Tooltip>\n                                        <Tooltip title=\"Use more v for greater effect\" placement=\"top\" arrow>\n                                            <FormControlLabel\n                                                value=\"-vv\"\n                                                control={<Radio color=\"primary\" />}\n                                                label=\"-vv\"\n                                                labelPlacement=\"end\"\n                                            />\n                                        </Tooltip>\n                                    </RadioGroup>\n                                </td>\n                                <td>\n                                    <Tooltip title=\"UDP port scan. THIS MUST BE CHOSEN.\" placement=\"top\" arrow>\n                                        <FormControlLabel\n                                            control={\n                                                <Switcher\n                                                    checked={state.sU}\n                                                    onChange={handleSwitchChange}\n                                                    name=\"sU\"\n                                                    color=\"primary\"\n                                                    disabled={true}\n                                                />\n                                            }\n                                            label=\"-sU\"\n                                            className={classes.switch}\n                                        />\n                                    </Tooltip>\n                                </td>\n                                <td>\n                                    <Tooltip title=\"TCP connect port scan (Default without root privilege). THIS MUST BE CHOSEN.\" placement=\"top\" arrow>\n                                        <FormControlLabel\n                                            control={\n                                                <Switcher\n                                                    checked={state.sT}\n                                                    onChange={handleSwitchChange}\n                                                    name=\"sT\"\n                                                    color=\"primary\"\n                                                    disabled={true}\n                                                />\n                                            }\n                                            label=\"-sT\"\n                                            className={classes.switch}\n                                        />\n                                    </Tooltip>\n                                </td>\n                            </tr>\n                        </table>\n                    </FormControl>\n                </div>\n          </Paper>\n        </Grid>\n\n        <Grid item xs={10} style={{position: \"absolute\", width: 902, bottom: 0}}>\n            <Paper className={classes.paper}>\n                <Link to=\"/defaultScanMode\">\n                    <Button variant=\"contained\">Back</Button>\n                </Link>                \n                <Button variant=\"contained\" style={{float: 'right'}} onClick={handleClick}>Save</Button>\n                <Snackbar\n                    anchorOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'left',\n                    }}\n                    open={open}\n                    autoHideDuration={6000}\n                    onClose={handleClose}\n                    message=\"Settings Save Successfully\"\n                    action={\n                    <React.Fragment>\n                         <Link to=\"/defaultScanMode\">\n                            <IconButton size=\"small\" aria-label=\"close\" color=\"inherit\" onClick={handleClose}>\n                                <CloseIcon fontSize=\"small\" style={{color: \"#fff\"}}/>\n                            </IconButton>\n                        </Link>\n                    </React.Fragment>\n                    }\n                />\n            </Paper>\n        </Grid>\n\n      </Grid>\n      \n    </div>\n  );\n}\n","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/Home.tsx",["410","411","412","413","414","415","416","417","418","419","420","421","422","423","424","425","426","427","428","429","430","431","432","433","434"],"/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/ScanResult.tsx",["435","436","437","438","439","440","441","442","443","444","445","446","447","448","449","450"],"import React, {useState} from 'react';\nimport { makeStyles, createStyles, Theme, lighten } from '@material-ui/core/styles';\nimport { Switch, Route, Link, BrowserRouter } from \"react-router-dom\";\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography'\nimport TextField from '@material-ui/core/TextField';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Select from '@material-ui/core/Select';\nimport FormControl from '@material-ui/core/FormControl';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Divider from '@material-ui/core/Divider';\nimport Button from '@material-ui/core/Button';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport Tabs from '@material-ui/core/Tabs';\nimport Chip from '@material-ui/core/Chip';\nimport Tab from '@material-ui/core/Tab';\nimport Box from '@material-ui/core/Box';\nimport AppBar from '@material-ui/core/AppBar';\nimport { Page, Text, View, Document, StyleSheet } from '@react-pdf/renderer';\nimport LinearProgress from '@material-ui/core/LinearProgress';\n\n// Backend\nimport { isScanning } from '../Backend/frontendData/isScanning'\nimport { pureOutput } from '../Backend/frontendData/Result'\nimport scannedIn from '../Backend/frontendData/scannedIn.json'\nimport scannedTarget from '../Backend/frontendData/scannedTargetForSelect.json'\nimport { rows } from '../Backend/frontendData/getPortStatus'\n\n// Components\nimport NmapOutput from './ScanResults/NmapOutput'\nimport HostsAndPorts from './ScanResults/HostsAndPorts'\nimport ScanDetails from './ScanResults/ScanDetails'\nimport CVEResult from './ScanResults/CVEResult'\nimport WhoIs from './ScanResults/WhoIs'\nimport ExportResult from './ScanResults/ExportResult'\n\n// Mobx Global Status\nimport { observer } from 'mobx-react-lite'\nimport storeTarget from '../Mobx/Models/resultSelectStatus'\n\nconst mainStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    paper: {\n      padding: theme.spacing(2),\n      textAlign: 'left',\n      backgroundColor: \"#fefefe\",\n      color: \"#333333\",\n    },\n    centerGrid: {\n        textAlign: \"center\",\n        marginTop: 15,\n    },\n    btnTabs: {\n        textTransform: \"capitalize\",\n    },\n    cardRoot: {\n        marginTop: 25,\n    },\n    title: {\n        fontSize: 14,\n        whiteSpace: \"pre-line\",\n    },\n    pos: {\n        marginBottom: 12,\n    },\n    defaultShow: {\n\n    },\n    defaultHide: {\n        display: \"none\",\n    },\n    centering: {\n      textAlignLast: \"center\",\n      width: \"70%\",\n      userSelect: \"none\",\n    },\n    datepicker: {\n      marginLeft: theme.spacing(1),\n      marginRight: theme.spacing(1),\n      width: 200,\n    },\n  }),\n);\n\ninterface TabPanelProps {\n    children?: React.ReactNode;\n    index: any;\n    value: any;\n  }\n  \n  const TabPanel = (props: TabPanelProps) => {\n    const { children, value, index, ...other } = props;\n  \n    return (\n      <div\n        role=\"tabpanel\"\n        hidden={value !== index}\n        id={`simple-tabpanel-${index}`}\n        aria-labelledby={`simple-tab-${index}`}\n        {...other}\n      >\n        {value === index && (\n          <Box p={3}>\n            <Typography>{children}</Typography>\n          </Box>\n        )}\n      </div>\n    );\n  }\n  \nconst a11yProps = (index: any) => {\n  return {\n    id: `simple-tab-${index}`,\n    'aria-controls': `simple-tabpanel-${index}`,\n  };\n}\n\nexport default observer (() => {\n  const classes = mainStyles();\n\n  const handleChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n    // setTarget(event.target.value as any);\n    storeTarget.setTarget(event.target.value as any)\n  };\n\n  const [value, setValue] = useState(0);\n\n  const handleTabChange = (event: React.ChangeEvent<{}>, newValue: number) => {\n    setValue(newValue);\n  };\n\n  return (\n    <div className={classes.root}>\n       {isScanning.map((status) => (\n           status === true ?\n            <>\n              <div style={{textAlign: \"center\"}}>\n                <Tooltip title=\"Previous scan is progressing, please wait...\" arrow placement=\"top\">\n                  <LinearProgress style={{width: \"100%\",marginLeft:0, height: 5, color: \"#333\"}} />\n                </Tooltip>\n              </div>\n            </>\n            :\n            null\n        ))}\n      <Grid container spacing={5} justify=\"center\" alignItems=\"center\">\n        <Grid item xs={12}>\n          {/* <button onClick={handleClickJO}>click</button> */}\n                <Paper className={classes.paper}>\n                    <table style={{width: \"100%\"}}>\n                      <tr>\n                        <td style={{width: \"20%\"}}>\n                            <Typography variant=\"h6\">\n                              Scan Result\n                            </Typography>\n                        </td>\n                        <td style={{textAlign: \"right\"}}>\n                            <span style={{marginRight: 120, position: \"relative\", top: 5,}}>\n                              \n                            </span>\n                        </td>\n                      </tr>\n                    </table>\n\n                    \n                    <div style={{textAlign: \"center\",marginTop: 15,marginLeft: 120}}>\n                        <FormControl variant=\"outlined\" style={{width: \"100%\"}}>\n                            <InputLabel id=\"demo-simple-select-outlined-label\">\n                                Choose a target IP or Domain\n                            </InputLabel>\n                            <Select\n                                labelId=\"demo-simple-select-outlined-label\"\n                                id=\"demo-simple-select-outlined\"\n                                value={storeTarget.target}\n                                onChange={handleChange}\n                                label=\"Choose a target IP or Domain\"\n                                style={{\n                                    width: \"83%\",\n                                    textAlign: \"center\",\n                                }}\n                            >\n                              {scannedTarget.map((target) => (\n                                  <MenuItem \n                                    key={target.id}\n                                    value={target.id}\n                                  >\n                                    {target.target} - {target.runTime}\n                                  </MenuItem>\n                              ))}\n                            </Select>\n                        </FormControl>\n                    </div>\n                    { \n                        storeTarget.target === \"\" ?\n                        null\n                            :\n                        <>\n                            <br/><Divider variant=\"middle\" />\n                            <div id=\"scanResultTab\">\n                                <AppBar position=\"static\">\n                                    <Tabs \n                                        value={value} \n                                        onChange={handleTabChange} \n                                        indicatorColor=\"primary\"\n                                        textColor=\"primary\"\n                                        centered>\n                                      <Tab label=\"Nmap Output\" {...a11yProps(0)} style={{textTransform: \"capitalize\"}} />\n                                      <Tab label=\"Hosts and Ports\" {...a11yProps(1)} style={{textTransform: \"capitalize\"}} />\n                                      <Tab label=\"Scan Details\" {...a11yProps(2)} style={{textTransform: \"capitalize\"}} />\n                                      <Tab label=\"CVE\" {...a11yProps(3)} style={{textTransform: \"capitalize\"}} />\n                                      <Tab label=\"WhoIs\" {...a11yProps(4)} style={{textTransform: \"capitalize\"}} />\n                                      <Tab label=\"Export Results\" {...a11yProps(5)} style={{textTransform: \"capitalize\"}} />\n                                    </Tabs>\n                                </AppBar>\n                                <Paper className={classes.paper}>\n                                    <TabPanel value={value} index={0}>\n                                        <NmapOutput />\n                                    </TabPanel>\n                                    <TabPanel value={value} index={1}>\n                                      <div style={{whiteSpace: \"normal\"}}>\n                                        <HostsAndPorts />\n                                      </div>\n                                    </TabPanel>\n                                    <TabPanel value={value} index={2}>\n                                        <ScanDetails />\n                                    </TabPanel>\n                                    <TabPanel value={value} index={3}>\n                                        <CVEResult />\n                                    </TabPanel>\n                                    <TabPanel value={value} index={4}>\n                                        <WhoIs />\n                                    </TabPanel>\n                                    <TabPanel value={value} index={5}>\n                                        <ExportResult />\n                                    </TabPanel>\n                                </Paper>\n                                <Button\n                                  style={{\n                                    width: \"100%\",\n                                    marginTop: 15,\n                                  }}\n                                  variant=\"outlined\"\n                                  color=\"secondary\"\n                                >\n                                  Delete Result\n                                </Button>\n                            </div>\n                        </>\n                    }\n                    \n                </Paper>\n            </Grid>\n\n      </Grid>\n      \n    </div>\n  );\n}\n)","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/ScanComparison.tsx",["451","452","453","454","455","456","457","458","459","460","461","462","463","464","465","466","467","468","469","470","471","472","473","474","475","476","477","478","479","480","481","482","483","484","485","486","487","488","489","490","491","492","493","494","495","496","497","498","499","500","501","502","503","504","505","506","507","508","509","510","511","512","513","514","515","516","517","518","519","520","521","522","523","524","525","526"],"/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/ScanHistory.tsx",["527","528","529","530","531","532","533","534","535","536","537"],"/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/AdvancedMode.tsx",["538","539","540","541","542"],"import React from 'react';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItem from '@material-ui/core/ListItem';\nimport List from '@material-ui/core/List';\nimport Divider from '@material-ui/core/Divider';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Slide from '@material-ui/core/Slide';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport TextField from '@material-ui/core/TextField';\nimport ScanIcon from '@material-ui/icons/GpsNotFixed';\nimport { TransitionProps } from '@material-ui/core/transitions';\n\nimport Content from './AdvancedModeContent'\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    appBar: {\n      position: 'relative',\n      background: '#333333',\n    },\n    title: {\n      marginLeft: theme.spacing(2),\n      flex: 1,\n    },\n  }),\n);\n\nconst Transition = React.forwardRef(function Transition(\n  props: TransitionProps & { children?: React.ReactElement },\n  ref: React.Ref<unknown>,\n) {\n  return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nexport default function FullScreenDialog() {\n  const classes = useStyles();\n  const [open, setOpen] = React.useState(false);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div>\n        <Button \n            variant=\"outlined\" \n            style={{\n                width: \"100%\", \n                whiteSpace: \"nowrap\",\n                fontWeight: 'bold',\n                background: '#343434',\n                borderColor: '#191919',\n                color: '#DFC500',\n            }}\n            size=\"small\"\n            color=\"primary\"\n            onClick={handleClickOpen}\n        >\n            Advanced Mode\n            \n        </Button>\n        <div>\n            <Dialog fullScreen open={open} id=\"advancedModeBody\" onClose={handleClose} TransitionComponent={Transition} style={{background: '#161616'}}>\n                <AppBar className={classes.appBar}>\n                <Toolbar>\n                    <IconButton edge=\"start\" color=\"inherit\" onClick={handleClose} aria-label=\"close\">\n                    <CloseIcon />\n                    </IconButton>\n                    <Typography variant=\"h6\" className={classes.title}>\n                    Sound\n                    </Typography>\n                    <Button autoFocus color=\"inherit\" onClick={handleClose}>\n                    save\n                    </Button>\n                </Toolbar>\n                </AppBar>\n                <TextField \n                    id=\"outlined-basic\" \n                    label=\"Command Line\"\n                    variant=\"outlined\" \n                    className='advancedTextField'\n                    multiline\n                    InputProps={{\n                        endAdornment: \n                            <InputAdornment position=\"start\">\n                                <IconButton\n                                    aria-label=\"toggle password visibility\"\n                                    edge=\"end\"\n                                >\n                                    <ScanIcon style={{color: '#fff'}}/>\n                                </IconButton>\n                            </InputAdornment>,\n                    }}\n                />\n            </Dialog>\n        </div>\n    </div>\n  );\n}\n","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/CustomisedScanMode.tsx",["543","544","545","546","547","548","549","550","551","552","553","554","555","556","557","558","559"],"import React, {useState} from 'react';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport { Switch, Route, Link, BrowserRouter } from \"react-router-dom\";\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography'\n\nimport List from '@material-ui/core/List';\nimport ListItem, { ListItemProps } from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Divider from '@material-ui/core/Divider';\n\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\n\nimport ScanModeIcon from '@material-ui/icons/Settings';\nimport DeleteMode from '@material-ui/icons/DeleteForever';\nimport NewScanMode from './NewScanMode'\n\nimport modeData from '../Backend/frontendData/customisedScanModeStatus'\nimport AddNewMode from '../Mobx/Models/addCustomisedScanModeStatus'\n\nimport ModeSetting from './NewScanModeTab/customisedModeDialog'\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    paper: {\n      padding: theme.spacing(2),\n      textAlign: 'left',\n      backgroundColor: \"#fefefe\",\n      color: \"#333333\",\n    },\n    centerGrid: {\n        textAlign: \"center\",\n        marginTop: 15,\n    },\n    listGrid: {\n        width: '100%',\n        maxWidth: 360,\n        backgroundColor: theme.palette.background.paper,\n    },\n  }),\n);\n\nexport default () => {\n  const classes = useStyles();\n\n  const [type, setType] = useState('');\n  const handleChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n      setType(event.target.value as string)\n  }\n\n  interface customisedMode{\n      type: string\n  }\n\n  const [mode, setMode] = useState<customisedMode[]>([]);\n\n  return (\n    <div className={classes.root}>\n      <Grid container spacing={5} justify=\"center\" alignItems=\"center\">\n       \n        <Grid item xs={10}>\n            <Paper className={classes.paper}>\n                <Typography variant=\"h6\">\n                    Customised Scan Modes\n                    {/* <Button onClick={()=>{setMode([...mode, {type}])}}>ADD NEW</Button> */}\n                </Typography>\n                    <br/><br/>\n                <Grid container justify=\"center\" spacing={5}>\n                    {modeData.rows.map((data, index) => (\n                        data.profile.map((data, index) => (\n                            data.modeID === '' ? \n                            null\n                                :\n                            <>\n                                <Grid item xs={6} id=\"1\">\n                                    <Card>\n                                        <CardContent style={{whiteSpace: \"nowrap\"}}>\n                                            <>\n                                                <Typography color=\"textSecondary\" style={{fontWeight: \"bold\", fontSize: 18}} gutterBottom>\n                                                    {data.name}\n                                                </Typography>\n                                                    <Divider /><br/>\n                                                <Typography color=\"textSecondary\" gutterBottom style={{whiteSpace: \"normal\"}}>\n                                                    {data.des}\n                                                </Typography>\n                                            </>\n                                        </CardContent>\n                                                <Divider variant=\"middle\" />\n                                        \n                                        <CardActions style={{textAlign: \"center\"}}>\n                                            <ModeSetting index={index}/>\n                                            <form method='post' action=\"http://localhost:5000/deleteMode\">\n                                                <input style={{display: 'none'}} type='text' readOnly name='modeID' value={data.modeID} />\n                                                <button type='submit' id=\"deleteBtn\"><span>Delete</span><DeleteMode id=\"delIcon\"/></button>\n                                            </form>\n                                        </CardActions>\n                                    </Card>\n                                </Grid>\n                            </>\n                        ))\n                    ))}\n                </Grid>\n            </Paper>\n        </Grid>\n        <Grid item xs={10}>\n            <NewScanMode />\n        </Grid>\n\n      </Grid>\n      \n    </div>\n  );\n}\n","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/DefaultScanMode.tsx",["560","561","562","563","564","565","566","567"],"import React from 'react';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport { Switch, Route, Link, BrowserRouter } from \"react-router-dom\";\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography'\nimport Divider from '@material-ui/core/Divider';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport { observer } from 'mobx-react-lite'\n\n// Components\nimport Result from './ScanResults/scanme.nmap.org'\nimport SettingDialog from './defaultScanModes/defaultModeDialog'\n\n// Mobx\nimport defaultScanMode from '../Mobx/Models/defaultScanModeStatus'\n\nimport scanMode from '../Backend/frontendData/scanModes/default.json'\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    paper: {\n      padding: theme.spacing(2),\n      textAlign: 'left',\n      backgroundColor: \"#fefefe\",\n      color: \"#333333\",\n    },\n    centerGrid: {\n        textAlign: \"center\",\n        marginTop: 15,\n    },\n    listGrid: {\n        width: '100%',\n        maxWidth: 360,\n        backgroundColor: theme.palette.background.paper,\n    },\n    appBar: {\n        position: 'relative',\n      },\n      title: {\n        marginLeft: theme.spacing(2),\n        flex: 1,\n    },\n    avatarText: {\n        background: \"#4A92FF\",\n        borderRadius: 6,\n        color: \"#fff\",\n        padding: \"2px 6px\",\n    }, \n    sectionStyle: {\n        marginTop: 35, \n        border: \"1px solid #C4C4C4\", \n        padding: \"10px 10px\", \n        borderRadius: 5,\n    },\n    sectionTitleBg: {\n        position: \"relative\",\n        bottom: 22,\n        background: \"#fff\",\n        padding: \"0 5px\",\n        width: \"auto\",\n    },\n    sectionTitle: {\n        color: \"#757575\",\n        fontSize: 13,\n    },\n  }),\n);\n\n\nexport default () => {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <Grid container spacing={5} justify=\"center\" alignItems=\"center\">\n       \n        <Grid item xs={10}>\n                <Paper className={classes.paper}>\n                    <Typography variant=\"h6\">\n                        Default Scan Modes\n                    </Typography>\n                        <br/>\n                    <Grid container justify=\"center\" spacing={5}>\n                        {defaultScanMode.data.map((mode, index) => (\n                            <>\n                                <Grid item xs={6}>\n                                    <Card style={{minHeight: 190}}>\n                                        <CardContent style={{whiteSpace: \"nowrap\", minHeight: 130}}>\n                                            <Typography color=\"textSecondary\" style={{fontWeight: \"bold\", fontSize: 18}} gutterBottom>\n                                                {mode.name}\n                                            </Typography>\n                                            <Divider /><br/>\n                                            <div style={{whiteSpace: \"normal\"}}>\n                                                <Typography color=\"textSecondary\">{mode.des}</Typography>\n                                            </div>\n                                        </CardContent>\n                                            <Divider variant=\"middle\" />\n                                        <CardActions style={{textAlign: \"center\"}}>\n                                            <SettingDialog index={index}/>\n                                        </CardActions>\n                                    </Card>\n                                </Grid>\n                            </>\n                        ))}\n                    </Grid>\n                </Paper>\n            </Grid>\n\n      </Grid>\n      \n    </div>\n  );\n}\n","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Backend/frontendData/getPortStatus.tsx",[],"/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Backend/frontendData/isScanning.tsx",[],"/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/NewScanModeTab/customisedModeDialog.tsx",["568","569","570","571","572","573","574","575","576","577","578"],"import React, {useState} from 'react';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItem from '@material-ui/core/ListItem';\nimport List from '@material-ui/core/List';\nimport Divider from '@material-ui/core/Divider';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport Slider from '@material-ui/core/Slider';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Slide from '@material-ui/core/Slide';\nimport { TransitionProps } from '@material-ui/core/transitions';\n\n// Mobx\nimport { observer } from 'mobx-react-lite'\nimport mode from '../../Backend/frontendData/customisedScanModeStatus'\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    paper: {\n      padding: theme.spacing(2),\n      textAlign: 'left',\n      backgroundColor: \"#fefefe\",\n      color: \"#333333\",\n    },\n    centerGrid: {\n        textAlign: \"center\",\n        marginTop: 15,\n    },\n    listGrid: {\n        width: '100%',\n        maxWidth: 360,\n        backgroundColor: theme.palette.background.paper,\n    },\n    appBar: {\n        position: 'relative',\n        background: \"#333\",\n      },\n      title: {\n        marginLeft: theme.spacing(2),\n        flex: 1,\n      \n    },\n    avatarText: {\n        background: \"#4A92FF\",\n        borderRadius: 6,\n        color: \"#fff\",\n        padding: \"2px 6px\",\n    }, \n    sectionStyle: {\n        marginTop: 35, \n        border: \"1px solid #C4C4C4\", \n        padding: \"10px 10px\", \n        borderRadius: 5,\n    },\n    sectionTitleBg: {\n        position: \"relative\",\n        bottom: 22,\n        background: \"#fff\",\n        padding: \"0 5px\",\n        width: \"auto\",\n    },\n    sectionTitle: {\n        color: \"#757575\",\n        fontSize: 13,\n    },\n  }),\n);\n\nconst Transition = React.forwardRef(function Transition(\n  props: TransitionProps & { children?: React.ReactElement },\n  ref: React.Ref<unknown>,\n) {\n  return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\n\nexport default observer (({index}:{index: number}) => {\n  const classes = useStyles();\n  const [open, setOpen] = useState(false);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const [value, setValue] = useState<number>(4);\n\n  const handleFreqChange = (event: any, newValue: number | number[]) => {\n    setValue(newValue as number);\n  };\n\n  const [radio, setRadio] = useState(\"-v\");\n  const handleRadioChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setRadio((event.target as HTMLInputElement).value);\n  };\n\n\n  return (\n    <div>\n      <Button style={{textTransform: 'capitalize'}} color=\"primary\" onClick={handleClickOpen}>\n        Settings<SettingsIcon />\n      </Button>\n      <Dialog fullScreen open={open} onClose={handleClose} TransitionComponent={Transition}>\n        <AppBar className={classes.appBar} style={{backgroundColor: \"#333\"}}>\n          <Toolbar>\n            <IconButton edge=\"start\" color=\"inherit\" onClick={handleClose} aria-label=\"close\">\n              <CloseIcon />\n            </IconButton>\n              {mode.rows.map((obj, index) => (\n                obj.profile.map((data, index) => (\n                  <>\n                    <Typography variant=\"h6\" className={classes.title}>\n                      {data.name}\n                    </Typography>\n                  </>\n                ))\n              ))}\n            <Button autoFocus color=\"inherit\" onClick={handleClose}>\n              save\n            </Button>\n          </Toolbar>\n        </AppBar>\n          <table style={{marginTop: 25, padding: \"45px 45px\"}}>\n            <tr>\n                <td>\n                    <TextField \n                        id=\"outlined-basic\" \n                        label=\"Current Command\" \n                        // defaultValue={`${mode.data[index].command} [ Target or Domain ]`}\n                        variant=\"outlined\" \n                        size=\"small\"\n                        style={{\n                            width: \"100%\",\n                            textAlignLast: \"center\",\n                        }}\n                        inputProps={{ \n                            readOnly: true, \n                        }}\n                    />\n                </td>\n            </tr>\n                <tr>\n                    <td>\n                        <div className={classes.sectionStyle}>\n                            <span className={classes.sectionTitleBg}>\n                                <span className={classes.sectionTitle}>Scan Frequency</span>\n                            </span>\n                            <div>\n                                <Slider \n                                    value={value} \n                                    onChange={handleFreqChange} \n                                    max={5}\n                                    min={0}\n                                    step={1}\n                                    valueLabelDisplay=\"auto\"\n                                    style={{\n                                        width: \"70%\",\n                                        marginLeft: 145,\n                                    }}    \n                                />\n                            </div>\n                                <br/>\n                            <Typography style={{textAlign: \"right\",marginRight: 35}}>\n                                -T&nbsp;\n                                <Tooltip \n                                    title=\"[ -T ] --- Specifies the timing (Timing) used in the scanning process, there are always 6 levels (0-5), the level increases, the faster the scanning speed.\" \n                                    placement=\"top\" \n                                    arrow\n                                >\n                                    <span className={classes.avatarText}>{value}</span>\n                                </Tooltip>\n                            </Typography>\n                        </div>\n                    </td>\n                </tr>\n                <tr>\n                <td>\n                    <div className={classes.sectionStyle}>\n                        <span className={classes.sectionTitleBg}>\n                            <span className={classes.sectionTitle}>Flag</span>\n                        </span>\n                    </div>\n                </td>\n            </tr>\n        </table>\n    \n        </Dialog>\n    </div>\n  );\n})\n  ","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Mobx/Models/homeSettingsFlagStatus.tsx",[],"/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Mobx/Models/defaultScanModeStatus.tsx",[],"/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Mobx/Models/resultSelectStatus.tsx",[],"/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/defaultScanModes/defaultModeDialog.tsx",["579","580","581","582","583","584"],"import React, {useState} from 'react';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItem from '@material-ui/core/ListItem';\nimport List from '@material-ui/core/List';\nimport Divider from '@material-ui/core/Divider';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport Slider from '@material-ui/core/Slider';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Slide from '@material-ui/core/Slide';\nimport { TransitionProps } from '@material-ui/core/transitions';\n\n// Mobx\nimport { observer } from 'mobx-react-lite'\nimport mode from '../../Mobx/Models/defaultScanModeStatus'\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    paper: {\n      padding: theme.spacing(2),\n      textAlign: 'left',\n      backgroundColor: \"#fefefe\",\n      color: \"#333333\",\n    },\n    centerGrid: {\n        textAlign: \"center\",\n        marginTop: 15,\n    },\n    listGrid: {\n        width: '100%',\n        maxWidth: 360,\n        backgroundColor: theme.palette.background.paper,\n    },\n    appBar: {\n        position: 'relative',\n        background: \"#333\",\n      },\n      title: {\n        marginLeft: theme.spacing(2),\n        flex: 1,\n      \n    },\n    avatarText: {\n        background: \"#4A92FF\",\n        borderRadius: 6,\n        color: \"#fff\",\n        padding: \"2px 6px\",\n    }, \n    sectionStyle: {\n        marginTop: 35, \n        border: \"1px solid #C4C4C4\", \n        padding: \"10px 10px\", \n        borderRadius: 5,\n    },\n    sectionTitleBg: {\n        position: \"relative\",\n        bottom: 22,\n        background: \"#fff\",\n        padding: \"0 5px\",\n        width: \"auto\",\n    },\n    sectionTitle: {\n        color: \"#757575\",\n        fontSize: 13,\n    },\n  }),\n);\n\nconst Transition = React.forwardRef(function Transition(\n  props: TransitionProps & { children?: React.ReactElement },\n  ref: React.Ref<unknown>,\n) {\n  return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\n\nexport default observer (({index}:{index: number}) => {\n  const classes = useStyles();\n  const [open, setOpen] = useState(false);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const [value, setValue] = useState<number>(mode.data[index].freq);\n\n  const handleFreqChange = (event: any, newValue: number | number[]) => {\n    setValue(newValue as number);\n  };\n\n  const [radio, setRadio] = useState(\"-v\");\n  const handleRadioChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setRadio((event.target as HTMLInputElement).value);\n  };\n\n\n  return (\n    <div>\n      <Button variant=\"outlined\" color=\"primary\" onClick={handleClickOpen}>\n        Settings\n      </Button>\n      <Dialog fullScreen open={open} onClose={handleClose} TransitionComponent={Transition}>\n        <AppBar className={classes.appBar} style={{backgroundColor: \"#333\"}}>\n          <Toolbar>\n            <IconButton edge=\"start\" color=\"inherit\" onClick={handleClose} aria-label=\"close\">\n              <CloseIcon />\n            </IconButton>\n            <Typography variant=\"h6\" className={classes.title}>\n              {mode.data[index].name}\n            </Typography>\n            <Button autoFocus color=\"inherit\" onClick={handleClose}>\n              save\n            </Button>\n          </Toolbar>\n        </AppBar>\n          <table style={{marginTop: 25, padding: \"45px 45px\"}}>\n            <tr>\n                <td>\n                    <TextField \n                        id=\"outlined-basic\" \n                        label=\"Current Command\" \n                        defaultValue={`${mode.data[index].command} [ Target or Domain ]`}\n                        variant=\"outlined\" \n                        size=\"small\"\n                        style={{\n                            width: \"100%\",\n                            textAlignLast: \"center\",\n                        }}\n                        inputProps={{ \n                            readOnly: true, \n                        }}\n                    />\n                </td>\n            </tr>\n                <tr>\n                    <td>\n                        <div className={classes.sectionStyle}>\n                            <span className={classes.sectionTitleBg}>\n                                <span className={classes.sectionTitle}>Scan Frequency</span>\n                            </span>\n                            <div>\n                                <Slider \n                                    value={value} \n                                    onChange={handleFreqChange} \n                                    max={5}\n                                    min={0}\n                                    step={1}\n                                    valueLabelDisplay=\"auto\"\n                                    style={{\n                                        width: \"70%\",\n                                        marginLeft: 145,\n                                    }}    \n                                />\n                            </div>\n                                <br/>\n                            <Typography style={{textAlign: \"right\",marginRight: 35}}>\n                                -T&nbsp;\n                                <Tooltip \n                                    title=\"[ -T ] --- Specifies the timing (Timing) used in the scanning process, there are always 6 levels (0-5), the level increases, the faster the scanning speed.\" \n                                    placement=\"top\" \n                                    arrow\n                                >\n                                    <span className={classes.avatarText}>{value}</span>\n                                </Tooltip>\n                            </Typography>\n                        </div>\n                    </td>\n                </tr>\n                <tr>\n                <td>\n                    <div className={classes.sectionStyle}>\n                        <span className={classes.sectionTitleBg}>\n                            <span className={classes.sectionTitle}>Flag</span>\n                        </span>\n                        <div style={{textAlign: \"center\"}}>\n                            <FormControl component=\"fieldset\">\n                                <table className=\"scanModeSettingFlagTable\">\n                                    <tr>\n                                        <td>\n                                            {\n                                              mode.data[index].value == \"topOneHundredScanMode\" ? \n                                                null \n                                                  :\n                                                <>\n                                                  <RadioGroup row aria-label=\"position\" name=\"position\" defaultValue=\"top\" value={radio} onChange={handleRadioChange}>\n                                                      <Tooltip title=\"Increase the verbosity level\" placement=\"top\" arrow>\n                                                          <FormControlLabel\n                                                              value=\"-v\"\n                                                              control={<Radio color=\"primary\"/>}\n                                                              label=\"-v\"\n                                                              labelPlacement=\"end\"\n                                                          />\n                                                      </Tooltip>\n                                                      <Tooltip title=\"Use more v for greater effect\" placement=\"top\" arrow>\n                                                          <FormControlLabel\n                                                              value=\"-vv\"\n                                                              control={<Radio color=\"primary\" />}\n                                                              label=\"-vv\"\n                                                              labelPlacement=\"end\"\n                                                          />\n                                                      </Tooltip>\n                                                  </RadioGroup>\n                                                </>\n                                            }\n                                        </td>\n                                        <td>\n                                            <Tooltip arrow placement=\"top\" title={mode.data[index].flagsDes}>\n                                              <FormControlLabel\n                                                  value={mode.data[index].flags}\n                                                  control={\n                                                    <Checkbox \n                                                      color=\"primary\" \n                                                      defaultChecked={mode.data[index].stMust === true ? true : false}\n                                                      disabled={mode.data[index].stMust === true ? true : false}\n                                                    />\n                                                  }\n                                                  label={mode.data[index].flags}\n                                                  labelPlacement=\"end\"\n                                                  \n                                              />\n                                            </Tooltip>\n                                            {\n                                              mode.data[index].secFlags == \"\" ? null :\n                                              <>\n                                                <Tooltip arrow placement=\"top\" title={mode.data[index].secFlagsDes}>\n                                                  <FormControlLabel\n                                                      value={mode.data[index].secFlags}\n                                                      control={\n                                                        <Checkbox \n                                                          color=\"primary\" \n                                                          defaultChecked={mode.data[index].secMust === true ? true : false}\n                                                          disabled={mode.data[index].secMust === true ? true : false}\n                                                        />\n                                                      }\n                                                      label={mode.data[index].secFlags}\n                                                      labelPlacement=\"end\"\n                                                  />\n                                                </Tooltip>\n                                              </>\n                                            }\n                                        </td>\n                                    </tr>\n                                </table>\n                            </FormControl>\n                        </div>\n                    </div>\n                </td>\n            </tr>\n        </table>\n    \n        </Dialog>\n    </div>\n  );\n})\n  ","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/NewScanMode.tsx",["585","586","587","588"],"import React, {useState} from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Divider from '@material-ui/core/Divider';\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles, Theme } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport Slider from '@material-ui/core/Slider';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\n\n\nimport { TCPoptions } from './TCPoptions'\nimport { nonTCPoptions } from './nonTCPoptions'\n\n// Options \nimport Ping from './NewScanModeTab/Ping'\nimport NSE from './NewScanModeTab/NSE'\nimport Target from './NewScanModeTab/Target'\nimport Source from './NewScanModeTab/Source'\nimport Timing from './NewScanModeTab/Timing'\nimport Others from './NewScanModeTab/Others'\n\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  index: any;\n  value: any;\n}\n\nconst TabPanel = (props: TabPanelProps) => {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`simple-tabpanel-${index}`}\n      aria-labelledby={`simple-tab-${index}`}\n      {...other}\n    >\n      {value === index && (\n        <Box p={3}>\n          <Typography>{children}</Typography>\n        </Box>\n      )}\n    </div>\n  );\n}\n\nconst a11yProps = (index: any) => {\n  return {\n    id: `simple-tab-${index}`,\n    'aria-controls': `simple-tabpanel-${index}`,\n  };\n}\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    flexGrow: 1,\n    backgroundColor: theme.palette.background.paper,\n  },\n  avatarText: {\n    background: \"#4A92FF\",\n    borderRadius: 6,\n    color: \"#fff\",\n    padding: \"2px 6px\",\n  },  \n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  },\n  fullDes: {\n    color: \"red\",\n  },\n  des: {\n\n  },\n}));\n\nexport default () => {\n  const classes = useStyles();\n  const [open, setOpen] = useState(false);\n  const [modeName, setModeName] = useState(\"\");\n  const [modeDes, setModeDes] = useState(\"\");\n  const [value, setValue] = useState(0);\n  const [frequency, setFrequency] = useState<number>(4);\n  const [TCP, setTCP] = useState('');\n  const [nonTCP, setNonTCP] = useState('');\n  const [loading, setLoading] = useState(false);\n\n  const handleTCP = (event: React.ChangeEvent<{ value: unknown }>) => {\n    setTCP(event.target.value as string);\n  };\n\n  const handleNonTCP = (event: React.ChangeEvent<{ value: unknown }>) => {\n    setNonTCP(event.target.value as string);\n  };\n\n  const handleScanFrequency = (event: any, newValue: number | number[]) => {\n    setFrequency(newValue as number);\n  };\n\n  const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\n    setValue(newValue);\n  };\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleModeName = (event: React.ChangeEvent<{ value: unknown }>) => {\n    setModeName(event.target.value as string)\n  }\n\n  const handleModeDes = (event: React.ChangeEvent<{ value: unknown }>) => {\n    setModeDes(event.target.value as string)\n  }\n\n  // Push to array\n  const handleCreate = () => {\n    //setTheArray(theArray => [ ...theArray, {name: modeName, link: \"!@3\", value: \"dsad\", des: modeDes} ]);\n    //console.log(theArray);\n    \n   \n  };\n\n  return (\n    <div>\n      <Button variant=\"contained\" onClick={handleClickOpen} style={{width: \"100%\", backgroundColor: \"#ffffff\", color: \"#333333\"}}>\n        Add New Scan Mode\n      </Button>\n        <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\" fullWidth maxWidth=\"sm\">\n          <DialogTitle id=\"form-dialog-title\">Add New Scan Mode</DialogTitle>\n          <DialogContent>\n              <Divider /><br/>\n              <AppBar position=\"static\">\n                <Tabs value={value} onChange={handleChange} aria-label=\"simple tabs example\" variant=\"scrollable\">\n                  <Tab label=\"Profile\" {...a11yProps(0)} />\n                  <Tab label=\"Ping\" {...a11yProps(1)} />\n                  <Tab label=\"NSE\" {...a11yProps(2)} />\n                  <Tab label=\"Target\" {...a11yProps(3)} />\n                  <Tab label=\"Source\" {...a11yProps(4)} />\n                  <Tab label=\"Timing\" {...a11yProps(5)} />\n                  <Tab label=\"Others\" {...a11yProps(6)} />\n                </Tabs>\n              </AppBar>\n              <TabPanel value={value} index={0}>\n                <Grid container spacing={3} justify=\"center\">\n                    <div style={{textAlign: \"center\", width: \"100%\"}}>\n                      <Grid item xs={12}>\n                          <TextField \n                            value={modeName} \n                            onChange={handleModeName} \n                            label=\"Mode Name\" \n                            margin=\"dense\" \n                            size=\"small\"\n                            variant=\"outlined\"\n                            style={{\n                              width: \"80%\",\n                            }}\n                          />\n                      </Grid>\n                      <Grid item xs={12}>\n                        <TextField \n                            value={modeDes}\n                            onChange={handleModeDes}\n                            label=\"Mode Description (Optional)\" \n                            margin=\"dense\" \n                            multiline\n                            rows={3}\n                            size=\"small\"\n                            variant=\"outlined\"\n                            inputProps={{ \n                              maxLength: 100\n                            }}\n                            style={{\n                              width: \"80%\",\n                              textAlignLast: \"left\",\n                            }}\n                        />\n                        <Typography style={{textAlign: \"right\", color: \"lightgrey\", fontSize: 10, marginRight: 55}}>\n                          <span className={modeDes.length == 100 ? classes.fullDes : classes.des}>{modeDes.length}</span> / 100\n                        </Typography>\n                      </Grid>\n                      <br/><Divider variant=\"middle\" /><br/>\n                      <Grid item xs={12}>\n                          <Typography style={{textAlign: \"left\"}}>Scan Frequency</Typography>\n                          <Slider \n                            value={frequency} \n                            onChange={handleScanFrequency}  \n                            min={0}\n                            max={5}\n                            step={1}\n                            valueLabelDisplay=\"auto\"\n                            aria-labelledby=\"continuous-slider\" \n                            style={{\n                              width: \"50%\",\n                            }}\n                          />\n\n                          <Tooltip \n                              title=\"[ -T ] --- Specifies the timing (Timing) used in the scanning process, there are always 6 levels (0-5), the level increases, the faster the scanning speed.\" \n                              placement=\"top\" \n                              arrow\n                          >\n                            <Typography style={{textAlign: \"center\"}}>-T <span className={classes.avatarText}>{frequency}</span></Typography>\n                          </Tooltip>\n                      </Grid>\n                      <br/><Divider variant=\"middle\" /><br/>\n                      <Grid item xs={12}>\n                        <Tooltip \n                          arrow \n                          placement=\"left\"\n                          title=\"TCP connect scan is the default TCP scan type when SYN scan is not an option.\"\n                        >\n                          <FormControl className={classes.formControl}>\n                            <InputLabel id=\"demo-simple-select-label\">TCP Scans</InputLabel>\n                            <Select\n                              labelId=\"demo-simple-select-label\"\n                              id=\"demo-simple-select\"\n                              value={TCP}\n                              onChange={handleTCP}\n                              style={{\n                                width: 250,\n                              }}\n                            >\n                              <MenuItem>None</MenuItem>\n                              {TCPoptions.map((option) => (\n                                <MenuItem value={option.value}>{option.flag}</MenuItem>\n                              ))}\n                            </Select>\n                          </FormControl>\n                        </Tooltip>\n                      </Grid>\n                      <br/><Divider variant=\"middle\" /><br/>\n                      <Grid item xs={12}>\n                          <Tooltip \n                            arrow \n                            placement=\"left\"\n                            title=\"Non-TCP connect scan is the default non-TCP scan type when SYN scan is not an option.\"\n                          >\n                            <FormControl className={classes.formControl}>\n                              <InputLabel id=\"demo-simple-select-label\">Non-TCP Scans</InputLabel>\n                              <Select\n                                labelId=\"demo-simple-select-label\"\n                                id=\"demo-simple-select\"\n                                value={nonTCP}\n                                onChange={handleNonTCP}\n                                style={{\n                                  width: 250,\n                                }}\n                              >\n                                <MenuItem>None</MenuItem>\n                                {nonTCPoptions.map((option) => (\n                                  <MenuItem value={option.value}>{option.flag}</MenuItem>\n                                ))}\n                              </Select>\n                            </FormControl>\n                          </Tooltip>\n                      </Grid>\n                    </div>\n                </Grid>\n              </TabPanel>\n\n              <TabPanel value={value} index={1}>\n                <Ping />\n              </TabPanel>\n              <TabPanel value={value} index={2}>\n                <NSE />\n              </TabPanel>\n              <TabPanel value={value} index={3}>\n                <Target />\n              </TabPanel>\n              <TabPanel value={value} index={4}>\n                <Source />\n              </TabPanel>\n              <TabPanel value={value} index={5}>\n                <Timing />\n              </TabPanel>\n              <TabPanel value={value} index={6}>\n                <Others />\n              </TabPanel>\n              \n          </DialogContent>\n              <Divider variant=\"middle\" style={{display: loading === true ? 'none' : 'block'}}/>\n              <LinearProgress style={{display: loading === true ? 'block' : 'none'}}/>\n          <DialogActions>\n            <Button onClick={handleClose} color=\"primary\">\n              Cancel\n            </Button>\n            <form method='post' action=\"http://localhost:5000/addMode\">\n              <div style={{display: 'none'}}>\n                <input type='text' name='name' value={modeName} />\n                <input type='text' name='des' value={modeDes} />\n                <input type='text' name='freq' value={frequency} />\n                <input type='text' name='tcp' value={TCP} />\n                <input type='text' name='nontcp' value={nonTCP} />\n              </div>\n              <input \n              color=\"primary\" \n              style={{\n                float: \"right\",\n                position: 'relative',\n                bottom: 2,\n                borderRadius: 4,\n                fontSize: 14,\n              }}\n              onClick={()=>setLoading(true)}\n              type=\"submit\"\n              value=\"Create\"\n              id=\"scanBtn\"\n            />\n            </form>\n            \n          </DialogActions>\n        </Dialog>\n    </div>\n  );\n}\n","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Backend/frontendData/customisedScanModeStatus.tsx",["589","590","591","592","593","594","595"],"import { types, Instance } from \"mobx-state-tree\";\n\ntype profileModel = Instance<typeof profile>\ntype pingModel = Instance<typeof ping>\ntype nseModel = Instance<typeof nse>\ntype targetMode = Instance<typeof target>\ntype sourceModel = Instance<typeof source>\ntype timingModel = Instance<typeof timing>\ntype otherModel = Instance<typeof other>\n\nconst profile = types\n    .model({\n        modeID: types.string,\n        name: types.string,\n        des: types.string,\n        freq: types.number,\n        tcp: types.string,\n        nonTcp: types.string,\n    })\n    \nconst ping = types\n    .model({\n        flags: types.string,\n    })\n\nconst nse = types\n    .model({\n        flags: types.string,\n    })\n\nconst target = types\n    .model({\n        flags: types.string,\n    })\n\nconst source = types\n    .model({\n        flags: types.string,\n    })\n\nconst timing = types\n    .model({\n        flags: types.string,\n    })\n\nconst other = types\n    .model({\n        flags: types.string,\n    })\n\nconst modelData = types\n    .model({\n        profile: types.array(profile),\n        ping: types.array(ping),\n        nse: types.array(nse),\n        target: types.array(target),\n        source: types.array(source),\n        timing: types.array(timing),\n        other: types.array(other),\n    })\n    .actions(self => ({\n    \n    }))\n\nconst modeArray = types\n    .model({\n        rows: types.array(modelData)\n    })\n\nconst store = modeArray.create({\n    rows: [\n        {\n            profile: [\n                {\n                    modeID: \"\",                \n                    name: \"\",\n                    des: \"\",\n                    freq: 0,\n                    tcp: \"\",\n                    nonTcp: \"\",\n                }\n            ],\n            ping: [\n                {\n                    flags: \"\",\n                }\n            ],\n            nse: [\n                {\n                    flags: \"\",\n                }\n            ],\n            target: [\n                {\n                    flags: \"\",\n                }\n            ],\n            source: [\n                {\n                    flags: \"\",\n                }\n            ],\n            timing: [\n                {\n                    flags: \"\",\n                }\n            ],\n            other: [\n                {\n                    flags: \"\",\n                }\n            ]\n        },\n\n\n{\n\"profile\": [\n{\n\"modeID\": \"WubpGxdoBRiLoYcvufkXH\",\n\"name\": \"test\",\n\"des\": \"test => description\",\n\"freq\": 4,\n\"tcp\": \"-sA\",\n\"nonTcp\": \"-sO\"\n}\n],\n\"ping\": [\n{\n\"flags\": \"\"\n}\n],\n\"nse\": [\n{\n\"flags\": \"\"\n}\n],\n\"target\": [\n{\n\"flags\": \"\"\n}\n],\n\"source\": [\n{\n\"flags\": \"\"\n}\n],\n\"timing\": [\n{\n\"flags\": \"\"\n}\n],\n\"other\": [\n{\n\"flags\": \"\"\n}\n]\n},\n\n\n{\n\"profile\": [\n{\n\"modeID\": \"txNCGIObylxCQAVuTrWES\",\n\"name\": \"nse\",\n\"des\": \"nse\",\n\"freq\": 4,\n\"tcp\": \"-sN\",\n\"nonTcp\": \"-sO\"\n}\n],\n\"ping\": [\n{\n\"flags\": \"\"\n}\n],\n\"nse\": [\n{\n\"flags\": \"\"\n}\n],\n\"target\": [\n{\n\"flags\": \"\"\n}\n],\n\"source\": [\n{\n\"flags\": \"\"\n}\n],\n\"timing\": [\n{\n\"flags\": \"\"\n}\n],\n\"other\": [\n{\n\"flags\": \"\"\n}\n]\n},\n]})\nexport default store;","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/ScanResults/HostsAndPorts.tsx",["596","597","598","599","600","601","602","603","604"],"/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/ScanResults/ExportResult.tsx",["605","606","607","608","609","610","611","612","613","614","615","616","617"],"import React, {useState} from 'react';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport Grid from '@material-ui/core/Grid'\nimport Tooltip from '@material-ui/core/Tooltip'\nimport { observer } from 'mobx-react-lite'\nimport HelpIcon from '@material-ui/icons/Help';\n\nimport { scanTarget, targetData, targetTime } from '../target'\n\n// Backend\nimport { isScanning } from '../../Backend/frontendData/isScanning'\nimport { pureOutput } from '../../Backend/frontendData/Result'\nimport scannedIn from '../../Backend/frontendData/scannedIn.json'\nimport scannedTarget from '../../Backend/frontendData/scannedTargetForSelect.json'\nimport { rows } from '../../Backend/frontendData/getPortStatus'\n\n// Mobx Global Status\nimport storeTarget from '../../Mobx/Models/resultSelectStatus'\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      '& > *': {\n        margin: theme.spacing(1),\n        width: '25ch',\n      },\n    },\n  }),\n);\n\nexport default () => {\n    const datas = [{\n      first: 'foo',\n      second: 'bar'\n    }, {\n      first: 'foobar',\n      second: 'foobar'\n    }];\n\n    return (\n      <>\n          {scannedIn.map((obj) => (\n              obj.id !=  storeTarget.target ||  storeTarget.target === \"\" || obj.target === \"\" ?\n                  null\n                      :\n                  <>\n                      <Grid container justify=\"center\" spacing={4}>\n                          <Grid item xs={12} style={{textAlign: \"center\"}}>\n                              <form \n                                  noValidate \n                                  autoComplete=\"off\"\n                              >\n                                  <TextField \n                                      id=\"outlined-basic\" \n                                      label=\"Current Target\" \n                                      variant=\"outlined\" \n                                      value={obj.targetForSelect}\n                                      inputProps={{\n                                          readOnly: true,\n                                      }}\n                                      style={{\n                                          textAlignLast: \"center\",\n                                          width: \"60%\",\n                                      }}\n                                  />\n                                  \n                              </form>\n                          </Grid>\n                          <Grid item xs={6} style={{textAlign: \"center\"}}>\n                              <form \n                                  noValidate \n                                  autoComplete=\"off\"\n                              >\n                                  <TextField \n                                      id=\"outlined-basic\" \n                                      label=\"Target Scan Date [D/M/Y]\" \n                                      variant=\"outlined\" \n                                      value={obj.date}\n                                      inputProps={{\n                                          readOnly: true,\n                                      }}\n                                      style={{\n                                          textAlignLast: \"center\",\n                                          width: \"60%\",\n                                      }}\n                                  />\n                                  \n                              </form>\n                          </Grid>\n                          <Grid item xs={6} style={{textAlign: \"center\"}}>\n                          <Tooltip title=\"\" arrow placement=\"top\">\n                              <form \n                                  noValidate \n                                  autoComplete=\"off\"\n                              >\n                                  \n                                    <TextField \n                                        id=\"outlined-basic\" \n                                        label=\"Target Scan Time\" \n                                        variant=\"outlined\" \n                                        value={obj.time}\n                                        inputProps={{\n                                            readOnly: true,\n                                        }}\n                                        style={{\n                                            textAlignLast: \"center\",\n                                            width: \"60%\",\n                                        }}\n                                    />\n                              </form>\n                              </Tooltip>\n                          </Grid>\n  \n                            <Grid item xs={12} style={{textAlign: \"center\", position: \"relative\", left: 12,}}>\n                                <ButtonGroup \n                                    size=\"large\" \n                                    color=\"primary\" \n                                >\n                                    <Button \n                                      style={{width: \"50%\"}}\n                                    >\n                                        CSV\n                                    </Button>\n                                    \n                                    <Button style={{width: \"50%\"}}>\n                                        PDF\n                                    </Button>\n                                </ButtonGroup>\n                                <Tooltip title=\"By clicking the button, the scan result will be exported to a file in the format of CSV or Excel.\" arrow placement=\"top\">\n                                    <span style={{position:\"relative\", top: 5, left: 15, color: \"lightgrey\", cursor: \"pointer\"}}>\n                                        <HelpIcon style={{fontSize: 20}}/>\n                                    </span>\n                                </Tooltip>\n                            </Grid>\n                      </Grid>\n                      \n                  </>\n          ))}\n      </>\n    );\n}\n","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/ScanResults/NmapOutput.tsx",["618","619","620","621","622","623","624","625","626","627"],"import React, {useState, useEffect} from 'react';\nimport Typography from '@material-ui/core/Typography'\n\nimport { scanTarget, targetData, targetTime } from '../target'\n\n// Backend\nimport { isScanning } from '../../Backend/frontendData/isScanning'\nimport { pureOutput } from '../../Backend/frontendData/Result'\nimport scannedIn from '../../Backend/frontendData/scannedIn.json'\nimport { rows } from '../../Backend/frontendData/getPortStatus'\n\n// Mobx Global Status\nimport selectResult from '../../Mobx/Models/resultSelectStatus'\n\nexport default () => {\n\n    return(\n      <>\n          {pureOutput.map((obj) => (\n            <>\n              {\n                obj.id == selectResult.target ?\n                  <>\n                     <Typography style={{whiteSpace: \"pre-line\"}}>\n                        {obj.output}\n                      </Typography>\n                  </>\n                    :\n                  null\n              }\n            </>\n          ))}\n        \n      </>\n    );\n}","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/ScanResults/WhoIs.tsx",["628","629","630","631","632","633"],"/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/ScanResults/ScanDetails.tsx",["634","635","636","637","638","639","640","641","642","643","644","645","646","647","648","649","650","651","652","653","654","655","656","657","658","659","660","661","662","663"],"/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/ScanResults/CVEResult.tsx",["664","665","666","667","668","669","670","671","672","673","674"],"/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Mobx/Models/homeSettingsStatus.tsx",[],"/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Mobx/Models/advancedModeStatus.tsx",[],"/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/HomeSettings/HomeSettings.tsx",["675","676","677","678","679","680","681","682","683","684"],"import React, {useState} from 'react';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Paper from '@material-ui/core/Paper';\nimport Collapse from '@material-ui/core/Collapse';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Divider from '@material-ui/core/Divider';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport ExpandLessIcon from '@material-ui/icons/ExpandLess';\n\n// Components\nimport scanTechniquesData from './json/ScanTechniques/data.json'\nimport hostDiscovery from './json/HostDiscovery/data.json'\nimport osDetection from './json/OSDetection/data.json'\nimport outputOpt from './json/Output/data.json'\nimport portSpecification from './json/PortSpecification/data.json'\nimport serviceAndVersionDetectiony from './json/ServiceAndVersionDetectiony/data.json'\n\n// Mobx\nimport settingsStatus from '../../Mobx/Models/homeSettingsStatus'\n// import settingsFlagsStatus from '../../Mobx/Models/homeSettingsFlagStatus'\n\nimport SetFlags from './SetFlags'\nimport { automation, cveDetection } from './homeSettingsData'\nimport { targetData } from '../target'\nimport { settings } from 'cluster';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n    },\n    container: {\n      display: 'flex',\n    },\n    polygon: {\n      fill: theme.palette.common.white,\n      stroke: theme.palette.divider,\n      strokeWidth: 1,\n    },\n  }),\n);\n\nexport default () => {\n  const classes = useStyles();\n  const [open, setOpen] = useState(false);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleCancel = () => {\n    setOpen(false);\n    settingsStatus.setAuto(false)\n    settingsStatus.setCve(false)\n    setOthers({\n      automation: false,\n      cveDetect: false,\n      pn: false,\n      whoIs: false,\n    })\n  }\n\n  const [others, setOthers] = useState({\n    automation: false,\n    cveDetect: false,\n    pn: false,\n    whoIs: false,\n  });\n\n  const handleOthersChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setOthers({ ...others, [event.target.name]: event.target.checked });\n  };\n\n  const [setRange, setSetRange] = useState('none');\n\n  const handleSetRange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSetRange((event.target as HTMLInputElement).value);\n    settingsStatus.setRange((event.target as HTMLInputElement).value);\n    if (/.0\\/\\d\\d$/.test(settingsStatus.target) === false){\n      settingsStatus.setRange('none');\n      setSetRange('none')\n    }\n  };\n\n  return (\n    <div className={classes.root}>\n      <Button \n        onClick={handleClickOpen}\n        style={{\n          textTransform: \"none\"\n        }}\n        disabled={settingsStatus.target.length > 0 ? false : true}\n      >\n        Settings\n      </Button>\n      <Dialog\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle id=\"alert-dialog-title\">{\"Add-on Features\"}</DialogTitle>\n        <DialogContent>\n          <Divider variant=\"middle\" style={{marginBottom: 25}}/>\n          <Grid container spacing={6}>\n            <Grid item xs={12}>\n              <Paper style={{background: \"#f9f9f9\", padding: \"15px 15px\", textAlign: \"center\"}} elevation={0}>\n                  <Typography>Target:&nbsp;{settingsStatus.target}</Typography>\n              </Paper>\n            </Grid>\n            {/* Set Range */}\n            <Grid item xs={12}>\n              <Tooltip title=\"Scan range only for the target with range, e.g. 192.168.1.0/24\" arrow placement=\"top\" disableHoverListener={/.0\\/\\d\\d$/.test(settingsStatus.target) === true ? true : false}>\n                <Paper style={{background: \"#f9f9f9\", padding: \"15px 15px\"}} elevation={0}>\n                <FormControl component=\"fieldset\">\n                  <FormLabel component=\"legend\">Set Range</FormLabel>\n                  <RadioGroup aria-label=\"gender\" name=\"gender1\" value={setRange} onChange={handleSetRange} style={{marginLeft: 65,marginTop:15}}>\n                    <table>\n                      <tr>\n                      {/* disabled={'.0\\/\\d+$'.test(homeSettings.target) === true ? false : true} */}\n                        <td>\n                          <FormControlLabel \n                            value=\"oddOnly\" \n                            control={\n                              <Radio \n                                disabled={\n                                  /.0\\/2\\d$/.test(settingsStatus.target) === true ? false : true\n                                }\n                              />\n                            } \n                            label=\"Odd Numbers Only\" \n                          />\n                        </td>\n                        <td>\n                          <FormControlLabel \n                            value=\"even\" \n                            control={\n                              <Radio \n                                disabled={\n                                  /.0\\/2\\d$/.test(settingsStatus.target) === true ? false : true\n                                }\n                              />\n                            } \n                            label=\"Even Numbers Only\" \n                          />\n                        </td>\n                      </tr>\n                      <tr>\n                        <td>\n                          <FormControlLabel \n                            value=\"every5hosts\" \n                            control={\n                              <Radio \n                                disabled={\n                                  /.0\\/2\\d$/.test(settingsStatus.target) === true ? false : true\n                                }\n                              />\n                            } \n                            label=\"Every 5 hosts\" \n                          />\n                        </td>\n                        <td>\n                          <FormControlLabel \n                            value=\"every10hosts\" \n                            control={\n                              <Radio \n                                disabled={\n                                  /.0\\/2\\d$/.test(settingsStatus.target) === true ? false : true\n                                }\n                              />\n                            } \n                            label=\"Every 10 hosts\" \n                          />\n                        </td>\n                      </tr>\n                      <tr>\n                        <td>\n                          <FormControlLabel \n                            value=\"every15hosts\" \n                            control={\n                              <Radio \n                                disabled={\n                                  /.0\\/2\\d$/.test(settingsStatus.target) === true ? false : true\n                                }\n                              />\n                            } \n                            label=\"Every 15 hosts\" \n                          />\n                        </td>\n                        <td>\n                          <FormControlLabel \n                            value=\"every20hosts\" \n                            control={\n                              <Radio \n                                disabled={\n                                  /.0\\/2\\d$/.test(settingsStatus.target) === true ? false : true\n                                }\n                              />\n                            } \n                            label=\"Every 20 hosts\" \n                          />\n                        </td>\n                      </tr>\n                      <tr>\n                        <td>\n                          <FormControlLabel \n                            value=\"none\" \n                            control={\n                              <Radio \n                                disabled={\n                                  /.0\\/2\\d$/.test(settingsStatus.target) === true ? false : true\n                                }\n                              />\n                            } \n                            label=\"None\" \n                          />\n\n                        </td>\n                      </tr>\n                    </table>\n                  </RadioGroup>\n                </FormControl>\n              </Paper>\n              </Tooltip>\n            </Grid>\n            {/* Set Flags */}\n            <Grid item xs={12} style={{textAlign: \"left\"}}>\n              <Paper style={{background: \"#f9f9f9\", padding: \"15px 15px\", textAlign: \"center\"}} elevation={0}>\n                <Typography style={{textAlign: \"left\",marginBottom: 12,}}>Scan Techniques</Typography>\n                {scanTechniquesData.map((data, index) => {\n                  const [opt, setOpt] = useState(false)\n\n                  return(\n                    <Tooltip title={data.tooltip} arrow placement=\"top\">\n                      <FormControlLabel\n                          value={opt}\n                          control={\n                              <Checkbox \n                                  color=\"primary\" \n                                  checked={opt}\n                                  onChange={(event: React.ChangeEvent<HTMLInputElement>)=> {\n                                    settingsStatus.setFlag(settingsStatus.flag + 1); \n                                    console.log(settingsStatus.flag);\n                                    setOpt(event.target.checked);\n                                    // settingsFlagsStatus.pushFlags()\n                                  }}\n                              />\n                          }\n                          label={data.flag}\n                          labelPlacement=\"end\"\n                      />\n                    </Tooltip>\n                  )\n                })}\n                <Divider variant=\"middle\" style={{marginTop: 10, marginBottom: 20,}}/>\n                \n                <Typography style={{textAlign: \"left\",marginBottom: 12,}}>Host Discovery</Typography>\n                {hostDiscovery.map((data, index) => {\n                    const [opt, setOpt] = useState(false)\n\n                  return(\n                    <Tooltip title={data.tooltip} arrow placement=\"top\">\n                      <FormControlLabel\n                          value={opt}\n                          control={\n                              <Checkbox \n                                  color=\"primary\" \n                                  checked={opt}\n                                  onChange={(event: React.ChangeEvent<HTMLInputElement>)=> {\n                                    settingsStatus.setFlag(settingsStatus.flag + 1); \n                                    console.log(settingsStatus.flag);\n                                    setOpt(event.target.checked);\n                                  }}\n                              />\n                          }\n                          label={data.flag}\n                          labelPlacement=\"end\"\n                      />\n                    </Tooltip>\n                  )\n                })}\n                <Divider variant=\"middle\" style={{marginTop: 10, marginBottom: 20,}}/>\n\n                <Typography style={{textAlign: \"left\",marginBottom: 12,}}>OS Detection</Typography>\n                {osDetection.map((data, index) => {\n                    const [opt, setOpt] = useState(false)\n\n                  return(\n                    <Tooltip title={data.tooltip} arrow placement=\"top\">\n                      <FormControlLabel\n                          value={opt}\n                          control={\n                              <Checkbox \n                                  color=\"primary\" \n                                  checked={opt}\n                                  onChange={(event: React.ChangeEvent<HTMLInputElement>)=> {\n                                    settingsStatus.setFlag(settingsStatus.flag + 1); \n                                    console.log(settingsStatus.flag);\n                                    setOpt(event.target.checked);\n                                  }}\n                              />\n                          }\n                          label={data.flag}\n                          labelPlacement=\"end\"\n                      />\n                    </Tooltip>\n                  )\n                })}\n                <Divider variant=\"middle\" style={{marginTop: 10, marginBottom: 20,}}/>\n\n                <Typography style={{textAlign: \"left\",marginBottom: 12,}}>Output</Typography>\n                {outputOpt.map((data, index) => {\n                    const [opt, setOpt] = useState(false)\n\n                  return(\n                    <Tooltip title={data.tooltip} arrow placement=\"top\">\n                      <FormControlLabel\n                          value={opt}\n                          control={\n                              <Checkbox \n                                  color=\"primary\" \n                                  checked={opt}\n                                  onChange={(event: React.ChangeEvent<HTMLInputElement>)=> {\n                                    settingsStatus.setFlag(settingsStatus.flag + 1); \n                                    console.log(settingsStatus.flag);\n                                    setOpt(event.target.checked);\n                                  }}\n                              />\n                          }\n                          label={data.flag}\n                          labelPlacement=\"end\"\n                      />\n                    </Tooltip>\n                  )\n                })}\n                <Divider variant=\"middle\" style={{marginTop: 10, marginBottom: 20,}}/>\n\n                <Typography style={{textAlign: \"left\",marginBottom: 12,}}>Port Specification</Typography>\n                {portSpecification.map((data, index) => {\n                    const [opt, setOpt] = useState(false)\n\n                  return(\n                    <Tooltip title={data.tooltip} arrow placement=\"top\">\n                      <FormControlLabel\n                          value={opt}\n                          control={\n                              <Checkbox \n                                  color=\"primary\" \n                                  checked={opt}\n                                  onChange={(event: React.ChangeEvent<HTMLInputElement>)=> {\n                                    settingsStatus.setFlag(settingsStatus.flag + 1); \n                                    console.log(settingsStatus.flag);\n                                    setOpt(event.target.checked);\n                                  }}\n                              />\n                          }\n                          label={data.flag}\n                          labelPlacement=\"end\"\n                      />\n                    </Tooltip>\n                  )\n                })}\n                <Divider variant=\"middle\" style={{marginTop: 10, marginBottom: 20,}}/>\n\n                <Typography style={{textAlign: \"left\",marginBottom: 12,}}>Service And Version Detectiony</Typography>\n                {serviceAndVersionDetectiony.map((data, index) => {\n                    const [opt, setOpt] = useState(false)\n\n                  return(\n                    <Tooltip title={data.tooltip} arrow placement=\"top\">\n                      <FormControlLabel\n                          value={opt}\n                          control={\n                              <Checkbox \n                                  color=\"primary\" \n                                  checked={opt}\n                                  onChange={(event: React.ChangeEvent<HTMLInputElement>)=> {\n                                    settingsStatus.setFlag(settingsStatus.flag + 1); \n                                    console.log(settingsStatus.flag);\n                                    setOpt(event.target.checked);\n                                  }}\n                              />\n                          }\n                          label={data.flag}\n                          labelPlacement=\"end\"\n                      />\n                    </Tooltip>\n                  )\n                })}\n                <Divider variant=\"middle\" style={{marginTop: 10, marginBottom: 20,}}/>\n                \n              </Paper>\n            </Grid>\n            {/* Others */}\n            <Grid item xs={6}>\n              <Paper style={{background: \"#f9f9f9\", padding: \"15px 15px\"}} elevation={0}>\n                <Tooltip title=\"When the system scan find out the result output as no host is alive, automation will allow the scan run again until there is at least one host is alive or all the hosts in desinated range is scanned.\" arrow placement=\"top\">\n                  <FormControlLabel\n                    label=\"Automation\"\n                    control={\n                      <Switch\n                        checked={others.automation}\n                        onChange={handleOthersChange}\n                        onClick={() => settingsStatus.setAuto(!settingsStatus.automation)}\n                        name=\"automation\"\n                        inputProps={{ 'aria-label': 'Automation' }}\n                      />\n                    }\n                  />\n                </Tooltip>\n              </Paper>\n            </Grid>\n            <Grid item xs={6}>\n              <Paper style={{background: \"#f9f9f9\", padding: \"15px 15px\"}} elevation={0}>\n                <FormControlLabel\n                  label=\"CVE Detection\"\n                  control={\n                    <Switch\n                      checked={others.cveDetect}\n                      onChange={handleOthersChange}\n                      onClick={() => settingsStatus.setCve(!settingsStatus.cve)}\n                      name=\"cveDetect\"\n                      inputProps={{ 'aria-label': 'CVE Detection' }}\n                    />\n                  }\n                />\n              </Paper>\n            </Grid>\n            <Grid item xs={6}>\n              <Paper style={{background: \"#f9f9f9\", padding: \"15px 15px\"}} elevation={0}>\n                <FormControlLabel\n                  label=\"Ping Block Bypassing\"\n                  control={\n                    <Switch\n                      checked={others.pn}\n                      onChange={handleOthersChange}\n                      onClick={() => settingsStatus.setPn(!settingsStatus.pn)}\n                      name=\"pn\"\n                      inputProps={{ 'aria-label': 'Ping Block Bypassing' }}\n                    />\n                  }\n                />\n              </Paper>\n            </Grid>\n            <Grid item xs={6}>\n              <Paper style={{background: \"#f9f9f9\", padding: \"15px 15px\"}} elevation={0}>\n                <FormControlLabel\n                  label=\"WhoIs\"\n                  control={\n                    <Switch\n                      checked={others.whoIs}\n                      onChange={handleOthersChange}\n                      onClick={() => settingsStatus.setWhoIs(!settingsStatus.whoIs)}\n                      name=\"whoIs\"\n                      disabled={\n                        /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.test(settingsStatus.target) === true ? true : false\n                      }\n                      inputProps={{ 'aria-label': 'WhoIs' }}\n                    />\n                  }\n                />\n              </Paper>\n            </Grid>\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleCancel} color=\"secondary\">\n            Cancel\n          </Button>\n          <Button onClick={handleClose} color=\"primary\" autoFocus>\n            Save\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n\n\n","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/HomeSettings/ScanRangeDisplay.tsx",["685","686","687"],"import React, {useState} from 'react';\nimport { createStyles, Theme, withStyles, WithStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Typography from '@material-ui/core/Typography';\n\n// Mobx\nimport homeSettingsStatus from '../../Mobx/Models/homeSettingsStatus'\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      margin: 0,\n      padding: theme.spacing(2),\n    },\n    closeButton: {\n      position: 'absolute',\n      right: theme.spacing(1),\n      top: theme.spacing(1),\n      color: theme.palette.grey[500],\n    },\n  });\n\nexport interface DialogTitleProps extends WithStyles<typeof styles> {\n  id: string;\n  children: React.ReactNode;\n  onClose: () => void;\n}\n\nconst DialogTitle = withStyles(styles)((props: DialogTitleProps) => {\n  const { children, classes, onClose, ...other } = props;\n  return (\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\n      <Typography variant=\"h6\">{children}</Typography>\n      {onClose ? (\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n    </MuiDialogTitle>\n  );\n});\n\nconst DialogContent = withStyles((theme: Theme) => ({\n  root: {\n    padding: theme.spacing(2),\n  },\n}))(MuiDialogContent);\n\nconst DialogActions = withStyles((theme: Theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(1),\n  },\n}))(MuiDialogActions);\n\nexport default () => {\n  const [open, setOpen] = useState(false);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const [setRange, setSetRange] = useState('')\n  const RangeCalc = () => {\n    var target = homeSettingsStatus.target;\n    var range  = homeSettingsStatus.range;\n    var subnet = target.split(\"/\").pop();\n    var s: number, e: number, xrange: number;\n\n    if(subnet === '24'){\n        s = 0; e = 256;\n    } else if(subnet === '25') {\n        s = 0; e = 128;\n    } else if(subnet === '26') {\n        s = 0; e = 64;\n    } else if(subnet === '27') {\n        s = 0; e = 32;\n    } else if(subnet === '28') {\n        s = 0; e = 16;\n    } else if(subnet === '29') {\n        s = 0; e = 8;\n    } else {\n        s = 0; e = 4;\n    }\n\n    s += 1;\n    e -= 2;\n    \n    range === 'every5hosts' ? xrange = 5 :\n    range === 'every10hosts' ? xrange = 10 :\n    range === 'every15hosts' ? xrange = 15 :\n    range === 'every20hosts' ? xrange = 20 : xrange = 404\n\n    // Calculation\n    var i;\n    var calced = target.substr(0, target.indexOf('.0')) + '.'; \n    if(range === 'evenOnly'){\n        for(i=s; i<=e; i++){\n            if(i % 2 === 0){// Get even number\n                calced += i + ',';\n            }\n        }\n    } else if(range === 'oddOnly') {\n        for(i=s; i<=e; i++){\n            if(i % 2 === 1){ // Get odd numbers\n                calced += i + ',';\n            }\n        }\n    } else if(range === 'every5hosts') {\n        for(i=s; i<=e; i++){\n            if(i % 5 === 1){ // Get every 5 hosts\n                calced += i + ',';\n            }\n        }\n    } else if(range === 'every10hosts') {\n        for(i=s; i<=e; i++){\n            if(i % 10 === 1){ // Get every 10 hosts\n                calced += i + ',';\n            }\n        }\n    } else if(range === 'every15hosts') {\n        for(i=s; i<=e; i++){\n            if(i % 15 === 1){ // Get every 15 hosts\n                calced += i + ',';\n            }\n        }\n    } else if(range === 'every20hosts') {\n        for(i=s; i<=e; i++){\n            if(i % 20 === 1){ // Get every 20 hosts\n                calced += i + ',';\n            }\n        }\n    }\n    \n    var output: any, exceeded: boolean = false;\n    var dotOneTarget: any = target.slice(0, -4) + '1' ;\n    if(s + e < xrange){\n        output = \"**For /\" + subnet + \", there's only \" + (s + e - 1) + ' hosts only.**'; \n        exceeded = true;\n        homeSettingsStatus.setRangeTarget(output)\n    } else {\n        output = calced.slice(0, -1);\n        exceeded = false;\n        homeSettingsStatus.setRangeTarget(output)\n    }\n\n    return(\n        <>\n            <Typography style={{whiteSpace: 'normal'}}>\n                {output}{exceeded === true ? <><br/><br/>{dotOneTarget}</> : null}\n            </Typography>\n        </>\n    )\n\n  }\n\n  return (\n    <div>\n        <Button \n            variant=\"outlined\" \n            style={{\n                width: \"100%\", \n                whiteSpace: \"nowrap\",\n            }}\n            onClick={handleClickOpen}\n            size=\"small\"\n            color=\"primary\"\n            disabled={homeSettingsStatus.range === '' || homeSettingsStatus.range === 'none' ? true : false}\n        >\n            Set Range:&nbsp;\n            {\n                homeSettingsStatus.range === '' ? 'none':\n                homeSettingsStatus.range === 'oddOnly' ?  'Odd Numbers Only' :\n                homeSettingsStatus.range === 'evenOnly' ?  'Even Numbers Only' :\n                homeSettingsStatus.range === 'every5hosts' ?  'Every 5 Hosts' :\n                homeSettingsStatus.range === 'every10hosts' ?  'Every 10 Hosts' :\n                homeSettingsStatus.range === 'every15hosts' ?  'Every 15 Hosts' : 'Every 20 Hosts'\n            }\n        </Button>\n      <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open} fullWidth maxWidth=\"sm\">\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n            Scan Range\n        </DialogTitle>\n        <DialogContent dividers>\n            <Grid container justify=\"center\" spacing={4}>\n                <Grid item xs={6} style={{textAlign: 'center'}}>\n                    <Paper style={{background: \"#f9f9f9\", padding: \"15px 15px\"}} elevation={0}>\n                        <Typography>\n                            {homeSettingsStatus.target}\n                        </Typography>\n                    </Paper>\n                </Grid>\n                <Grid item xs={6} style={{textAlign: 'center'}}>\n                    <Paper style={{background: \"#f9f9f9\", padding: \"15px 15px\"}} elevation={0}>\n                        <Typography>\n                            {\n                                homeSettingsStatus.range === '' ? 'none' :\n                                homeSettingsStatus.range === 'oddOnly' ?  'Odd Numbers Only' :\n                                homeSettingsStatus.range === 'evenOnly' ?  'Even Numbers Only' :\n                                homeSettingsStatus.range === 'every5hosts' ?  'Every 5 Hosts' :\n                                homeSettingsStatus.range === 'every10hosts' ?  'Every 10 Hosts' :\n                                homeSettingsStatus.range === 'every15hosts' ?  'Every 15 Hosts' : 'Every 20 Hosts'\n                            }\n                        </Typography>\n                    </Paper>\n                </Grid>\n                <Grid item xs={12} style={{textAlign: 'center'}}>\n                    <Paper style={{background: \"#f9f9f9\", padding: \"15px 15px\"}} elevation={0}>\n                        <RangeCalc />\n                    </Paper>\n                </Grid>\n            </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button autoFocus onClick={handleClose} color=\"primary\">\n            Save changes\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/Whatismyip.tsx",[],"/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/NewScanModeTab/Others.tsx",["688","689","690","691"],"import React from 'react';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Grid from '@material-ui/core/Grid';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport TextField from '@material-ui/core/TextField';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\n\nimport { Others } from './NewModeOptions'\n\nexport default function FormControlLabelPosition() {\n  return (\n    <>\n      <Grid container spacing={3}>\n        {Others.map((option) => (\n          <Grid item xs={12}>\n            <Tooltip title={option.tooltip} arrow placement=\"right\">\n              <FormControl component=\"fieldset\" style={{width: 450}}>\n                <FormControlLabel\n                  value={option.value}\n                  control={<Checkbox color=\"primary\" />}\n                  label={option.des}\n                  labelPlacement=\"end\"\n                />\n                {\n                  option.input === true ?\n                    <>\n                      <TextField \n                          label={`Example Input: ${option.egInput}`} \n                          margin=\"dense\" \n                          size=\"small\"\n                          variant=\"outlined\"\n                          style={{\n                            width: \"100%\",\n                            textAlignLast: \"center\",\n                          }}\n                      />\n                    </>\n                      :\n                    null\n                }\n              </FormControl>\n            </Tooltip>\n          </Grid>\n        ))}\n      </Grid>\n    </>\n  );\n}\n","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/NewScanModeTab/Timing.tsx",["692","693"],"import React from 'react';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Grid from '@material-ui/core/Grid';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport TextField from '@material-ui/core/TextField';\n\nimport { Timing } from './NewModeOptions'\n\nexport default function FormControlLabelPosition() {\n  return (\n    <>\n      <Grid container spacing={3}>\n        {Timing.map((option) => (\n          <Grid item xs={12}>\n            <Tooltip title={option.tooltip} arrow placement=\"right\">\n              <FormControl component=\"fieldset\" style={{width: 450}}>\n                <FormControlLabel\n                  value={option.value}\n                  control={<Checkbox color=\"primary\" />}\n                  label={option.des}\n                  labelPlacement=\"end\"\n                />\n                {\n                  option.input === true ?\n                    <>\n                      <TextField \n                          label={`Example Input: ${option.egInput}`} \n                          margin=\"dense\" \n                          size=\"small\"\n                          variant=\"outlined\"\n                          style={{\n                            width: \"100%\",\n                            textAlignLast: \"center\",\n                          }}\n                      />\n                    </>\n                      :\n                    null\n                }\n              </FormControl>\n            </Tooltip>\n          </Grid>\n        ))}\n      </Grid>\n    </>\n  );\n}\n","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/target.tsx",["694","695"],"import { automation, cveDetection } from './HomeSettings/homeSettingsData'\n\nexport const targetTime: string[] = [];\nexport const scanTarget: string[] = [];\nexport const targetData = [\n    {\n        target: \"\",\n        value: \"\",\n        time: \"\",\n        scanMode: \"\",\n        scanDate: \"\",\n        id: \"\",\n        setRange: \"\",\n        auto: false,\n        cve: false,\n    }\n];\n\nexport const chosenMode: string[] = [];\nexport const scanDate: any[] = [];\n\n","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Backend/frontendData/cveScanOutput.tsx",[],"/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Backend/frontendData/whoisScan.tsx",[],"/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Backend/frontendData/Result.tsx",[],"/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/NewScanModeTab/NewModeOptions.tsx",[],"/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/NewScanModeTab/Source.tsx",["696","697"],"import React from 'react';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Grid from '@material-ui/core/Grid';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport TextField from '@material-ui/core/TextField';\n\nimport { Source } from './NewModeOptions'\n\nexport default function FormControlLabelPosition() {\n  return (\n    <>\n      <Grid container spacing={3}>\n        {Source.map((option) => (\n          <Grid item xs={12}>\n            <Tooltip title={option.tooltip} arrow placement=\"right\">\n              <FormControl component=\"fieldset\" style={{width: 450}}>\n                <FormControlLabel\n                  value={option.value}\n                  control={<Checkbox color=\"primary\" />}\n                  label={option.des}\n                  labelPlacement=\"end\"\n                />\n                {\n                  option.input === true ?\n                    <>\n                      <TextField \n                          label={`Example Input: ${option.egInput}`} \n                          margin=\"dense\" \n                          size=\"small\"\n                          variant=\"outlined\"\n                          style={{\n                            width: \"100%\",\n                            textAlignLast: \"center\",\n                          }}\n                      />\n                    </>\n                      :\n                    null\n                }\n              </FormControl>\n            </Tooltip>\n          </Grid>\n        ))}\n      </Grid>\n    </>\n  );\n}\n","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/NewScanModeTab/Target.tsx",["698","699","700"],"import React from 'react';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Divider from '@material-ui/core/Divider';\nimport Grid from '@material-ui/core/Grid';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport TextField from '@material-ui/core/TextField';\n\nimport { Target } from './NewModeOptions'\n\nexport default function FormControlLabelPosition() {\n  return (\n    <>\n      <Grid container spacing={3}>\n        {Target.map((option) => (\n          <Grid item xs={12}>\n            <Tooltip title={option.tooltip} arrow placement=\"right\">\n              <FormControl component=\"fieldset\" style={{width: 450}}>\n                <FormControlLabel\n                  value={option.value}\n                  control={<Checkbox color=\"primary\" />}\n                  label={option.des}\n                  labelPlacement=\"end\"\n                />\n                {\n                  option.input === true ?\n                    <>\n                      <TextField \n                          label={`Example Input: ${option.egInput}`} \n                          margin=\"dense\" \n                          size=\"small\"\n                          variant=\"outlined\"\n                          style={{\n                            width: \"100%\",\n                            textAlignLast: \"center\",\n                          }}\n                      />\n                    </>\n                      :\n                    null\n                }\n              </FormControl>\n            </Tooltip>\n          </Grid>\n        ))}\n      </Grid>\n    </>\n  );\n}\n","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/NewScanModeTab/NSE.tsx",["701","702","703","704","705","706","707","708","709","710","711","712","713","714","715","716","717","718","719","720","721","722","723","724","725","726","727","728","729","730","731","732","733","734","735"],"import React from 'react';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Collapse from '@material-ui/core/Collapse';\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\nimport DraftsIcon from '@material-ui/icons/Drafts';\nimport SendIcon from '@material-ui/icons/Send';\nimport DynamicFeedIcon from '@material-ui/icons/DynamicFeed';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport StarBorder from '@material-ui/icons/StarBorder';\nimport ExtensionIcon from '@material-ui/icons/ExtensionOutlined';\nimport AccountTreeOutlinedIcon from '@material-ui/icons/AccountTreeOutlined';\n\nimport DiscoveryBroadcast from './nseData/Discovery/Broadcast'\nimport DiscoveryDatabase from './nseData/Discovery/Database'\nimport DiscoveryHTTP from './nseData/Discovery/HTTP'\nimport DiscoveryIP from './nseData/Discovery/IP'\nimport DiscoveryHadoop from './nseData/Discovery/Hadoop'\nimport DiscoveryNetwork from './nseData/Discovery/Network'\nimport DiscoveryServerMessageBlock from './nseData/Discovery/ServerMessageBlock'\nimport DiscoveryServer from './nseData/Discovery/Server'\nimport DiscoverySMTP from './nseData/Discovery/SMTP'\nimport DiscoveryTargets from './nseData/Discovery/Targets'\n\nimport ExploitFTP from './nseData/Exploit/FTP'\nimport ExploitHTTP from './nseData/Exploit/HTTP'\nimport ExploitOthers from './nseData/Exploit/Others'\nimport ExploitSMB from './nseData/Exploit/SMB'\n\nimport VulnFTP from './nseData/Vulnerability/FTP'\nimport VulnHTTP from './nseData/Vulnerability/HTTP'\nimport VulnOthers from './nseData/Vulnerability/Others'\nimport VulnSMB from './nseData/Vulnerability/SMB'\nimport VulnSSL from './nseData/Vulnerability/SSL'\n\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      width: '100%',\n      backgroundColor: theme.palette.background.paper,\n    },\n    nested: {\n      paddingLeft: theme.spacing(4),\n    },\n  }),\n);\n\nconst menuItem = [\n    {\n        cateName: \"Discovery\",\n        handle: \"handleDiscovery\",\n        subItem: [\n            \"Broadcast\", \"Database\", \"Hadoop\", \"HTTP\", \"IP\", \n            \"Network\", \"Server Message Block\", \"Server\", \"SMTP\", \"Others\", \n        ],        \n    },\n    {\n        cateName: \"Exploit\",\n        handle: \"handleExploit\",\n        subItem: [\n            \"FTP\", \"HTTP\", \"SMB\", \"Others\", \n        ],        \n    },\n    {\n        cateName: \"Vulnerability\",\n        handle: \"handleVulnerability\",\n        subItem: [\n            \"FTP\", \"HTTP\", \"SMB\", \"SSL\", \"Others\",\n        ],        \n    },\n]\n\nexport default function NestedList() {\n  const classes = useStyles();\n  const [Discovery, setDiscovery] = React.useState(false);\n\n  const handleDiscovery = () => {\n    setDiscovery(!Discovery);\n\n    if( Exploit == true ){\n        setExploit(false)\n    }\n    if( Vulnerability == true ){\n        setVulnerability(false)\n    }\n  };\n\n  const [Exploit, setExploit] = React.useState(false);\n\n  const handleExploit = () => {\n    setExploit(!Exploit);\n    \n    if( Discovery == true ){\n        setDiscovery(false)\n    }\n    if( Vulnerability == true ){\n        setVulnerability(false)\n    }\n  };\n\n  const [Vulnerability, setVulnerability] = React.useState(false);\n\n  const handleVulnerability = () => {\n    setVulnerability(!Vulnerability);\n     \n    if( Discovery == true ){\n        setDiscovery(false)\n    }\n    if( Exploit == true ){\n        setExploit(false)\n    }\n  };\n\n  return (\n    <List\n      component=\"nav\"\n      aria-labelledby=\"nested-list-subheader\"\n      className={classes.root}\n    >\n      {menuItem.map((obj) => (\n         obj.cateName == \"Discovery\" ?\n            <>\n                <ListItem button onClick={handleDiscovery}>\n                    <ListItemIcon>\n                        <AccountTreeOutlinedIcon />\n                    </ListItemIcon>\n                    <ListItemText primary={obj.cateName} />\n                    {Discovery ? <ExpandLess /> : <ExpandMore />}\n                </ListItem>\n                <Collapse in={Discovery} timeout=\"auto\" unmountOnExit>\n                    {obj.subItem.map((subObj) => (\n                        <List component=\"div\" disablePadding>\n                            {\n                                subObj == \"Broadcast\" ? <DiscoveryBroadcast /> : \n                                    subObj == \"Database\" ? <DiscoveryDatabase /> : \n                                        subObj == \"Hadoop\" ? <DiscoveryHadoop /> : \n                                            subObj == \"HTTP\" ? <DiscoveryHTTP /> : \n                                                subObj == \"IP\" ? <DiscoveryIP /> : \n                                                subObj == \"Network\" ? <DiscoveryNetwork /> : \n                                            subObj == \"Server Message Block\" ? <DiscoveryServerMessageBlock /> : \n                                        subObj == \"Server\" ? <DiscoveryServer /> : \n                                    subObj == \"SMTP\" ? <DiscoverySMTP /> : \n                                subObj == \"Targets\" ? <DiscoveryTargets /> : null\n                            }\n                        </List>\n                    ))}\n                    \n                </Collapse>\n            </>\n            :\n        obj.cateName == \"Exploit\" ?\n            <>\n                <ListItem button onClick={handleExploit}>\n                    <ListItemIcon>\n                        <AccountTreeOutlinedIcon />\n                    </ListItemIcon>\n                    <ListItemText primary={obj.cateName} />\n                    {Exploit ? <ExpandLess /> : <ExpandMore />}\n                </ListItem>\n                <Collapse in={Exploit} timeout=\"auto\" unmountOnExit>\n                    {obj.subItem.map((subObj) => (\n                        <List component=\"div\" disablePadding>\n                            {\n                                subObj == \"FTP\" ? <ExploitFTP /> : \n                                    subObj == \"HTTP\" ? <ExploitHTTP /> :\n                                        subObj == \"Others\" ? <ExploitOthers /> :\n                                            subObj == \"SMB\" ? <ExploitSMB /> : null\n                            }\n                        </List>\n                    ))}\n                    \n                </Collapse>\n            </>\n            :\n        obj.cateName == \"Vulnerability\" ?\n            <>\n                <ListItem button onClick={handleVulnerability}>\n                    <ListItemIcon>\n                        <AccountTreeOutlinedIcon />\n                    </ListItemIcon>\n                    <ListItemText primary={obj.cateName} />\n                    {Vulnerability ? <ExpandLess /> : <ExpandMore />}\n                </ListItem>\n                <Collapse in={Vulnerability} timeout=\"auto\" unmountOnExit>\n                    {obj.subItem.map((subObj) => (\n                        <List component=\"div\" disablePadding>\n                            {\n                                subObj == \"FTP\" ? <VulnFTP /> : \n                                    subObj == \"HTTP\" ? <VulnHTTP /> :\n                                        subObj == \"Others\" ? <VulnOthers /> :\n                                    subObj == \"SMB\" ? <VulnSMB /> :\n                                subObj == \"SSL\" ? <VulnSSL /> : null\n                            }\n                        </List>\n                    ))}\n                    \n                </Collapse>\n            </>\n            :\n            null\n      ))}\n      \n    </List>\n  );\n}\n","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/NewScanModeTab/Ping.tsx",["736","737"],"import React from 'react';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Grid from '@material-ui/core/Grid';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport TextField from '@material-ui/core/TextField';\n\nimport { Ping } from './NewModeOptions'\n\nexport default function FormControlLabelPosition() {\n  return (\n    <>\n      <Grid container spacing={3}>\n        {Ping.map((option) => (\n          <Grid item xs={12}>\n            <Tooltip title={option.tooltip} arrow placement=\"right\">\n              <FormControl component=\"fieldset\" style={{width: 450}}>\n                <FormControlLabel\n                  value={option.value}\n                  control={<Checkbox color=\"primary\" />}\n                  label={option.des}\n                  labelPlacement=\"end\"\n                />\n                {\n                  option.input === true ?\n                    <>\n                      <TextField \n                          label={`Example Input: ${option.egInput}`} \n                          margin=\"dense\" \n                          size=\"small\"\n                          variant=\"outlined\"\n                          style={{\n                            width: \"100%\",\n                            textAlignLast: \"center\",\n                          }}\n                      />\n                    </>\n                      :\n                    null\n                }\n              </FormControl>\n            </Tooltip>\n          </Grid>\n        ))}\n      </Grid>\n    </>\n  );\n}\n","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/nonTCPoptions.tsx",[],"/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/TCPoptions.tsx",[],"/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/NewScanModeTab/nseData/Discovery/Broadcast.tsx",["738","739"],"import React from 'react';\nimport { createStyles, Theme, withStyles, WithStyles, makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ExtensionIcon from '@material-ui/icons/ExtensionOutlined';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Grid from '@material-ui/core/Grid';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox, { CheckboxProps } from '@material-ui/core/Checkbox';\n\nimport Typography from '@material-ui/core/Typography';\nimport Separator from '@material-ui/icons/ArrowRightOutlined';\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\n\n// NSE Options\nimport NSEoption from './json/Broadcast.json'\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      margin: 0,\n      padding: theme.spacing(2),\n    },\n    closeButton: {\n      position: 'absolute',\n      right: theme.spacing(1),\n      top: theme.spacing(1),\n      color: theme.palette.grey[500],\n    },\n  });\n\nexport interface DialogTitleProps extends WithStyles<typeof styles> {\n  id: string;\n  children: React.ReactNode;\n  onClose: () => void;\n}\n\nconst DialogTitle = withStyles(styles)((props: DialogTitleProps) => {\n  const { children, classes, onClose, ...other } = props;\n  return (\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\n      <Typography variant=\"h6\">{children}</Typography>\n      {onClose ? (\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n    </MuiDialogTitle>\n  );\n});\n\nconst DialogContent = withStyles((theme: Theme) => ({\n  root: {\n    padding: theme.spacing(2),\n  },\n}))(MuiDialogContent);\n\nconst DialogActions = withStyles((theme: Theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(1),\n  },\n}))(MuiDialogActions);\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    nested: {\n      paddingLeft: theme.spacing(4),\n    },\n  }),\n);\n\nfunction handleClick(event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) {\n    event.preventDefault();\n    console.info('You clicked a breadcrumb.');\n  }\n  \n  function Breadcrumb() {\n    return (\n      <Breadcrumbs separator={<Separator />} >\n        <Typography color=\"textPrimary\">NSE</Typography>\n        <Typography color=\"textPrimary\">Discovery</Typography>\n        <Typography color=\"primary\" style={{fontWeight: \"bold\"}}>Broadcast</Typography>\n      </Breadcrumbs>\n    );\n  }\n\nexport default function CustomizedDialogs() {\n  const [open, setOpen] = React.useState(false);\n  const classes = useStyles();\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div>\n      <ListItem button className={classes.nested} onClick={handleClickOpen}>\n        <ListItemIcon>\n            <ExtensionIcon />\n        </ListItemIcon>\n        <ListItemText>Broadcast</ListItemText>\n    </ListItem>\n      <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n          <Breadcrumb />\n        </DialogTitle>\n        <DialogContent dividers>\n          <Grid container justify=\"center\" spacing={3}>\n              {NSEoption.map((option) => (\n                <Grid item xs={6}>\n                    <Tooltip arrow placement=\"top\" title={option.des}>\n                        <FormControlLabel\n                            value={option.id}\n                            control={<Checkbox color=\"primary\" />}\n                            label={option.id}\n                            labelPlacement=\"end\"\n                        />\n                    </Tooltip>\n                </Grid>\n              ))}\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button autoFocus onClick={handleClose} color=\"primary\">\n            Save changes\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/NewScanModeTab/nseData/Discovery/IP.tsx",["740","741"],"import React from 'react';\nimport { createStyles, Theme, withStyles, WithStyles, makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ExtensionIcon from '@material-ui/icons/ExtensionOutlined';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Grid from '@material-ui/core/Grid';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox, { CheckboxProps } from '@material-ui/core/Checkbox';\n\nimport Typography from '@material-ui/core/Typography';\nimport Separator from '@material-ui/icons/ArrowRightOutlined';\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\n\n// NSE Options\nimport NSEoption from './json/IP.json'\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      margin: 0,\n      padding: theme.spacing(2),\n    },\n    closeButton: {\n      position: 'absolute',\n      right: theme.spacing(1),\n      top: theme.spacing(1),\n      color: theme.palette.grey[500],\n    },\n  });\n\nexport interface DialogTitleProps extends WithStyles<typeof styles> {\n  id: string;\n  children: React.ReactNode;\n  onClose: () => void;\n}\n\nconst DialogTitle = withStyles(styles)((props: DialogTitleProps) => {\n  const { children, classes, onClose, ...other } = props;\n  return (\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\n      <Typography variant=\"h6\">{children}</Typography>\n      {onClose ? (\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n    </MuiDialogTitle>\n  );\n});\n\nconst DialogContent = withStyles((theme: Theme) => ({\n  root: {\n    padding: theme.spacing(2),\n  },\n}))(MuiDialogContent);\n\nconst DialogActions = withStyles((theme: Theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(1),\n  },\n}))(MuiDialogActions);\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    nested: {\n      paddingLeft: theme.spacing(4),\n    },\n  }),\n);\n\nfunction handleClick(event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) {\n    event.preventDefault();\n    console.info('You clicked a breadcrumb.');\n  }\n  \n  function Breadcrumb() {\n    return (\n      <Breadcrumbs separator={<Separator />} >\n        <Typography color=\"textPrimary\">NSE</Typography>\n        <Typography color=\"textPrimary\">Discovery</Typography>\n        <Typography color=\"primary\" style={{fontWeight: \"bold\"}}>IP</Typography>\n      </Breadcrumbs>\n    );\n  }\n\nexport default function CustomizedDialogs() {\n  const [open, setOpen] = React.useState(false);\n  const classes = useStyles();\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div>\n      <ListItem button className={classes.nested} onClick={handleClickOpen}>\n        <ListItemIcon>\n            <ExtensionIcon />\n        </ListItemIcon>\n        <ListItemText>IP</ListItemText>\n    </ListItem>\n      <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n          <Breadcrumb />\n        </DialogTitle>\n        <DialogContent dividers>\n          <Grid container justify=\"center\" spacing={3}>\n              {NSEoption.map((option) => (\n                <Grid item xs={6}>\n                    <Tooltip arrow placement=\"top\" title={option.des}>\n                        <FormControlLabel\n                            value={option.id}\n                            control={<Checkbox color=\"primary\" />}\n                            label={option.id}\n                            labelPlacement=\"end\"\n                        />\n                    </Tooltip>\n                </Grid>\n              ))}\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button autoFocus onClick={handleClose} color=\"primary\">\n            Save changes\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/NewScanModeTab/nseData/Discovery/Server.tsx",["742","743"],"import React from 'react';\nimport { createStyles, Theme, withStyles, WithStyles, makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ExtensionIcon from '@material-ui/icons/ExtensionOutlined';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Grid from '@material-ui/core/Grid';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox, { CheckboxProps } from '@material-ui/core/Checkbox';\n\nimport Typography from '@material-ui/core/Typography';\nimport Separator from '@material-ui/icons/ArrowRightOutlined';\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\n\n// NSE Options\nimport NSEoption from './json/Server.json'\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      margin: 0,\n      padding: theme.spacing(2),\n    },\n    closeButton: {\n      position: 'absolute',\n      right: theme.spacing(1),\n      top: theme.spacing(1),\n      color: theme.palette.grey[500],\n    },\n  });\n\nexport interface DialogTitleProps extends WithStyles<typeof styles> {\n  id: string;\n  children: React.ReactNode;\n  onClose: () => void;\n}\n\nconst DialogTitle = withStyles(styles)((props: DialogTitleProps) => {\n  const { children, classes, onClose, ...other } = props;\n  return (\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\n      <Typography variant=\"h6\">{children}</Typography>\n      {onClose ? (\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n    </MuiDialogTitle>\n  );\n});\n\nconst DialogContent = withStyles((theme: Theme) => ({\n  root: {\n    padding: theme.spacing(2),\n  },\n}))(MuiDialogContent);\n\nconst DialogActions = withStyles((theme: Theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(1),\n  },\n}))(MuiDialogActions);\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    nested: {\n      paddingLeft: theme.spacing(4),\n    },\n  }),\n);\n\nfunction handleClick(event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) {\n    event.preventDefault();\n    console.info('You clicked a breadcrumb.');\n  }\n  \n  function Breadcrumb() {\n    return (\n      <Breadcrumbs separator={<Separator />} >\n        <Typography color=\"textPrimary\">NSE</Typography>\n        <Typography color=\"textPrimary\">Discovery</Typography>\n        <Typography color=\"primary\" style={{fontWeight: \"bold\"}}>Server</Typography>\n      </Breadcrumbs>\n    );\n  }\n\nexport default function CustomizedDialogs() {\n  const [open, setOpen] = React.useState(false);\n  const classes = useStyles();\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div>\n      <ListItem button className={classes.nested} onClick={handleClickOpen}>\n        <ListItemIcon>\n            <ExtensionIcon />\n        </ListItemIcon>\n        <ListItemText>Server</ListItemText>\n    </ListItem>\n      <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n          <Breadcrumb />\n        </DialogTitle>\n        <DialogContent dividers>\n          <Grid container justify=\"center\" spacing={3}>\n              {NSEoption.map((option) => (\n                <Grid item xs={6}>\n                    <Tooltip arrow placement=\"top\" title={option.des}>\n                        <FormControlLabel\n                            value={option.id}\n                            control={<Checkbox color=\"primary\" />}\n                            label={option.id}\n                            labelPlacement=\"end\"\n                        />\n                    </Tooltip>\n                </Grid>\n              ))}\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button autoFocus onClick={handleClose} color=\"primary\">\n            Save changes\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/NewScanModeTab/nseData/Discovery/Database.tsx",["744","745"],"import React from 'react';\nimport { createStyles, Theme, withStyles, WithStyles, makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ExtensionIcon from '@material-ui/icons/ExtensionOutlined';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Grid from '@material-ui/core/Grid';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox, { CheckboxProps } from '@material-ui/core/Checkbox';\n\nimport Typography from '@material-ui/core/Typography';\nimport Separator from '@material-ui/icons/ArrowRightOutlined';\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\n\n// NSE Options\nimport NSEoption from './json/Database.json'\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      margin: 0,\n      padding: theme.spacing(2),\n    },\n    closeButton: {\n      position: 'absolute',\n      right: theme.spacing(1),\n      top: theme.spacing(1),\n      color: theme.palette.grey[500],\n    },\n  });\n\nexport interface DialogTitleProps extends WithStyles<typeof styles> {\n  id: string;\n  children: React.ReactNode;\n  onClose: () => void;\n}\n\nconst DialogTitle = withStyles(styles)((props: DialogTitleProps) => {\n  const { children, classes, onClose, ...other } = props;\n  return (\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\n      <Typography variant=\"h6\">{children}</Typography>\n      {onClose ? (\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n    </MuiDialogTitle>\n  );\n});\n\nconst DialogContent = withStyles((theme: Theme) => ({\n  root: {\n    padding: theme.spacing(2),\n  },\n}))(MuiDialogContent);\n\nconst DialogActions = withStyles((theme: Theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(1),\n  },\n}))(MuiDialogActions);\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    nested: {\n      paddingLeft: theme.spacing(4),\n    },\n  }),\n);\n\nfunction handleClick(event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) {\n    event.preventDefault();\n    console.info('You clicked a breadcrumb.');\n  }\n  \n  function Breadcrumb() {\n    return (\n      <Breadcrumbs separator={<Separator />} >\n        <Typography color=\"textPrimary\">NSE</Typography>\n        <Typography color=\"textPrimary\">Discovery</Typography>\n        <Typography color=\"primary\" style={{fontWeight: \"bold\"}}>Database</Typography>\n      </Breadcrumbs>\n    );\n  }\n\nexport default function CustomizedDialogs() {\n  const [open, setOpen] = React.useState(false);\n  const classes = useStyles();\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div>\n      <ListItem button className={classes.nested} onClick={handleClickOpen}>\n        <ListItemIcon>\n            <ExtensionIcon />\n        </ListItemIcon>\n        <ListItemText>Database</ListItemText>\n    </ListItem>\n      <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n          <Breadcrumb />\n        </DialogTitle>\n        <DialogContent dividers>\n          <Grid container justify=\"center\" spacing={3}>\n              {NSEoption.map((option) => (\n                <Grid item xs={6}>\n                    <Tooltip arrow placement=\"top\" title={option.des}>\n                        <FormControlLabel\n                            value={option.id}\n                            control={<Checkbox color=\"primary\" />}\n                            label={option.id}\n                            labelPlacement=\"end\"\n                        />\n                    </Tooltip>\n                </Grid>\n              ))}\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button autoFocus onClick={handleClose} color=\"primary\">\n            Save changes\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/NewScanModeTab/nseData/Discovery/ServerMessageBlock.tsx",["746","747"],"import React from 'react';\nimport { createStyles, Theme, withStyles, WithStyles, makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ExtensionIcon from '@material-ui/icons/ExtensionOutlined';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Grid from '@material-ui/core/Grid';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox, { CheckboxProps } from '@material-ui/core/Checkbox';\n\nimport Typography from '@material-ui/core/Typography';\nimport Separator from '@material-ui/icons/ArrowRightOutlined';\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\n\n// NSE Options\nimport NSEoption from './json/ServerMessageBlock.json'\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      margin: 0,\n      padding: theme.spacing(2),\n    },\n    closeButton: {\n      position: 'absolute',\n      right: theme.spacing(1),\n      top: theme.spacing(1),\n      color: theme.palette.grey[500],\n    },\n  });\n\nexport interface DialogTitleProps extends WithStyles<typeof styles> {\n  id: string;\n  children: React.ReactNode;\n  onClose: () => void;\n}\n\nconst DialogTitle = withStyles(styles)((props: DialogTitleProps) => {\n  const { children, classes, onClose, ...other } = props;\n  return (\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\n      <Typography variant=\"h6\">{children}</Typography>\n      {onClose ? (\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n    </MuiDialogTitle>\n  );\n});\n\nconst DialogContent = withStyles((theme: Theme) => ({\n  root: {\n    padding: theme.spacing(2),\n  },\n}))(MuiDialogContent);\n\nconst DialogActions = withStyles((theme: Theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(1),\n  },\n}))(MuiDialogActions);\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    nested: {\n      paddingLeft: theme.spacing(4),\n    },\n  }),\n);\n\nfunction handleClick(event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) {\n    event.preventDefault();\n    console.info('You clicked a breadcrumb.');\n  }\n  \n  function Breadcrumb() {\n    return (\n      <Breadcrumbs separator={<Separator />} >\n        <Typography color=\"textPrimary\">NSE</Typography>\n        <Typography color=\"textPrimary\">Discovery</Typography>\n        <Typography color=\"primary\" style={{fontWeight: \"bold\"}}>Server Message Block</Typography>\n      </Breadcrumbs>\n    );\n  }\n\nexport default function CustomizedDialogs() {\n  const [open, setOpen] = React.useState(false);\n  const classes = useStyles();\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div>\n      <ListItem button className={classes.nested} onClick={handleClickOpen}>\n        <ListItemIcon>\n            <ExtensionIcon />\n        </ListItemIcon>\n        <ListItemText>ServerMessageBlock</ListItemText>\n    </ListItem>\n      <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n          <Breadcrumb />\n        </DialogTitle>\n        <DialogContent dividers>\n          <Grid container justify=\"center\" spacing={3}>\n              {NSEoption.map((option) => (\n                <Grid item xs={6}>\n                    <Tooltip arrow placement=\"top\" title={option.des}>\n                        <FormControlLabel\n                            value={option.id}\n                            control={<Checkbox color=\"primary\" />}\n                            label={option.id}\n                            labelPlacement=\"end\"\n                        />\n                    </Tooltip>\n                </Grid>\n              ))}\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button autoFocus onClick={handleClose} color=\"primary\">\n            Save changes\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/NewScanModeTab/nseData/Discovery/Targets.tsx",["748","749"],"import React from 'react';\nimport { createStyles, Theme, withStyles, WithStyles, makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ExtensionIcon from '@material-ui/icons/ExtensionOutlined';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Grid from '@material-ui/core/Grid';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox, { CheckboxProps } from '@material-ui/core/Checkbox';\n\nimport Typography from '@material-ui/core/Typography';\nimport Separator from '@material-ui/icons/ArrowRightOutlined';\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\n\n// NSE Options\nimport NSEoption from './json/Targets.json'\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      margin: 0,\n      padding: theme.spacing(2),\n    },\n    closeButton: {\n      position: 'absolute',\n      right: theme.spacing(1),\n      top: theme.spacing(1),\n      color: theme.palette.grey[500],\n    },\n  });\n\nexport interface DialogTitleProps extends WithStyles<typeof styles> {\n  id: string;\n  children: React.ReactNode;\n  onClose: () => void;\n}\n\nconst DialogTitle = withStyles(styles)((props: DialogTitleProps) => {\n  const { children, classes, onClose, ...other } = props;\n  return (\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\n      <Typography variant=\"h6\">{children}</Typography>\n      {onClose ? (\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n    </MuiDialogTitle>\n  );\n});\n\nconst DialogContent = withStyles((theme: Theme) => ({\n  root: {\n    padding: theme.spacing(2),\n  },\n}))(MuiDialogContent);\n\nconst DialogActions = withStyles((theme: Theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(1),\n  },\n}))(MuiDialogActions);\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    nested: {\n      paddingLeft: theme.spacing(4),\n    },\n  }),\n);\n\nfunction handleClick(event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) {\n    event.preventDefault();\n    console.info('You clicked a breadcrumb.');\n  }\n  \n  function Breadcrumb() {\n    return (\n      <Breadcrumbs separator={<Separator />} >\n        <Typography color=\"textPrimary\">NSE</Typography>\n        <Typography color=\"textPrimary\">Discovery</Typography>\n        <Typography color=\"primary\" style={{fontWeight: \"bold\"}}>Targets</Typography>\n      </Breadcrumbs>\n    );\n  }\n\nexport default function CustomizedDialogs() {\n  const [open, setOpen] = React.useState(false);\n  const classes = useStyles();\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div>\n      <ListItem button className={classes.nested} onClick={handleClickOpen}>\n        <ListItemIcon>\n            <ExtensionIcon />\n        </ListItemIcon>\n        <ListItemText>Targets</ListItemText>\n    </ListItem>\n      <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n          <Breadcrumb />\n        </DialogTitle>\n        <DialogContent dividers>\n          <Grid container justify=\"center\" spacing={3}>\n              {NSEoption.map((option) => (\n                <Grid item xs={6}>\n                    <Tooltip arrow placement=\"top\" title={option.des}>\n                        <FormControlLabel\n                            value={option.id}\n                            control={<Checkbox color=\"primary\" />}\n                            label={option.id}\n                            labelPlacement=\"end\"\n                        />\n                    </Tooltip>\n                </Grid>\n              ))}\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button autoFocus onClick={handleClose} color=\"primary\">\n            Save changes\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/NewScanModeTab/nseData/Discovery/SMTP.tsx",["750","751"],"import React from 'react';\nimport { createStyles, Theme, withStyles, WithStyles, makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ExtensionIcon from '@material-ui/icons/ExtensionOutlined';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Grid from '@material-ui/core/Grid';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox, { CheckboxProps } from '@material-ui/core/Checkbox';\n\nimport Typography from '@material-ui/core/Typography';\nimport Separator from '@material-ui/icons/ArrowRightOutlined';\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\n\n// NSE Options\nimport NSEoption from './json/SMTP.json'\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      margin: 0,\n      padding: theme.spacing(2),\n    },\n    closeButton: {\n      position: 'absolute',\n      right: theme.spacing(1),\n      top: theme.spacing(1),\n      color: theme.palette.grey[500],\n    },\n  });\n\nexport interface DialogTitleProps extends WithStyles<typeof styles> {\n  id: string;\n  children: React.ReactNode;\n  onClose: () => void;\n}\n\nconst DialogTitle = withStyles(styles)((props: DialogTitleProps) => {\n  const { children, classes, onClose, ...other } = props;\n  return (\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\n      <Typography variant=\"h6\">{children}</Typography>\n      {onClose ? (\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n    </MuiDialogTitle>\n  );\n});\n\nconst DialogContent = withStyles((theme: Theme) => ({\n  root: {\n    padding: theme.spacing(2),\n  },\n}))(MuiDialogContent);\n\nconst DialogActions = withStyles((theme: Theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(1),\n  },\n}))(MuiDialogActions);\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    nested: {\n      paddingLeft: theme.spacing(4),\n    },\n  }),\n);\n\nfunction handleClick(event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) {\n    event.preventDefault();\n    console.info('You clicked a breadcrumb.');\n  }\n  \n  function Breadcrumb() {\n    return (\n      <Breadcrumbs separator={<Separator />} >\n        <Typography color=\"textPrimary\">NSE</Typography>\n        <Typography color=\"textPrimary\">Discovery</Typography>\n        <Typography color=\"primary\" style={{fontWeight: \"bold\"}}>SMTP</Typography>\n      </Breadcrumbs>\n    );\n  }\n\nexport default function CustomizedDialogs() {\n  const [open, setOpen] = React.useState(false);\n  const classes = useStyles();\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div>\n      <ListItem button className={classes.nested} onClick={handleClickOpen}>\n        <ListItemIcon>\n            <ExtensionIcon />\n        </ListItemIcon>\n        <ListItemText>SMTP</ListItemText>\n    </ListItem>\n      <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n          <Breadcrumb />\n        </DialogTitle>\n        <DialogContent dividers>\n          <Grid container justify=\"center\" spacing={3}>\n              {NSEoption.map((option) => (\n                <Grid item xs={6}>\n                    <Tooltip arrow placement=\"top\" title={option.des}>\n                        <FormControlLabel\n                            value={option.id}\n                            control={<Checkbox color=\"primary\" />}\n                            label={option.id}\n                            labelPlacement=\"end\"\n                        />\n                    </Tooltip>\n                </Grid>\n              ))}\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button autoFocus onClick={handleClose} color=\"primary\">\n            Save changes\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/NewScanModeTab/nseData/Exploit/HTTP.tsx",["752","753"],"import React from 'react';\nimport { createStyles, Theme, withStyles, WithStyles, makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ExtensionIcon from '@material-ui/icons/ExtensionOutlined';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Grid from '@material-ui/core/Grid';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox, { CheckboxProps } from '@material-ui/core/Checkbox';\n\nimport Typography from '@material-ui/core/Typography';\nimport Separator from '@material-ui/icons/ArrowRightOutlined';\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\n\n// NSE Options\nimport NSEoption from './json/HTTP.json'\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      margin: 0,\n      padding: theme.spacing(2),\n    },\n    closeButton: {\n      position: 'absolute',\n      right: theme.spacing(1),\n      top: theme.spacing(1),\n      color: theme.palette.grey[500],\n    },\n  });\n\nexport interface DialogTitleProps extends WithStyles<typeof styles> {\n  id: string;\n  children: React.ReactNode;\n  onClose: () => void;\n}\n\nconst DialogTitle = withStyles(styles)((props: DialogTitleProps) => {\n  const { children, classes, onClose, ...other } = props;\n  return (\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\n      <Typography variant=\"h6\">{children}</Typography>\n      {onClose ? (\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n    </MuiDialogTitle>\n  );\n});\n\nconst DialogContent = withStyles((theme: Theme) => ({\n  root: {\n    padding: theme.spacing(2),\n  },\n}))(MuiDialogContent);\n\nconst DialogActions = withStyles((theme: Theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(1),\n  },\n}))(MuiDialogActions);\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    nested: {\n      paddingLeft: theme.spacing(4),\n    },\n  }),\n);\n\nfunction handleClick(event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) {\n    event.preventDefault();\n    console.info('You clicked a breadcrumb.');\n  }\n  \n  function Breadcrumb() {\n    return (\n      <Breadcrumbs separator={<Separator />} >\n        <Typography color=\"textPrimary\">NSE</Typography>\n        <Typography color=\"textPrimary\">Exploit</Typography>\n        <Typography color=\"primary\" style={{fontWeight: \"bold\"}}>HTTP</Typography>\n      </Breadcrumbs>\n    );\n  }\n\nexport default function CustomizedDialogs() {\n  const [open, setOpen] = React.useState(false);\n  const classes = useStyles();\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div>\n      <ListItem button className={classes.nested} onClick={handleClickOpen}>\n        <ListItemIcon>\n            <ExtensionIcon />\n        </ListItemIcon>\n        <ListItemText>HTTP</ListItemText>\n    </ListItem>\n      <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n          <Breadcrumb />\n        </DialogTitle>\n        <DialogContent dividers>\n          <Grid container justify=\"center\" spacing={3}>\n              {NSEoption.map((option) => (\n                <Grid item xs={6}>\n                    <Tooltip arrow placement=\"top\" title={option.des}>\n                        <FormControlLabel\n                            value={option.id}\n                            control={<Checkbox color=\"primary\" />}\n                            label={option.id}\n                            labelPlacement=\"end\"\n                        />\n                    </Tooltip>\n                </Grid>\n              ))}\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button autoFocus onClick={handleClose} color=\"primary\">\n            Save changes\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/NewScanModeTab/nseData/Exploit/SMB.tsx",["754","755"],"import React from 'react';\nimport { createStyles, Theme, withStyles, WithStyles, makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ExtensionIcon from '@material-ui/icons/ExtensionOutlined';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Grid from '@material-ui/core/Grid';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox, { CheckboxProps } from '@material-ui/core/Checkbox';\n\nimport Typography from '@material-ui/core/Typography';\nimport Separator from '@material-ui/icons/ArrowRightOutlined';\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\n\n// NSE Options\nimport NSEoption from './json/SMB.json'\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      margin: 0,\n      padding: theme.spacing(2),\n    },\n    closeButton: {\n      position: 'absolute',\n      right: theme.spacing(1),\n      top: theme.spacing(1),\n      color: theme.palette.grey[500],\n    },\n  });\n\nexport interface DialogTitleProps extends WithStyles<typeof styles> {\n  id: string;\n  children: React.ReactNode;\n  onClose: () => void;\n}\n\nconst DialogTitle = withStyles(styles)((props: DialogTitleProps) => {\n  const { children, classes, onClose, ...other } = props;\n  return (\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\n      <Typography variant=\"h6\">{children}</Typography>\n      {onClose ? (\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n    </MuiDialogTitle>\n  );\n});\n\nconst DialogContent = withStyles((theme: Theme) => ({\n  root: {\n    padding: theme.spacing(2),\n  },\n}))(MuiDialogContent);\n\nconst DialogActions = withStyles((theme: Theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(1),\n  },\n}))(MuiDialogActions);\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    nested: {\n      paddingLeft: theme.spacing(4),\n    },\n  }),\n);\n\nfunction handleClick(event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) {\n    event.preventDefault();\n    console.info('You clicked a breadcrumb.');\n  }\n  \n  function Breadcrumb() {\n    return (\n      <Breadcrumbs separator={<Separator />} >\n        <Typography color=\"textPrimary\">NSE</Typography>\n        <Typography color=\"textPrimary\">Exploit</Typography>\n        <Typography color=\"primary\" style={{fontWeight: \"bold\"}}>SMB</Typography>\n      </Breadcrumbs>\n    );\n  }\n\nexport default function CustomizedDialogs() {\n  const [open, setOpen] = React.useState(false);\n  const classes = useStyles();\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div>\n      <ListItem button className={classes.nested} onClick={handleClickOpen}>\n        <ListItemIcon>\n            <ExtensionIcon />\n        </ListItemIcon>\n        <ListItemText>SMB</ListItemText>\n    </ListItem>\n      <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n          <Breadcrumb />\n        </DialogTitle>\n        <DialogContent dividers>\n          <Grid container justify=\"center\" spacing={3}>\n              {NSEoption.map((option) => (\n                <Grid item xs={6}>\n                    <Tooltip arrow placement=\"top\" title={option.des}>\n                        <FormControlLabel\n                            value={option.id}\n                            control={<Checkbox color=\"primary\" />}\n                            label={option.id}\n                            labelPlacement=\"end\"\n                        />\n                    </Tooltip>\n                </Grid>\n              ))}\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button autoFocus onClick={handleClose} color=\"primary\">\n            Save changes\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/NewScanModeTab/nseData/Exploit/FTP.tsx",["756","757"],"import React from 'react';\nimport { createStyles, Theme, withStyles, WithStyles, makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ExtensionIcon from '@material-ui/icons/ExtensionOutlined';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Grid from '@material-ui/core/Grid';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox, { CheckboxProps } from '@material-ui/core/Checkbox';\n\nimport Typography from '@material-ui/core/Typography';\nimport Separator from '@material-ui/icons/ArrowRightOutlined';\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\n\n// NSE Options\nimport NSEoption from './json/FTP.json'\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      margin: 0,\n      padding: theme.spacing(2),\n    },\n    closeButton: {\n      position: 'absolute',\n      right: theme.spacing(1),\n      top: theme.spacing(1),\n      color: theme.palette.grey[500],\n    },\n  });\n\nexport interface DialogTitleProps extends WithStyles<typeof styles> {\n  id: string;\n  children: React.ReactNode;\n  onClose: () => void;\n}\n\nconst DialogTitle = withStyles(styles)((props: DialogTitleProps) => {\n  const { children, classes, onClose, ...other } = props;\n  return (\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\n      <Typography variant=\"h6\">{children}</Typography>\n      {onClose ? (\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n    </MuiDialogTitle>\n  );\n});\n\nconst DialogContent = withStyles((theme: Theme) => ({\n  root: {\n    padding: theme.spacing(2),\n  },\n}))(MuiDialogContent);\n\nconst DialogActions = withStyles((theme: Theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(1),\n  },\n}))(MuiDialogActions);\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    nested: {\n      paddingLeft: theme.spacing(4),\n    },\n  }),\n);\n\nfunction handleClick(event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) {\n    event.preventDefault();\n    console.info('You clicked a breadcrumb.');\n  }\n  \n  function Breadcrumb() {\n    return (\n      <Breadcrumbs separator={<Separator />} >\n        <Typography color=\"textPrimary\">NSE</Typography>\n        <Typography color=\"textPrimary\">Exploit</Typography>\n        <Typography color=\"primary\" style={{fontWeight: \"bold\"}}>FTP</Typography>\n      </Breadcrumbs>\n    );\n  }\n\nexport default function CustomizedDialogs() {\n  const [open, setOpen] = React.useState(false);\n  const classes = useStyles();\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div>\n      <ListItem button className={classes.nested} onClick={handleClickOpen}>\n        <ListItemIcon>\n            <ExtensionIcon />\n        </ListItemIcon>\n        <ListItemText>FTP</ListItemText>\n    </ListItem>\n      <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n          <Breadcrumb />\n        </DialogTitle>\n        <DialogContent dividers>\n          <Grid container justify=\"center\" spacing={3}>\n              {NSEoption.map((option) => (\n                <Grid item xs={6}>\n                    <Tooltip arrow placement=\"top\" title={option.des}>\n                        <FormControlLabel\n                            value={option.id}\n                            control={<Checkbox color=\"primary\" />}\n                            label={option.id}\n                            labelPlacement=\"end\"\n                        />\n                    </Tooltip>\n                </Grid>\n              ))}\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button autoFocus onClick={handleClose} color=\"primary\">\n            Save changes\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/NewScanModeTab/nseData/Vulnerability/FTP.tsx",["758","759"],"import React from 'react';\nimport { createStyles, Theme, withStyles, WithStyles, makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ExtensionIcon from '@material-ui/icons/ExtensionOutlined';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Grid from '@material-ui/core/Grid';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox, { CheckboxProps } from '@material-ui/core/Checkbox';\n\nimport Typography from '@material-ui/core/Typography';\nimport Separator from '@material-ui/icons/ArrowRightOutlined';\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\n\n// NSE Options\nimport NSEoption from './json/FTP.json'\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      margin: 0,\n      padding: theme.spacing(2),\n    },\n    closeButton: {\n      position: 'absolute',\n      right: theme.spacing(1),\n      top: theme.spacing(1),\n      color: theme.palette.grey[500],\n    },\n  });\n\nexport interface DialogTitleProps extends WithStyles<typeof styles> {\n  id: string;\n  children: React.ReactNode;\n  onClose: () => void;\n}\n\nconst DialogTitle = withStyles(styles)((props: DialogTitleProps) => {\n  const { children, classes, onClose, ...other } = props;\n  return (\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\n      <Typography variant=\"h6\">{children}</Typography>\n      {onClose ? (\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n    </MuiDialogTitle>\n  );\n});\n\nconst DialogContent = withStyles((theme: Theme) => ({\n  root: {\n    padding: theme.spacing(2),\n  },\n}))(MuiDialogContent);\n\nconst DialogActions = withStyles((theme: Theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(1),\n  },\n}))(MuiDialogActions);\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    nested: {\n      paddingLeft: theme.spacing(4),\n    },\n  }),\n);\n\nfunction handleClick(event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) {\n    event.preventDefault();\n    console.info('You clicked a breadcrumb.');\n  }\n  \n  function Breadcrumb() {\n    return (\n      <Breadcrumbs separator={<Separator />} >\n        <Typography color=\"textPrimary\">NSE</Typography>\n        <Typography color=\"textPrimary\">Vulnerability</Typography>\n        <Typography color=\"primary\" style={{fontWeight: \"bold\"}}>FTP</Typography>\n      </Breadcrumbs>\n    );\n  }\n\nexport default function CustomizedDialogs() {\n  const [open, setOpen] = React.useState(false);\n  const classes = useStyles();\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div>\n      <ListItem button className={classes.nested} onClick={handleClickOpen}>\n        <ListItemIcon>\n            <ExtensionIcon />\n        </ListItemIcon>\n        <ListItemText>FTP</ListItemText>\n    </ListItem>\n      <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n          <Breadcrumb />\n        </DialogTitle>\n        <DialogContent dividers>\n          <Grid container justify=\"center\" spacing={3}>\n              {NSEoption.map((option) => (\n                <Grid item xs={6}>\n                    <Tooltip arrow placement=\"top\" title={option.des}>\n                        <FormControlLabel\n                            value={option.id}\n                            control={<Checkbox color=\"primary\" />}\n                            label={option.id}\n                            labelPlacement=\"end\"\n                        />\n                    </Tooltip>\n                </Grid>\n              ))}\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button autoFocus onClick={handleClose} color=\"primary\">\n            Save changes\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/NewScanModeTab/nseData/Exploit/Others.tsx",["760","761"],"import React from 'react';\nimport { createStyles, Theme, withStyles, WithStyles, makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ExtensionIcon from '@material-ui/icons/ExtensionOutlined';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Grid from '@material-ui/core/Grid';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox, { CheckboxProps } from '@material-ui/core/Checkbox';\n\nimport Typography from '@material-ui/core/Typography';\nimport Separator from '@material-ui/icons/ArrowRightOutlined';\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\n\n// NSE Options\nimport NSEoption from './json/Others.json'\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      margin: 0,\n      padding: theme.spacing(2),\n    },\n    closeButton: {\n      position: 'absolute',\n      right: theme.spacing(1),\n      top: theme.spacing(1),\n      color: theme.palette.grey[500],\n    },\n  });\n\nexport interface DialogTitleProps extends WithStyles<typeof styles> {\n  id: string;\n  children: React.ReactNode;\n  onClose: () => void;\n}\n\nconst DialogTitle = withStyles(styles)((props: DialogTitleProps) => {\n  const { children, classes, onClose, ...other } = props;\n  return (\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\n      <Typography variant=\"h6\">{children}</Typography>\n      {onClose ? (\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n    </MuiDialogTitle>\n  );\n});\n\nconst DialogContent = withStyles((theme: Theme) => ({\n  root: {\n    padding: theme.spacing(2),\n  },\n}))(MuiDialogContent);\n\nconst DialogActions = withStyles((theme: Theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(1),\n  },\n}))(MuiDialogActions);\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    nested: {\n      paddingLeft: theme.spacing(4),\n    },\n  }),\n);\n\nfunction handleClick(event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) {\n    event.preventDefault();\n    console.info('You clicked a breadcrumb.');\n  }\n  \n  function Breadcrumb() {\n    return (\n      <Breadcrumbs separator={<Separator />} >\n        <Typography color=\"textPrimary\">NSE</Typography>\n        <Typography color=\"textPrimary\">Exploit</Typography>\n        <Typography color=\"primary\" style={{fontWeight: \"bold\"}}>Others</Typography>\n      </Breadcrumbs>\n    );\n  }\n\nexport default function CustomizedDialogs() {\n  const [open, setOpen] = React.useState(false);\n  const classes = useStyles();\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div>\n      <ListItem button className={classes.nested} onClick={handleClickOpen}>\n        <ListItemIcon>\n            <ExtensionIcon />\n        </ListItemIcon>\n        <ListItemText>Others</ListItemText>\n    </ListItem>\n      <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n          <Breadcrumb />\n        </DialogTitle>\n        <DialogContent dividers>\n          <Grid container justify=\"center\" spacing={3}>\n              {NSEoption.map((option) => (\n                <Grid item xs={6}>\n                    <Tooltip arrow placement=\"top\" title={option.des}>\n                        <FormControlLabel\n                            value={option.id}\n                            control={<Checkbox color=\"primary\" />}\n                            label={option.id}\n                            labelPlacement=\"end\"\n                        />\n                    </Tooltip>\n                </Grid>\n              ))}\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button autoFocus onClick={handleClose} color=\"primary\">\n            Save changes\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/NewScanModeTab/nseData/Discovery/Network.tsx",["762","763"],"import React from 'react';\nimport { createStyles, Theme, withStyles, WithStyles, makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ExtensionIcon from '@material-ui/icons/ExtensionOutlined';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Grid from '@material-ui/core/Grid';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox, { CheckboxProps } from '@material-ui/core/Checkbox';\n\nimport Typography from '@material-ui/core/Typography';\nimport Separator from '@material-ui/icons/ArrowRightOutlined';\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\n\n// NSE Options\nimport NSEoption from './json/Network.json'\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      margin: 0,\n      padding: theme.spacing(2),\n    },\n    closeButton: {\n      position: 'absolute',\n      right: theme.spacing(1),\n      top: theme.spacing(1),\n      color: theme.palette.grey[500],\n    },\n  });\n\nexport interface DialogTitleProps extends WithStyles<typeof styles> {\n  id: string;\n  children: React.ReactNode;\n  onClose: () => void;\n}\n\nconst DialogTitle = withStyles(styles)((props: DialogTitleProps) => {\n  const { children, classes, onClose, ...other } = props;\n  return (\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\n      <Typography variant=\"h6\">{children}</Typography>\n      {onClose ? (\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n    </MuiDialogTitle>\n  );\n});\n\nconst DialogContent = withStyles((theme: Theme) => ({\n  root: {\n    padding: theme.spacing(2),\n  },\n}))(MuiDialogContent);\n\nconst DialogActions = withStyles((theme: Theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(1),\n  },\n}))(MuiDialogActions);\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    nested: {\n      paddingLeft: theme.spacing(4),\n    },\n  }),\n);\n\nfunction handleClick(event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) {\n    event.preventDefault();\n    console.info('You clicked a breadcrumb.');\n  }\n  \n  function Breadcrumb() {\n    return (\n      <Breadcrumbs separator={<Separator />} >\n        <Typography color=\"textPrimary\">NSE</Typography>\n        <Typography color=\"textPrimary\">Discovery</Typography>\n        <Typography color=\"primary\" style={{fontWeight: \"bold\"}}>Network</Typography>\n      </Breadcrumbs>\n    );\n  }\n\nexport default function CustomizedDialogs() {\n  const [open, setOpen] = React.useState(false);\n  const classes = useStyles();\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div>\n      <ListItem button className={classes.nested} onClick={handleClickOpen}>\n        <ListItemIcon>\n            <ExtensionIcon />\n        </ListItemIcon>\n        <ListItemText>Network</ListItemText>\n    </ListItem>\n      <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n          <Breadcrumb />\n        </DialogTitle>\n        <DialogContent dividers>\n          <Grid container justify=\"center\" spacing={3}>\n              {NSEoption.map((option) => (\n                <Grid item xs={6}>\n                    <Tooltip arrow placement=\"top\" title={option.des}>\n                        <FormControlLabel\n                            value={option.id}\n                            control={<Checkbox color=\"primary\" />}\n                            label={option.id}\n                            labelPlacement=\"end\"\n                        />\n                    </Tooltip>\n                </Grid>\n              ))}\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button autoFocus onClick={handleClose} color=\"primary\">\n            Save changes\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/NewScanModeTab/nseData/Vulnerability/SMB.tsx",["764","765"],"import React from 'react';\nimport { createStyles, Theme, withStyles, WithStyles, makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ExtensionIcon from '@material-ui/icons/ExtensionOutlined';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Grid from '@material-ui/core/Grid';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox, { CheckboxProps } from '@material-ui/core/Checkbox';\n\nimport Typography from '@material-ui/core/Typography';\nimport Separator from '@material-ui/icons/ArrowRightOutlined';\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\n\n// NSE Options\nimport NSEoption from './json/SMB.json'\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      margin: 0,\n      padding: theme.spacing(2),\n    },\n    closeButton: {\n      position: 'absolute',\n      right: theme.spacing(1),\n      top: theme.spacing(1),\n      color: theme.palette.grey[500],\n    },\n  });\n\nexport interface DialogTitleProps extends WithStyles<typeof styles> {\n  id: string;\n  children: React.ReactNode;\n  onClose: () => void;\n}\n\nconst DialogTitle = withStyles(styles)((props: DialogTitleProps) => {\n  const { children, classes, onClose, ...other } = props;\n  return (\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\n      <Typography variant=\"h6\">{children}</Typography>\n      {onClose ? (\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n    </MuiDialogTitle>\n  );\n});\n\nconst DialogContent = withStyles((theme: Theme) => ({\n  root: {\n    padding: theme.spacing(2),\n  },\n}))(MuiDialogContent);\n\nconst DialogActions = withStyles((theme: Theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(1),\n  },\n}))(MuiDialogActions);\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    nested: {\n      paddingLeft: theme.spacing(4),\n    },\n  }),\n);\n\nfunction handleClick(event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) {\n    event.preventDefault();\n    console.info('You clicked a breadcrumb.');\n  }\n  \n  function Breadcrumb() {\n    return (\n      <Breadcrumbs separator={<Separator />} >\n        <Typography color=\"textPrimary\">NSE</Typography>\n        <Typography color=\"textPrimary\">Vulnerability</Typography>\n        <Typography color=\"primary\" style={{fontWeight: \"bold\"}}>SMB</Typography>\n      </Breadcrumbs>\n    );\n  }\n\nexport default function CustomizedDialogs() {\n  const [open, setOpen] = React.useState(false);\n  const classes = useStyles();\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div>\n      <ListItem button className={classes.nested} onClick={handleClickOpen}>\n        <ListItemIcon>\n            <ExtensionIcon />\n        </ListItemIcon>\n        <ListItemText>SMB</ListItemText>\n    </ListItem>\n      <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n          <Breadcrumb />\n        </DialogTitle>\n        <DialogContent dividers>\n          <Grid container justify=\"center\" spacing={3}>\n              {NSEoption.map((option) => (\n                <Grid item xs={6}>\n                    <Tooltip arrow placement=\"top\" title={option.des}>\n                        <FormControlLabel\n                            value={option.id}\n                            control={<Checkbox color=\"primary\" />}\n                            label={option.id}\n                            labelPlacement=\"end\"\n                        />\n                    </Tooltip>\n                </Grid>\n              ))}\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button autoFocus onClick={handleClose} color=\"primary\">\n            Save changes\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/NewScanModeTab/nseData/Discovery/Hadoop.tsx",["766","767"],"import React from 'react';\nimport { createStyles, Theme, withStyles, WithStyles, makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ExtensionIcon from '@material-ui/icons/ExtensionOutlined';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Grid from '@material-ui/core/Grid';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox, { CheckboxProps } from '@material-ui/core/Checkbox';\n\nimport Typography from '@material-ui/core/Typography';\nimport Separator from '@material-ui/icons/ArrowRightOutlined';\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\n\n// NSE Options\nimport NSEoption from './json/Hadoop.json'\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      margin: 0,\n      padding: theme.spacing(2),\n    },\n    closeButton: {\n      position: 'absolute',\n      right: theme.spacing(1),\n      top: theme.spacing(1),\n      color: theme.palette.grey[500],\n    },\n  });\n\nexport interface DialogTitleProps extends WithStyles<typeof styles> {\n  id: string;\n  children: React.ReactNode;\n  onClose: () => void;\n}\n\nconst DialogTitle = withStyles(styles)((props: DialogTitleProps) => {\n  const { children, classes, onClose, ...other } = props;\n  return (\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\n      <Typography variant=\"h6\">{children}</Typography>\n      {onClose ? (\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n    </MuiDialogTitle>\n  );\n});\n\nconst DialogContent = withStyles((theme: Theme) => ({\n  root: {\n    padding: theme.spacing(2),\n  },\n}))(MuiDialogContent);\n\nconst DialogActions = withStyles((theme: Theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(1),\n  },\n}))(MuiDialogActions);\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    nested: {\n      paddingLeft: theme.spacing(4),\n    },\n  }),\n);\n\nfunction handleClick(event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) {\n    event.preventDefault();\n    console.info('You clicked a breadcrumb.');\n  }\n  \n  function Breadcrumb() {\n    return (\n      <Breadcrumbs separator={<Separator />} >\n        <Typography color=\"textPrimary\">NSE</Typography>\n        <Typography color=\"textPrimary\">Discovery</Typography>\n        <Typography color=\"primary\" style={{fontWeight: \"bold\"}}>Hadoop</Typography>\n      </Breadcrumbs>\n    );\n  }\n\nexport default function CustomizedDialogs() {\n  const [open, setOpen] = React.useState(false);\n  const classes = useStyles();\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div>\n      <ListItem button className={classes.nested} onClick={handleClickOpen}>\n        <ListItemIcon>\n            <ExtensionIcon />\n        </ListItemIcon>\n        <ListItemText>Hadoop</ListItemText>\n    </ListItem>\n      <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n          <Breadcrumb />\n        </DialogTitle>\n        <DialogContent dividers>\n          <Grid container justify=\"center\" spacing={3}>\n              {NSEoption.map((option) => (\n                <Grid item xs={6}>\n                    <Tooltip arrow placement=\"top\" title={option.des}>\n                        <FormControlLabel\n                            value={option.id}\n                            control={<Checkbox color=\"primary\" />}\n                            label={option.id}\n                            labelPlacement=\"end\"\n                        />\n                    </Tooltip>\n                </Grid>\n              ))}\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button autoFocus onClick={handleClose} color=\"primary\">\n            Save changes\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/NewScanModeTab/nseData/Vulnerability/Others.tsx",["768","769"],"import React from 'react';\nimport { createStyles, Theme, withStyles, WithStyles, makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ExtensionIcon from '@material-ui/icons/ExtensionOutlined';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Grid from '@material-ui/core/Grid';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox, { CheckboxProps } from '@material-ui/core/Checkbox';\n\nimport Typography from '@material-ui/core/Typography';\nimport Separator from '@material-ui/icons/ArrowRightOutlined';\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\n\n// NSE Options\nimport NSEoption from './json/Others.json'\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      margin: 0,\n      padding: theme.spacing(2),\n    },\n    closeButton: {\n      position: 'absolute',\n      right: theme.spacing(1),\n      top: theme.spacing(1),\n      color: theme.palette.grey[500],\n    },\n  });\n\nexport interface DialogTitleProps extends WithStyles<typeof styles> {\n  id: string;\n  children: React.ReactNode;\n  onClose: () => void;\n}\n\nconst DialogTitle = withStyles(styles)((props: DialogTitleProps) => {\n  const { children, classes, onClose, ...other } = props;\n  return (\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\n      <Typography variant=\"h6\">{children}</Typography>\n      {onClose ? (\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n    </MuiDialogTitle>\n  );\n});\n\nconst DialogContent = withStyles((theme: Theme) => ({\n  root: {\n    padding: theme.spacing(2),\n  },\n}))(MuiDialogContent);\n\nconst DialogActions = withStyles((theme: Theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(1),\n  },\n}))(MuiDialogActions);\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    nested: {\n      paddingLeft: theme.spacing(4),\n    },\n  }),\n);\n\nfunction handleClick(event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) {\n    event.preventDefault();\n    console.info('You clicked a breadcrumb.');\n  }\n  \n  function Breadcrumb() {\n    return (\n      <Breadcrumbs separator={<Separator />} >\n        <Typography color=\"textPrimary\">NSE</Typography>\n        <Typography color=\"textPrimary\">Vulnerability</Typography>\n        <Typography color=\"primary\" style={{fontWeight: \"bold\"}}>Others</Typography>\n      </Breadcrumbs>\n    );\n  }\n\nexport default function CustomizedDialogs() {\n  const [open, setOpen] = React.useState(false);\n  const classes = useStyles();\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div>\n      <ListItem button className={classes.nested} onClick={handleClickOpen}>\n        <ListItemIcon>\n            <ExtensionIcon />\n        </ListItemIcon>\n        <ListItemText>Others</ListItemText>\n    </ListItem>\n      <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n          <Breadcrumb />\n        </DialogTitle>\n        <DialogContent dividers>\n          <Grid container justify=\"center\" spacing={3}>\n              {NSEoption.map((option) => (\n                <Grid item xs={6}>\n                    <Tooltip arrow placement=\"top\" title={option.des}>\n                        <FormControlLabel\n                            value={option.id}\n                            control={<Checkbox color=\"primary\" />}\n                            label={option.id}\n                            labelPlacement=\"end\"\n                        />\n                    </Tooltip>\n                </Grid>\n              ))}\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button autoFocus onClick={handleClose} color=\"primary\">\n            Save changes\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/NewScanModeTab/nseData/Discovery/HTTP.tsx",["770","771"],"import React from 'react';\nimport { createStyles, Theme, withStyles, WithStyles, makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ExtensionIcon from '@material-ui/icons/ExtensionOutlined';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Grid from '@material-ui/core/Grid';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox, { CheckboxProps } from '@material-ui/core/Checkbox';\n\nimport Typography from '@material-ui/core/Typography';\nimport Separator from '@material-ui/icons/ArrowRightOutlined';\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\n\n// NSE Options\nimport NSEoption from './json/HTTP.json'\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      margin: 0,\n      padding: theme.spacing(2),\n    },\n    closeButton: {\n      position: 'absolute',\n      right: theme.spacing(1),\n      top: theme.spacing(1),\n      color: theme.palette.grey[500],\n    },\n  });\n\nexport interface DialogTitleProps extends WithStyles<typeof styles> {\n  id: string;\n  children: React.ReactNode;\n  onClose: () => void;\n}\n\nconst DialogTitle = withStyles(styles)((props: DialogTitleProps) => {\n  const { children, classes, onClose, ...other } = props;\n  return (\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\n      <Typography variant=\"h6\">{children}</Typography>\n      {onClose ? (\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n    </MuiDialogTitle>\n  );\n});\n\nconst DialogContent = withStyles((theme: Theme) => ({\n  root: {\n    padding: theme.spacing(2),\n  },\n}))(MuiDialogContent);\n\nconst DialogActions = withStyles((theme: Theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(1),\n  },\n}))(MuiDialogActions);\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    nested: {\n      paddingLeft: theme.spacing(4),\n    },\n  }),\n);\n\nfunction handleClick(event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) {\n    event.preventDefault();\n    console.info('You clicked a breadcrumb.');\n  }\n  \n  function Breadcrumb() {\n    return (\n      <Breadcrumbs separator={<Separator />} >\n        <Typography color=\"textPrimary\">NSE</Typography>\n        <Typography color=\"textPrimary\">Discovery</Typography>\n        <Typography color=\"primary\" style={{fontWeight: \"bold\"}}>HTTP</Typography>\n      </Breadcrumbs>\n    );\n  }\n\nexport default function CustomizedDialogs() {\n  const [open, setOpen] = React.useState(false);\n  const classes = useStyles();\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div>\n      <ListItem button className={classes.nested} onClick={handleClickOpen}>\n        <ListItemIcon>\n            <ExtensionIcon />\n        </ListItemIcon>\n        <ListItemText>HTTP</ListItemText>\n    </ListItem>\n      <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n          <Breadcrumb />\n        </DialogTitle>\n        <DialogContent dividers>\n          <Grid container justify=\"center\" spacing={3}>\n              {NSEoption.map((option) => (\n                <Grid item xs={6}>\n                    <Tooltip arrow placement=\"top\" title={option.des}>\n                        <FormControlLabel\n                            value={option.id}\n                            control={<Checkbox color=\"primary\" />}\n                            label={option.id}\n                            labelPlacement=\"end\"\n                        />\n                    </Tooltip>\n                </Grid>\n              ))}\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button autoFocus onClick={handleClose} color=\"primary\">\n            Save changes\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/NewScanModeTab/nseData/Vulnerability/HTTP.tsx",["772","773"],"import React from 'react';\nimport { createStyles, Theme, withStyles, WithStyles, makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ExtensionIcon from '@material-ui/icons/ExtensionOutlined';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Grid from '@material-ui/core/Grid';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox, { CheckboxProps } from '@material-ui/core/Checkbox';\n\nimport Typography from '@material-ui/core/Typography';\nimport Separator from '@material-ui/icons/ArrowRightOutlined';\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\n\n// NSE Options\nimport NSEoption from './json/HTTP.json'\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      margin: 0,\n      padding: theme.spacing(2),\n    },\n    closeButton: {\n      position: 'absolute',\n      right: theme.spacing(1),\n      top: theme.spacing(1),\n      color: theme.palette.grey[500],\n    },\n  });\n\nexport interface DialogTitleProps extends WithStyles<typeof styles> {\n  id: string;\n  children: React.ReactNode;\n  onClose: () => void;\n}\n\nconst DialogTitle = withStyles(styles)((props: DialogTitleProps) => {\n  const { children, classes, onClose, ...other } = props;\n  return (\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\n      <Typography variant=\"h6\">{children}</Typography>\n      {onClose ? (\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n    </MuiDialogTitle>\n  );\n});\n\nconst DialogContent = withStyles((theme: Theme) => ({\n  root: {\n    padding: theme.spacing(2),\n  },\n}))(MuiDialogContent);\n\nconst DialogActions = withStyles((theme: Theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(1),\n  },\n}))(MuiDialogActions);\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    nested: {\n      paddingLeft: theme.spacing(4),\n    },\n  }),\n);\n\nfunction handleClick(event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) {\n    event.preventDefault();\n    console.info('You clicked a breadcrumb.');\n  }\n  \n  function Breadcrumb() {\n    return (\n      <Breadcrumbs separator={<Separator />} >\n        <Typography color=\"textPrimary\">NSE</Typography>\n        <Typography color=\"textPrimary\">Vulnerability</Typography>\n        <Typography color=\"primary\" style={{fontWeight: \"bold\"}}>HTTP</Typography>\n      </Breadcrumbs>\n    );\n  }\n\nexport default function CustomizedDialogs() {\n  const [open, setOpen] = React.useState(false);\n  const classes = useStyles();\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div>\n      <ListItem button className={classes.nested} onClick={handleClickOpen}>\n        <ListItemIcon>\n            <ExtensionIcon />\n        </ListItemIcon>\n        <ListItemText>HTTP</ListItemText>\n    </ListItem>\n      <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n          <Breadcrumb />\n        </DialogTitle>\n        <DialogContent dividers>\n          <Grid container justify=\"center\" spacing={3}>\n              {NSEoption.map((option) => (\n                <Grid item xs={6}>\n                    <Tooltip arrow placement=\"top\" title={option.des}>\n                        <FormControlLabel\n                            value={option.id}\n                            control={<Checkbox color=\"primary\" />}\n                            label={option.id}\n                            labelPlacement=\"end\"\n                        />\n                    </Tooltip>\n                </Grid>\n              ))}\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button autoFocus onClick={handleClose} color=\"primary\">\n            Save changes\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/NewScanModeTab/nseData/Vulnerability/SSL.tsx",["774","775"],"import React from 'react';\nimport { createStyles, Theme, withStyles, WithStyles, makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ExtensionIcon from '@material-ui/icons/ExtensionOutlined';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Grid from '@material-ui/core/Grid';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox, { CheckboxProps } from '@material-ui/core/Checkbox';\n\nimport Typography from '@material-ui/core/Typography';\nimport Separator from '@material-ui/icons/ArrowRightOutlined';\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\n\n// NSE Options\nimport NSEoption from './json/SSL.json'\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      margin: 0,\n      padding: theme.spacing(2),\n    },\n    closeButton: {\n      position: 'absolute',\n      right: theme.spacing(1),\n      top: theme.spacing(1),\n      color: theme.palette.grey[500],\n    },\n  });\n\nexport interface DialogTitleProps extends WithStyles<typeof styles> {\n  id: string;\n  children: React.ReactNode;\n  onClose: () => void;\n}\n\nconst DialogTitle = withStyles(styles)((props: DialogTitleProps) => {\n  const { children, classes, onClose, ...other } = props;\n  return (\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\n      <Typography variant=\"h6\">{children}</Typography>\n      {onClose ? (\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n    </MuiDialogTitle>\n  );\n});\n\nconst DialogContent = withStyles((theme: Theme) => ({\n  root: {\n    padding: theme.spacing(2),\n  },\n}))(MuiDialogContent);\n\nconst DialogActions = withStyles((theme: Theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(1),\n  },\n}))(MuiDialogActions);\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    nested: {\n      paddingLeft: theme.spacing(4),\n    },\n  }),\n);\n\nfunction handleClick(event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) {\n    event.preventDefault();\n    console.info('You clicked a breadcrumb.');\n  }\n  \n  function Breadcrumb() {\n    return (\n      <Breadcrumbs separator={<Separator />} >\n        <Typography color=\"textPrimary\">NSE</Typography>\n        <Typography color=\"textPrimary\">Vulnerability</Typography>\n        <Typography color=\"primary\" style={{fontWeight: \"bold\"}}>SSL</Typography>\n      </Breadcrumbs>\n    );\n  }\n\nexport default function CustomizedDialogs() {\n  const [open, setOpen] = React.useState(false);\n  const classes = useStyles();\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div>\n      <ListItem button className={classes.nested} onClick={handleClickOpen}>\n        <ListItemIcon>\n            <ExtensionIcon />\n        </ListItemIcon>\n        <ListItemText>SSL</ListItemText>\n    </ListItem>\n      <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n          <Breadcrumb />\n        </DialogTitle>\n        <DialogContent dividers>\n          <Grid container justify=\"center\" spacing={3}>\n              {NSEoption.map((option) => (\n                <Grid item xs={6}>\n                    <Tooltip arrow placement=\"top\" title={option.des}>\n                        <FormControlLabel\n                            value={option.id}\n                            control={<Checkbox color=\"primary\" />}\n                            label={option.id}\n                            labelPlacement=\"end\"\n                        />\n                    </Tooltip>\n                </Grid>\n              ))}\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button autoFocus onClick={handleClose} color=\"primary\">\n            Save changes\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Backend/frontendData/targetGeo.tsx",[],"/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Components/ScanResults/GoogleMapAPI.js",["776","777","778","779"],"/Users/yipjames/Desktop/INS/FYP/chinmap-frontend/src/Backend/frontendData/tracerouteOutput.tsx",[],{"ruleId":"780","replacedBy":"781"},{"ruleId":"782","replacedBy":"783"},{"ruleId":"784","severity":1,"message":"785","line":2,"column":8,"nodeType":"786","messageId":"787","endLine":2,"endColumn":12},{"ruleId":"784","severity":1,"message":"788","line":16,"column":8,"nodeType":"786","messageId":"787","endLine":16,"endColumn":16},{"ruleId":"784","severity":1,"message":"789","line":18,"column":8,"nodeType":"786","messageId":"787","endLine":18,"endColumn":14},{"ruleId":"784","severity":1,"message":"790","line":19,"column":8,"nodeType":"786","messageId":"787","endLine":19,"endColumn":24},{"ruleId":"784","severity":1,"message":"791","line":21,"column":8,"nodeType":"786","messageId":"787","endLine":21,"endColumn":16},{"ruleId":"784","severity":1,"message":"792","line":35,"column":8,"nodeType":"786","messageId":"787","endLine":35,"endColumn":18},{"ruleId":"793","severity":1,"message":"794","line":86,"column":1,"nodeType":"795","endLine":287,"endColumn":2},{"ruleId":"784","severity":1,"message":"796","line":3,"column":10,"nodeType":"786","messageId":"787","endLine":3,"endColumn":16},{"ruleId":"784","severity":1,"message":"797","line":3,"column":18,"nodeType":"786","messageId":"787","endLine":3,"endColumn":23},{"ruleId":"784","severity":1,"message":"798","line":3,"column":31,"nodeType":"786","messageId":"787","endLine":3,"endColumn":44},{"ruleId":"784","severity":1,"message":"799","line":15,"column":8,"nodeType":"786","messageId":"787","endLine":15,"endColumn":17},{"ruleId":"784","severity":1,"message":"800","line":23,"column":8,"nodeType":"786","messageId":"787","endLine":23,"endColumn":20},{"ruleId":"784","severity":1,"message":"796","line":3,"column":10,"nodeType":"786","messageId":"787","endLine":3,"endColumn":16},{"ruleId":"784","severity":1,"message":"797","line":3,"column":18,"nodeType":"786","messageId":"787","endLine":3,"endColumn":23},{"ruleId":"784","severity":1,"message":"798","line":3,"column":31,"nodeType":"786","messageId":"787","endLine":3,"endColumn":44},{"ruleId":"784","severity":1,"message":"799","line":15,"column":8,"nodeType":"786","messageId":"787","endLine":15,"endColumn":17},{"ruleId":"784","severity":1,"message":"800","line":23,"column":8,"nodeType":"786","messageId":"787","endLine":23,"endColumn":20},{"ruleId":"784","severity":1,"message":"796","line":3,"column":10,"nodeType":"786","messageId":"787","endLine":3,"endColumn":16},{"ruleId":"784","severity":1,"message":"797","line":3,"column":18,"nodeType":"786","messageId":"787","endLine":3,"endColumn":23},{"ruleId":"784","severity":1,"message":"798","line":3,"column":31,"nodeType":"786","messageId":"787","endLine":3,"endColumn":44},{"ruleId":"784","severity":1,"message":"799","line":15,"column":8,"nodeType":"786","messageId":"787","endLine":15,"endColumn":17},{"ruleId":"784","severity":1,"message":"800","line":23,"column":8,"nodeType":"786","messageId":"787","endLine":23,"endColumn":20},{"ruleId":"784","severity":1,"message":"796","line":3,"column":10,"nodeType":"786","messageId":"787","endLine":3,"endColumn":16},{"ruleId":"784","severity":1,"message":"797","line":3,"column":18,"nodeType":"786","messageId":"787","endLine":3,"endColumn":23},{"ruleId":"784","severity":1,"message":"798","line":3,"column":31,"nodeType":"786","messageId":"787","endLine":3,"endColumn":44},{"ruleId":"784","severity":1,"message":"799","line":15,"column":8,"nodeType":"786","messageId":"787","endLine":15,"endColumn":17},{"ruleId":"784","severity":1,"message":"800","line":23,"column":8,"nodeType":"786","messageId":"787","endLine":23,"endColumn":20},{"ruleId":"784","severity":1,"message":"796","line":3,"column":10,"nodeType":"786","messageId":"787","endLine":3,"endColumn":16},{"ruleId":"784","severity":1,"message":"797","line":3,"column":18,"nodeType":"786","messageId":"787","endLine":3,"endColumn":23},{"ruleId":"784","severity":1,"message":"798","line":3,"column":31,"nodeType":"786","messageId":"787","endLine":3,"endColumn":44},{"ruleId":"784","severity":1,"message":"801","line":11,"column":8,"nodeType":"786","messageId":"787","endLine":11,"endColumn":13},{"ruleId":"784","severity":1,"message":"802","line":12,"column":8,"nodeType":"786","messageId":"787","endLine":12,"endColumn":18},{"ruleId":"784","severity":1,"message":"799","line":15,"column":8,"nodeType":"786","messageId":"787","endLine":15,"endColumn":17},{"ruleId":"784","severity":1,"message":"800","line":23,"column":8,"nodeType":"786","messageId":"787","endLine":23,"endColumn":20},{"ruleId":"784","severity":1,"message":"796","line":3,"column":10,"nodeType":"786","messageId":"787","endLine":3,"endColumn":16},{"ruleId":"784","severity":1,"message":"797","line":3,"column":18,"nodeType":"786","messageId":"787","endLine":3,"endColumn":23},{"ruleId":"784","severity":1,"message":"798","line":3,"column":31,"nodeType":"786","messageId":"787","endLine":3,"endColumn":44},{"ruleId":"784","severity":1,"message":"799","line":15,"column":8,"nodeType":"786","messageId":"787","endLine":15,"endColumn":17},{"ruleId":"784","severity":1,"message":"800","line":23,"column":8,"nodeType":"786","messageId":"787","endLine":23,"endColumn":20},{"ruleId":"784","severity":1,"message":"803","line":1,"column":26,"nodeType":"786","messageId":"787","endLine":1,"endColumn":35},{"ruleId":"784","severity":1,"message":"796","line":3,"column":10,"nodeType":"786","messageId":"787","endLine":3,"endColumn":16},{"ruleId":"784","severity":1,"message":"797","line":3,"column":18,"nodeType":"786","messageId":"787","endLine":3,"endColumn":23},{"ruleId":"784","severity":1,"message":"804","line":3,"column":25,"nodeType":"786","messageId":"787","endLine":3,"endColumn":29},{"ruleId":"784","severity":1,"message":"798","line":3,"column":31,"nodeType":"786","messageId":"787","endLine":3,"endColumn":44},{"ruleId":"784","severity":1,"message":"805","line":19,"column":8,"nodeType":"786","messageId":"787","endLine":19,"endColumn":15},{"ruleId":"784","severity":1,"message":"806","line":20,"column":8,"nodeType":"786","messageId":"787","endLine":20,"endColumn":16},{"ruleId":"784","severity":1,"message":"807","line":21,"column":8,"nodeType":"786","messageId":"787","endLine":21,"endColumn":15},{"ruleId":"784","severity":1,"message":"808","line":22,"column":8,"nodeType":"786","messageId":"787","endLine":22,"endColumn":28},{"ruleId":"784","severity":1,"message":"809","line":23,"column":8,"nodeType":"786","messageId":"787","endLine":23,"endColumn":12},{"ruleId":"784","severity":1,"message":"810","line":26,"column":8,"nodeType":"786","messageId":"787","endLine":26,"endColumn":20},{"ruleId":"784","severity":1,"message":"811","line":28,"column":8,"nodeType":"786","messageId":"787","endLine":28,"endColumn":22},{"ruleId":"784","severity":1,"message":"812","line":33,"column":10,"nodeType":"786","messageId":"787","endLine":33,"endColumn":20},{"ruleId":"784","severity":1,"message":"813","line":33,"column":22,"nodeType":"786","messageId":"787","endLine":33,"endColumn":32},{"ruleId":"784","severity":1,"message":"814","line":33,"column":34,"nodeType":"786","messageId":"787","endLine":33,"endColumn":44},{"ruleId":"784","severity":1,"message":"815","line":33,"column":46,"nodeType":"786","messageId":"787","endLine":33,"endColumn":56},{"ruleId":"784","severity":1,"message":"816","line":33,"column":58,"nodeType":"786","messageId":"787","endLine":33,"endColumn":66},{"ruleId":"784","severity":1,"message":"817","line":68,"column":7,"nodeType":"786","messageId":"787","endLine":68,"endColumn":21},{"ruleId":"784","severity":1,"message":"818","line":71,"column":9,"nodeType":"786","messageId":"787","endLine":71,"endColumn":20},{"ruleId":"784","severity":1,"message":"819","line":116,"column":10,"nodeType":"786","messageId":"787","endLine":116,"endColumn":17},{"ruleId":"784","severity":1,"message":"820","line":122,"column":10,"nodeType":"786","messageId":"787","endLine":122,"endColumn":16},{"ruleId":"784","severity":1,"message":"821","line":122,"column":18,"nodeType":"786","messageId":"787","endLine":122,"endColumn":27},{"ruleId":"822","severity":1,"message":"823","line":125,"column":54,"nodeType":"824","messageId":"825","endLine":125,"endColumn":56},{"ruleId":"784","severity":1,"message":"826","line":131,"column":10,"nodeType":"786","messageId":"787","endLine":131,"endColumn":15},{"ruleId":"784","severity":1,"message":"827","line":131,"column":17,"nodeType":"786","messageId":"787","endLine":131,"endColumn":25},{"ruleId":"784","severity":1,"message":"828","line":2,"column":43,"nodeType":"786","messageId":"787","endLine":2,"endColumn":50},{"ruleId":"784","severity":1,"message":"796","line":3,"column":10,"nodeType":"786","messageId":"787","endLine":3,"endColumn":16},{"ruleId":"784","severity":1,"message":"797","line":3,"column":18,"nodeType":"786","messageId":"787","endLine":3,"endColumn":23},{"ruleId":"784","severity":1,"message":"804","line":3,"column":25,"nodeType":"786","messageId":"787","endLine":3,"endColumn":29},{"ruleId":"784","severity":1,"message":"798","line":3,"column":31,"nodeType":"786","messageId":"787","endLine":3,"endColumn":44},{"ruleId":"784","severity":1,"message":"829","line":7,"column":8,"nodeType":"786","messageId":"787","endLine":7,"endColumn":17},{"ruleId":"784","severity":1,"message":"830","line":15,"column":8,"nodeType":"786","messageId":"787","endLine":15,"endColumn":19},{"ruleId":"784","severity":1,"message":"809","line":17,"column":8,"nodeType":"786","messageId":"787","endLine":17,"endColumn":12},{"ruleId":"784","severity":1,"message":"831","line":21,"column":10,"nodeType":"786","messageId":"787","endLine":21,"endColumn":14},{"ruleId":"784","severity":1,"message":"832","line":21,"column":16,"nodeType":"786","messageId":"787","endLine":21,"endColumn":20},{"ruleId":"784","severity":1,"message":"833","line":21,"column":22,"nodeType":"786","messageId":"787","endLine":21,"endColumn":26},{"ruleId":"784","severity":1,"message":"834","line":21,"column":28,"nodeType":"786","messageId":"787","endLine":21,"endColumn":36},{"ruleId":"784","severity":1,"message":"835","line":21,"column":38,"nodeType":"786","messageId":"787","endLine":21,"endColumn":48},{"ruleId":"784","severity":1,"message":"836","line":26,"column":10,"nodeType":"786","messageId":"787","endLine":26,"endColumn":20},{"ruleId":"784","severity":1,"message":"837","line":27,"column":8,"nodeType":"786","messageId":"787","endLine":27,"endColumn":17},{"ruleId":"784","severity":1,"message":"838","line":29,"column":10,"nodeType":"786","messageId":"787","endLine":29,"endColumn":14},{"ruleId":"784","severity":1,"message":"809","line":6,"column":8,"nodeType":"786","messageId":"787","endLine":6,"endColumn":12},{"ruleId":"784","severity":1,"message":"812","line":32,"column":10,"nodeType":"786","messageId":"787","endLine":32,"endColumn":20},{"ruleId":"784","severity":1,"message":"813","line":32,"column":22,"nodeType":"786","messageId":"787","endLine":32,"endColumn":32},{"ruleId":"784","severity":1,"message":"814","line":32,"column":34,"nodeType":"786","messageId":"787","endLine":32,"endColumn":44},{"ruleId":"784","severity":1,"message":"836","line":36,"column":10,"nodeType":"786","messageId":"787","endLine":36,"endColumn":20},{"ruleId":"793","severity":1,"message":"794","line":144,"column":1,"nodeType":"795","endLine":987,"endColumn":2},{"ruleId":"822","severity":1,"message":"823","line":154,"column":21,"nodeType":"824","messageId":"825","endLine":154,"endColumn":23},{"ruleId":"822","severity":1,"message":"823","line":214,"column":52,"nodeType":"824","messageId":"825","endLine":214,"endColumn":54},{"ruleId":"822","severity":1,"message":"823","line":221,"column":52,"nodeType":"824","messageId":"825","endLine":221,"endColumn":54},{"ruleId":"822","severity":1,"message":"823","line":235,"column":52,"nodeType":"824","messageId":"825","endLine":235,"endColumn":54},{"ruleId":"822","severity":1,"message":"823","line":242,"column":52,"nodeType":"824","messageId":"825","endLine":242,"endColumn":54},{"ruleId":"822","severity":1,"message":"823","line":256,"column":52,"nodeType":"824","messageId":"825","endLine":256,"endColumn":54},{"ruleId":"822","severity":1,"message":"823","line":263,"column":52,"nodeType":"824","messageId":"825","endLine":263,"endColumn":54},{"ruleId":"822","severity":1,"message":"823","line":277,"column":52,"nodeType":"824","messageId":"825","endLine":277,"endColumn":54},{"ruleId":"822","severity":1,"message":"823","line":284,"column":52,"nodeType":"824","messageId":"825","endLine":284,"endColumn":54},{"ruleId":"822","severity":1,"message":"823","line":298,"column":52,"nodeType":"824","messageId":"825","endLine":298,"endColumn":54},{"ruleId":"822","severity":1,"message":"823","line":305,"column":52,"nodeType":"824","messageId":"825","endLine":305,"endColumn":54},{"ruleId":"822","severity":1,"message":"823","line":319,"column":52,"nodeType":"824","messageId":"825","endLine":319,"endColumn":54},{"ruleId":"822","severity":1,"message":"823","line":326,"column":52,"nodeType":"824","messageId":"825","endLine":326,"endColumn":54},{"ruleId":"822","severity":1,"message":"823","line":340,"column":52,"nodeType":"824","messageId":"825","endLine":340,"endColumn":54},{"ruleId":"822","severity":1,"message":"823","line":347,"column":52,"nodeType":"824","messageId":"825","endLine":347,"endColumn":54},{"ruleId":"822","severity":1,"message":"823","line":361,"column":52,"nodeType":"824","messageId":"825","endLine":361,"endColumn":54},{"ruleId":"822","severity":1,"message":"823","line":368,"column":52,"nodeType":"824","messageId":"825","endLine":368,"endColumn":54},{"ruleId":"822","severity":1,"message":"823","line":382,"column":52,"nodeType":"824","messageId":"825","endLine":382,"endColumn":54},{"ruleId":"822","severity":1,"message":"823","line":389,"column":52,"nodeType":"824","messageId":"825","endLine":389,"endColumn":54},{"ruleId":"822","severity":1,"message":"823","line":403,"column":52,"nodeType":"824","messageId":"825","endLine":403,"endColumn":54},{"ruleId":"822","severity":1,"message":"823","line":410,"column":52,"nodeType":"824","messageId":"825","endLine":410,"endColumn":54},{"ruleId":"822","severity":1,"message":"823","line":424,"column":52,"nodeType":"824","messageId":"825","endLine":424,"endColumn":54},{"ruleId":"822","severity":1,"message":"823","line":431,"column":52,"nodeType":"824","messageId":"825","endLine":431,"endColumn":54},{"ruleId":"822","severity":1,"message":"839","line":462,"column":70,"nodeType":"824","messageId":"825","endLine":462,"endColumn":72},{"ruleId":"822","severity":1,"message":"823","line":468,"column":52,"nodeType":"824","messageId":"825","endLine":468,"endColumn":54},{"ruleId":"822","severity":1,"message":"823","line":475,"column":52,"nodeType":"824","messageId":"825","endLine":475,"endColumn":54},{"ruleId":"822","severity":1,"message":"839","line":483,"column":66,"nodeType":"824","messageId":"825","endLine":483,"endColumn":68},{"ruleId":"822","severity":1,"message":"823","line":489,"column":52,"nodeType":"824","messageId":"825","endLine":489,"endColumn":54},{"ruleId":"822","severity":1,"message":"823","line":496,"column":52,"nodeType":"824","messageId":"825","endLine":496,"endColumn":54},{"ruleId":"822","severity":1,"message":"839","line":504,"column":66,"nodeType":"824","messageId":"825","endLine":504,"endColumn":68},{"ruleId":"822","severity":1,"message":"823","line":510,"column":52,"nodeType":"824","messageId":"825","endLine":510,"endColumn":54},{"ruleId":"822","severity":1,"message":"823","line":517,"column":52,"nodeType":"824","messageId":"825","endLine":517,"endColumn":54},{"ruleId":"822","severity":1,"message":"839","line":525,"column":69,"nodeType":"824","messageId":"825","endLine":525,"endColumn":71},{"ruleId":"822","severity":1,"message":"823","line":531,"column":52,"nodeType":"824","messageId":"825","endLine":531,"endColumn":54},{"ruleId":"822","severity":1,"message":"823","line":538,"column":52,"nodeType":"824","messageId":"825","endLine":538,"endColumn":54},{"ruleId":"822","severity":1,"message":"839","line":546,"column":70,"nodeType":"824","messageId":"825","endLine":546,"endColumn":72},{"ruleId":"822","severity":1,"message":"823","line":552,"column":52,"nodeType":"824","messageId":"825","endLine":552,"endColumn":54},{"ruleId":"822","severity":1,"message":"823","line":559,"column":52,"nodeType":"824","messageId":"825","endLine":559,"endColumn":54},{"ruleId":"822","severity":1,"message":"839","line":567,"column":69,"nodeType":"824","messageId":"825","endLine":567,"endColumn":71},{"ruleId":"822","severity":1,"message":"823","line":573,"column":52,"nodeType":"824","messageId":"825","endLine":573,"endColumn":54},{"ruleId":"822","severity":1,"message":"823","line":580,"column":52,"nodeType":"824","messageId":"825","endLine":580,"endColumn":54},{"ruleId":"822","severity":1,"message":"839","line":588,"column":69,"nodeType":"824","messageId":"825","endLine":588,"endColumn":71},{"ruleId":"822","severity":1,"message":"823","line":594,"column":52,"nodeType":"824","messageId":"825","endLine":594,"endColumn":54},{"ruleId":"822","severity":1,"message":"823","line":601,"column":52,"nodeType":"824","messageId":"825","endLine":601,"endColumn":54},{"ruleId":"822","severity":1,"message":"839","line":609,"column":66,"nodeType":"824","messageId":"825","endLine":609,"endColumn":68},{"ruleId":"822","severity":1,"message":"823","line":615,"column":52,"nodeType":"824","messageId":"825","endLine":615,"endColumn":54},{"ruleId":"822","severity":1,"message":"823","line":622,"column":52,"nodeType":"824","messageId":"825","endLine":622,"endColumn":54},{"ruleId":"822","severity":1,"message":"839","line":630,"column":71,"nodeType":"824","messageId":"825","endLine":630,"endColumn":73},{"ruleId":"822","severity":1,"message":"823","line":636,"column":52,"nodeType":"824","messageId":"825","endLine":636,"endColumn":54},{"ruleId":"822","severity":1,"message":"823","line":643,"column":52,"nodeType":"824","messageId":"825","endLine":643,"endColumn":54},{"ruleId":"822","severity":1,"message":"839","line":651,"column":67,"nodeType":"824","messageId":"825","endLine":651,"endColumn":69},{"ruleId":"822","severity":1,"message":"823","line":657,"column":52,"nodeType":"824","messageId":"825","endLine":657,"endColumn":54},{"ruleId":"822","severity":1,"message":"823","line":664,"column":52,"nodeType":"824","messageId":"825","endLine":664,"endColumn":54},{"ruleId":"822","severity":1,"message":"839","line":672,"column":65,"nodeType":"824","messageId":"825","endLine":672,"endColumn":67},{"ruleId":"822","severity":1,"message":"823","line":678,"column":52,"nodeType":"824","messageId":"825","endLine":678,"endColumn":54},{"ruleId":"822","severity":1,"message":"823","line":685,"column":52,"nodeType":"824","messageId":"825","endLine":685,"endColumn":54},{"ruleId":"822","severity":1,"message":"839","line":720,"column":51,"nodeType":"824","messageId":"825","endLine":720,"endColumn":53},{"ruleId":"822","severity":1,"message":"839","line":721,"column":54,"nodeType":"824","messageId":"825","endLine":721,"endColumn":56},{"ruleId":"822","severity":1,"message":"839","line":744,"column":51,"nodeType":"824","messageId":"825","endLine":744,"endColumn":53},{"ruleId":"822","severity":1,"message":"839","line":745,"column":54,"nodeType":"824","messageId":"825","endLine":745,"endColumn":56},{"ruleId":"822","severity":1,"message":"839","line":774,"column":51,"nodeType":"824","messageId":"825","endLine":774,"endColumn":53},{"ruleId":"822","severity":1,"message":"839","line":775,"column":54,"nodeType":"824","messageId":"825","endLine":775,"endColumn":56},{"ruleId":"822","severity":1,"message":"839","line":798,"column":51,"nodeType":"824","messageId":"825","endLine":798,"endColumn":53},{"ruleId":"822","severity":1,"message":"839","line":799,"column":54,"nodeType":"824","messageId":"825","endLine":799,"endColumn":56},{"ruleId":"822","severity":1,"message":"823","line":901,"column":60,"nodeType":"824","messageId":"825","endLine":901,"endColumn":62},{"ruleId":"822","severity":1,"message":"839","line":901,"column":93,"nodeType":"824","messageId":"825","endLine":901,"endColumn":95},{"ruleId":"822","severity":1,"message":"823","line":935,"column":60,"nodeType":"824","messageId":"825","endLine":935,"endColumn":62},{"ruleId":"822","severity":1,"message":"839","line":935,"column":93,"nodeType":"824","messageId":"825","endLine":935,"endColumn":95},{"ruleId":"822","severity":1,"message":"823","line":966,"column":42,"nodeType":"824","messageId":"825","endLine":966,"endColumn":44},{"ruleId":"822","severity":1,"message":"823","line":966,"column":64,"nodeType":"824","messageId":"825","endLine":966,"endColumn":66},{"ruleId":"784","severity":1,"message":"796","line":3,"column":10,"nodeType":"786","messageId":"787","endLine":3,"endColumn":16},{"ruleId":"784","severity":1,"message":"797","line":3,"column":18,"nodeType":"786","messageId":"787","endLine":3,"endColumn":23},{"ruleId":"784","severity":1,"message":"798","line":3,"column":31,"nodeType":"786","messageId":"787","endLine":3,"endColumn":44},{"ruleId":"784","severity":1,"message":"840","line":19,"column":8,"nodeType":"786","messageId":"787","endLine":19,"endColumn":16},{"ruleId":"784","severity":1,"message":"841","line":19,"column":20,"nodeType":"786","messageId":"787","endLine":19,"endColumn":30},{"ruleId":"784","severity":1,"message":"842","line":20,"column":8,"nodeType":"786","messageId":"787","endLine":20,"endColumn":14},{"ruleId":"784","severity":1,"message":"837","line":27,"column":8,"nodeType":"786","messageId":"787","endLine":27,"endColumn":17},{"ruleId":"784","severity":1,"message":"843","line":54,"column":7,"nodeType":"786","messageId":"787","endLine":54,"endColumn":19},{"ruleId":"784","severity":1,"message":"818","line":57,"column":11,"nodeType":"786","messageId":"787","endLine":57,"endColumn":22},{"ruleId":"793","severity":1,"message":"794","line":99,"column":1,"nodeType":"795","endLine":180,"endColumn":2},{"ruleId":"822","severity":1,"message":"823","line":147,"column":47,"nodeType":"824","messageId":"825","endLine":147,"endColumn":49},{"ruleId":"784","severity":1,"message":"844","line":5,"column":8,"nodeType":"786","messageId":"787","endLine":5,"endColumn":20},{"ruleId":"784","severity":1,"message":"845","line":6,"column":8,"nodeType":"786","messageId":"787","endLine":6,"endColumn":16},{"ruleId":"784","severity":1,"message":"846","line":7,"column":8,"nodeType":"786","messageId":"787","endLine":7,"endColumn":12},{"ruleId":"784","severity":1,"message":"805","line":8,"column":8,"nodeType":"786","messageId":"787","endLine":8,"endColumn":15},{"ruleId":"784","severity":1,"message":"847","line":20,"column":8,"nodeType":"786","messageId":"787","endLine":20,"endColumn":15},{"ruleId":"784","severity":1,"message":"796","line":3,"column":10,"nodeType":"786","messageId":"787","endLine":3,"endColumn":16},{"ruleId":"784","severity":1,"message":"797","line":3,"column":18,"nodeType":"786","messageId":"787","endLine":3,"endColumn":23},{"ruleId":"784","severity":1,"message":"804","line":3,"column":25,"nodeType":"786","messageId":"787","endLine":3,"endColumn":29},{"ruleId":"784","severity":1,"message":"798","line":3,"column":31,"nodeType":"786","messageId":"787","endLine":3,"endColumn":44},{"ruleId":"784","severity":1,"message":"846","line":8,"column":8,"nodeType":"786","messageId":"787","endLine":8,"endColumn":12},{"ruleId":"784","severity":1,"message":"845","line":9,"column":8,"nodeType":"786","messageId":"787","endLine":9,"endColumn":16},{"ruleId":"784","severity":1,"message":"848","line":9,"column":20,"nodeType":"786","messageId":"787","endLine":9,"endColumn":33},{"ruleId":"784","severity":1,"message":"849","line":10,"column":8,"nodeType":"786","messageId":"787","endLine":10,"endColumn":20},{"ruleId":"784","severity":1,"message":"844","line":11,"column":8,"nodeType":"786","messageId":"787","endLine":11,"endColumn":20},{"ruleId":"784","severity":1,"message":"842","line":17,"column":8,"nodeType":"786","messageId":"787","endLine":17,"endColumn":14},{"ruleId":"784","severity":1,"message":"800","line":19,"column":8,"nodeType":"786","messageId":"787","endLine":19,"endColumn":20},{"ruleId":"784","severity":1,"message":"850","line":24,"column":8,"nodeType":"786","messageId":"787","endLine":24,"endColumn":18},{"ruleId":"793","severity":1,"message":"794","line":52,"column":1,"nodeType":"795","endLine":122,"endColumn":2},{"ruleId":"784","severity":1,"message":"851","line":55,"column":10,"nodeType":"786","messageId":"787","endLine":55,"endColumn":14},{"ruleId":"784","severity":1,"message":"852","line":56,"column":9,"nodeType":"786","messageId":"787","endLine":56,"endColumn":21},{"ruleId":"784","severity":1,"message":"853","line":64,"column":10,"nodeType":"786","messageId":"787","endLine":64,"endColumn":14},{"ruleId":"784","severity":1,"message":"854","line":64,"column":16,"nodeType":"786","messageId":"787","endLine":64,"endColumn":23},{"ruleId":"784","severity":1,"message":"796","line":3,"column":10,"nodeType":"786","messageId":"787","endLine":3,"endColumn":16},{"ruleId":"784","severity":1,"message":"797","line":3,"column":18,"nodeType":"786","messageId":"787","endLine":3,"endColumn":23},{"ruleId":"784","severity":1,"message":"804","line":3,"column":25,"nodeType":"786","messageId":"787","endLine":3,"endColumn":29},{"ruleId":"784","severity":1,"message":"798","line":3,"column":31,"nodeType":"786","messageId":"787","endLine":3,"endColumn":44},{"ruleId":"784","severity":1,"message":"855","line":11,"column":10,"nodeType":"786","messageId":"787","endLine":11,"endColumn":18},{"ruleId":"784","severity":1,"message":"856","line":14,"column":8,"nodeType":"786","messageId":"787","endLine":14,"endColumn":14},{"ruleId":"784","severity":1,"message":"857","line":20,"column":8,"nodeType":"786","messageId":"787","endLine":20,"endColumn":16},{"ruleId":"793","severity":1,"message":"794","line":76,"column":1,"nodeType":"795","endLine":119,"endColumn":2},{"ruleId":"784","severity":1,"message":"844","line":5,"column":8,"nodeType":"786","messageId":"787","endLine":5,"endColumn":20},{"ruleId":"784","severity":1,"message":"845","line":6,"column":8,"nodeType":"786","messageId":"787","endLine":6,"endColumn":16},{"ruleId":"784","severity":1,"message":"846","line":7,"column":8,"nodeType":"786","messageId":"787","endLine":7,"endColumn":12},{"ruleId":"784","severity":1,"message":"805","line":8,"column":8,"nodeType":"786","messageId":"787","endLine":8,"endColumn":15},{"ruleId":"784","severity":1,"message":"858","line":16,"column":8,"nodeType":"786","messageId":"787","endLine":16,"endColumn":16},{"ruleId":"784","severity":1,"message":"801","line":17,"column":8,"nodeType":"786","messageId":"787","endLine":17,"endColumn":13},{"ruleId":"784","severity":1,"message":"802","line":18,"column":8,"nodeType":"786","messageId":"787","endLine":18,"endColumn":18},{"ruleId":"784","severity":1,"message":"859","line":20,"column":8,"nodeType":"786","messageId":"787","endLine":20,"endColumn":19},{"ruleId":"784","severity":1,"message":"860","line":21,"column":8,"nodeType":"786","messageId":"787","endLine":21,"endColumn":24},{"ruleId":"784","severity":1,"message":"861","line":111,"column":10,"nodeType":"786","messageId":"787","endLine":111,"endColumn":15},{"ruleId":"784","severity":1,"message":"862","line":112,"column":9,"nodeType":"786","messageId":"787","endLine":112,"endColumn":26},{"ruleId":"784","severity":1,"message":"844","line":5,"column":8,"nodeType":"786","messageId":"787","endLine":5,"endColumn":20},{"ruleId":"784","severity":1,"message":"845","line":6,"column":8,"nodeType":"786","messageId":"787","endLine":6,"endColumn":16},{"ruleId":"784","severity":1,"message":"846","line":7,"column":8,"nodeType":"786","messageId":"787","endLine":7,"endColumn":12},{"ruleId":"784","severity":1,"message":"805","line":8,"column":8,"nodeType":"786","messageId":"787","endLine":8,"endColumn":15},{"ruleId":"822","severity":1,"message":"823","line":200,"column":70,"nodeType":"824","messageId":"825","endLine":200,"endColumn":72},{"ruleId":"822","severity":1,"message":"823","line":242,"column":73,"nodeType":"824","messageId":"825","endLine":242,"endColumn":75},{"ruleId":"784","severity":1,"message":"863","line":7,"column":8,"nodeType":"786","messageId":"787","endLine":7,"endColumn":25},{"ruleId":"793","severity":1,"message":"794","line":93,"column":1,"nodeType":"795","endLine":336,"endColumn":2},{"ruleId":"784","severity":1,"message":"864","line":137,"column":9,"nodeType":"786","messageId":"787","endLine":137,"endColumn":21},{"ruleId":"822","severity":1,"message":"823","line":199,"column":59,"nodeType":"824","messageId":"825","endLine":199,"endColumn":61},{"ruleId":"784","severity":1,"message":"865","line":3,"column":6,"nodeType":"786","messageId":"787","endLine":3,"endColumn":18},{"ruleId":"784","severity":1,"message":"866","line":4,"column":6,"nodeType":"786","messageId":"787","endLine":4,"endColumn":15},{"ruleId":"784","severity":1,"message":"867","line":5,"column":6,"nodeType":"786","messageId":"787","endLine":5,"endColumn":14},{"ruleId":"784","severity":1,"message":"868","line":6,"column":6,"nodeType":"786","messageId":"787","endLine":6,"endColumn":16},{"ruleId":"784","severity":1,"message":"869","line":7,"column":6,"nodeType":"786","messageId":"787","endLine":7,"endColumn":17},{"ruleId":"784","severity":1,"message":"870","line":8,"column":6,"nodeType":"786","messageId":"787","endLine":8,"endColumn":17},{"ruleId":"784","severity":1,"message":"871","line":9,"column":6,"nodeType":"786","messageId":"787","endLine":9,"endColumn":16},{"ruleId":"784","severity":1,"message":"872","line":1,"column":16,"nodeType":"786","messageId":"787","endLine":1,"endColumn":24},{"ruleId":"784","severity":1,"message":"828","line":2,"column":43,"nodeType":"786","messageId":"787","endLine":2,"endColumn":50},{"ruleId":"784","severity":1,"message":"873","line":19,"column":8,"nodeType":"786","messageId":"787","endLine":19,"endColumn":18},{"ruleId":"784","severity":1,"message":"855","line":22,"column":10,"nodeType":"786","messageId":"787","endLine":22,"endColumn":18},{"ruleId":"793","severity":1,"message":"794","line":72,"column":1,"nodeType":"795","endLine":126,"endColumn":2},{"ruleId":"784","severity":1,"message":"874","line":73,"column":7,"nodeType":"786","messageId":"787","endLine":73,"endColumn":14},{"ruleId":"822","severity":1,"message":"823","line":90,"column":30,"nodeType":"824","messageId":"825","endLine":90,"endColumn":32},{"ruleId":"822","severity":1,"message":"823","line":102,"column":49,"nodeType":"824","messageId":"825","endLine":102,"endColumn":51},{"ruleId":"822","severity":1,"message":"823","line":106,"column":42,"nodeType":"824","messageId":"825","endLine":106,"endColumn":44},{"ruleId":"784","severity":1,"message":"872","line":1,"column":16,"nodeType":"786","messageId":"787","endLine":1,"endColumn":24},{"ruleId":"784","severity":1,"message":"855","line":8,"column":10,"nodeType":"786","messageId":"787","endLine":8,"endColumn":18},{"ruleId":"784","severity":1,"message":"812","line":11,"column":10,"nodeType":"786","messageId":"787","endLine":11,"endColumn":20},{"ruleId":"784","severity":1,"message":"813","line":11,"column":22,"nodeType":"786","messageId":"787","endLine":11,"endColumn":32},{"ruleId":"784","severity":1,"message":"814","line":11,"column":34,"nodeType":"786","messageId":"787","endLine":11,"endColumn":44},{"ruleId":"784","severity":1,"message":"875","line":14,"column":10,"nodeType":"786","messageId":"787","endLine":14,"endColumn":20},{"ruleId":"784","severity":1,"message":"836","line":15,"column":10,"nodeType":"786","messageId":"787","endLine":15,"endColumn":20},{"ruleId":"784","severity":1,"message":"876","line":17,"column":8,"nodeType":"786","messageId":"787","endLine":17,"endColumn":21},{"ruleId":"784","severity":1,"message":"838","line":18,"column":10,"nodeType":"786","messageId":"787","endLine":18,"endColumn":14},{"ruleId":"784","severity":1,"message":"877","line":24,"column":7,"nodeType":"786","messageId":"787","endLine":24,"endColumn":16},{"ruleId":"793","severity":1,"message":"794","line":35,"column":1,"nodeType":"795","endLine":145,"endColumn":2},{"ruleId":"784","severity":1,"message":"878","line":36,"column":11,"nodeType":"786","messageId":"787","endLine":36,"endColumn":16},{"ruleId":"822","severity":1,"message":"839","line":47,"column":22,"nodeType":"824","messageId":"825","endLine":47,"endColumn":24},{"ruleId":"784","severity":1,"message":"872","line":1,"column":16,"nodeType":"786","messageId":"787","endLine":1,"endColumn":24},{"ruleId":"784","severity":1,"message":"803","line":1,"column":26,"nodeType":"786","messageId":"787","endLine":1,"endColumn":35},{"ruleId":"784","severity":1,"message":"812","line":4,"column":10,"nodeType":"786","messageId":"787","endLine":4,"endColumn":20},{"ruleId":"784","severity":1,"message":"813","line":4,"column":22,"nodeType":"786","messageId":"787","endLine":4,"endColumn":32},{"ruleId":"784","severity":1,"message":"814","line":4,"column":34,"nodeType":"786","messageId":"787","endLine":4,"endColumn":44},{"ruleId":"784","severity":1,"message":"875","line":7,"column":10,"nodeType":"786","messageId":"787","endLine":7,"endColumn":20},{"ruleId":"784","severity":1,"message":"837","line":9,"column":8,"nodeType":"786","messageId":"787","endLine":9,"endColumn":17},{"ruleId":"784","severity":1,"message":"838","line":10,"column":10,"nodeType":"786","messageId":"787","endLine":10,"endColumn":14},{"ruleId":"793","severity":1,"message":"794","line":15,"column":1,"nodeType":"795","endLine":36,"endColumn":2},{"ruleId":"822","severity":1,"message":"823","line":22,"column":24,"nodeType":"824","messageId":"825","endLine":22,"endColumn":26},{"ruleId":"784","severity":1,"message":"872","line":1,"column":16,"nodeType":"786","messageId":"787","endLine":1,"endColumn":24},{"ruleId":"784","severity":1,"message":"879","line":3,"column":8,"nodeType":"786","messageId":"787","endLine":3,"endColumn":18},{"ruleId":"784","severity":1,"message":"880","line":12,"column":8,"nodeType":"786","messageId":"787","endLine":12,"endColumn":17},{"ruleId":"784","severity":1,"message":"881","line":20,"column":8,"nodeType":"786","messageId":"787","endLine":20,"endColumn":13},{"ruleId":"784","severity":1,"message":"882","line":28,"column":10,"nodeType":"786","messageId":"787","endLine":28,"endColumn":20},{"ruleId":"793","severity":1,"message":"794","line":32,"column":1,"nodeType":"795","endLine":106,"endColumn":2},{"ruleId":"784","severity":1,"message":"872","line":1,"column":16,"nodeType":"786","messageId":"787","endLine":1,"endColumn":24},{"ruleId":"784","severity":1,"message":"883","line":3,"column":8,"nodeType":"786","messageId":"787","endLine":3,"endColumn":18},{"ruleId":"784","severity":1,"message":"884","line":14,"column":8,"nodeType":"786","messageId":"787","endLine":14,"endColumn":31},{"ruleId":"784","severity":1,"message":"885","line":18,"column":8,"nodeType":"786","messageId":"787","endLine":18,"endColumn":13},{"ruleId":"784","severity":1,"message":"879","line":19,"column":8,"nodeType":"786","messageId":"787","endLine":19,"endColumn":18},{"ruleId":"784","severity":1,"message":"812","line":21,"column":10,"nodeType":"786","messageId":"787","endLine":21,"endColumn":20},{"ruleId":"784","severity":1,"message":"814","line":21,"column":34,"nodeType":"786","messageId":"787","endLine":21,"endColumn":44},{"ruleId":"784","severity":1,"message":"815","line":21,"column":46,"nodeType":"786","messageId":"787","endLine":21,"endColumn":56},{"ruleId":"784","severity":1,"message":"816","line":21,"column":58,"nodeType":"786","messageId":"787","endLine":21,"endColumn":66},{"ruleId":"784","severity":1,"message":"875","line":24,"column":10,"nodeType":"786","messageId":"787","endLine":24,"endColumn":20},{"ruleId":"784","severity":1,"message":"836","line":25,"column":10,"nodeType":"786","messageId":"787","endLine":25,"endColumn":20},{"ruleId":"784","severity":1,"message":"876","line":27,"column":8,"nodeType":"786","messageId":"787","endLine":27,"endColumn":21},{"ruleId":"784","severity":1,"message":"838","line":28,"column":10,"nodeType":"786","messageId":"787","endLine":28,"endColumn":14},{"ruleId":"793","severity":1,"message":"794","line":84,"column":1,"nodeType":"795","endLine":564,"endColumn":2},{"ruleId":"784","severity":1,"message":"818","line":87,"column":9,"nodeType":"786","messageId":"787","endLine":87,"endColumn":20},{"ruleId":"822","severity":1,"message":"839","line":94,"column":19,"nodeType":"824","messageId":"825","endLine":94,"endColumn":21},{"ruleId":"822","severity":1,"message":"823","line":149,"column":45,"nodeType":"824","messageId":"825","endLine":149,"endColumn":47},{"ruleId":"822","severity":1,"message":"823","line":202,"column":44,"nodeType":"824","messageId":"825","endLine":202,"endColumn":46},{"ruleId":"822","severity":1,"message":"823","line":220,"column":48,"nodeType":"824","messageId":"825","endLine":220,"endColumn":50},{"ruleId":"822","severity":1,"message":"823","line":236,"column":50,"nodeType":"824","messageId":"825","endLine":236,"endColumn":52},{"ruleId":"822","severity":1,"message":"823","line":275,"column":39,"nodeType":"824","messageId":"825","endLine":275,"endColumn":41},{"ruleId":"822","severity":1,"message":"823","line":293,"column":40,"nodeType":"824","messageId":"825","endLine":293,"endColumn":42},{"ruleId":"822","severity":1,"message":"823","line":314,"column":52,"nodeType":"824","messageId":"825","endLine":314,"endColumn":54},{"ruleId":"822","severity":1,"message":"823","line":331,"column":47,"nodeType":"824","messageId":"825","endLine":331,"endColumn":49},{"ruleId":"822","severity":1,"message":"823","line":349,"column":44,"nodeType":"824","messageId":"825","endLine":349,"endColumn":46},{"ruleId":"822","severity":1,"message":"823","line":368,"column":43,"nodeType":"824","messageId":"825","endLine":368,"endColumn":45},{"ruleId":"822","severity":1,"message":"823","line":383,"column":46,"nodeType":"824","messageId":"825","endLine":383,"endColumn":48},{"ruleId":"822","severity":1,"message":"823","line":398,"column":41,"nodeType":"824","messageId":"825","endLine":398,"endColumn":43},{"ruleId":"822","severity":1,"message":"823","line":446,"column":47,"nodeType":"824","messageId":"825","endLine":446,"endColumn":49},{"ruleId":"822","severity":1,"message":"839","line":510,"column":41,"nodeType":"824","messageId":"825","endLine":510,"endColumn":43},{"ruleId":"784","severity":1,"message":"828","line":2,"column":43,"nodeType":"786","messageId":"787","endLine":2,"endColumn":50},{"ruleId":"784","severity":1,"message":"809","line":3,"column":8,"nodeType":"786","messageId":"787","endLine":3,"endColumn":12},{"ruleId":"784","severity":1,"message":"886","line":9,"column":8,"nodeType":"786","messageId":"787","endLine":9,"endColumn":23},{"ruleId":"784","severity":1,"message":"842","line":13,"column":8,"nodeType":"786","messageId":"787","endLine":13,"endColumn":14},{"ruleId":"784","severity":1,"message":"887","line":15,"column":8,"nodeType":"786","messageId":"787","endLine":15,"endColumn":16},{"ruleId":"784","severity":1,"message":"888","line":16,"column":8,"nodeType":"786","messageId":"787","endLine":16,"endColumn":15},{"ruleId":"793","severity":1,"message":"794","line":74,"column":1,"nodeType":"795","endLine":119,"endColumn":2},{"ruleId":"784","severity":1,"message":"874","line":75,"column":7,"nodeType":"786","messageId":"787","endLine":75,"endColumn":14},{"ruleId":"784","severity":1,"message":"889","line":76,"column":6,"nodeType":"786","messageId":"787","endLine":76,"endColumn":13},{"ruleId":"784","severity":1,"message":"890","line":76,"column":15,"nodeType":"786","messageId":"787","endLine":76,"endColumn":25},{"ruleId":"891","severity":1,"message":"892","line":97,"column":35,"nodeType":"893","endLine":97,"endColumn":138},{"ruleId":"784","severity":1,"message":"806","line":5,"column":8,"nodeType":"786","messageId":"787","endLine":5,"endColumn":16},{"ruleId":"784","severity":1,"message":"863","line":11,"column":8,"nodeType":"786","messageId":"787","endLine":11,"endColumn":25},{"ruleId":"784","severity":1,"message":"894","line":22,"column":8,"nodeType":"786","messageId":"787","endLine":22,"endColumn":22},{"ruleId":"784","severity":1,"message":"895","line":23,"column":8,"nodeType":"786","messageId":"787","endLine":23,"endColumn":22},{"ruleId":"784","severity":1,"message":"896","line":37,"column":8,"nodeType":"786","messageId":"787","endLine":37,"endColumn":16},{"ruleId":"784","severity":1,"message":"897","line":38,"column":10,"nodeType":"786","messageId":"787","endLine":38,"endColumn":20},{"ruleId":"784","severity":1,"message":"898","line":38,"column":22,"nodeType":"786","messageId":"787","endLine":38,"endColumn":34},{"ruleId":"784","severity":1,"message":"813","line":39,"column":10,"nodeType":"786","messageId":"787","endLine":39,"endColumn":20},{"ruleId":"784","severity":1,"message":"899","line":40,"column":10,"nodeType":"786","messageId":"787","endLine":40,"endColumn":18},{"ruleId":"793","severity":1,"message":"794","line":57,"column":1,"nodeType":"795","endLine":495,"endColumn":2},{"ruleId":"793","severity":1,"message":"794","line":64,"column":1,"nodeType":"795","endLine":233,"endColumn":2},{"ruleId":"784","severity":1,"message":"900","line":74,"column":10,"nodeType":"786","messageId":"787","endLine":74,"endColumn":18},{"ruleId":"784","severity":1,"message":"901","line":74,"column":20,"nodeType":"786","messageId":"787","endLine":74,"endColumn":31},{"ruleId":"784","severity":1,"message":"902","line":3,"column":8,"nodeType":"786","messageId":"787","endLine":3,"endColumn":17},{"ruleId":"784","severity":1,"message":"799","line":6,"column":8,"nodeType":"786","messageId":"787","endLine":6,"endColumn":17},{"ruleId":"784","severity":1,"message":"903","line":10,"column":8,"nodeType":"786","messageId":"787","endLine":10,"endColumn":14},{"ruleId":"784","severity":1,"message":"904","line":11,"column":8,"nodeType":"786","messageId":"787","endLine":11,"endColumn":16},{"ruleId":"784","severity":1,"message":"902","line":3,"column":8,"nodeType":"786","messageId":"787","endLine":3,"endColumn":17},{"ruleId":"784","severity":1,"message":"799","line":6,"column":8,"nodeType":"786","messageId":"787","endLine":6,"endColumn":17},{"ruleId":"784","severity":1,"message":"897","line":1,"column":10,"nodeType":"786","messageId":"787","endLine":1,"endColumn":20},{"ruleId":"784","severity":1,"message":"898","line":1,"column":22,"nodeType":"786","messageId":"787","endLine":1,"endColumn":34},{"ruleId":"784","severity":1,"message":"902","line":3,"column":8,"nodeType":"786","messageId":"787","endLine":3,"endColumn":17},{"ruleId":"784","severity":1,"message":"799","line":6,"column":8,"nodeType":"786","messageId":"787","endLine":6,"endColumn":17},{"ruleId":"784","severity":1,"message":"902","line":3,"column":8,"nodeType":"786","messageId":"787","endLine":3,"endColumn":17},{"ruleId":"784","severity":1,"message":"799","line":6,"column":8,"nodeType":"786","messageId":"787","endLine":6,"endColumn":17},{"ruleId":"784","severity":1,"message":"805","line":7,"column":8,"nodeType":"786","messageId":"787","endLine":7,"endColumn":15},{"ruleId":"784","severity":1,"message":"905","line":3,"column":8,"nodeType":"786","messageId":"787","endLine":3,"endColumn":21},{"ruleId":"784","severity":1,"message":"906","line":9,"column":8,"nodeType":"786","messageId":"787","endLine":9,"endColumn":17},{"ruleId":"784","severity":1,"message":"907","line":10,"column":8,"nodeType":"786","messageId":"787","endLine":10,"endColumn":18},{"ruleId":"784","severity":1,"message":"908","line":11,"column":8,"nodeType":"786","messageId":"787","endLine":11,"endColumn":16},{"ruleId":"784","severity":1,"message":"909","line":12,"column":8,"nodeType":"786","messageId":"787","endLine":12,"endColumn":23},{"ruleId":"784","severity":1,"message":"910","line":15,"column":8,"nodeType":"786","messageId":"787","endLine":15,"endColumn":18},{"ruleId":"784","severity":1,"message":"911","line":16,"column":8,"nodeType":"786","messageId":"787","endLine":16,"endColumn":21},{"ruleId":"822","severity":1,"message":"823","line":87,"column":17,"nodeType":"824","messageId":"825","endLine":87,"endColumn":19},{"ruleId":"822","severity":1,"message":"823","line":90,"column":23,"nodeType":"824","messageId":"825","endLine":90,"endColumn":25},{"ruleId":"822","severity":1,"message":"823","line":100,"column":19,"nodeType":"824","messageId":"825","endLine":100,"endColumn":21},{"ruleId":"822","severity":1,"message":"823","line":103,"column":23,"nodeType":"824","messageId":"825","endLine":103,"endColumn":25},{"ruleId":"822","severity":1,"message":"823","line":113,"column":19,"nodeType":"824","messageId":"825","endLine":113,"endColumn":21},{"ruleId":"822","severity":1,"message":"823","line":116,"column":17,"nodeType":"824","messageId":"825","endLine":116,"endColumn":19},{"ruleId":"822","severity":1,"message":"823","line":128,"column":23,"nodeType":"824","messageId":"825","endLine":128,"endColumn":25},{"ruleId":"822","severity":1,"message":"823","line":141,"column":40,"nodeType":"824","messageId":"825","endLine":141,"endColumn":42},{"ruleId":"822","severity":1,"message":"823","line":142,"column":44,"nodeType":"824","messageId":"825","endLine":142,"endColumn":46},{"ruleId":"822","severity":1,"message":"823","line":143,"column":48,"nodeType":"824","messageId":"825","endLine":143,"endColumn":50},{"ruleId":"822","severity":1,"message":"823","line":144,"column":52,"nodeType":"824","messageId":"825","endLine":144,"endColumn":54},{"ruleId":"822","severity":1,"message":"823","line":145,"column":56,"nodeType":"824","messageId":"825","endLine":145,"endColumn":58},{"ruleId":"822","severity":1,"message":"823","line":146,"column":56,"nodeType":"824","messageId":"825","endLine":146,"endColumn":58},{"ruleId":"822","severity":1,"message":"823","line":147,"column":52,"nodeType":"824","messageId":"825","endLine":147,"endColumn":54},{"ruleId":"822","severity":1,"message":"823","line":148,"column":48,"nodeType":"824","messageId":"825","endLine":148,"endColumn":50},{"ruleId":"822","severity":1,"message":"823","line":149,"column":44,"nodeType":"824","messageId":"825","endLine":149,"endColumn":46},{"ruleId":"822","severity":1,"message":"823","line":150,"column":40,"nodeType":"824","messageId":"825","endLine":150,"endColumn":42},{"ruleId":"822","severity":1,"message":"823","line":158,"column":22,"nodeType":"824","messageId":"825","endLine":158,"endColumn":24},{"ruleId":"822","severity":1,"message":"823","line":171,"column":40,"nodeType":"824","messageId":"825","endLine":171,"endColumn":42},{"ruleId":"822","severity":1,"message":"823","line":172,"column":44,"nodeType":"824","messageId":"825","endLine":172,"endColumn":46},{"ruleId":"822","severity":1,"message":"823","line":173,"column":48,"nodeType":"824","messageId":"825","endLine":173,"endColumn":50},{"ruleId":"822","severity":1,"message":"823","line":174,"column":52,"nodeType":"824","messageId":"825","endLine":174,"endColumn":54},{"ruleId":"822","severity":1,"message":"823","line":182,"column":22,"nodeType":"824","messageId":"825","endLine":182,"endColumn":24},{"ruleId":"822","severity":1,"message":"823","line":195,"column":40,"nodeType":"824","messageId":"825","endLine":195,"endColumn":42},{"ruleId":"822","severity":1,"message":"823","line":196,"column":44,"nodeType":"824","messageId":"825","endLine":196,"endColumn":46},{"ruleId":"822","severity":1,"message":"823","line":197,"column":48,"nodeType":"824","messageId":"825","endLine":197,"endColumn":50},{"ruleId":"822","severity":1,"message":"823","line":198,"column":44,"nodeType":"824","messageId":"825","endLine":198,"endColumn":46},{"ruleId":"822","severity":1,"message":"823","line":199,"column":40,"nodeType":"824","messageId":"825","endLine":199,"endColumn":42},{"ruleId":"784","severity":1,"message":"902","line":3,"column":8,"nodeType":"786","messageId":"787","endLine":3,"endColumn":17},{"ruleId":"784","severity":1,"message":"799","line":6,"column":8,"nodeType":"786","messageId":"787","endLine":6,"endColumn":17},{"ruleId":"784","severity":1,"message":"912","line":17,"column":20,"nodeType":"786","messageId":"787","endLine":17,"endColumn":33},{"ruleId":"784","severity":1,"message":"913","line":81,"column":10,"nodeType":"786","messageId":"787","endLine":81,"endColumn":21},{"ruleId":"784","severity":1,"message":"912","line":17,"column":20,"nodeType":"786","messageId":"787","endLine":17,"endColumn":33},{"ruleId":"784","severity":1,"message":"913","line":81,"column":10,"nodeType":"786","messageId":"787","endLine":81,"endColumn":21},{"ruleId":"784","severity":1,"message":"912","line":17,"column":20,"nodeType":"786","messageId":"787","endLine":17,"endColumn":33},{"ruleId":"784","severity":1,"message":"913","line":81,"column":10,"nodeType":"786","messageId":"787","endLine":81,"endColumn":21},{"ruleId":"784","severity":1,"message":"912","line":17,"column":20,"nodeType":"786","messageId":"787","endLine":17,"endColumn":33},{"ruleId":"784","severity":1,"message":"913","line":81,"column":10,"nodeType":"786","messageId":"787","endLine":81,"endColumn":21},{"ruleId":"784","severity":1,"message":"912","line":17,"column":20,"nodeType":"786","messageId":"787","endLine":17,"endColumn":33},{"ruleId":"784","severity":1,"message":"913","line":81,"column":10,"nodeType":"786","messageId":"787","endLine":81,"endColumn":21},{"ruleId":"784","severity":1,"message":"912","line":17,"column":20,"nodeType":"786","messageId":"787","endLine":17,"endColumn":33},{"ruleId":"784","severity":1,"message":"913","line":81,"column":10,"nodeType":"786","messageId":"787","endLine":81,"endColumn":21},{"ruleId":"784","severity":1,"message":"912","line":17,"column":20,"nodeType":"786","messageId":"787","endLine":17,"endColumn":33},{"ruleId":"784","severity":1,"message":"913","line":81,"column":10,"nodeType":"786","messageId":"787","endLine":81,"endColumn":21},{"ruleId":"784","severity":1,"message":"912","line":17,"column":20,"nodeType":"786","messageId":"787","endLine":17,"endColumn":33},{"ruleId":"784","severity":1,"message":"913","line":81,"column":10,"nodeType":"786","messageId":"787","endLine":81,"endColumn":21},{"ruleId":"784","severity":1,"message":"912","line":17,"column":20,"nodeType":"786","messageId":"787","endLine":17,"endColumn":33},{"ruleId":"784","severity":1,"message":"913","line":81,"column":10,"nodeType":"786","messageId":"787","endLine":81,"endColumn":21},{"ruleId":"784","severity":1,"message":"912","line":17,"column":20,"nodeType":"786","messageId":"787","endLine":17,"endColumn":33},{"ruleId":"784","severity":1,"message":"913","line":81,"column":10,"nodeType":"786","messageId":"787","endLine":81,"endColumn":21},{"ruleId":"784","severity":1,"message":"912","line":17,"column":20,"nodeType":"786","messageId":"787","endLine":17,"endColumn":33},{"ruleId":"784","severity":1,"message":"913","line":81,"column":10,"nodeType":"786","messageId":"787","endLine":81,"endColumn":21},{"ruleId":"784","severity":1,"message":"912","line":17,"column":20,"nodeType":"786","messageId":"787","endLine":17,"endColumn":33},{"ruleId":"784","severity":1,"message":"913","line":81,"column":10,"nodeType":"786","messageId":"787","endLine":81,"endColumn":21},{"ruleId":"784","severity":1,"message":"912","line":17,"column":20,"nodeType":"786","messageId":"787","endLine":17,"endColumn":33},{"ruleId":"784","severity":1,"message":"913","line":81,"column":10,"nodeType":"786","messageId":"787","endLine":81,"endColumn":21},{"ruleId":"784","severity":1,"message":"912","line":17,"column":20,"nodeType":"786","messageId":"787","endLine":17,"endColumn":33},{"ruleId":"784","severity":1,"message":"913","line":81,"column":10,"nodeType":"786","messageId":"787","endLine":81,"endColumn":21},{"ruleId":"784","severity":1,"message":"912","line":17,"column":20,"nodeType":"786","messageId":"787","endLine":17,"endColumn":33},{"ruleId":"784","severity":1,"message":"913","line":81,"column":10,"nodeType":"786","messageId":"787","endLine":81,"endColumn":21},{"ruleId":"784","severity":1,"message":"912","line":17,"column":20,"nodeType":"786","messageId":"787","endLine":17,"endColumn":33},{"ruleId":"784","severity":1,"message":"913","line":81,"column":10,"nodeType":"786","messageId":"787","endLine":81,"endColumn":21},{"ruleId":"784","severity":1,"message":"912","line":17,"column":20,"nodeType":"786","messageId":"787","endLine":17,"endColumn":33},{"ruleId":"784","severity":1,"message":"913","line":81,"column":10,"nodeType":"786","messageId":"787","endLine":81,"endColumn":21},{"ruleId":"784","severity":1,"message":"912","line":17,"column":20,"nodeType":"786","messageId":"787","endLine":17,"endColumn":33},{"ruleId":"784","severity":1,"message":"913","line":81,"column":10,"nodeType":"786","messageId":"787","endLine":81,"endColumn":21},{"ruleId":"784","severity":1,"message":"912","line":17,"column":20,"nodeType":"786","messageId":"787","endLine":17,"endColumn":33},{"ruleId":"784","severity":1,"message":"913","line":81,"column":10,"nodeType":"786","messageId":"787","endLine":81,"endColumn":21},{"ruleId":"914","severity":1,"message":"915","line":1,"column":28,"nodeType":"786","messageId":"787","endLine":1,"endColumn":34},{"ruleId":"914","severity":1,"message":"872","line":1,"column":36,"nodeType":"786","messageId":"787","endLine":1,"endColumn":44},{"ruleId":"914","severity":1,"message":"916","line":5,"column":8,"nodeType":"786","messageId":"787","endLine":5,"endColumn":19},{"ruleId":"914","severity":1,"message":"917","line":8,"column":10,"nodeType":"786","messageId":"787","endLine":8,"endColumn":19},"no-native-reassign",["918"],"no-negated-in-lhs",["919"],"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'MailIcon' is defined but never used.","'IPIcon' is defined but never used.","'AdvancedModeIcon' is defined but never used.","'HomeIcon' is defined but never used.","'Whatismyip' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'Switch' is defined but never used.","'Route' is defined but never used.","'BrowserRouter' is defined but never used.","'FormLabel' is defined but never used.","'ScanModeIcon' is defined but never used.","'Radio' is defined but never used.","'RadioGroup' is defined but never used.","'useEffect' is defined but never used.","'Link' is defined but never used.","'Divider' is defined but never used.","'Collapse' is defined but never used.","'Popover' is defined but never used.","'LiveHelpOutlinedIcon' is defined but never used.","'Chip' is defined but never used.","'AdvancedMode' is defined but never used.","'AutomationIcon' is defined but never used.","'scanTarget' is defined but never used.","'targetData' is defined but never used.","'targetTime' is defined but never used.","'chosenMode' is defined but never used.","'scanDate' is defined but never used.","'ScanOnProgress' is assigned a value but never used.","'handleClick' is assigned a value but never used.","'isEmpty' is assigned a value but never used.","'target' is assigned a value but never used.","'setTarget' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'reset' is assigned a value but never used.","'setReset' is assigned a value but never used.","'lighten' is defined but never used.","'TextField' is defined but never used.","'ButtonGroup' is defined but never used.","'Page' is defined but never used.","'Text' is defined but never used.","'View' is defined but never used.","'Document' is defined but never used.","'StyleSheet' is defined but never used.","'pureOutput' is defined but never used.","'scannedIn' is defined but never used.","'rows' is defined but never used.","Expected '!==' and instead saw '!='.","'MuiAlert' is defined but never used.","'AlertProps' is defined but never used.","'Button' is defined but never used.","'DoneScanning' is assigned a value but never used.","'ListItemText' is defined but never used.","'ListItem' is defined but never used.","'List' is defined but never used.","'Content' is defined but never used.","'ListItemProps' is defined but never used.","'ListItemIcon' is defined but never used.","'AddNewMode' is defined but never used.","'type' is assigned a value but never used.","'handleChange' is assigned a value but never used.","'mode' is assigned a value but never used.","'setMode' is assigned a value but never used.","'observer' is defined but never used.","'Result' is defined but never used.","'scanMode' is defined but never used.","'Checkbox' is defined but never used.","'FormControl' is defined but never used.","'FormControlLabel' is defined but never used.","'radio' is assigned a value but never used.","'handleRadioChange' is assigned a value but never used.","'DialogContentText' is defined but never used.","'handleCreate' is assigned a value but never used.","'profileModel' is defined but never used.","'pingModel' is defined but never used.","'nseModel' is defined but never used.","'targetMode' is defined but never used.","'sourceModel' is defined but never used.","'timingModel' is defined but never used.","'otherModel' is defined but never used.","'useState' is defined but never used.","'NmapOutput' is defined but never used.","'classes' is assigned a value but never used.","'isScanning' is defined but never used.","'scannedTarget' is defined but never used.","'useStyles' is assigned a value but never used.","'datas' is assigned a value but never used.","'Typography' is defined but never used.","'GoogleMap' is defined but never used.","'store' is defined but never used.","'createData' is defined but never used.","'IconButton' is defined but never used.","'TimelineOppositeContent' is defined but never used.","'Paper' is defined but never used.","'TablePagination' is defined but never used.","'InfoIcon' is defined but never used.","'CVEicon' is defined but never used.","'dataQty' is assigned a value but never used.","'setDataQty' is assigned a value but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","'ExpandMoreIcon' is defined but never used.","'ExpandLessIcon' is defined but never used.","'SetFlags' is defined but never used.","'automation' is defined but never used.","'cveDetection' is defined but never used.","'settings' is defined but never used.","'setRange' is assigned a value but never used.","'setSetRange' is assigned a value but never used.","'FormGroup' is defined but never used.","'Select' is defined but never used.","'MenuItem' is defined but never used.","'ListSubheader' is defined but never used.","'InboxIcon' is defined but never used.","'DraftsIcon' is defined but never used.","'SendIcon' is defined but never used.","'DynamicFeedIcon' is defined but never used.","'StarBorder' is defined but never used.","'ExtensionIcon' is defined but never used.","'CheckboxProps' is defined but never used.","'handleClick' is defined but never used.","no-unused-vars","'useRef' is defined but never used.","'storeTarget' is defined but never used.","'targetGeo' is defined but never used.","no-global-assign","no-unsafe-negation"]