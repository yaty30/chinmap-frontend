[{"C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\index.tsx":"1","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\reportWebVitals.ts":"2","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\App.tsx":"3","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Views\\Drawer.tsx":"4","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\Drawer.tsx":"5","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Views\\Home.tsx":"6","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Views\\DefaultScanMode.tsx":"7","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Views\\ScanResult.tsx":"8","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Views\\ScanComparison.tsx":"9","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Views\\CustomisedScanMode.tsx":"10","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Views\\AdvancedMode.tsx":"11","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Views\\ScanHistory.tsx":"12","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\defaultScanModes\\pingScanMode.tsx":"13","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\defaultScanModes\\fullPortsScanMode.tsx":"14","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\defaultScanModes\\nonPingScanMode.tsx":"15","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\defaultScanModes\\intenseScanMode.tsx":"16","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\defaultScanModes\\lightningScanMode.tsx":"17","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\defaultScanModes\\top100portsScanMode.tsx":"18","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\Home.tsx":"19","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\DefaultScanMode.tsx":"20","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\ScanResult.tsx":"21","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\ScanComparison.tsx":"22","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\CustomisedScanMode.tsx":"23","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\AdvancedMode.tsx":"24","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\ScanHistory.tsx":"25","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Backend\\frontendData\\toDelete.tsx":"26","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\NewScanModeTab\\customisedModeDialog.tsx":"27","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Backend\\frontendData\\getPortStatus.tsx":"28","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Mobx\\Models\\resultSelectStatus.tsx":"29","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Mobx\\Models\\homeSettingsFlagStatus.tsx":"30","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Mobx\\Models\\advancedModeStatus.tsx":"31","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Mobx\\Models\\defaultScanModeStatus.tsx":"32","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Backend\\frontendData\\isScanning.tsx":"33","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\AdvancedModeContent.tsx":"34","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Backend\\frontendData\\customisedScanModeStatus.tsx":"35","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\NewScanMode.tsx":"36","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\ScanResults\\CVEResult.tsx":"37","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\ScanResults\\ExportResult.tsx":"38","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\ScanResults\\WhoIs.tsx":"39","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\ScanResults\\ScanDetails.tsx":"40","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\ScanResults\\Firewalk.tsx":"41","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\ScanResults\\ExploitCVE.tsx":"42","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\ScanResults\\HostsAndPorts.tsx":"43","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\ScanResults\\NmapOutput.tsx":"44","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\defaultScanModes\\defaultModeDialog.tsx":"45","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Mobx\\Models\\homeSettingsStatus.tsx":"46","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Backend\\frontendData\\advancedScan.tsx":"47","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Backend\\frontendData\\Result.tsx":"48","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\NewScanModeTab\\Others.tsx":"49","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Backend\\frontendData\\exploitCVEoutput.tsx":"50","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Backend\\frontendData\\firewalkOutput.tsx":"51","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Backend\\frontendData\\tracerouteOutput.tsx":"52","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Backend\\frontendData\\cveScanOutput.tsx":"53","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\target.tsx":"54","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Backend\\frontendData\\targetGeo.tsx":"55","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Backend\\frontendData\\whoisScan.tsx":"56","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\NewScanModeTab\\NewModeOptions.tsx":"57","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\NewScanModeTab\\Timing.tsx":"58","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\NewScanModeTab\\Source.tsx":"59","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\NewScanModeTab\\Target.tsx":"60","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\NewScanModeTab\\NSE.tsx":"61","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\NewScanModeTab\\Ping.tsx":"62","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\nonTCPoptions.tsx":"63","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\TCPoptions.tsx":"64","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\HomeSettings\\HomeSettings.tsx":"65","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\HomeSettings\\ScanRangeDisplay.tsx":"66","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\NewScanModeTab\\nseData\\Discovery\\Database.tsx":"67","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\NewScanModeTab\\nseData\\Discovery\\Broadcast.tsx":"68","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\NewScanModeTab\\nseData\\Discovery\\Hadoop.tsx":"69","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\NewScanModeTab\\nseData\\Discovery\\IP.tsx":"70","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\NewScanModeTab\\nseData\\Discovery\\HTTP.tsx":"71","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\NewScanModeTab\\nseData\\Discovery\\SMTP.tsx":"72","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\NewScanModeTab\\nseData\\Discovery\\Server.tsx":"73","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\NewScanModeTab\\nseData\\Discovery\\ServerMessageBlock.tsx":"74","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\NewScanModeTab\\nseData\\Discovery\\Network.tsx":"75","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\NewScanModeTab\\nseData\\Vulnerability\\SSL.tsx":"76","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\NewScanModeTab\\nseData\\Discovery\\Targets.tsx":"77","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\NewScanModeTab\\nseData\\Vulnerability\\Others.tsx":"78","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\NewScanModeTab\\nseData\\Vulnerability\\SMB.tsx":"79","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\NewScanModeTab\\nseData\\Vulnerability\\FTP.tsx":"80","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\NewScanModeTab\\nseData\\Exploit\\SMB.tsx":"81","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\NewScanModeTab\\nseData\\Vulnerability\\HTTP.tsx":"82","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\NewScanModeTab\\nseData\\Exploit\\Others.tsx":"83","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\NewScanModeTab\\nseData\\Exploit\\FTP.tsx":"84","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\NewScanModeTab\\nseData\\Exploit\\HTTP.tsx":"85"},{"size":517,"mtime":1617092477030,"results":"86","hashOfConfig":"87"},{"size":440,"mtime":1617092477034,"results":"88","hashOfConfig":"87"},{"size":940,"mtime":1617092473557,"results":"89","hashOfConfig":"87"},{"size":184,"mtime":1617092477023,"results":"90","hashOfConfig":"87"},{"size":10211,"mtime":1617092476846,"results":"91","hashOfConfig":"87"},{"size":176,"mtime":1617092477025,"results":"92","hashOfConfig":"87"},{"size":220,"mtime":1617092477022,"results":"93","hashOfConfig":"87"},{"size":200,"mtime":1617092477027,"results":"94","hashOfConfig":"87"},{"size":216,"mtime":1617092477026,"results":"95","hashOfConfig":"87"},{"size":232,"mtime":1617092477020,"results":"96","hashOfConfig":"87"},{"size":208,"mtime":1617092477019,"results":"97","hashOfConfig":"87"},{"size":204,"mtime":1617092477026,"results":"98","hashOfConfig":"87"},{"size":9189,"mtime":1617092476993,"results":"99","hashOfConfig":"87"},{"size":9234,"mtime":1617092476987,"results":"100","hashOfConfig":"87"},{"size":9016,"mtime":1617092476992,"results":"101","hashOfConfig":"87"},{"size":9301,"mtime":1617092476989,"results":"102","hashOfConfig":"87"},{"size":10329,"mtime":1617092476990,"results":"103","hashOfConfig":"87"},{"size":7919,"mtime":1617092476995,"results":"104","hashOfConfig":"87"},{"size":19292,"mtime":1617191336042,"results":"105","hashOfConfig":"87"},{"size":4003,"mtime":1617092476845,"results":"106","hashOfConfig":"87"},{"size":12728,"mtime":1617092476964,"results":"107","hashOfConfig":"87"},{"size":52440,"mtime":1617092476962,"results":"108","hashOfConfig":"87"},{"size":4880,"mtime":1617092476843,"results":"109","hashOfConfig":"87"},{"size":8781,"mtime":1617092476840,"results":"110","hashOfConfig":"87"},{"size":6796,"mtime":1617092476963,"results":"111","hashOfConfig":"87"},{"size":217,"mtime":1617191356310,"results":"112","hashOfConfig":"87"},{"size":7383,"mtime":1617092476900,"results":"113","hashOfConfig":"87"},{"size":5505,"mtime":1617191356300,"results":"114","hashOfConfig":"87"},{"size":321,"mtime":1617092477007,"results":"115","hashOfConfig":"87"},{"size":370,"mtime":1617092477005,"results":"116","hashOfConfig":"87"},{"size":498,"mtime":1617092477002,"results":"117","hashOfConfig":"87"},{"size":3957,"mtime":1617092477004,"results":"118","hashOfConfig":"87"},{"size":32,"mtime":1617191356303,"results":"119","hashOfConfig":"87"},{"size":2336,"mtime":1617092476842,"results":"120","hashOfConfig":"87"},{"size":3213,"mtime":1617092474802,"results":"121","hashOfConfig":"87"},{"size":13115,"mtime":1617092476888,"results":"122","hashOfConfig":"87"},{"size":3810,"mtime":1617191336046,"results":"123","hashOfConfig":"87"},{"size":9246,"mtime":1617092476970,"results":"124","hashOfConfig":"87"},{"size":8500,"mtime":1617092476977,"results":"125","hashOfConfig":"87"},{"size":25729,"mtime":1617092476975,"results":"126","hashOfConfig":"87"},{"size":2889,"mtime":1617092476971,"results":"127","hashOfConfig":"87"},{"size":3840,"mtime":1617092476968,"results":"128","hashOfConfig":"87"},{"size":4000,"mtime":1617092476972,"results":"129","hashOfConfig":"87"},{"size":1025,"mtime":1617092476973,"results":"130","hashOfConfig":"87"},{"size":12172,"mtime":1617092476986,"results":"131","hashOfConfig":"87"},{"size":1978,"mtime":1617191336051,"results":"132","hashOfConfig":"87"},{"size":3811,"mtime":1617168600473,"results":"133","hashOfConfig":"87"},{"size":10983,"mtime":1617191356296,"results":"134","hashOfConfig":"87"},{"size":1882,"mtime":1617092476894,"results":"135","hashOfConfig":"87"},{"size":94028,"mtime":1617191335980,"results":"136","hashOfConfig":"87"},{"size":951,"mtime":1617191335996,"results":"137","hashOfConfig":"87"},{"size":2053,"mtime":1617191356311,"results":"138","hashOfConfig":"87"},{"size":44419,"mtime":1617191335957,"results":"139","hashOfConfig":"87"},{"size":477,"mtime":1617092476997,"results":"140","hashOfConfig":"87"},{"size":1186,"mtime":1617092474859,"results":"141","hashOfConfig":"87"},{"size":2451,"mtime":1617092474866,"results":"142","hashOfConfig":"87"},{"size":11186,"mtime":1617092476893,"results":"143","hashOfConfig":"87"},{"size":1782,"mtime":1617092476898,"results":"144","hashOfConfig":"87"},{"size":1782,"mtime":1617092476896,"results":"145","hashOfConfig":"87"},{"size":1832,"mtime":1617092476897,"results":"146","hashOfConfig":"87"},{"size":7977,"mtime":1617092476891,"results":"147","hashOfConfig":"87"},{"size":1778,"mtime":1617092476895,"results":"148","hashOfConfig":"87"},{"size":512,"mtime":1617092476996,"results":"149","hashOfConfig":"87"},{"size":639,"mtime":1617092476983,"results":"150","hashOfConfig":"87"},{"size":24166,"mtime":1617092476850,"results":"151","hashOfConfig":"87"},{"size":7982,"mtime":1617092476858,"results":"152","hashOfConfig":"87"},{"size":4646,"mtime":1617092476904,"results":"153","hashOfConfig":"87"},{"size":4649,"mtime":1617092476902,"results":"154","hashOfConfig":"87"},{"size":4640,"mtime":1617092476906,"results":"155","hashOfConfig":"87"},{"size":4628,"mtime":1617092476908,"results":"156","hashOfConfig":"87"},{"size":4634,"mtime":1617092476905,"results":"157","hashOfConfig":"87"},{"size":4634,"mtime":1617092476911,"results":"158","hashOfConfig":"87"},{"size":4640,"mtime":1617092476913,"results":"159","hashOfConfig":"87"},{"size":4678,"mtime":1617092476914,"results":"160","hashOfConfig":"87"},{"size":4643,"mtime":1617092476909,"results":"161","hashOfConfig":"87"},{"size":4635,"mtime":1617092476952,"results":"162","hashOfConfig":"87"},{"size":4643,"mtime":1617092476916,"results":"163","hashOfConfig":"87"},{"size":4644,"mtime":1617092476949,"results":"164","hashOfConfig":"87"},{"size":4635,"mtime":1617092476950,"results":"165","hashOfConfig":"87"},{"size":4635,"mtime":1617092476946,"results":"166","hashOfConfig":"87"},{"size":4629,"mtime":1617092476938,"results":"167","hashOfConfig":"87"},{"size":4638,"mtime":1617092476948,"results":"168","hashOfConfig":"87"},{"size":4638,"mtime":1617092476936,"results":"169","hashOfConfig":"87"},{"size":4629,"mtime":1617092476933,"results":"170","hashOfConfig":"87"},{"size":4632,"mtime":1617092476935,"results":"171","hashOfConfig":"87"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},"1m1v762",{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"174"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"174"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"174"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"174"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"174"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210","usedDeprecatedRules":"174"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213","usedDeprecatedRules":"174"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216","usedDeprecatedRules":"174"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"219","messages":"220","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221","usedDeprecatedRules":"174"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"224","usedDeprecatedRules":"174"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":78,"fixableErrorCount":0,"fixableWarningCount":0,"source":"227","usedDeprecatedRules":"174"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"230","usedDeprecatedRules":"174"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"233","usedDeprecatedRules":"174"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"236","usedDeprecatedRules":"174"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"239","messages":"240","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"241","usedDeprecatedRules":"174"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"254","messages":"255","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"174"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"259","usedDeprecatedRules":"174"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"262","usedDeprecatedRules":"174"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"265","messages":"266","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"267","usedDeprecatedRules":"174"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"270","usedDeprecatedRules":"174"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":33,"fixableErrorCount":0,"fixableWarningCount":0,"source":"273","usedDeprecatedRules":"174"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"276","usedDeprecatedRules":"174"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"279","usedDeprecatedRules":"174"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"282","usedDeprecatedRules":"174"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"285","usedDeprecatedRules":"174"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"288","usedDeprecatedRules":"174"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"291","messages":"292","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"293","messages":"294","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"295","messages":"296","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"297","usedDeprecatedRules":"174"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"300","messages":"301","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"302","messages":"303","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"304","messages":"305","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"306","messages":"307","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"308","usedDeprecatedRules":"174"},{"filePath":"309","messages":"310","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"311","messages":"312","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"313","messages":"314","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"315","messages":"316","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"317","usedDeprecatedRules":"174"},{"filePath":"318","messages":"319","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"320","usedDeprecatedRules":"174"},{"filePath":"321","messages":"322","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"323","usedDeprecatedRules":"174"},{"filePath":"324","messages":"325","errorCount":0,"warningCount":35,"fixableErrorCount":0,"fixableWarningCount":0,"source":"326","usedDeprecatedRules":"174"},{"filePath":"327","messages":"328","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"329","usedDeprecatedRules":"174"},{"filePath":"330","messages":"331","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"332","messages":"333","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"334","messages":"335","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"336","usedDeprecatedRules":"174"},{"filePath":"337","messages":"338","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"339","usedDeprecatedRules":"174"},{"filePath":"340","messages":"341","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"342","usedDeprecatedRules":"174"},{"filePath":"343","messages":"344","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"345","usedDeprecatedRules":"174"},{"filePath":"346","messages":"347","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"348","usedDeprecatedRules":"174"},{"filePath":"349","messages":"350","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"351","usedDeprecatedRules":"174"},{"filePath":"352","messages":"353","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"354","usedDeprecatedRules":"174"},{"filePath":"355","messages":"356","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"357","usedDeprecatedRules":"174"},{"filePath":"358","messages":"359","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"360","usedDeprecatedRules":"174"},{"filePath":"361","messages":"362","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"363","usedDeprecatedRules":"174"},{"filePath":"364","messages":"365","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"366","usedDeprecatedRules":"174"},{"filePath":"367","messages":"368","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"369","usedDeprecatedRules":"174"},{"filePath":"370","messages":"371","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"372","usedDeprecatedRules":"174"},{"filePath":"373","messages":"374","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"375","usedDeprecatedRules":"174"},{"filePath":"376","messages":"377","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"378","usedDeprecatedRules":"174"},{"filePath":"379","messages":"380","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"381","usedDeprecatedRules":"174"},{"filePath":"382","messages":"383","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"384","usedDeprecatedRules":"174"},{"filePath":"385","messages":"386","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"387","usedDeprecatedRules":"174"},{"filePath":"388","messages":"389","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"390","usedDeprecatedRules":"174"},{"filePath":"391","messages":"392","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"393","usedDeprecatedRules":"174"},{"filePath":"394","messages":"395","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"396","usedDeprecatedRules":"174"},"C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\index.tsx",[],["397","398"],"C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\reportWebVitals.ts",[],"C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\App.tsx",["399"],"import React, { Suspense} from 'react'\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport Drawer from './Views/Drawer'\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <Suspense fallback={<div>Loading...</div>}>\r\n        <Switch>\r\n          \r\n          <Route path=\"/\">\r\n            <Drawer />\r\n          </Route>\r\n          \r\n          <Route path=\"/defaultScanModes\">\r\n            <Drawer />\r\n          </Route>\r\n\r\n          <Route path=\"/customisedScanModes\">\r\n            <Drawer />\r\n          </Route>\r\n\r\n          <Route path=\"/scanResult\">\r\n            <Drawer />\r\n          </Route>\r\n\r\n          <Route path=\"/scanComparison\">\r\n            <Drawer />\r\n          </Route>\r\n\r\n          <Route path=\"/scanHistory\">\r\n            <Drawer />\r\n          </Route>\r\n\r\n        </Switch>\r\n      </Suspense>\r\n    </Router>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Views\\Drawer.tsx",[],"C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\Drawer.tsx",["400","401","402","403","404","405"],"import React, { Suspense } from 'react';\r\nimport { Switch, Route, Link, BrowserRouter } from \"react-router-dom\";\r\nimport clsx from 'clsx';\r\nimport { createStyles, Theme, makeStyles } from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport Button from '@material-ui/core/Button';\r\nimport List from '@material-ui/core/List';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\r\nimport MailIcon from '@material-ui/icons/Mail';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport IPIcon from '@material-ui/icons/LocationSearching';\r\nimport AdvancedModeIcon from '@material-ui/icons/BlurOn';\r\n\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport DefaultScanModeIcon from '@material-ui/icons/GpsNotFixed';\r\nimport CustomisedScanModeIcon from '@material-ui/icons/People';\r\nimport ScanResultIcon from '@material-ui/icons/Storage';\r\nimport ResultComparisonIcon from '@material-ui/icons/CompareArrows';\r\nimport ScanHistoryIcon from '@material-ui/icons/History';\r\n\r\n// Components\r\nimport Home from '../Views/Home'\r\nimport DefaultScanMode from '../Views/DefaultScanMode'\r\nimport CustomisedScanMode from '../Views/CustomisedScanMode'\r\nimport ScanResult from '../Views/ScanResult'\r\nimport ScanComparison from '../Views/ScanComparison'\r\nimport ScanHistory from '../Views/ScanHistory'\r\nimport Whatismyip from '../Views/Whatismyip'\r\nimport AdvancedMode from '../Views/AdvancedMode'\r\n\r\n// Default Scan Modes\r\nimport PingScanMode from '../Components/defaultScanModes/pingScanMode'\r\nimport FullPortsScanMode from '../Components/defaultScanModes/fullPortsScanMode'\r\nimport InenseScanMode from '../Components/defaultScanModes/intenseScanMode'\r\nimport NonPingScanMode from '../Components/defaultScanModes/nonPingScanMode'\r\nimport LightningScanMode from '../Components/defaultScanModes/lightningScanMode'\r\nimport Top100PortsScanMode from '../Components/defaultScanModes/top100portsScanMode'\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        list: {\r\n            width: 250,\r\n            },\r\n            fullList: {\r\n            width: 'auto',\r\n            },\r\n            content: {\r\n            flexGrow: 1,\r\n            padding: theme.spacing(3),\r\n            marginTop: 65,\r\n        },\r\n        root: {\r\n            display: 'flex',\r\n          },\r\n          appBar: {\r\n            zIndex: theme.zIndex.drawer + 1,\r\n            backgroundColor: \"#333333\",\r\n          },\r\n          drawer: {\r\n            width: drawerWidth,\r\n            flexShrink: 0,\r\n          },\r\n          drawerPaper: {\r\n            width: drawerWidth,\r\n          },\r\n          drawerContainer: {\r\n            overflow: 'auto',\r\n          },\r\n        itemIcon: {\r\n          color: \"#0E397C\",\r\n        }\r\n    }),\r\n);\r\n\r\ntype Anchor = 'left';\r\n\r\nexport default () => {\r\n  const classes = useStyles();\r\n  const [state, setState] = React.useState({\r\n    top: false,\r\n    left: false,\r\n    bottom: false,\r\n    right: false,\r\n  });\r\n\r\n  const toggleDrawer = (anchor: Anchor, open: boolean) => (\r\n    event: React.KeyboardEvent | React.MouseEvent,\r\n  ) => {\r\n    if (\r\n      event.type === 'keydown' &&\r\n      ((event as React.KeyboardEvent).key === 'Tab' ||\r\n        (event as React.KeyboardEvent).key === 'Shift')\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    setState({ ...state, [anchor]: open });\r\n  };\r\n\r\n  const list = (anchor: Anchor) => (\r\n    <div\r\n      className={clsx(classes.list, {\r\n        [classes.fullList]: anchor === 'left'\r\n      })}\r\n      role=\"presentation\"\r\n      onClick={toggleDrawer(anchor, false)}\r\n      onKeyDown={toggleDrawer(anchor, false)}\r\n    > \r\n      <List id=\"menuList\">\r\n        <Typography variant=\"h4\" id=\"menuAppTitle\">ChiNmap</Typography>\r\n            \r\n            <br /><Divider />\r\n\r\n        <Link to='/'>\r\n            <ListItem button key=\"home\">\r\n                <ListItemIcon><InboxIcon className={classes.itemIcon}/></ListItemIcon>\r\n                <ListItemText primary=\"Home\" />\r\n            </ListItem>\r\n        </Link>\r\n        \r\n        <Link to='/defaultScanMode'>\r\n            <ListItem button key=\"defaultScanMode\">\r\n                <ListItemIcon><DefaultScanModeIcon className={classes.itemIcon}/></ListItemIcon>\r\n                <ListItemText primary=\"Default Scan Modes\" />\r\n            </ListItem>\r\n        </Link>\r\n        \r\n        <Link to='/customisedScanMode'>\r\n            <ListItem button key=\"customisedScanMode\">\r\n                <ListItemIcon><CustomisedScanModeIcon className={classes.itemIcon}/></ListItemIcon>\r\n                <ListItemText primary=\"Customised Scan Modes\" />\r\n            </ListItem>\r\n        </Link>\r\n            <Divider />\r\n        <Link to='/scanResult'>\r\n            <ListItem button key=\"scanResult\">\r\n                <ListItemIcon><ScanResultIcon className={classes.itemIcon}/></ListItemIcon>\r\n                <ListItemText primary=\"Scan Result\" />\r\n            </ListItem>\r\n        </Link>\r\n\r\n        <Link to='/scanComparison'>\r\n             <ListItem button key=\"scanComparison\">\r\n                <ListItemIcon><ResultComparisonIcon className={classes.itemIcon}/></ListItemIcon>\r\n                <ListItemText primary=\"Scan Comparison\" />\r\n            </ListItem>\r\n        </Link>\r\n\r\n        <Link to='/scanHistory'>\r\n            <ListItem button key=\"scanHistory\">\r\n                <ListItemIcon><ScanHistoryIcon className={classes.itemIcon}/></ListItemIcon>\r\n                <ListItemText primary=\"Scan History\" />\r\n            </ListItem>\r\n        </Link>\r\n      </List>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      {(['left'] as Anchor[]).map((anchor) => (\r\n        <React.Fragment key={anchor}>\r\n            <AppBar position=\"fixed\" className={classes.appBar}>\r\n                <Toolbar>\r\n                    <Button onClick={toggleDrawer(anchor, true)} id=\"menuBtn\">\r\n                        <MenuIcon style={{fontSize: 35}}/>\r\n                    </Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n        <BrowserRouter>\r\n            <Drawer anchor={anchor} open={state[anchor]} onClose={toggleDrawer(anchor, false)}>\r\n                {list(anchor)}\r\n            </Drawer>\r\n            <main className={classes.content}>\r\n                <Suspense fallback={<div>Loading...</div>}>\r\n                    <Switch>\r\n                        <Route \r\n                            exact \r\n                            path=\"/\" \r\n                            render={ \r\n                                () => <Home /> \r\n                            } \r\n                        />\r\n\r\n                        <Route \r\n                            exact \r\n                            path=\"/defaultScanMode\" \r\n                            render={ \r\n                                () => <DefaultScanMode /> \r\n                            } \r\n                        />\r\n                        \r\n                        <Route \r\n                            path=\"/customisedScanMode\" \r\n                            render={ \r\n                                () => <CustomisedScanMode />\r\n                            } \r\n                        />\r\n\r\n                        <Route \r\n                            path=\"/scanResult\" \r\n                            render={ \r\n                                () => <ScanResult />\r\n                            } \r\n                        />\r\n                        <Route \r\n                            path=\"/scanComparison\" \r\n                            render={ \r\n                                () => <ScanComparison />\r\n                            } \r\n                        />\r\n\r\n                        <Route \r\n                            path=\"/scanHistory\" \r\n                            render={ \r\n                                () => <ScanHistory />\r\n                            } \r\n                        />\r\n\r\n                        {/* Default Scan Mode Routes */ }\r\n                        <Route \r\n                            path=\"/pingScanMode\" \r\n                            render={ \r\n                                () => <PingScanMode />\r\n                            } \r\n                        />\r\n\r\n                        <Route \r\n                            path=\"/fullPortsScanMode\" \r\n                            render={ \r\n                                () => <FullPortsScanMode />\r\n                            } \r\n                        />\r\n\r\n                        <Route \r\n                            path=\"/intenseScanMode\" \r\n                            render={ \r\n                                () => <InenseScanMode />\r\n                            } \r\n                        />\r\n\r\n                        <Route \r\n                            path=\"/nonPingScanMode\" \r\n                            render={ \r\n                                () => <NonPingScanMode />\r\n                            } \r\n                        />\r\n\r\n                        <Route \r\n                            path=\"/lightningScanMode\" \r\n                            render={ \r\n                                () => <LightningScanMode />\r\n                            } \r\n                        />\r\n\r\n                        <Route \r\n                            path=\"/top100PortsScanMode\" \r\n                            render={ \r\n                                () => <Top100PortsScanMode />\r\n                            } \r\n                        />\r\n                        {/* Customised Scan Mode Routes */ }\r\n\r\n                        <Route \r\n                            path=\"/advancedMode\" \r\n                            render={ \r\n                                () => <AdvancedMode />\r\n                            } \r\n                        />\r\n                    </Switch>\r\n                </Suspense>\r\n            </main>\r\n        </BrowserRouter>\r\n        </React.Fragment>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Views\\Home.tsx",[],"C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Views\\DefaultScanMode.tsx",[],"C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Views\\ScanResult.tsx",[],"C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Views\\ScanComparison.tsx",[],"C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Views\\CustomisedScanMode.tsx",[],"C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Views\\AdvancedMode.tsx",[],"C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Views\\ScanHistory.tsx",[],"C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\defaultScanModes\\pingScanMode.tsx",["406","407","408","409","410"],"import React from 'react';\r\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\r\nimport { Switch, Route, Link, BrowserRouter } from \"react-router-dom\";\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography'\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Slider from '@material-ui/core/Slider';\r\n\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport Switcher from '@material-ui/core/Switch';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nimport ScanModeIcon from '@material-ui/icons/Settings';\r\n\r\nimport '../../Styles/DefaultScanMode.css'\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n    paper: {\r\n      padding: theme.spacing(2),\r\n      textAlign: 'left',\r\n      backgroundColor: \"#fefefe\",\r\n      color: \"#333333\",\r\n    },\r\n    centerGrid: {\r\n        textAlign: \"center\",\r\n        marginTop: 15,\r\n    },\r\n    avatarText: {\r\n        background: \"#4A92FF\",\r\n        borderRadius: 6,\r\n        color: \"#fff\",\r\n        padding: \"2px 6px\",\r\n    },  \r\n    switch: {\r\n        disaply: \"inline-block\",\r\n    },\r\n  }),\r\n);\r\n\r\nexport default function CenteredGrid() {\r\n  const classes = useStyles();\r\n  const [value, setValue] = React.useState<number>(4);\r\n\r\n  const handleChange = (event: any, newValue: number | number[]) => {\r\n    setValue(newValue as number);\r\n  };\r\n\r\n  const [state, setState] = React.useState({\r\n    Pn: true,\r\n  });\r\n\r\n  const handleSwitchChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setState({ ...state, [event.target.name]: event.target.checked });\r\n  };\r\n\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleClick = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = (event: React.SyntheticEvent | React.MouseEvent, reason?: string) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Grid container spacing={5} justify=\"center\" alignItems=\"center\">\r\n       \r\n        <Grid item xs={10}>\r\n            <Paper className={classes.paper}>\r\n                <Typography variant=\"h6\">\r\n                    Ping Scan Modes\r\n                </Typography>\r\n                    <br/>\r\n                <div>\r\n                    <TextField \r\n                        id=\"outlined-basic\" \r\n                        label=\"Current Command\" \r\n                        defaultValue=\"nmap -v -sU -sT -p -U:161, T:80 -T0 + [ Target IP / Domain ] \"\r\n                        variant=\"outlined\" \r\n                        size=\"small\"\r\n                        style={{\r\n                            width: \"80%\",\r\n                            marginLeft: 85,\r\n                            textAlignLast: \"center\",\r\n                        }}\r\n                        inputProps={{ \r\n                            readOnly: true, \r\n                        }}\r\n                    />\r\n                </div>\r\n                    <br/>\r\n                <div className={classes.root}>\r\n                    \r\n                </div>\r\n            </Paper>\r\n        </Grid>\r\n\r\n        <Grid item xs={10}>\r\n            <Paper className={classes.paper}>\r\n                <Typography variant=\"h6\">\r\n                    Scan Frequency\r\n                </Typography>\r\n                    <br/>\r\n                <div>\r\n                     <Slider \r\n                        value={value} \r\n                        onChange={handleChange} \r\n                        max={5}\r\n                        min={0}\r\n                        step={1}\r\n                        valueLabelDisplay=\"on\"\r\n                        style={{\r\n                            width: \"70%\",\r\n                            marginLeft: 145,\r\n                        }}    \r\n                    />\r\n                </div>\r\n                    <br/>\r\n                <Typography style={{textAlign: \"right\",marginRight: 35}}>\r\n                    -T&nbsp;\r\n                    <Tooltip \r\n                        title=\"[ -T ] --- Specifies the timing (Timing) used in the scanning process, there are always 6 levels (0-5), the level increases, the faster the scanning speed.\" \r\n                        placement=\"top\" \r\n                        arrow\r\n                    >\r\n                        <span className={classes.avatarText}>{value}</span>\r\n                    </Tooltip>\r\n                </Typography>\r\n            </Paper>\r\n        </Grid>\r\n\r\n        <Grid item xs={10}>\r\n           <Paper className={classes.paper}>\r\n                <Typography variant=\"h6\">\r\n                    Flags\r\n                </Typography>\r\n                    <br/>\r\n                <div style={{textAlign: \"center\"}}>\r\n                    <FormControl component=\"fieldset\">\r\n                        <table className=\"scanModeSettingFlagTable\">\r\n                            <tr>\r\n                                <td>\r\n                                    <RadioGroup row aria-label=\"position\" name=\"position\" defaultValue=\"top\">\r\n                                        <Tooltip title=\"Increase the verbosity level\" placement=\"top\" arrow>\r\n                                            <FormControlLabel\r\n                                                value=\"-v\"\r\n                                                control={<Radio color=\"primary\" />}\r\n                                                label=\"-v\"\r\n                                                labelPlacement=\"end\"\r\n                                            />\r\n                                        </Tooltip>\r\n                                        <Tooltip title=\"Use more v for greater effect\" placement=\"top\" arrow>\r\n                                            <FormControlLabel\r\n                                                value=\"-vv\"\r\n                                                control={<Radio color=\"primary\" />}\r\n                                                label=\"-vv\"\r\n                                                labelPlacement=\"end\"\r\n                                            />\r\n                                        </Tooltip>\r\n                                    </RadioGroup>\r\n                                </td>\r\n                                <td>\r\n                                    <Tooltip title=\"Disable host discovery. Port scan only.\" placement=\"top\" arrow>\r\n                                        <FormControlLabel\r\n                                            control={\r\n                                                <Switcher\r\n                                                    checked={state.Pn}\r\n                                                    onChange={handleSwitchChange}\r\n                                                    name=\"Pn\"\r\n                                                    color=\"primary\"\r\n                                                />\r\n                                            }\r\n                                            label=\"-Pn\"\r\n                                            className={classes.switch}\r\n                                        />\r\n                                    </Tooltip>\r\n                                </td>\r\n                            </tr>\r\n                        </table>\r\n                    </FormControl>\r\n            \r\n                </div>\r\n          </Paper>\r\n        </Grid>\r\n\r\n        <Grid item xs={10} style={{position: \"absolute\", width: 902, bottom: 0}}>\r\n            <Paper className={classes.paper}>\r\n                <Link to=\"/defaultScanMode\">\r\n                    <Button variant=\"contained\">Back</Button>\r\n                </Link>                \r\n                <Button variant=\"contained\" style={{float: 'right'}} onClick={handleClick}>Save</Button>\r\n                <Snackbar\r\n                    anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'left',\r\n                    }}\r\n                    open={open}\r\n                    autoHideDuration={6000}\r\n                    onClose={handleClose}\r\n                    message=\"Settings Save Successfully\"\r\n                    action={\r\n                    <React.Fragment>\r\n                         <Link to=\"/defaultScanMode\">\r\n                            <IconButton size=\"small\" aria-label=\"close\" color=\"inherit\" onClick={handleClose}>\r\n                                <CloseIcon fontSize=\"small\" style={{color: \"#fff\"}}/>\r\n                            </IconButton>\r\n                        </Link>\r\n                    </React.Fragment>\r\n                    }\r\n                />\r\n            </Paper>\r\n        </Grid>\r\n\r\n      </Grid>\r\n      \r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\defaultScanModes\\fullPortsScanMode.tsx",["411","412","413","414","415"],"import React from 'react';\r\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\r\nimport { Switch, Route, Link, BrowserRouter } from \"react-router-dom\";\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography'\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Slider from '@material-ui/core/Slider';\r\n\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport Switcher from '@material-ui/core/Switch';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nimport ScanModeIcon from '@material-ui/icons/Settings';\r\n\r\nimport '../../Styles/DefaultScanMode.css'\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n    paper: {\r\n      padding: theme.spacing(2),\r\n      textAlign: 'left',\r\n      backgroundColor: \"#fefefe\",\r\n      color: \"#333333\",\r\n    },\r\n    centerGrid: {\r\n        textAlign: \"center\",\r\n        marginTop: 15,\r\n    },\r\n    avatarText: {\r\n        background: \"#4A92FF\",\r\n        borderRadius: 6,\r\n        color: \"#fff\",\r\n        padding: \"2px 6px\",\r\n    },  \r\n    switch: {\r\n        disaply: \"inline-block\",\r\n    },\r\n  }),\r\n);\r\n\r\nexport default function CenteredGrid() {\r\n  const classes = useStyles();\r\n  const [value, setValue] = React.useState<number>(4);\r\n\r\n  const handleChange = (event: any, newValue: number | number[]) => {\r\n    setValue(newValue as number);\r\n  };\r\n\r\n  const [state, setState] = React.useState({\r\n    p: true,\r\n  });\r\n\r\n  const handleSwitchChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setState({ ...state, [event.target.name]: event.target.checked });\r\n  };\r\n\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleClick = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = (event: React.SyntheticEvent | React.MouseEvent, reason?: string) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Grid container spacing={5} justify=\"center\" alignItems=\"center\">\r\n       \r\n        <Grid item xs={10}>\r\n            <Paper className={classes.paper}>\r\n                <Typography variant=\"h6\">\r\n                    Full Ports Scan Modes\r\n                </Typography>\r\n                    <br/>\r\n                <div>\r\n                    <TextField \r\n                        id=\"outlined-basic\" \r\n                        label=\"Current Command\" \r\n                        defaultValue=\"nmap -T4 -p- -v -v + [ Target IP / Domain ] \"\r\n                        variant=\"outlined\" \r\n                        size=\"small\"\r\n                        style={{\r\n                            width: \"80%\",\r\n                            marginLeft: 85,\r\n                            textAlignLast: \"center\",\r\n                        }}\r\n                        inputProps={{ \r\n                            readOnly: true, \r\n                        }}\r\n                    />\r\n                </div>\r\n                    <br/>\r\n                <div className={classes.root}>\r\n                    \r\n                </div>\r\n            </Paper>\r\n        </Grid>\r\n\r\n        <Grid item xs={10}>\r\n            <Paper className={classes.paper}>\r\n                <Typography variant=\"h6\">\r\n                    Scan Frequency\r\n                </Typography>\r\n                    <br/>\r\n                <div>\r\n                     <Slider \r\n                        value={value} \r\n                        onChange={handleChange} \r\n                        max={5}\r\n                        min={0}\r\n                        step={1}\r\n                        valueLabelDisplay=\"on\"\r\n                        style={{\r\n                            width: \"70%\",\r\n                            marginLeft: 145,\r\n                        }}    \r\n                    />\r\n                </div>\r\n                    <br/>\r\n                <Typography style={{textAlign: \"right\",marginRight: 35}}>\r\n                    -T&nbsp;\r\n                    <Tooltip \r\n                        title=\"[ -T ] --- Specifies the timing (Timing) used in the scanning process, there are always 6 levels (0-5), the level increases, the faster the scanning speed.\" \r\n                        placement=\"top\" \r\n                        arrow\r\n                    >\r\n                        <span className={classes.avatarText}>{value}</span>\r\n                    </Tooltip>\r\n                </Typography>\r\n            </Paper>\r\n        </Grid>\r\n\r\n        <Grid item xs={10}>\r\n           <Paper className={classes.paper}>\r\n                <Typography variant=\"h6\">\r\n                    Flags\r\n                </Typography>\r\n                    <br/>\r\n                <div style={{textAlign: \"center\"}}>\r\n                    <FormControl component=\"fieldset\">\r\n                        <table className=\"scanModeSettingFlagTable\">\r\n                            <tr>\r\n                                <td>\r\n                                    <RadioGroup row aria-label=\"position\" name=\"position\" defaultValue=\"top\">\r\n                                        <Tooltip title=\"Increase the verbosity level\" placement=\"top\" arrow>\r\n                                            <FormControlLabel\r\n                                                value=\"-v\"\r\n                                                control={<Radio color=\"primary\" />}\r\n                                                label=\"-v\"\r\n                                                labelPlacement=\"end\"\r\n                                            />\r\n                                        </Tooltip>\r\n                                        <Tooltip title=\"Use more v for greater effect\" placement=\"top\" arrow>\r\n                                            <FormControlLabel\r\n                                                value=\"-vv\"\r\n                                                control={<Radio color=\"primary\" />}\r\n                                                label=\"-vv\"\r\n                                                labelPlacement=\"end\"\r\n                                            />\r\n                                        </Tooltip>\r\n                                    </RadioGroup>\r\n                                </td>\r\n                                <td>\r\n                                    <Tooltip title=\"Port scan all ports. THIS MUST BE CHOSEN.\" placement=\"top\" arrow>\r\n                                        <FormControlLabel\r\n                                            control={\r\n                                                <Switcher\r\n                                                    checked={state.p}\r\n                                                    onChange={handleSwitchChange}\r\n                                                    name=\"p\"\r\n                                                    color=\"primary\"\r\n                                                    disabled={true}\r\n                                                />\r\n                                            }\r\n                                            label=\"-p-\"\r\n                                            className={classes.switch}\r\n                                        />\r\n                                    </Tooltip>\r\n                                </td>\r\n                            </tr>\r\n                        </table>\r\n                    </FormControl>\r\n                </div>\r\n            </Paper>\r\n        </Grid>\r\n\r\n        <Grid item xs={10} style={{position: \"absolute\", width: 902, bottom: 0}}>\r\n            <Paper className={classes.paper}>\r\n                <Link to=\"/defaultScanMode\">\r\n                    <Button variant=\"contained\">Back</Button>\r\n                </Link>                \r\n                <Button variant=\"contained\" style={{float: 'right'}} onClick={handleClick}>Save</Button>\r\n                <Snackbar\r\n                    anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'left',\r\n                    }}\r\n                    open={open}\r\n                    autoHideDuration={6000}\r\n                    onClose={handleClose}\r\n                    message=\"Settings Save Successfully\"\r\n                    action={\r\n                    <React.Fragment>\r\n                         <Link to=\"/defaultScanMode\">\r\n                            <IconButton size=\"small\" aria-label=\"close\" color=\"inherit\" onClick={handleClose}>\r\n                                <CloseIcon fontSize=\"small\" style={{color: \"#fff\"}}/>\r\n                            </IconButton>\r\n                        </Link>\r\n                    </React.Fragment>\r\n                    }\r\n                />\r\n            </Paper>\r\n        </Grid>\r\n\r\n      </Grid>\r\n      \r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\defaultScanModes\\nonPingScanMode.tsx",["416","417","418","419","420"],"import React from 'react';\r\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\r\nimport { Switch, Route, Link, BrowserRouter } from \"react-router-dom\";\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography'\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Slider from '@material-ui/core/Slider';\r\n\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport Switcher from '@material-ui/core/Switch';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nimport ScanModeIcon from '@material-ui/icons/Settings';\r\n\r\nimport '../../Styles/DefaultScanMode.css'\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n    paper: {\r\n      padding: theme.spacing(2),\r\n      textAlign: 'left',\r\n      backgroundColor: \"#fefefe\",\r\n      color: \"#333333\",\r\n    },\r\n    centerGrid: {\r\n        textAlign: \"center\",\r\n        marginTop: 15,\r\n    },\r\n    avatarText: {\r\n        background: \"#4A92FF\",\r\n        borderRadius: 6,\r\n        color: \"#fff\",\r\n        padding: \"2px 6px\",\r\n    },  \r\n    switch: {\r\n        disaply: \"inline-block\",\r\n    },\r\n  }),\r\n);\r\n\r\nexport default function CenteredGrid() {\r\n  const classes = useStyles();\r\n  const [value, setValue] = React.useState<number>(4);\r\n\r\n  const handleChange = (event: any, newValue: number | number[]) => {\r\n    setValue(newValue as number);\r\n  };\r\n\r\n  const [state, setState] = React.useState({\r\n    Pn: true,\r\n  });\r\n\r\n  const handleSwitchChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setState({ ...state, [event.target.name]: event.target.checked });\r\n  };\r\n\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleClick = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = (event: React.SyntheticEvent | React.MouseEvent, reason?: string) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Grid container spacing={5} justify=\"center\" alignItems=\"center\">\r\n       \r\n        <Grid item xs={10}>\r\n            <Paper className={classes.paper}>\r\n                <Typography variant=\"h6\">\r\n                    Non-Ping Scan Modes\r\n                </Typography>\r\n                    <br/>\r\n                <div>\r\n                    <TextField \r\n                        id=\"outlined-basic\" \r\n                        label=\"Current Command\" \r\n                        defaultValue=\"nmap -v -sU -sT -p -U:161, T:80 -T0 + [ Target IP / Domain ]\"\r\n                        variant=\"outlined\" \r\n                        size=\"small\"\r\n                        style={{\r\n                            width: \"80%\",\r\n                            marginLeft: 85,\r\n                            textAlignLast: \"center\",\r\n                        }}\r\n                        inputProps={{ \r\n                            readOnly: true, \r\n                        }}\r\n                    />\r\n                </div>\r\n                    <br/>\r\n                <div className={classes.root}>\r\n                    \r\n                </div>\r\n            </Paper>\r\n        </Grid>\r\n\r\n        <Grid item xs={10}>\r\n            <Paper className={classes.paper}>\r\n                <Typography variant=\"h6\">\r\n                    Scan Frequency\r\n                </Typography>\r\n                    <br/>\r\n                <div>\r\n                     <Slider \r\n                        value={value} \r\n                        onChange={handleChange} \r\n                        max={5}\r\n                        min={0}\r\n                        step={1}\r\n                        valueLabelDisplay=\"on\"\r\n                        style={{\r\n                            width: \"70%\",\r\n                            marginLeft: 145,\r\n                        }}    \r\n                    />\r\n                </div>\r\n                    <br/>\r\n                <Typography style={{textAlign: \"right\",marginRight: 35}}>\r\n                    -T&nbsp;\r\n                    <Tooltip \r\n                        title=\"[ -T ] --- Specifies the timing (Timing) used in the scanning process, there are always 6 levels (0-5), the level increases, the faster the scanning speed.\" \r\n                        placement=\"top\" \r\n                        arrow\r\n                    >\r\n                        <span className={classes.avatarText}>{value}</span>\r\n                    </Tooltip>\r\n                </Typography>\r\n            </Paper>\r\n        </Grid>\r\n\r\n        <Grid item xs={10}>\r\n           <Paper className={classes.paper}>\r\n                <Typography variant=\"h6\">\r\n                    Flags\r\n                </Typography>\r\n                    <br/>\r\n                <div style={{textAlign: \"center\"}}>\r\n                    <FormControl component=\"fieldset\">\r\n                    <table className=\"scanModeSettingFlagTable\">\r\n                        <tr>\r\n                            <td>\r\n                                <RadioGroup row aria-label=\"position\" name=\"position\" defaultValue=\"top\">\r\n                                    <Tooltip title=\"Increase the verbosity level\" placement=\"top\" arrow>\r\n                                        <FormControlLabel\r\n                                            value=\"-v\"\r\n                                            control={<Radio color=\"primary\" />}\r\n                                            label=\"-v\"\r\n                                            labelPlacement=\"end\"\r\n                                        />\r\n                                    </Tooltip>\r\n                                    <Tooltip title=\"Use more v for greater effect\" placement=\"top\" arrow>\r\n                                        <FormControlLabel\r\n                                            value=\"-vv\"\r\n                                            control={<Radio color=\"primary\" />}\r\n                                            label=\"-vv\"\r\n                                            labelPlacement=\"end\"\r\n                                        />\r\n                                    </Tooltip>\r\n                                </RadioGroup>\r\n                            </td>\r\n                            <td>\r\n                                <Tooltip title=\"Disable host discovery. Port scan only.\" placement=\"top\" arrow>\r\n                                    <FormControlLabel\r\n                                        control={\r\n                                            <Switcher\r\n                                                checked={state.Pn}\r\n                                                onChange={handleSwitchChange}\r\n                                                name=\"Pn\"\r\n                                                color=\"primary\"\r\n                                            />\r\n                                        }\r\n                                        label=\"-Pn\"\r\n                                        className={classes.switch}\r\n                                    />\r\n                                </Tooltip>\r\n                            </td>\r\n                        </tr>\r\n                    </table>\r\n                </FormControl>\r\n                </div>\r\n            </Paper>\r\n        </Grid>\r\n\r\n        <Grid item xs={10} style={{position: \"absolute\", width: 902, bottom: 0}}>\r\n            <Paper className={classes.paper}>\r\n                <Link to=\"/defaultScanMode\">\r\n                    <Button variant=\"contained\">Back</Button>\r\n                </Link>                \r\n                <Button variant=\"contained\" style={{float: 'right'}} onClick={handleClick}>Save</Button>\r\n                <Snackbar\r\n                    anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'left',\r\n                    }}\r\n                    open={open}\r\n                    autoHideDuration={6000}\r\n                    onClose={handleClose}\r\n                    message=\"Settings Save Successfully\"\r\n                    action={\r\n                    <React.Fragment>\r\n                         <Link to=\"/defaultScanMode\">\r\n                            <IconButton size=\"small\" aria-label=\"close\" color=\"inherit\" onClick={handleClose}>\r\n                                <CloseIcon fontSize=\"small\" style={{color: \"#fff\"}}/>\r\n                            </IconButton>\r\n                        </Link>\r\n                    </React.Fragment>\r\n                    }\r\n                />\r\n            </Paper>\r\n        </Grid>\r\n\r\n      </Grid>\r\n      \r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\defaultScanModes\\intenseScanMode.tsx",["421","422","423","424","425"],"import React from 'react';\r\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\r\nimport { Switch, Route, Link, BrowserRouter } from \"react-router-dom\";\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography'\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Slider from '@material-ui/core/Slider';\r\n\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport Switcher from '@material-ui/core/Switch';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nimport ScanModeIcon from '@material-ui/icons/Settings';\r\n\r\nimport '../../Styles/DefaultScanMode.css'\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n    paper: {\r\n      padding: theme.spacing(2),\r\n      textAlign: 'left',\r\n      backgroundColor: \"#fefefe\",\r\n      color: \"#333333\",\r\n    },\r\n    centerGrid: {\r\n        textAlign: \"center\",\r\n        marginTop: 15,\r\n    },\r\n    avatarText: {\r\n        background: \"#4A92FF\",\r\n        borderRadius: 6,\r\n        color: \"#fff\",\r\n        padding: \"2px 6px\",\r\n    },  \r\n    switch: {\r\n        disaply: \"inline-block\",\r\n    },\r\n  }),\r\n);\r\n\r\nexport default function CenteredGrid() {\r\n  const classes = useStyles();\r\n  const [value, setValue] = React.useState<number>(4);\r\n\r\n  const handleChange = (event: any, newValue: number | number[]) => {\r\n    setValue(newValue as number);\r\n  };\r\n\r\n  const [state, setState] = React.useState({\r\n    A: true,\r\n  });\r\n\r\n  const handleSwitchChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setState({ ...state, [event.target.name]: event.target.checked });\r\n  };\r\n\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleClick = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = (event: React.SyntheticEvent | React.MouseEvent, reason?: string) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Grid container spacing={5} justify=\"center\" alignItems=\"center\">\r\n       \r\n        <Grid item xs={10}>\r\n            <Paper className={classes.paper}>\r\n                <Typography variant=\"h6\">\r\n                    Intense Scan Modes\r\n                </Typography>\r\n                    <br/>\r\n                <div>\r\n                    <TextField \r\n                        id=\"outlined-basic\" \r\n                        label=\"Current Command\" \r\n                        defaultValue={`nmap -T${value} -A -v + [ Target IP / Domain ]`}\r\n                        variant=\"outlined\" \r\n                        size=\"small\"\r\n                        style={{\r\n                            width: \"80%\",\r\n                            marginLeft: 85,\r\n                            textAlignLast: \"center\",\r\n                        }}\r\n                        inputProps={{ \r\n                            readOnly: true, \r\n                        }}\r\n                    />\r\n                </div>\r\n                    <br/>\r\n                <div className={classes.root}>\r\n                    \r\n                </div>\r\n            </Paper>\r\n        </Grid>\r\n\r\n        <Grid item xs={10}>\r\n            <Paper className={classes.paper}>\r\n                <Typography variant=\"h6\">\r\n                    Scan Frequency\r\n                </Typography>\r\n                    <br/>\r\n                <div>\r\n                     <Slider \r\n                        value={value} \r\n                        onChange={handleChange} \r\n                        max={5}\r\n                        min={0}\r\n                        step={1}\r\n                        valueLabelDisplay=\"on\"\r\n                        style={{\r\n                            width: \"70%\",\r\n                            marginLeft: 145,\r\n                        }}    \r\n                    />\r\n                </div>\r\n                    <br/>\r\n                <Typography style={{textAlign: \"right\",marginRight: 35}}>\r\n                    -T&nbsp;\r\n                    <Tooltip \r\n                        title=\"[ -T ] --- Specifies the timing (Timing) used in the scanning process, there are always 6 levels (0-5), the level increases, the faster the scanning speed.\" \r\n                        placement=\"top\" \r\n                        arrow\r\n                    >\r\n                        <span className={classes.avatarText}>{value}</span>\r\n                    </Tooltip>\r\n                </Typography>\r\n            </Paper>\r\n        </Grid>\r\n\r\n        <Grid item xs={10}>\r\n           <Paper className={classes.paper}>\r\n                <Typography variant=\"h6\">\r\n                    Flags\r\n                </Typography>\r\n                    <br/>\r\n                <div style={{textAlign: \"center\"}}>\r\n                    <FormControl component=\"fieldset\">\r\n                        <table className=\"scanModeSettingFlagTable\">\r\n                            <tr>\r\n                                <td>\r\n                                    <RadioGroup row aria-label=\"position\" name=\"position\" defaultValue=\"top\">\r\n                                        <Tooltip title=\"Increase the verbosity level\" placement=\"top\" arrow>\r\n                                            <FormControlLabel\r\n                                                value=\"-v\"\r\n                                                control={<Radio color=\"primary\" />}\r\n                                                label=\"-v\"\r\n                                                labelPlacement=\"end\"\r\n                                            />\r\n                                        </Tooltip>\r\n                                        <Tooltip title=\"Use more v for greater effect\" placement=\"top\" arrow>\r\n                                            <FormControlLabel\r\n                                                value=\"-vv\"\r\n                                                control={<Radio color=\"primary\" />}\r\n                                                label=\"-vv\"\r\n                                                labelPlacement=\"end\"\r\n                                            />\r\n                                        </Tooltip>\r\n                                    </RadioGroup>\r\n                                </td>\r\n                                <td>\r\n                                    <Tooltip title=\"Enables OS detection, version detection, script scanning, and traceroute. THIS MUST BE CHOSEN.\" placement=\"top\" arrow>\r\n                                        <FormControlLabel\r\n                                            control={\r\n                                                <Switcher\r\n                                                    checked={state.A}\r\n                                                    onChange={handleSwitchChange}\r\n                                                    name=\"A\"\r\n                                                    color=\"primary\"\r\n                                                    disabled={true}\r\n                                                />\r\n                                            }\r\n                                            label=\"-A\"\r\n                                            className={classes.switch}\r\n                                        />\r\n                                    </Tooltip>\r\n                                </td>\r\n                            </tr>\r\n                        </table>\r\n                    </FormControl>\r\n            \r\n                </div>\r\n            </Paper>\r\n        </Grid>\r\n\r\n        <Grid item xs={10} style={{position: \"absolute\", width: 902, bottom: 0}}>\r\n            <Paper className={classes.paper}>\r\n                <Link to=\"/defaultScanMode\">\r\n                    <Button variant=\"contained\">Back</Button>\r\n                </Link>                \r\n                <Button variant=\"contained\" style={{float: 'right'}} onClick={handleClick}>Save</Button>\r\n                <Snackbar\r\n                    anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'left',\r\n                    }}\r\n                    open={open}\r\n                    autoHideDuration={6000}\r\n                    onClose={handleClose}\r\n                    message=\"Settings Save Successfully\"\r\n                    action={\r\n                    <React.Fragment>\r\n                         <Link to=\"/defaultScanMode\">\r\n                            <IconButton size=\"small\" aria-label=\"close\" color=\"inherit\" onClick={handleClose}>\r\n                                <CloseIcon fontSize=\"small\" style={{color: \"#fff\"}}/>\r\n                            </IconButton>\r\n                        </Link>\r\n                    </React.Fragment>\r\n                    }\r\n                />\r\n            </Paper>\r\n        </Grid>\r\n\r\n      </Grid>\r\n      \r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\defaultScanModes\\lightningScanMode.tsx",["426","427","428","429","430"],"import React from 'react';\r\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\r\nimport { Switch, Route, Link, BrowserRouter } from \"react-router-dom\";\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography'\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Slider from '@material-ui/core/Slider';\r\n\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport Switcher from '@material-ui/core/Switch';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nimport ScanModeIcon from '@material-ui/icons/Settings';\r\n\r\nimport '../../Styles/DefaultScanMode.css'\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n    paper: {\r\n      padding: theme.spacing(2),\r\n      backgroundColor: \"#fefefe\",\r\n      color: \"#333333\",\r\n    },\r\n    centerGrid: {\r\n        textAlign: \"center\",\r\n        marginTop: 15,\r\n    },\r\n    avatarText: {\r\n        background: \"#4A92FF\",\r\n        borderRadius: 6,\r\n        color: \"#fff\",\r\n        padding: \"2px 6px\",\r\n    },  \r\n    switch: {\r\n        disaply: \"inline-block\",\r\n    },\r\n  }),\r\n);\r\n\r\nexport default function CenteredGrid() {\r\n  const classes = useStyles();\r\n  const [value, setValue] = React.useState<number>(0);\r\n\r\n  const handleChange = (event: any, newValue: number | number[]) => {\r\n    setValue(newValue as number);\r\n  };\r\n\r\n  const [state, setState] = React.useState({\r\n    Pn: true,\r\n    sT: true,\r\n    sU: true,\r\n  });\r\n\r\n  const handleSwitchChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setState({ ...state, [event.target.name]: event.target.checked });\r\n  };\r\n\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleClick = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = (event: React.SyntheticEvent | React.MouseEvent, reason?: string) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Grid container spacing={5} justify=\"center\" alignItems=\"center\">\r\n       \r\n        <Grid item xs={10}>\r\n            <Paper className={classes.paper}>\r\n                <Typography variant=\"h6\">\r\n                    Lightning Scan Modes\r\n                </Typography>\r\n                    <br/>\r\n                <div>\r\n                    <TextField \r\n                        id=\"outlined-basic\" \r\n                        label=\"Current Command\" \r\n                        defaultValue=\"nmap -v -sU -sT -p -U:161, T:80 -T0 + [ Target IP / Domain ] \"\r\n                        variant=\"outlined\" \r\n                        size=\"small\"\r\n                        style={{\r\n                            width: \"80%\",\r\n                            marginLeft: 85,\r\n                            textAlignLast: \"center\",\r\n                        }}\r\n                        inputProps={{ \r\n                            readOnly: true, \r\n                        }}\r\n                    />\r\n                </div>\r\n                    <br/>\r\n                <div className={classes.root}>\r\n                    \r\n                </div>\r\n            </Paper>\r\n        </Grid>\r\n\r\n        <Grid item xs={10}>\r\n            <Paper className={classes.paper}>\r\n                <Typography variant=\"h6\">\r\n                    Scan Frequency\r\n                </Typography>\r\n                    <br/>\r\n                <div>\r\n                     <Slider \r\n                        value={value} \r\n                        onChange={handleChange} \r\n                        max={5}\r\n                        min={0}\r\n                        step={1}\r\n                        valueLabelDisplay=\"on\"\r\n                        style={{\r\n                            width: \"70%\",\r\n                            marginLeft: 145,\r\n                        }}    \r\n                    />\r\n                </div>\r\n                    <br/>\r\n                <Typography style={{textAlign: \"right\",marginRight: 35}}>\r\n                    -T&nbsp;\r\n                    <Tooltip \r\n                        title=\"[ -T ] --- Specifies the timing (Timing) used in the scanning process, there are always 6 levels (0-5), the level increases, the faster the scanning speed.\" \r\n                        placement=\"top\" \r\n                        arrow\r\n                    >\r\n                        <span className={classes.avatarText}>{value}</span>\r\n                    </Tooltip>\r\n                </Typography>\r\n            </Paper>\r\n        </Grid>\r\n\r\n        <Grid item xs={10}>\r\n           <Paper className={classes.paper}>\r\n                <Typography variant=\"h6\">\r\n                    Flags\r\n                </Typography>\r\n                    <br/>\r\n                <div style={{textAlign: \"center\"}}>\r\n                    <FormControl component=\"fieldset\">\r\n                        <table className=\"scanModeSettingFlagTable\">\r\n                            <tr>\r\n                                <td>\r\n                                    <RadioGroup row aria-label=\"position\" name=\"position\" defaultValue=\"top\">\r\n                                        <Tooltip title=\"Increase the verbosity level\" placement=\"top\" arrow>\r\n                                            <FormControlLabel\r\n                                                value=\"-v\"\r\n                                                control={<Radio color=\"primary\" />}\r\n                                                label=\"-v\"\r\n                                                labelPlacement=\"end\"\r\n                                            />\r\n                                        </Tooltip>\r\n                                        <Tooltip title=\"Use more v for greater effect\" placement=\"top\" arrow>\r\n                                            <FormControlLabel\r\n                                                value=\"-vv\"\r\n                                                control={<Radio color=\"primary\" />}\r\n                                                label=\"-vv\"\r\n                                                labelPlacement=\"end\"\r\n                                            />\r\n                                        </Tooltip>\r\n                                    </RadioGroup>\r\n                                </td>\r\n                                <td>\r\n                                    <Tooltip title=\"UDP port scan. THIS MUST BE CHOSEN.\" placement=\"top\" arrow>\r\n                                        <FormControlLabel\r\n                                            control={\r\n                                                <Switcher\r\n                                                    checked={state.sU}\r\n                                                    onChange={handleSwitchChange}\r\n                                                    name=\"sU\"\r\n                                                    color=\"primary\"\r\n                                                    disabled={true}\r\n                                                />\r\n                                            }\r\n                                            label=\"-sU\"\r\n                                            className={classes.switch}\r\n                                        />\r\n                                    </Tooltip>\r\n                                </td>\r\n                                <td>\r\n                                    <Tooltip title=\"TCP connect port scan (Default without root privilege). THIS MUST BE CHOSEN.\" placement=\"top\" arrow>\r\n                                        <FormControlLabel\r\n                                            control={\r\n                                                <Switcher\r\n                                                    checked={state.sT}\r\n                                                    onChange={handleSwitchChange}\r\n                                                    name=\"sT\"\r\n                                                    color=\"primary\"\r\n                                                    disabled={true}\r\n                                                />\r\n                                            }\r\n                                            label=\"-sT\"\r\n                                            className={classes.switch}\r\n                                        />\r\n                                    </Tooltip>\r\n                                </td>\r\n                            </tr>\r\n                        </table>\r\n                    </FormControl>\r\n                </div>\r\n          </Paper>\r\n        </Grid>\r\n\r\n        <Grid item xs={10} style={{position: \"absolute\", width: 902, bottom: 0}}>\r\n            <Paper className={classes.paper}>\r\n                <Link to=\"/defaultScanMode\">\r\n                    <Button variant=\"contained\">Back</Button>\r\n                </Link>                \r\n                <Button variant=\"contained\" style={{float: 'right'}} onClick={handleClick}>Save</Button>\r\n                <Snackbar\r\n                    anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'left',\r\n                    }}\r\n                    open={open}\r\n                    autoHideDuration={6000}\r\n                    onClose={handleClose}\r\n                    message=\"Settings Save Successfully\"\r\n                    action={\r\n                    <React.Fragment>\r\n                         <Link to=\"/defaultScanMode\">\r\n                            <IconButton size=\"small\" aria-label=\"close\" color=\"inherit\" onClick={handleClose}>\r\n                                <CloseIcon fontSize=\"small\" style={{color: \"#fff\"}}/>\r\n                            </IconButton>\r\n                        </Link>\r\n                    </React.Fragment>\r\n                    }\r\n                />\r\n            </Paper>\r\n        </Grid>\r\n\r\n      </Grid>\r\n      \r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\defaultScanModes\\top100portsScanMode.tsx",["431","432","433","434","435","436","437"],"import React from 'react';\r\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\r\nimport { Switch, Route, Link, BrowserRouter } from \"react-router-dom\";\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography'\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Slider from '@material-ui/core/Slider';\r\n\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport Switcher from '@material-ui/core/Switch';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nimport ScanModeIcon from '@material-ui/icons/Settings';\r\n\r\nimport '../../Styles/DefaultScanMode.css'\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n    paper: {\r\n      padding: theme.spacing(2),\r\n      textAlign: 'left',\r\n      backgroundColor: \"#fefefe\",\r\n      color: \"#333333\",\r\n    },\r\n    centerGrid: {\r\n        textAlign: \"center\",\r\n        marginTop: 15,\r\n    },\r\n    avatarText: {\r\n        background: \"#4A92FF\",\r\n        borderRadius: 6,\r\n        color: \"#fff\",\r\n        padding: \"2px 6px\",\r\n    },  \r\n    switch: {\r\n        disaply: \"inline-block\",\r\n    },\r\n  }),\r\n);\r\n\r\nexport default function CenteredGrid() {\r\n  const classes = useStyles();\r\n  const [value, setValue] = React.useState<number>(4);\r\n\r\n  const handleChange = (event: any, newValue: number | number[]) => {\r\n    setValue(newValue as number);\r\n  };\r\n\r\n  const [state, setState] = React.useState({\r\n    F: true,\r\n  });\r\n\r\n  const handleSwitchChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setState({ ...state, [event.target.name]: event.target.checked });\r\n  };\r\n\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleClick = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = (event: React.SyntheticEvent | React.MouseEvent, reason?: string) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Grid container spacing={5} justify=\"center\" alignItems=\"center\">\r\n       \r\n        <Grid item xs={10}>\r\n            <Paper className={classes.paper}>\r\n                <Typography variant=\"h6\">\r\n                    Top 100 Ports Scan Modes\r\n                </Typography>\r\n                    <br/>\r\n                <div>\r\n                    <TextField \r\n                        id=\"outlined-basic\" \r\n                        label=\"Current Command\" \r\n                        defaultValue=\"nmap -T4 -F + [ Target IP / Domain ] \"\r\n                        variant=\"outlined\" \r\n                        size=\"small\"\r\n                        style={{\r\n                            width: \"80%\",\r\n                            marginLeft: 85,\r\n                            textAlignLast: \"center\",\r\n                        }}\r\n                        inputProps={{ \r\n                            readOnly: true, \r\n                        }}\r\n                    />\r\n                </div>\r\n                    <br/>\r\n                <div className={classes.root}>\r\n                    \r\n                </div>\r\n            </Paper>\r\n        </Grid>\r\n\r\n        <Grid item xs={10}>\r\n            <Paper className={classes.paper}>\r\n                <Typography variant=\"h6\">\r\n                    Scan Frequency\r\n                </Typography>\r\n                    <br/>\r\n                <div>\r\n                     <Slider \r\n                        value={value} \r\n                        onChange={handleChange} \r\n                        max={5}\r\n                        min={0}\r\n                        step={1}\r\n                        valueLabelDisplay=\"on\"\r\n                        style={{\r\n                            width: \"70%\",\r\n                            marginLeft: 145,\r\n                        }}    \r\n                    />\r\n                </div>\r\n                    <br/>\r\n                <Typography style={{textAlign: \"right\",marginRight: 35}}>\r\n                    -T&nbsp;\r\n                    <Tooltip \r\n                        title=\"[ -T ] --- Specifies the timing (Timing) used in the scanning process, there are always 6 levels (0-5), the level increases, the faster the scanning speed.\" \r\n                        placement=\"top\" \r\n                        arrow\r\n                    >\r\n                        <span className={classes.avatarText}>{value}</span>\r\n                    </Tooltip>\r\n                </Typography>\r\n            </Paper>\r\n        </Grid>\r\n\r\n        <Grid item xs={10}>\r\n           <Paper className={classes.paper}>\r\n                <Typography variant=\"h6\">\r\n                    Flags\r\n                </Typography>\r\n                    <br/>\r\n                \r\n                    <div style={{textAlign: \"center\"}}>\r\n                    <FormControl component=\"fieldset\">\r\n                        <table className=\"scanModeSettingFlagTable\">\r\n                            <tr>\r\n                                <td>\r\n                                    <Tooltip title=\"Fast port scan (100 ports). THIS MUST BE CHOSEN.\" placement=\"top\" arrow>\r\n                                        <FormControlLabel\r\n                                            control={\r\n                                                <Switcher\r\n                                                    checked={state.F}\r\n                                                    onChange={handleSwitchChange}\r\n                                                    name=\"F\"\r\n                                                    color=\"primary\"\r\n                                                    disabled={true}\r\n                                                />\r\n                                            }\r\n                                            label=\"-F\"\r\n                                            className={classes.switch}\r\n                                        />\r\n                                    </Tooltip>\r\n                                </td>\r\n                            </tr>\r\n                        </table>\r\n                    </FormControl>\r\n                </div>\r\n           </Paper>\r\n        </Grid>\r\n\r\n        <Grid item xs={10} style={{position: \"absolute\", width: 902, bottom: 0}}>\r\n            <Paper className={classes.paper}>\r\n                <Link to=\"/defaultScanMode\">\r\n                    <Button variant=\"contained\">Back</Button>\r\n                </Link>                \r\n                <Button variant=\"contained\" style={{float: 'right'}} onClick={handleClick}>Save</Button>\r\n                <Snackbar\r\n                    anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'left',\r\n                    }}\r\n                    open={open}\r\n                    autoHideDuration={6000}\r\n                    onClose={handleClose}\r\n                    message=\"Settings Save Successfully\"\r\n                    action={\r\n                    <React.Fragment>\r\n                         <Link to=\"/defaultScanMode\">\r\n                            <IconButton size=\"small\" aria-label=\"close\" color=\"inherit\" onClick={handleClose}>\r\n                                <CloseIcon fontSize=\"small\" style={{color: \"#fff\"}}/>\r\n                            </IconButton>\r\n                        </Link>\r\n                    </React.Fragment>\r\n                    }\r\n                />\r\n            </Paper>\r\n        </Grid>\r\n\r\n      </Grid>\r\n      \r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\Home.tsx",["438","439","440","441","442","443","444","445","446","447","448","449","450","451","452","453","454","455","456","457","458","459","460","461","462","463"],"C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\DefaultScanMode.tsx",["464","465","466","467","468","469","470","471"],"import React from 'react';\r\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\r\nimport { Switch, Route, Link, BrowserRouter } from \"react-router-dom\";\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport { observer } from 'mobx-react-lite'\r\n\r\n// Components\r\nimport Result from './ScanResults/scanme.nmap.org'\r\nimport SettingDialog from './defaultScanModes/defaultModeDialog'\r\n\r\n// Mobx\r\nimport defaultScanMode from '../Mobx/Models/defaultScanModeStatus'\r\n\r\nimport scanMode from '../Backend/frontendData/scanModes/default.json'\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n    paper: {\r\n      padding: theme.spacing(2),\r\n      textAlign: 'left',\r\n      backgroundColor: \"#fefefe\",\r\n      color: \"#333333\",\r\n    },\r\n    centerGrid: {\r\n        textAlign: \"center\",\r\n        marginTop: 15,\r\n    },\r\n    listGrid: {\r\n        width: '100%',\r\n        maxWidth: 360,\r\n        backgroundColor: theme.palette.background.paper,\r\n    },\r\n    appBar: {\r\n        position: 'relative',\r\n      },\r\n      title: {\r\n        marginLeft: theme.spacing(2),\r\n        flex: 1,\r\n    },\r\n    avatarText: {\r\n        background: \"#4A92FF\",\r\n        borderRadius: 6,\r\n        color: \"#fff\",\r\n        padding: \"2px 6px\",\r\n    }, \r\n    sectionStyle: {\r\n        marginTop: 35, \r\n        border: \"1px solid #C4C4C4\", \r\n        padding: \"10px 10px\", \r\n        borderRadius: 5,\r\n    },\r\n    sectionTitleBg: {\r\n        position: \"relative\",\r\n        bottom: 22,\r\n        background: \"#fff\",\r\n        padding: \"0 5px\",\r\n        width: \"auto\",\r\n    },\r\n    sectionTitle: {\r\n        color: \"#757575\",\r\n        fontSize: 13,\r\n    },\r\n  }),\r\n);\r\n\r\n\r\nexport default () => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Grid container spacing={5} justify=\"center\" alignItems=\"center\">\r\n       \r\n        <Grid item xs={10}>\r\n                <Paper className={classes.paper}>\r\n                    <Typography variant=\"h6\">\r\n                        Default Scan Modes\r\n                    </Typography>\r\n                        <br/>\r\n                    <Grid container justify=\"center\" spacing={5}>\r\n                        {defaultScanMode.data.map((mode, index) => (\r\n                            <>\r\n                                <Grid item xs={6}>\r\n                                    <Card style={{minHeight: 190}}>\r\n                                        <CardContent style={{whiteSpace: \"nowrap\", minHeight: 130}}>\r\n                                            <Typography color=\"textSecondary\" style={{fontWeight: \"bold\", fontSize: 18}} gutterBottom>\r\n                                                {mode.name}\r\n                                            </Typography>\r\n                                            <Divider /><br/>\r\n                                            <div style={{whiteSpace: \"normal\"}}>\r\n                                                <Typography color=\"textSecondary\">{mode.des}</Typography>\r\n                                            </div>\r\n                                        </CardContent>\r\n                                            <Divider variant=\"middle\" />\r\n                                        <CardActions style={{textAlign: \"center\"}}>\r\n                                            <SettingDialog index={index}/>\r\n                                        </CardActions>\r\n                                    </Card>\r\n                                </Grid>\r\n                            </>\r\n                        ))}\r\n                    </Grid>\r\n                </Paper>\r\n            </Grid>\r\n\r\n      </Grid>\r\n      \r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\ScanResult.tsx",["472","473","474","475","476","477","478","479","480","481","482","483","484"],"import React, {useState} from 'react';\r\nimport { makeStyles, createStyles, Theme, lighten } from '@material-ui/core/styles';\r\nimport { Switch, Route, Link, BrowserRouter } from \"react-router-dom\";\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport Select from '@material-ui/core/Select';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Button from '@material-ui/core/Button';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Box from '@material-ui/core/Box';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\n\r\n// Backend\r\nimport { isScanning } from '../Backend/frontendData/isScanning'\r\nimport { pureOutput } from '../Backend/frontendData/Result'\r\nimport scannedIn from '../Backend/frontendData/scannedIn.json'\r\nimport scannedTarget from '../Backend/frontendData/scannedTargetForSelect.json'\r\nimport { rows } from '../Backend/frontendData/getPortStatus'\r\nimport { toDel } from '../Backend/frontendData/toDelete'\r\n\r\n// Components\r\nimport NmapOutput from './ScanResults/NmapOutput'\r\nimport HostsAndPorts from './ScanResults/HostsAndPorts'\r\nimport ScanDetails from './ScanResults/ScanDetails'\r\nimport CVEResult from './ScanResults/CVEResult'\r\nimport ExploitCVE from './ScanResults/ExploitCVE'\r\nimport Firewalk from './ScanResults/Firewalk'\r\nimport WhoIs from './ScanResults/WhoIs'\r\nimport ExportResult from './ScanResults/ExportResult'\r\n\r\n// Mobx Global Status\r\nimport { observer } from 'mobx-react-lite'\r\nimport storeTarget from '../Mobx/Models/resultSelectStatus'\r\nimport store from '../Mobx/Models/advancedModeStatus';\r\n\r\nconst mainStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n    paper: {\r\n      padding: theme.spacing(2),\r\n      textAlign: 'left',\r\n      backgroundColor: \"#fefefe\",\r\n      color: \"#333333\",\r\n    },\r\n    centerGrid: {\r\n        textAlign: \"center\",\r\n        marginTop: 15,\r\n    },\r\n    btnTabs: {\r\n        textTransform: \"capitalize\",\r\n    },\r\n    cardRoot: {\r\n        marginTop: 25,\r\n    },\r\n    title: {\r\n        fontSize: 14,\r\n        whiteSpace: \"pre-line\",\r\n    },\r\n    pos: {\r\n        marginBottom: 12,\r\n    },\r\n    defaultShow: {\r\n\r\n    },\r\n    defaultHide: {\r\n        display: \"none\",\r\n    },\r\n    centering: {\r\n      textAlignLast: \"center\",\r\n      width: \"70%\",\r\n      userSelect: \"none\",\r\n    },\r\n    datepicker: {\r\n      marginLeft: theme.spacing(1),\r\n      marginRight: theme.spacing(1),\r\n      width: 200,\r\n    },\r\n  }),\r\n);\r\n\r\ninterface TabPanelProps {\r\n    children?: React.ReactNode;\r\n    index: any;\r\n    value: any;\r\n  }\r\n  \r\n  const TabPanel = (props: TabPanelProps) => {\r\n    const { children, value, index, ...other } = props;\r\n  \r\n    return (\r\n      <div\r\n        role=\"tabpanel\"\r\n        hidden={value !== index}\r\n        id={`simple-tabpanel-${index}`}\r\n        aria-labelledby={`simple-tab-${index}`}\r\n        {...other}\r\n      >\r\n        {value === index && (\r\n          <Box p={3}>\r\n            <Typography>{children}</Typography>\r\n          </Box>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n  \r\nconst a11yProps = (index: any) => {\r\n  return {\r\n    id: `simple-tab-${index}`,\r\n    'aria-controls': `simple-tabpanel-${index}`,\r\n  };\r\n}\r\n\r\nconst DeleteSnackbar = () => {\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleClick = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = (event: React.SyntheticEvent | React.MouseEvent, reason?: string) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Button\r\n        style={{\r\n          width: \"100%\",\r\n          marginTop: 15,\r\n        }}\r\n        variant=\"outlined\"\r\n        color=\"secondary\"\r\n        onClick={handleClick}\r\n      >\r\n        Delete Result\r\n      </Button>\r\n      <Snackbar\r\n        anchorOrigin={{\r\n          vertical: 'bottom',\r\n          horizontal: 'center',\r\n        }}\r\n        color=\"primary\"\r\n        open={open}\r\n        autoHideDuration={6000}\r\n        onClose={handleClose}\r\n        message=\"Are you sure you want to delete the result ? &nbsp;This action cannot be undone\"\r\n        action={\r\n          <React.Fragment>\r\n            <Button size=\"small\" aria-label=\"close\" color=\"inherit\" onClick={handleClose} style={{position: 'absolute', left: 9,}}>\r\n              Cancel\r\n            </Button>\r\n            <Button size=\"small\" aria-label=\"close\" color=\"inherit\" type=\"submit\" onClick={handleClose}>\r\n              Yes, I'm sure\r\n            </Button>\r\n          </React.Fragment>\r\n        }\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default observer (() => {\r\n  const classes = mainStyles();\r\n\r\n  const [forToDel, setForToDel] = useState(9999999);\r\n  const handleChange = (event: React.ChangeEvent<{ value: unknown }>) => {\r\n    // setTarget(event.target.value as any);\r\n    storeTarget.setTarget(event.target.value as any)\r\n    setForToDel(event.target.value as any)\r\n  };\r\n\r\n  const [value, setValue] = useState(0);\r\n\r\n  const handleTabChange = (event: React.ChangeEvent<{}>, newValue: number) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n       {isScanning.map((status) => (\r\n           status === true ?\r\n            <>\r\n              <div style={{textAlign: \"center\"}}>\r\n                <Tooltip title=\"Previous scan is progressing, please wait...\" arrow placement=\"top\">\r\n                  <LinearProgress style={{width: \"100%\",marginLeft:0, height: 5, color: \"#333\"}} />\r\n                </Tooltip>\r\n              </div>\r\n            </>\r\n            :\r\n            null\r\n        ))}\r\n      <Grid container spacing={5} justify=\"center\" alignItems=\"center\">\r\n        <Grid item xs={12}>\r\n          {/* <button onClick={handleClickJO}>click</button> */}\r\n                <Paper className={classes.paper}>\r\n                     <>\r\n                      <table style={{width: \"100%\"}}>\r\n                        <tr>\r\n                          <td style={{width: \"20%\"}}>\r\n                              <Typography variant=\"h6\">\r\n                                Scan Result\r\n                              </Typography>\r\n                          </td>\r\n                          <td style={{textAlign: \"right\"}}>\r\n                              <span style={{marginRight: 120, position: \"relative\", top: 5,}}>\r\n                                \r\n                              </span>\r\n                          </td>\r\n                        </tr>\r\n                      </table>\r\n                    \r\n                      <div style={{textAlign: \"center\",marginTop: 15,marginLeft: 120}}>\r\n                          <FormControl variant=\"outlined\" style={{width: \"100%\"}}>\r\n                              <InputLabel id=\"demo-simple-select-outlined-label\">\r\n                                  Choose a target IP or Domain\r\n                              </InputLabel>\r\n                              <Select\r\n                                  labelId=\"demo-simple-select-outlined-label\"\r\n                                  id=\"demo-simple-select-outlined\"\r\n                                  value={storeTarget.target}\r\n                                  onChange={handleChange}\r\n                                  label=\"Choose a target IP or Domain\"\r\n                                  style={{\r\n                                      width: \"83%\",\r\n                                      textAlign: \"center\",\r\n                                  }}\r\n                              >\r\n                                  {scannedTarget.map((target, index) => (\r\n                                    target.id === \"\" || toDel.indexOf(target.id) > -1 ? null :\r\n                                    <MenuItem \r\n                                      key={target.id}\r\n                                      value={target.id}\r\n                                    >\r\n                                      {target.target.replace('sn\\=', '\\/')} - {target.runTime}\r\n                                    </MenuItem>\r\n                                  ))}\r\n                              </Select>\r\n                          </FormControl>\r\n                      </div>\r\n                      {storeTarget.target === \"\" ?\r\n                          null\r\n                              :\r\n                          <>\r\n                              <br/>\r\n                              <div id=\"scanResultTab\">\r\n                                  <AppBar position=\"static\" color=\"default\">\r\n                                      <Tabs \r\n                                          value={value} \r\n                                          onChange={handleTabChange} \r\n                                          indicatorColor=\"primary\"\r\n                                          textColor=\"primary\"\r\n                                          variant=\"scrollable\"\r\n                                          scrollButtons=\"on\"\r\n                                          centered>\r\n                                        <Tab label=\"Nmap Output\" {...a11yProps(0)} style={{textTransform: \"capitalize\"}} />\r\n                                        <Tab label=\"Hosts and Ports\" {...a11yProps(1)} style={{textTransform: \"capitalize\"}} />\r\n                                        <Tab label=\"Scan Details\" {...a11yProps(2)} style={{textTransform: \"capitalize\"}} />\r\n                                        <Tab label=\"CVE\" {...a11yProps(3)} style={{textTransform: \"capitalize\"}} />\r\n                                        <Tab label=\"Exploit\" {...a11yProps(4)} style={{textTransform: \"capitalize\"}} />\r\n                                        <Tab label=\"Firewalk\" {...a11yProps(5)} style={{textTransform: \"capitalize\"}} />\r\n                                        <Tab label=\"WhoIs\" {...a11yProps(6)} style={{textTransform: \"capitalize\"}} />\r\n                                        <Tab label=\"Export Results\" {...a11yProps(7)} style={{textTransform: \"capitalize\"}} />\r\n                                      </Tabs>\r\n                                  </AppBar>\r\n                                  <Paper className={classes.paper}>\r\n                                      <TabPanel value={value} index={0}>\r\n                                          <NmapOutput />\r\n                                      </TabPanel>\r\n                                      <TabPanel value={value} index={1}>\r\n                                        <div style={{whiteSpace: \"normal\"}}>\r\n                                          <HostsAndPorts />\r\n                                        </div>\r\n                                      </TabPanel>\r\n                                      <TabPanel value={value} index={2}>\r\n                                          <ScanDetails />\r\n                                      </TabPanel>\r\n                                      <TabPanel value={value} index={3}>\r\n                                          <CVEResult />\r\n                                      </TabPanel>\r\n                                      <TabPanel value={value} index={4}>\r\n                                          <ExploitCVE />\r\n                                      </TabPanel>\r\n                                      <TabPanel value={value} index={5}>\r\n                                          <Firewalk />\r\n                                      </TabPanel>\r\n                                      <TabPanel value={value} index={6}>\r\n                                          <WhoIs />\r\n                                      </TabPanel>\r\n                                      <TabPanel value={value} index={7}>\r\n                                          <ExportResult />\r\n                                      </TabPanel>\r\n                                  </Paper>\r\n                                  <form method='post' action=\"http://localhost:5000/deleteResult\">\r\n                                    <input type='text' name='scanID' readOnly value={forToDel} style={{display: 'none'}}/>\r\n                                    <DeleteSnackbar />\r\n                                  </form>\r\n                              </div>\r\n                          </>\r\n                        }\r\n\r\n                     </>\r\n                </Paper>\r\n            </Grid>\r\n\r\n      </Grid>\r\n      \r\n    </div>\r\n  );\r\n}\r\n)","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\ScanComparison.tsx",["485","486","487","488","489","490","491","492","493","494","495","496","497","498","499","500","501","502","503","504","505","506","507","508","509","510","511","512","513","514","515","516","517","518","519","520","521","522","523","524","525","526","527","528","529","530","531","532","533","534","535","536","537","538","539","540","541","542","543","544","545","546","547","548","549","550","551","552","553","554","555","556","557","558","559","560","561","562"],"import React, {useState} from 'react';\r\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Chip from '@material-ui/core/Chip';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport Select from '@material-ui/core/Select';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Box from '@material-ui/core/Box';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport ListSubheader from '@material-ui/core/ListSubheader';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport PortOpened from '@material-ui/icons/Visibility';\r\nimport PortFiltered from '@material-ui/icons/VisibilityOff';\r\n\r\nimport { scanTarget, targetData, targetTime } from './target'\r\n\r\n// Backend\r\nimport { isScanning } from '../Backend/frontendData/isScanning'\r\nimport { pureOutput } from '../Backend/frontendData/Result'\r\nimport scannedIn from '../Backend/frontendData/scannedIn.json'\r\nimport { rows } from '../Backend/frontendData/getPortStatus'\r\nimport { toDel } from '../Backend/frontendData/toDelete'\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n    paper: {\r\n      padding: theme.spacing(2),\r\n      textAlign: 'left',\r\n      backgroundColor: \"#fefefe\",\r\n      color: \"#333333\",\r\n    },\r\n    portPaper: {\r\n      padding: theme.spacing(2),\r\n      textAlign: 'left',\r\n      backgroundColor: \"#fefefe\",\r\n      color: \"#333333\",\r\n      minHeight: 170,\r\n    },\r\n    portChip: {\r\n      textAlign: 'left',\r\n      margin: 5,\r\n    },\r\n    centerGrid: {\r\n        textAlign: \"center\",\r\n        marginTop: 15,\r\n    },\r\n    btnTabs: {\r\n        textTransform: \"capitalize\",\r\n    },\r\n    cardRoot: {\r\n        marginTop: 25,\r\n    },\r\n    title: {\r\n        fontSize: 14,\r\n        whiteSpace: \"pre-line\",\r\n    },\r\n    pos: {\r\n        marginBottom: 12,\r\n    },\r\n    defaultShow: {\r\n\r\n    },\r\n    defaultHide: {\r\n        display: \"none\",\r\n    },\r\n    showBtn: {\r\n        marginTop: 15,\r\n        textTransform: \"capitalize\",\r\n    },\r\n    cardGrid: {\r\n        marginRight: 30,\r\n    },\r\n    portList: {\r\n      width: '100%',\r\n      maxWidth: '100%',\r\n      backgroundColor: theme.palette.background.paper,\r\n      position: 'relative',\r\n      overflow: 'auto',\r\n      height: 320,\r\n    },\r\n    listSection: {\r\n      backgroundColor: 'inherit',\r\n    },\r\n    ul: {\r\n      backgroundColor: 'inherit',\r\n      padding: 0,\r\n    },\r\n  }),\r\n);\r\n\r\ninterface TabPanelProps {\r\n    children?: React.ReactNode;\r\n    index: any;\r\n    value: any;\r\n  }\r\n  \r\n  const TabPanel = (props: TabPanelProps) => {\r\n    const { children, value, index, ...other } = props;\r\n  \r\n    return (\r\n      <div\r\n        role=\"tabpanel\"\r\n        hidden={value !== index}\r\n        id={`simple-tabpanel-${index}`}\r\n        aria-labelledby={`simple-tab-${index}`}\r\n        {...other}\r\n      >\r\n        {value === index && (\r\n          <Box p={3}>\r\n            <Typography>{children}</Typography>\r\n          </Box>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  const a11yProps = (index: any) => {\r\n    return {\r\n      id: `simple-tab-${index}`,\r\n      'aria-controls': `simple-tabpanel-${index}`,\r\n    };\r\n  }\r\n  \r\n\r\nexport default () => {\r\n  const classes = useStyles();\r\n  const [targetToCompare, setTarget] = useState('');\r\n  const [timestampOne, setTimestampOne] = useState('');\r\n  const [timestampTwo, setTimestampTwo] = useState('');\r\n  const [isDisabled, setIsDisabled] = useState(true);\r\n  const [value, setValue] = useState(0);\r\n\r\n  const handleChange = (event: React.ChangeEvent<{ value: unknown }>) => {\r\n    setTarget(event.target.value as string);\r\n    targetToCompare == \" \" ? setIsDisabled(true) : setIsDisabled(false) ;\r\n    setTimestampOne('');\r\n    setTimestampTwo('');\r\n  };\r\n\r\n  const handleTimestampOneChange = (event: React.ChangeEvent<{ value: unknown }>) => {\r\n    setTimestampOne(event.target.value as string);\r\n  };\r\n\r\n  const handleTimestampTwoChange = (event: React.ChangeEvent<{ value: unknown }>) => {\r\n    setTimestampTwo(event.target.value as string);\r\n  };\r\n  const handleTabChange = (event: React.ChangeEvent<{}>, newValue: number) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  const [scanModeC1, setScanModeC1] = useState('');\r\n  const [scanModeC2, setScanModeC2] = useState('');\r\n  const [dateC1, setDateC1] = useState('');\r\n  const [dateC2, setDateC2] = useState('');\r\n  const [timeC1, settimeC1] = useState('');\r\n  const [timeC2, settimeC2] = useState('');\r\n  const [latencyC1, setlatencyC1] = useState('');\r\n  const [latencyC2, setlatencyC2] = useState('');\r\n  const [notShownC1, setnotShownC1] = useState('');\r\n  const [notShownC2, setnotShownC2] = useState('');\r\n  const [rawSentC1, setrawSentC1] = useState('');\r\n  const [rawSentC2, setrawSentC2] = useState('');\r\n  const [rawRcvtC1, setrawRcvtC1] = useState('');\r\n  const [rawRcvtC2, setrawRcvtC2] = useState('');\r\n  const [autoC1, setautoC1] = useState('');\r\n  const [autoC2, setautoC2] = useState('');\r\n  const [cveDetectC1, setcveDetectC1] = useState('');\r\n  const [cveDetectC2, setcveDetectC2] = useState('');\r\n  const [whoisC1, setwhoisC1] = useState('');\r\n  const [whoisC2, setwhoisC2] = useState('');\r\n  const [pbbC1, setpbbC1] = useState('');\r\n  const [pbbC2, setpbbC2] = useState('');\r\n\r\n  const ShowSame = () => {\r\n    return(\r\n        <Grid container justify=\"center\">\r\n            <Grid item xs={12} className={classes.cardGrid}>\r\n                <TableContainer style={{width: '100%', marginLeft: 15,}}>\r\n                    <Table aria-label=\"simple table\">\r\n                        <TableHead>\r\n                        <TableRow>\r\n                            <TableCell align=\"left\">Output</TableCell>\r\n                            <TableCell align=\"left\"></TableCell>\r\n                            <TableCell align=\"left\">Scan A</TableCell>\r\n                            <TableCell align=\"left\">Scan B</TableCell>\r\n                        </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            <TableRow style={{background: scanModeC1 === scanModeC2 ? '#F0FBF8' : 'transparent'}}>\r\n                                <TableCell align=\"left\">\r\n                                    Scan Mode\r\n                                </TableCell>\r\n                                <TableCell />\r\n                                {scannedIn.map((output, index) => (\r\n                                    output.runTime == timestampOne ?\r\n                                    <>\r\n                                        {setScanModeC1(output.scanMode)}\r\n                                        <TableCell align=\"left\" key={index}>{output.scanMode}</TableCell> \r\n                                    </> : null\r\n                                ))}\r\n                                {scannedIn.map((output, index) => (\r\n                                    output.runTime == timestampTwo ? \r\n                                    <>\r\n                                        {setScanModeC2(output.scanMode)}\r\n                                        <TableCell align=\"left\" key={index}>{output.scanMode}</TableCell> \r\n                                    </> : null\r\n                                ))}\r\n                            </TableRow>\r\n\r\n                            <TableRow style={{background: dateC1 === dateC2 ? '#F0FBF8' : 'transparent'}}>\r\n                                <TableCell align=\"left\">\r\n                                    Date\r\n                                </TableCell>\r\n                                <TableCell />\r\n                                {scannedIn.map((output, index) => (\r\n                                    output.runTime == timestampOne ?\r\n                                    <>\r\n                                        {setDateC1(output.date)}\r\n                                        <TableCell align=\"left\" key={index}>{output.date}</TableCell> \r\n                                    </> : null\r\n                                ))}\r\n                                {scannedIn.map((output, index) => (\r\n                                    output.runTime == timestampTwo ? \r\n                                    <>\r\n                                        {setDateC2(output.date)}\r\n                                        <TableCell align=\"left\" key={index}>{output.date}</TableCell> \r\n                                    </> : null\r\n                                ))}\r\n                            </TableRow>\r\n\r\n                            <TableRow style={{background: timeC1 === timeC2 ? '#F0FBF8' : 'transparent'}}>\r\n                                <TableCell align=\"left\">\r\n                                    Time\r\n                                </TableCell>\r\n                                <TableCell />\r\n                                {scannedIn.map((output, index) => (\r\n                                    output.runTime == timestampOne ?\r\n                                    <>\r\n                                        {settimeC1(output.time)}\r\n                                        <TableCell align=\"left\" key={index}>{output.time}</TableCell> \r\n                                    </> : null\r\n                                ))}\r\n                                {scannedIn.map((output, index) => (\r\n                                    output.runTime == timestampTwo ? \r\n                                    <>\r\n                                        {settimeC2(output.time)}\r\n                                        <TableCell align=\"left\" key={index}>{output.time}</TableCell> \r\n                                    </> : null\r\n                                ))}\r\n                            </TableRow>\r\n\r\n                            <TableRow style={{background: latencyC1 === latencyC2 ? '#F0FBF8' : 'transparent'}}>\r\n                                <TableCell align=\"left\">\r\n                                    Latency\r\n                                </TableCell>\r\n                                <TableCell />\r\n                                {scannedIn.map((output, index) => (\r\n                                    output.runTime == timestampOne ?\r\n                                    <>\r\n                                        {setlatencyC1(output.latency)}\r\n                                        <TableCell align=\"left\" key={index}>{output.latency}</TableCell> \r\n                                    </> : null\r\n                                ))}\r\n                                {scannedIn.map((output, index) => (\r\n                                    output.runTime == timestampTwo ? \r\n                                    <>\r\n                                        {setlatencyC2(output.latency)}\r\n                                        <TableCell align=\"left\" key={index}>{output.latency}</TableCell> \r\n                                    </> : null\r\n                                ))}\r\n                            </TableRow>\r\n\r\n                            <TableRow style={{background: notShownC1 === notShownC2 ? '#F0FBF8' : 'transparent'}}>\r\n                                <TableCell align=\"left\">\r\n                                    Not Shown Ports\r\n                                </TableCell>\r\n                                <TableCell />\r\n                                {scannedIn.map((output, index) => (\r\n                                    output.runTime == timestampOne ?\r\n                                    <>\r\n                                        {setnotShownC1(output.notShown)}\r\n                                        <TableCell align=\"left\" key={index}>{output.notShown}</TableCell> \r\n                                    </> : null\r\n                                ))}\r\n                                {scannedIn.map((output, index) => (\r\n                                    output.runTime == timestampTwo ? \r\n                                    <>\r\n                                        {setnotShownC2(output.notShown)}\r\n                                        <TableCell align=\"left\" key={index}>{output.notShown}</TableCell> \r\n                                    </> : null\r\n                                ))}\r\n                            </TableRow>\r\n\r\n                            <TableRow style={{background: rawSentC1 === rawSentC2 ? '#F0FBF8' : 'transparent'}}>\r\n                                <TableCell align=\"left\">\r\n                                    Raw Packets Sent\r\n                                </TableCell>\r\n                                <TableCell />\r\n                                {scannedIn.map((output, index) => (\r\n                                    output.runTime == timestampOne ?\r\n                                    <>\r\n                                        {setrawSentC1(output.rawPacket)}\r\n                                        <TableCell align=\"left\" key={index}>{output.rawPacket}</TableCell> \r\n                                    </> : null\r\n                                ))}\r\n                                {scannedIn.map((output, index) => (\r\n                                    output.runTime == timestampTwo ? \r\n                                    <>\r\n                                        {setrawSentC2(output.rawPacket)}\r\n                                        <TableCell align=\"left\" key={index}>{output.rawPacket}</TableCell> \r\n                                    </> : null\r\n                                ))}\r\n                            </TableRow>\r\n\r\n                            <TableRow style={{background: rawRcvtC1 === rawRcvtC2 ? '#F0FBF8' : 'transparent'}}>\r\n                                <TableCell align=\"left\">\r\n                                    Raw Packets Received\r\n                                </TableCell>\r\n                                <TableCell />\r\n                                {scannedIn.map((output, index) => (\r\n                                    output.runTime == timestampOne ?\r\n                                    <>\r\n                                        {setrawRcvtC1(output.rcvd)}\r\n                                        <TableCell align=\"left\" key={index}>{output.rcvd}</TableCell> \r\n                                    </> : null\r\n                                ))}\r\n                                {scannedIn.map((output, index) => (\r\n                                    output.runTime == timestampTwo ? \r\n                                    <>\r\n                                        {setrawRcvtC2(output.rcvd)}\r\n                                        <TableCell align=\"left\" key={index}>{output.rcvd}</TableCell> \r\n                                    </> : null\r\n                                ))}\r\n                            </TableRow>\r\n                            \r\n                            <TableRow style={{background: autoC1 === autoC2 ? '#F0FBF8' : 'transparent'}}>\r\n                                <TableCell align=\"left\">\r\n                                    Automation\r\n                                </TableCell>\r\n                                <TableCell />\r\n                                {scannedIn.map((output, index) => (\r\n                                    output.runTime == timestampOne ?\r\n                                    <>\r\n                                        {setautoC1(output.auto)}\r\n                                        <TableCell align=\"left\" key={index}>{output.auto === 'false' ? 'Disabled' : 'Enabled'}</TableCell> \r\n                                    </> : null\r\n                                ))}\r\n                                {scannedIn.map((output, index) => (\r\n                                    output.runTime == timestampTwo ? \r\n                                    <>\r\n                                        {setautoC2(output.auto)}\r\n                                        <TableCell align=\"left\" key={index}>{output.auto === 'false' ? 'Disabled' : 'Enabled'}</TableCell> \r\n                                    </> : null\r\n                                ))}\r\n                            </TableRow>\r\n\r\n                            <TableRow style={{background: cveDetectC1 === cveDetectC2 ? '#F0FBF8' : 'transparent'}}>\r\n                                <TableCell align=\"left\">\r\n                                    CVE Detection\r\n                                </TableCell>\r\n                                <TableCell />\r\n                                {scannedIn.map((output, index) => (\r\n                                    output.runTime == timestampOne ?\r\n                                    <>\r\n                                        {setcveDetectC1(output.cveDetect)}\r\n                                        <TableCell align=\"left\" key={index}>{output.cveDetect === 'false' ? 'Disabled' : 'Enabled'}</TableCell> \r\n                                    </> : null\r\n                                ))}\r\n                                {scannedIn.map((output, index) => (\r\n                                    output.runTime == timestampTwo ? \r\n                                    <>\r\n                                        {setcveDetectC2(output.cveDetect)}\r\n                                        <TableCell align=\"left\" key={index}>{output.cveDetect === 'false' ? 'Disabled' : 'Enabled'}</TableCell> \r\n                                    </> : null\r\n                                ))}\r\n                            </TableRow>\r\n                            \r\n                            <TableRow style={{background: whoisC1 === whoisC2 ? '#F0FBF8' : 'transparent'}}>\r\n                                <TableCell align=\"left\">\r\n                                    WhoIs\r\n                                </TableCell>\r\n                                <TableCell />\r\n                                {scannedIn.map((output, index) => (\r\n                                    output.runTime == timestampOne ?\r\n                                    <>\r\n                                        {setwhoisC1(output.whois)}\r\n                                        <TableCell align=\"left\" key={index}>{output.whois === 'false' ? 'Disabled' : 'Enabled'}</TableCell> \r\n                                    </> : null\r\n                                ))}\r\n                                {scannedIn.map((output, index) => (\r\n                                    output.runTime == timestampTwo ? \r\n                                    <>\r\n                                        {setwhoisC2(output.whois)}\r\n                                        <TableCell align=\"left\" key={index}>{output.whois === 'false' ? 'Disabled' : 'Enabled'}</TableCell> \r\n                                    </> : null\r\n                                ))}\r\n                            </TableRow>\r\n\r\n                            <TableRow style={{background: pbbC1 === pbbC2 ? '#F0FBF8' : 'transparent'}}>\r\n                                <TableCell align=\"left\">\r\n                                    Ping Probes Blocking Bypass\r\n                                </TableCell>\r\n                                <TableCell />\r\n                                {scannedIn.map((output, index) => (\r\n                                    output.runTime == timestampOne ?\r\n                                    <>\r\n                                        {setpbbC1(output.pbb)}\r\n                                        <TableCell align=\"left\" key={index}>{output.pbb === 'false' ? 'Disabled' : 'Enabled'}</TableCell> \r\n                                    </> : null\r\n                                ))}\r\n                                {scannedIn.map((output, index) => (\r\n                                    output.runTime == timestampTwo ? \r\n                                    <>\r\n                                        {setpbbC2(output.pbb)}\r\n                                        <TableCell align=\"left\" key={index}>{output.pbb === 'false' ? 'Disabled' : 'Enabled'}</TableCell> \r\n                                    </> : null\r\n                                ))}\r\n                            </TableRow>\r\n                        \r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </Grid>\r\n        </Grid>\r\n    )  \r\n  }\r\n\r\n  const ShowDiff = () => {\r\n    return(\r\n        <Grid container justify=\"center\">\r\n            <Grid item xs={12} className={classes.cardGrid}>\r\n                <TableContainer style={{width: '100%', marginLeft: 15,}}>\r\n                    <Table aria-label=\"simple table\">\r\n                        <TableHead>\r\n                        <TableRow>\r\n                            <TableCell align=\"left\">Output</TableCell>\r\n                            <TableCell align=\"left\"></TableCell>\r\n                            <TableCell align=\"left\">Scan A</TableCell>\r\n                            <TableCell align=\"left\">Scan B</TableCell>\r\n                        </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            <TableRow style={{background: scanModeC1 != scanModeC2 ? '#FFF1F1' : 'transparent'}}>\r\n                                <TableCell align=\"left\">\r\n                                    Scan Mode\r\n                                </TableCell>\r\n                                <TableCell />\r\n                                {scannedIn.map((output, index) => (\r\n                                    output.runTime == timestampOne ?\r\n                                    <>\r\n                                        {setScanModeC1(output.scanMode)}\r\n                                        <TableCell align=\"left\" key={index}>{output.scanMode}</TableCell> \r\n                                    </> : null\r\n                                ))}\r\n                                {scannedIn.map((output, index) => (\r\n                                    output.runTime == timestampTwo ? \r\n                                    <>\r\n                                        {setScanModeC2(output.scanMode)}\r\n                                        <TableCell align=\"left\" key={index}>{output.scanMode}</TableCell> \r\n                                    </> : null\r\n                                ))}\r\n                            </TableRow>\r\n\r\n                            <TableRow style={{background: dateC1 != dateC2 ? '#FFF1F1' : 'transparent'}}>\r\n                                <TableCell align=\"left\">\r\n                                    Date\r\n                                </TableCell>\r\n                                <TableCell />\r\n                                {scannedIn.map((output, index) => (\r\n                                    output.runTime == timestampOne ?\r\n                                    <>\r\n                                        {setDateC1(output.date)}\r\n                                        <TableCell align=\"left\" key={index}>{output.date}</TableCell> \r\n                                    </> : null\r\n                                ))}\r\n                                {scannedIn.map((output, index) => (\r\n                                    output.runTime == timestampTwo ? \r\n                                    <>\r\n                                        {setDateC2(output.date)}\r\n                                        <TableCell align=\"left\" key={index}>{output.date}</TableCell> \r\n                                    </> : null\r\n                                ))}\r\n                            </TableRow>\r\n\r\n                            <TableRow style={{background: timeC1 != timeC2 ? '#FFF1F1' : 'transparent'}}>\r\n                                <TableCell align=\"left\">\r\n                                    Time\r\n                                </TableCell>\r\n                                <TableCell />\r\n                                {scannedIn.map((output, index) => (\r\n                                    output.runTime == timestampOne ?\r\n                                    <>\r\n                                        {settimeC1(output.time)}\r\n                                        <TableCell align=\"left\" key={index}>{output.time}</TableCell> \r\n                                    </> : null\r\n                                ))}\r\n                                {scannedIn.map((output, index) => (\r\n                                    output.runTime == timestampTwo ? \r\n                                    <>\r\n                                        {settimeC2(output.time)}\r\n                                        <TableCell align=\"left\" key={index}>{output.time}</TableCell> \r\n                                    </> : null\r\n                                ))}\r\n                            </TableRow>\r\n\r\n                            <TableRow style={{background: latencyC1 != latencyC2 ? '#FFF1F1' : 'transparent'}}>\r\n                                <TableCell align=\"left\">\r\n                                    Latency\r\n                                </TableCell>\r\n                                <TableCell />\r\n                                {scannedIn.map((output, index) => (\r\n                                    output.runTime == timestampOne ?\r\n                                    <>\r\n                                        {setlatencyC1(output.latency)}\r\n                                        <TableCell align=\"left\" key={index}>{output.latency}</TableCell> \r\n                                    </> : null\r\n                                ))}\r\n                                {scannedIn.map((output, index) => (\r\n                                    output.runTime == timestampTwo ? \r\n                                    <>\r\n                                        {setlatencyC2(output.latency)}\r\n                                        <TableCell align=\"left\" key={index}>{output.latency}</TableCell> \r\n                                    </> : null\r\n                                ))}\r\n                            </TableRow>\r\n\r\n                            <TableRow style={{background: notShownC1 != notShownC2 ? '#FFF1F1' : 'transparent'}}>\r\n                                <TableCell align=\"left\">\r\n                                    Not Shown Ports\r\n                                </TableCell>\r\n                                <TableCell />\r\n                                {scannedIn.map((output, index) => (\r\n                                    output.runTime == timestampOne ?\r\n                                    <>\r\n                                        {setnotShownC1(output.notShown)}\r\n                                        <TableCell align=\"left\" key={index}>{output.notShown}</TableCell> \r\n                                    </> : null\r\n                                ))}\r\n                                {scannedIn.map((output, index) => (\r\n                                    output.runTime == timestampTwo ? \r\n                                    <>\r\n                                        {setnotShownC2(output.notShown)}\r\n                                        <TableCell align=\"left\" key={index}>{output.notShown}</TableCell> \r\n                                    </> : null\r\n                                ))}\r\n                            </TableRow>\r\n\r\n                            <TableRow style={{background: rawSentC1 != rawSentC2 ? '#FFF1F1' : 'transparent'}}>\r\n                                <TableCell align=\"left\">\r\n                                    Raw Packets Sent\r\n                                </TableCell>\r\n                                <TableCell />\r\n                                {scannedIn.map((output, index) => (\r\n                                    output.runTime == timestampOne ?\r\n                                    <>\r\n                                        {setrawSentC1(output.rawPacket)}\r\n                                        <TableCell align=\"left\" key={index}>{output.rawPacket}</TableCell> \r\n                                    </> : null\r\n                                ))}\r\n                                {scannedIn.map((output, index) => (\r\n                                    output.runTime == timestampTwo ? \r\n                                    <>\r\n                                        {setrawSentC2(output.rawPacket)}\r\n                                        <TableCell align=\"left\" key={index}>{output.rawPacket}</TableCell> \r\n                                    </> : null\r\n                                ))}\r\n                            </TableRow>\r\n\r\n                            <TableRow style={{background: rawRcvtC1 != rawRcvtC2 ? '#FFF1F1' : 'transparent'}}>\r\n                                <TableCell align=\"left\">\r\n                                    Raw Packets Received\r\n                                </TableCell>\r\n                                <TableCell />\r\n                                {scannedIn.map((output, index) => (\r\n                                    output.runTime == timestampOne ?\r\n                                    <>\r\n                                        {setrawRcvtC1(output.rcvd)}\r\n                                        <TableCell align=\"left\" key={index}>{output.rcvd}</TableCell> \r\n                                    </> : null\r\n                                ))}\r\n                                {scannedIn.map((output, index) => (\r\n                                    output.runTime == timestampTwo ? \r\n                                    <>\r\n                                        {setrawRcvtC2(output.rcvd)}\r\n                                        <TableCell align=\"left\" key={index}>{output.rcvd}</TableCell> \r\n                                    </> : null\r\n                                ))}\r\n                            </TableRow>\r\n                            \r\n                            <TableRow style={{background: autoC1 != autoC2 ? '#FFF1F1' : 'transparent'}}>\r\n                                <TableCell align=\"left\">\r\n                                    Automation\r\n                                </TableCell>\r\n                                <TableCell />\r\n                                {scannedIn.map((output, index) => (\r\n                                    output.runTime == timestampOne ?\r\n                                    <>\r\n                                        {setautoC1(output.auto)}\r\n                                        <TableCell align=\"left\" key={index}>{output.auto === 'false' ? 'Disabled' : 'Enabled'}</TableCell> \r\n                                    </> : null\r\n                                ))}\r\n                                {scannedIn.map((output, index) => (\r\n                                    output.runTime == timestampTwo ? \r\n                                    <>\r\n                                        {setautoC2(output.auto)}\r\n                                        <TableCell align=\"left\" key={index}>{output.auto === 'false' ? 'Disabled' : 'Enabled'}</TableCell> \r\n                                    </> : null\r\n                                ))}\r\n                            </TableRow>\r\n\r\n                            <TableRow style={{background: cveDetectC1 != cveDetectC2 ? '#FFF1F1' : 'transparent'}}>\r\n                                <TableCell align=\"left\">\r\n                                    CVE Detection\r\n                                </TableCell>\r\n                                <TableCell />\r\n                                {scannedIn.map((output, index) => (\r\n                                    output.runTime == timestampOne ?\r\n                                    <>\r\n                                        {setcveDetectC1(output.cveDetect)}\r\n                                        <TableCell align=\"left\" key={index}>{output.cveDetect === 'false' ? 'Disabled' : 'Enabled'}</TableCell> \r\n                                    </> : null\r\n                                ))}\r\n                                {scannedIn.map((output, index) => (\r\n                                    output.runTime == timestampTwo ? \r\n                                    <>\r\n                                        {setcveDetectC2(output.cveDetect)}\r\n                                        <TableCell align=\"left\" key={index}>{output.cveDetect === 'false' ? 'Disabled' : 'Enabled'}</TableCell> \r\n                                    </> : null\r\n                                ))}\r\n                            </TableRow>\r\n                            \r\n                            <TableRow style={{background: whoisC1 != whoisC2 ? '#FFF1F1' : 'transparent'}}>\r\n                                <TableCell align=\"left\">\r\n                                    WhoIs\r\n                                </TableCell>\r\n                                <TableCell />\r\n                                {scannedIn.map((output, index) => (\r\n                                    output.runTime == timestampOne ?\r\n                                    <>\r\n                                        {setwhoisC1(output.whois)}\r\n                                        <TableCell align=\"left\" key={index}>{output.whois === 'false' ? 'Disabled' : 'Enabled'}</TableCell> \r\n                                    </> : null\r\n                                ))}\r\n                                {scannedIn.map((output, index) => (\r\n                                    output.runTime == timestampTwo ? \r\n                                    <>\r\n                                        {setwhoisC2(output.whois)}\r\n                                        <TableCell align=\"left\" key={index}>{output.whois === 'false' ? 'Disabled' : 'Enabled'}</TableCell> \r\n                                    </> : null\r\n                                ))}\r\n                            </TableRow>\r\n\r\n                            <TableRow style={{background: pbbC1 != pbbC2 ? '#FFF1F1' : 'transparent'}}>\r\n                                <TableCell align=\"left\">\r\n                                    Ping Probes Blocking Bypass\r\n                                </TableCell>\r\n                                <TableCell />\r\n                                {scannedIn.map((output, index) => (\r\n                                    output.runTime == timestampOne ?\r\n                                    <>\r\n                                        {setpbbC1(output.pbb)}\r\n                                        <TableCell align=\"left\" key={index}>{output.pbb === 'false' ? 'Disabled' : 'Enabled'}</TableCell> \r\n                                    </> : null\r\n                                ))}\r\n                                {scannedIn.map((output, index) => (\r\n                                    output.runTime == timestampTwo ? \r\n                                    <>\r\n                                        {setpbbC2(output.pbb)}\r\n                                        <TableCell align=\"left\" key={index}>{output.pbb === 'false' ? 'Disabled' : 'Enabled'}</TableCell> \r\n                                    </> : null\r\n                                ))}\r\n                            </TableRow>\r\n                        \r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </Grid>\r\n        </Grid>\r\n    )  \r\n  }\r\n\r\n  const PortComparison = () => {\r\n      \r\n    return(\r\n        <Grid container spacing={3} justify='center' style={{marginTop: 15,}}>\r\n            <Grid item xs={12}>\r\n                <Paper className={classes.paper}>\r\n                    <Typography>\r\n                        Date:\r\n                    </Typography>\r\n                </Paper>\r\n            </Grid>\r\n\r\n            <Grid item xs={6}>\r\n                <Paper className={classes.portPaper}>\r\n                    <List className={classes.portList} subheader={<li />}>\r\n                        <li key=\"TCP\" className={classes.listSection}>\r\n                            <ul className={classes.ul}>\r\n                                <ListSubheader>TCP</ListSubheader>\r\n                                {rows.map((output, index) => (\r\n                                    output.target != targetToCompare ? null :\r\n                                    output.timestamp != timestampOne ? null :\r\n                                    output.port === 'tcp' ?\r\n                                    <>\r\n                                        <Tooltip title={`Port: ${output.portno}/${output.port} | Status: ${output.status} | Service: ${output.service}`} arrow placement='top-end'>\r\n                                            <ListItem key={output.port} button style={{cursor: 'default'}}>\r\n                                                <ListItemIcon>\r\n                                                    {/* <StatusIcon style={{color: output.status === 'open' ? '#198BF7' : '#BA3B28'}} /> */}\r\n                                                    {output.status === 'open' ? <PortOpened style={{color: '#198BF7'}}/> : <PortFiltered style={{color: '#BA3B28'}}/>}\r\n                                                </ListItemIcon>\r\n                                                <ListItemText \r\n                                                    primary={`${output.portno}/${output.port}`} \r\n                                                    secondary={`service: ${output.service}, version: ${/\\d+\\/(tcp|udp)$/.test(output.version) === true ? 'N/A' : output.version}`}\r\n                                                />\r\n                                            </ListItem>\r\n                                        </Tooltip>\r\n                                    </>  : null\r\n                                ))}\r\n                            </ul>\r\n                        </li>\r\n                        <li key=\"UDP\" className={classes.listSection}>\r\n                            <ul className={classes.ul}>\r\n                                <ListSubheader>UDP</ListSubheader>\r\n                                {rows.map((output, index) => (\r\n                                    output.target != targetToCompare ? null :\r\n                                    output.timestamp != timestampOne ? null :\r\n                                    output.port === 'udp' ?\r\n                                    <>\r\n                                        <Tooltip title={`Port: ${output.portno}/${output.port} | Status: ${output.status} | Service: ${output.service}`} arrow placement='top-end'>\r\n                                            <ListItem key={output.port} button style={{cursor: 'default'}}>\r\n                                                <ListItemIcon>\r\n                                                    {/* <StatusIcon style={{color: output.status === 'open' ? '#198BF7' : '#BA3B28'}} /> */}\r\n                                                    {output.status === 'open' ? <PortOpened style={{color: '#198BF7'}}/> : <PortFiltered style={{color: '#BA3B28'}}/>}\r\n                                                </ListItemIcon>\r\n                                                <ListItemText \r\n                                                    primary={`${output.portno}/${output.port}`} \r\n                                                    secondary={`service: ${output.service}, version: ${/\\d+\\/(tcp|udp)$/.test(output.version) === true ? 'N/A' : output.version}`}\r\n                                                />\r\n                                            </ListItem>\r\n                                        </Tooltip>\r\n                                    </>  : null\r\n                                ))}\r\n                            </ul>\r\n                        </li>\r\n                    </List>\r\n                 </Paper>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n                <Paper className={classes.portPaper}>\r\n                    <List className={classes.portList} subheader={<li />}>\r\n                        <li key=\"TCP\" className={classes.listSection}>\r\n                            <ul className={classes.ul}>\r\n                                <ListSubheader>TCP</ListSubheader>\r\n                                {rows.map((output, index) => (\r\n                                    output.target != targetToCompare ? null :\r\n                                    output.timestamp != timestampTwo ? null :\r\n                                    output.port === 'tcp' ?\r\n                                    <>\r\n                                        <Tooltip title={`Port: ${output.portno}/${output.port} | Status: ${output.status} | Service: ${output.service}`} arrow placement='top-end'>\r\n                                            <ListItem key={output.port} button style={{cursor: 'default'}}>\r\n                                                <ListItemIcon>\r\n                                                    {/* <StatusIcon style={{color: output.status === 'open' ? '#198BF7' : '#BA3B28'}} /> */}\r\n                                                    {output.status === 'open' ? <PortOpened style={{color: '#198BF7'}}/> : <PortFiltered style={{color: '#BA3B28'}}/>}\r\n                                                </ListItemIcon>\r\n                                                <ListItemText \r\n                                                    primary={`${output.portno}/${output.port}`} \r\n                                                    secondary={`service: ${output.service}, version: ${/\\d+\\/(tcp|udp)$/.test(output.version) === true ? 'N/A' : output.version}`}\r\n                                                />\r\n                                            </ListItem>\r\n                                        </Tooltip>\r\n                                    </> : null\r\n                                ))}\r\n                            </ul>\r\n                        </li>\r\n                        <li key=\"UDP\" className={classes.listSection}>\r\n                            <ul className={classes.ul}>\r\n                                <ListSubheader>UDP</ListSubheader>\r\n                                {rows.map((output, index) => (\r\n                                    output.target != targetToCompare ? null :\r\n                                    output.timestamp != timestampTwo ? null :\r\n                                    output.port === 'udp' ?\r\n                                    <>\r\n                                        <Tooltip title={`Port: ${output.portno}/${output.port} | Status: ${output.status} | Service: ${output.service}`} arrow placement='top-end'>\r\n                                            <ListItem key={output.port} button style={{cursor: 'default'}}>\r\n                                                <ListItemIcon>\r\n                                                    {/* <StatusIcon style={{color: output.status === 'open' ? '#198BF7' : '#BA3B28'}} /> */}\r\n                                                    {output.status === 'open' ? <PortOpened style={{color: '#198BF7'}}/> : <PortFiltered style={{color: '#BA3B28'}}/>}\r\n                                                </ListItemIcon>\r\n                                                <ListItemText \r\n                                                    primary={`${output.portno}/${output.port}`} \r\n                                                    secondary={`service: ${output.service}, version: ${/\\d+\\/(tcp|udp)$/.test(output.version) === true ? 'N/A' : output.version}`}\r\n                                                />\r\n                                            </ListItem>\r\n                                        </Tooltip>\r\n                                    </>  : null\r\n                                ))}\r\n                            </ul>\r\n                        </li>\r\n                    </List>\r\n                 </Paper>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n        {isScanning.map((status) => (\r\n           status === true ?\r\n            <>\r\n              <div style={{textAlign: \"center\"}}>\r\n                <Tooltip title=\"Previous scan is progressing, please wait...\" arrow placement=\"top\">\r\n                  <LinearProgress style={{width: \"83%\",marginLeft:90, height: 4}} />\r\n                </Tooltip>\r\n              </div>\r\n            </>\r\n            :\r\n            null\r\n        ))}\r\n      <Grid container spacing={5} justify=\"center\" alignItems=\"center\">\r\n       \r\n        <Grid item xs={10}>\r\n            <Paper className={classes.paper}>\r\n                <Typography variant=\"h6\">\r\n                    Scan Comparison\r\n                </Typography>\r\n                <div style={{textAlign: \"center\",marginTop: 15,marginLeft: 120}}>\r\n                    <FormControl variant=\"outlined\" style={{width: \"100%\"}}>\r\n                        <InputLabel id=\"select-outlined-label\">\r\n                            Choose a target IP or Domain\r\n                        </InputLabel>\r\n                        <Select\r\n                            labelId=\"select-outlined-label\"\r\n                            id=\"select-outlined\"\r\n                            value={targetToCompare}\r\n                            onChange={handleChange}\r\n                            label=\"Choose a target IP or Domain\"\r\n                            style={{\r\n                                width: \"83%\",\r\n                                textAlign: \"center\",\r\n                            }}\r\n                        >\r\n                            \r\n                            {scannedIn.map((target, index) => (\r\n                               target.target === '' || toDel.indexOf(target.id) > -1 ? null :\r\n                               <MenuItem \r\n                                    value={target.target} \r\n                                    key={index}\r\n                                >\r\n                                    {target.targetForSelect.replace('sn\\=', '\\/')}\r\n                                </MenuItem>\r\n                            ))}\r\n                        </Select>\r\n                    </FormControl>\r\n                </div>\r\n                    <br/><Divider variant=\"middle\" />\r\n                <Grid container justify=\"center\" alignItems=\"center\" className={classes.centerGrid}>\r\n                    <Grid item xs={5}>\r\n                        <Typography>Scan Result 1</Typography>\r\n                            <br/>\r\n                        <FormControl variant=\"outlined\" style={{width: \"100%\", marginLeft: 85}}>\r\n                            <InputLabel id=\"select-outlined-label\">\r\n                                Timestamp 1\r\n                            </InputLabel>\r\n                            <Select\r\n                                labelId=\"select-outlined-label\"\r\n                                id=\"select-outlined\"\r\n                                value={timestampOne}\r\n                                onChange={handleTimestampOneChange}\r\n                                label=\"Timestamp 1\"\r\n                                style={{\r\n                                    width: \"50%\",\r\n                                    textAlign: \"center\",\r\n                                }}\r\n                                disabled={isDisabled}\r\n                            >\r\n                                {scannedIn.map((target) => (\r\n                                    toDel.indexOf(target.id) > -1 ? null :\r\n                                    <MenuItem \r\n                                        value={`${target.runTime}`} \r\n                                        key={target.runTime}\r\n                                        className={\r\n                                            target.runTime == timestampTwo || target.target != targetToCompare ? classes.defaultHide : classes.defaultShow\r\n                                        }\r\n                                    >\r\n                                        {target.runTime}\r\n                                    </MenuItem>\r\n                                ))}\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={5}>\r\n                        <Typography>Scan Result 2</Typography>\r\n                            <br/>\r\n                        <FormControl variant=\"outlined\" style={{width: \"100%\", marginLeft: 85}}>\r\n                            <InputLabel id=\"select-outlined-label\">\r\n                                Timestamp 2\r\n                            </InputLabel>\r\n                            <Select\r\n                                labelId=\"select-outlined-label\"\r\n                                id=\"select-outlined\"\r\n                                value={timestampTwo}\r\n                                onChange={handleTimestampTwoChange}\r\n                                label=\"Timestamp 2\"\r\n                                style={{\r\n                                    width: \"50%\",\r\n                                    textAlign: \"center\",\r\n                                }}\r\n                                disabled={isDisabled}\r\n                            >\r\n                                {scannedIn.map((target) => (\r\n                                    toDel.indexOf(target.id) > -1 ? null :\r\n                                    <MenuItem \r\n                                        value={`${target.runTime}`} \r\n                                        key={target.runTime}\r\n                                        className={\r\n                                            target.runTime == timestampOne || target.target != targetToCompare ? classes.defaultHide : classes.defaultShow\r\n                                        }\r\n                                    >\r\n                                        {target.runTime}\r\n                                    </MenuItem>\r\n                                ))}\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Grid>\r\n                </Grid>\r\n            </Paper>\r\n        </Grid>\r\n\r\n        <Grid item xs={10}>\r\n            <Paper className={classes.paper}>\r\n                <Grid item xs={12}>\r\n                    <div id=\"scanComparisonTab\">\r\n                        <AppBar position=\"static\">\r\n                            <Tabs \r\n                                value={value} \r\n                                onChange={handleTabChange} \r\n                                indicatorColor=\"primary\"\r\n                                textColor=\"primary\"\r\n                                centered>\r\n                                <Tab label=\"Show Same\" {...a11yProps(0)} style={{textTransform: \"capitalize\"}} disabled={isDisabled}/>\r\n                                <Tab label=\"Show Different\" {...a11yProps(1)} style={{textTransform: \"capitalize\"}} disabled={isDisabled}/>\r\n                            </Tabs>\r\n                        </AppBar>\r\n                            <Divider variant=\"middle\" />\r\n                            <br/>\r\n                        {\r\n                            timestampOne == \"\" || timestampTwo == \"\" ?\r\n                            null\r\n                                :\r\n                            <>\r\n                                <Typography style={{textAlign: \"center\"}} color=\"textSecondary\">Scan Result of [{targetToCompare}]</Typography>\r\n                                <TabPanel value={value} index={0}>\r\n                                    <ShowSame /><PortComparison />\r\n                                </TabPanel>    \r\n                                <TabPanel value={value} index={1}>\r\n                                    <ShowDiff /><PortComparison />\r\n                                </TabPanel>    \r\n                            </>\r\n                        }\r\n                    </div>\r\n                </Grid>\r\n            </Paper>\r\n        </Grid>\r\n        </Grid>\r\n      <br/><br/>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\CustomisedScanMode.tsx",["563","564","565","566","567","568","569","570","571","572","573","574","575","576","577","578","579"],"import React, {useState} from 'react';\r\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\r\nimport { Switch, Route, Link, BrowserRouter } from \"react-router-dom\";\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography'\r\n\r\nimport List from '@material-ui/core/List';\r\nimport ListItem, { ListItemProps } from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Divider from '@material-ui/core/Divider';\r\n\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport ScanModeIcon from '@material-ui/icons/Settings';\r\nimport DeleteMode from '@material-ui/icons/DeleteForever';\r\nimport NewScanMode from './NewScanMode'\r\n\r\nimport modeData from '../Backend/frontendData/customisedScanModeStatus'\r\nimport AddNewMode from '../Mobx/Models/addCustomisedScanModeStatus'\r\n\r\nimport ModeSetting from './NewScanModeTab/customisedModeDialog'\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n    paper: {\r\n      padding: theme.spacing(2),\r\n      textAlign: 'left',\r\n      backgroundColor: \"#fefefe\",\r\n      color: \"#333333\",\r\n    },\r\n    centerGrid: {\r\n        textAlign: \"center\",\r\n        marginTop: 15,\r\n    },\r\n    listGrid: {\r\n        width: '100%',\r\n        maxWidth: 360,\r\n        backgroundColor: theme.palette.background.paper,\r\n    },\r\n  }),\r\n);\r\n\r\nexport default () => {\r\n  const classes = useStyles();\r\n\r\n  const [type, setType] = useState('');\r\n  const handleChange = (event: React.ChangeEvent<{ value: unknown }>) => {\r\n      setType(event.target.value as string)\r\n  }\r\n\r\n  interface customisedMode{\r\n      type: string\r\n  }\r\n\r\n  const [mode, setMode] = useState<customisedMode[]>([]);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Grid container spacing={5} justify=\"center\" alignItems=\"center\">\r\n       \r\n        <Grid item xs={10}>\r\n            <Paper className={classes.paper}>\r\n                <Typography variant=\"h6\">\r\n                    Customised Scan Modes\r\n                    {/* <Button onClick={()=>{setMode([...mode, {type}])}}>ADD NEW</Button> */}\r\n                </Typography>\r\n                    <br/><br/>\r\n                <Grid container justify=\"center\" spacing={5}>\r\n                    {modeData.rows.map((data, index) => (\r\n                        data.profile.map((data, index) => (\r\n                            data.modeID === '' ? \r\n                            null\r\n                                :\r\n                            <>\r\n                                <Grid item xs={6} id=\"1\">\r\n                                    <Card>\r\n                                        <CardContent style={{whiteSpace: \"nowrap\"}}>\r\n                                            <>\r\n                                                <Typography color=\"textSecondary\" style={{fontWeight: \"bold\", fontSize: 18}} gutterBottom>\r\n                                                    {data.name}\r\n                                                </Typography>\r\n                                                    <Divider /><br/>\r\n                                                <Typography color=\"textSecondary\" gutterBottom style={{whiteSpace: \"normal\"}}>\r\n                                                    {data.des}\r\n                                                </Typography>\r\n                                            </>\r\n                                        </CardContent>\r\n                                                <Divider variant=\"middle\" />\r\n                                        \r\n                                        <CardActions style={{textAlign: \"center\"}}>\r\n                                            <ModeSetting index={index}/>\r\n                                            <form method='post' action=\"http://localhost:5000/deleteMode\">\r\n                                                <input style={{display: 'none'}} type='text' readOnly name='modeID' value={data.modeID} />\r\n                                                <button type='submit' id=\"deleteBtn\"><span>Delete</span><DeleteMode id=\"delIcon\"/></button>\r\n                                            </form>\r\n                                        </CardActions>\r\n                                    </Card>\r\n                                </Grid>\r\n                            </>\r\n                        ))\r\n                    ))}\r\n                </Grid>\r\n            </Paper>\r\n        </Grid>\r\n        <Grid item xs={10}>\r\n            <NewScanMode />\r\n        </Grid>\r\n\r\n      </Grid>\r\n      \r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\AdvancedMode.tsx",["580","581","582","583","584","585","586"],"import React, {useState} from 'react';\r\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\n\r\n// Components\r\nimport Content from './AdvancedModeContent'\r\n\r\n// Backend\r\nimport { isScanning } from '../Backend/frontendData/isScanning'\r\n\r\n// Mobx\r\nimport advancedModeStatus from '../Mobx/Models/advancedModeStatus'\r\n\r\nimport '../Styles/AdvancedMode.css'\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      background: 'rgba(0, 0, 0, 0.8)',\r\n    }\r\n  }),\r\n);\r\n\r\n\r\nexport default () => {\r\n  const classes = useStyles()\r\n  const [open, setOpen] = useState(false)\r\n\r\n  const handleClose = () => {\r\n    advancedModeStatus.setOpen(false);\r\n    advancedModeStatus.setIsClick(false);\r\n    setOpen(false)\r\n    setTerminal('')\r\n  };\r\n\r\n  const [terminal, setTerminal] = useState('');\r\n  const CommandValidator = () => {\r\n    var command: string = ''\r\n    var subnet:string = String(terminal.match(/^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.0\\/\\d+$/));\r\n    var subnetReplaced: string = String(subnet.replace('/', 'sn\\='))\r\n\r\n    if(subnetReplaced != 'null'){\r\n      command = subnetReplaced\r\n    } else {\r\n      command = terminal\r\n    }\r\n\r\n    return(\r\n      <input \r\n        type='text'  \r\n        readOnly \r\n        name='command' \r\n        value={command} \r\n        style={{display: ''}}\r\n      />\r\n    );\r\n  }\r\n\r\n  const TargetValidator = () => {\r\n    var dm:string = String(terminal.match(/[a-zA-Z0-9][a-zA-Z0-9-]{1,61}[a-zA-Z0-9](?:\\.[a-zA-Z]{2,})+/));\r\n    var ip:string = String(terminal.match(/^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/));\r\n    var subnet:string = String(terminal.match(/^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.0\\/\\d+$/));\r\n    var subnetReplaced: string = String(subnet.replace('/', 'sn\\='))\r\n\r\n    var target:string = '';\r\n\r\n    if(dm != 'null'){\r\n      target = dm\r\n    } else if(ip != 'null'){\r\n      target = ip\r\n    } else if(subnetReplaced != 'null') {\r\n      target = subnetReplaced\r\n    } else { target = ' '}\r\n\r\n    console.log(target)\r\n      \r\n    return(\r\n      <input \r\n        type='text'  \r\n        readOnly \r\n        name='target' \r\n        value={target} \r\n        style={{display: ''}}\r\n      />\r\n    );\r\n  }\r\n\r\n  const CancelAlert = () => {\r\n    const [alertOpen, setAlertOpen] = React.useState(false);\r\n\r\n    const handleClickOpen = () => {\r\n      setAlertOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n      setOpen(false);\r\n      setAlertOpen(false);\r\n      setTerminal('')\r\n    };\r\n\r\n    return (\r\n      <div>\r\n        <Button color=\"primary\" onClick={handleClickOpen}>\r\n          Cancel\r\n        </Button>\r\n        <Dialog\r\n          open={alertOpen}\r\n          onClose={handleClose}\r\n          aria-labelledby=\"alert-dialog-title\"\r\n          aria-describedby=\"alert-dialog-description\"\r\n        >\r\n          <DialogTitle id=\"alert-dialog-title\">{\"Are you sure?\"}</DialogTitle>\r\n          <DialogContent>\r\n            <DialogContentText id=\"alert-dialog-description\">\r\n              Are you sure you want to leave this page?  You will lose all content in this mode.\r\n            </DialogContentText>\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={() => setAlertOpen(false)} color=\"primary\">\r\n              Cancel\r\n            </Button>\r\n            <Button onClick={handleClose} color=\"primary\" autoFocus>\r\n              Yes, I'm sure\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Button \r\n          variant=\"outlined\" \r\n          style={{\r\n              width: \"100%\", \r\n              whiteSpace: \"nowrap\",\r\n              fontWeight: 'bold',\r\n              background: '#343434',\r\n              borderColor: '#191919',\r\n              color: '#DFC500',\r\n          }}\r\n          size=\"small\"\r\n          color=\"primary\"\r\n          onClick={() => {\r\n            advancedModeStatus.setOpen(true); \r\n            advancedModeStatus.setIsClick(true);\r\n            setOpen(true)\r\n          }}\r\n      >\r\n          Advanced Mode\r\n          \r\n      </Button>\r\n        <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\" fullWidth maxWidth='md' className={classes.root} id='advancedModeBody'>\r\n          <DialogTitle id=\"form-dialog-title\">Advanced Scan Mode</DialogTitle>\r\n          <Grid container spacing={3}>\r\n            <Grid item xs={12}>\r\n              <DialogContent>\r\n              <DialogContentText>\r\n                Pure command-line mode for advanced Nmap user.\r\n              </DialogContentText>\r\n              <TextField\r\n                autoFocus\r\n                margin=\"dense\"\r\n                id=\"name\"\r\n                label=\"Command Line\"\r\n                variant='outlined'\r\n                InputProps={{\r\n                  startAdornment: <InputAdornment position=\"start\" style={{position: 'relative', bottom: 38,}}> nmap </InputAdornment>,\r\n                }}\r\n                spellCheck={false}\r\n                value={terminal}\r\n                onChange={(evt) => {setTerminal(evt.target.value as string); }}\r\n                multiline\r\n                rows={5}\r\n                fullWidth\r\n              />\r\n            </DialogContent>\r\n              <DialogActions>\r\n                {terminal.length > 0 ? \r\n                  <CancelAlert /> \r\n                    :\r\n                  <Button onClick={handleClose} color=\"primary\">\r\n                    Cancel\r\n                  </Button>\r\n                }\r\n                <div style={{position: 'relative', bottom: 2}}>\r\n                  {isScanning.map((isScanning) => (\r\n                      isScanning === true ?\r\n                        <>\r\n                          <Tooltip title=\"Previous scan is progressing, please wait...\" arrow placement=\"top\">\r\n                            <Typography \r\n                              style={{\r\n                                display: \"inline-block\",\r\n                                position: \"relative\",\r\n                                top: 6,\r\n                                right: 5,\r\n                                color: \"lightgrey\",\r\n                                float: \"right\",\r\n                                cursor: \"default\",\r\n                                userSelect: \"none\",\r\n                                textTransform: \"uppercase\",\r\n                              }}\r\n                            >\r\n                              Scan\r\n                            </Typography>\r\n                          </Tooltip>\r\n                        </> \r\n                        :\r\n                        terminal === \"\" ?\r\n                        <>\r\n                          <Tooltip title=\"Please Enter the Target.\" arrow placement=\"top\">\r\n                            <span \r\n                              color=\"primary\" \r\n                              style={{\r\n                                float: \"right\",\r\n                              }}\r\n                              id=\"scanBtnDisabled\"\r\n                            >\r\n                              Scan\r\n                            </span>\r\n                          </Tooltip>\r\n                        </>\r\n                          :\r\n                        <>\r\n                          <form method='post' action=\"http://localhost:5000/runAdvancedAPI\">\r\n                            <CommandValidator />\r\n                            <TargetValidator />\r\n                            <input \r\n                              color=\"primary\" \r\n                              style={{\r\n                                float: \"right\",\r\n                              }}\r\n                              type=\"submit\"\r\n                              value=\"Scan\"\r\n                              id=\"scanBtn\"\r\n                            />\r\n                          </form>\r\n                        </> \r\n                  ))}\r\n                </div>\r\n              </DialogActions>\r\n            </Grid>\r\n            \r\n            <Grid item xs={12}>\r\n              <div style={{padding: '25px 25px'}}>\r\n                <Content />\r\n              </div>\r\n            </Grid>\r\n          </Grid>\r\n          \r\n\r\n        </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\ScanHistory.tsx",["587","588","589","590","591","592","593","594","595","596","597","598","599"],"import React, {useState} from 'react';\r\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\r\nimport { Switch, Route, Link, BrowserRouter } from \"react-router-dom\";\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport MuiAlert, { AlertProps } from '@material-ui/lab/Alert';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport ShowHistoryIcon from '@material-ui/icons/DoubleArrow';\r\n\r\n// Backend\r\nimport history from '../Backend/frontendData/scannedTargetForSelect.json'\r\nimport { isScanning } from '../Backend/frontendData/isScanning'\r\nimport scannedIn from '../Backend/frontendData/scannedIn.json'\r\nimport { toDel } from '../Backend/frontendData/toDelete'\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      flexGrow: 1,\r\n      width: '100%',\r\n        '& > * + *': {\r\n          marginTop: theme.spacing(2),\r\n      },\r\n    },\r\n    paper: {\r\n      padding: theme.spacing(2),\r\n      textAlign: 'left',\r\n      backgroundColor: \"#fefefe\",\r\n      color: \"#333333\",\r\n    },\r\n    centerGrid: {\r\n        textAlign: \"center\",\r\n        marginTop: 15,\r\n    },\r\n    table: {\r\n        minWidth: 650,\r\n    },\r\n  }),\r\n);\r\n\r\nconst DoneScanning = () => {\r\n    const [open, setOpen] = useState(true);\r\n  \r\n    const handleClick = () => {\r\n      setOpen(true);\r\n    };\r\n  \r\n    const handleClose = (event: React.SyntheticEvent | React.MouseEvent, reason?: string) => {\r\n      if (reason === 'clickaway') {\r\n        return;\r\n      }\r\n  \r\n      setOpen(false);\r\n    };\r\n\r\n    return (\r\n      <div>\r\n        {isScanning.map((status: boolean) => (\r\n            status === true ?\r\n                <>\r\n                    <Snackbar\r\n                        anchorOrigin={{\r\n                            vertical: 'bottom',\r\n                            horizontal: 'left',\r\n                        }}\r\n                        open={open}\r\n                        autoHideDuration={6000}\r\n                        onClose={handleClose}\r\n                        message=\"Scanning is progressing...\"\r\n                        action={\r\n                            <React.Fragment>\r\n                            <IconButton size=\"small\" aria-label=\"close\" color=\"inherit\" onClick={handleClose}>\r\n                                <CloseIcon fontSize=\"small\" />\r\n                            </IconButton>\r\n                            </React.Fragment>\r\n                        }\r\n                        />\r\n                </>\r\n            :\r\n                null\r\n        ))}\r\n      </div>\r\n    );\r\n}\r\n  \r\nexport default () => {\r\n  const classes = useStyles();\r\n\r\n  const [page, setPage] = React.useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(15);\r\n\r\n  const handleChangePage = (event: unknown, newPage: number) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setRowsPerPage(+event.target.value);\r\n    setPage(0);\r\n  };\r\n\r\n  return (\r\n  <>\r\n      {isScanning.map((status) => (\r\n          status === true ?\r\n          <>\r\n            <div style={{textAlign: \"center\"}}>\r\n              <Tooltip title=\"Previous scan is progressing, please wait...\" arrow placement=\"top\">\r\n                <LinearProgress style={{width: \"83%\",marginLeft:90, height: 4}} />\r\n              </Tooltip>\r\n            </div>\r\n          </>\r\n          :\r\n          null\r\n      ))}\r\n      <Grid container spacing={5} justify=\"center\" alignItems=\"center\">\r\n          <Grid item xs={10}>\r\n              <Paper className={classes.paper}>  \r\n                  <Typography variant=\"h6\">\r\n                      Scan History\r\n                  </Typography>\r\n                      <br/><br/>\r\n                  <TableContainer>\r\n                      <Table className={classes.table} aria-label=\"simple table\">\r\n                        <TableHead>\r\n                            <TableRow>\r\n                            <TableCell align=\"center\">Target</TableCell>\r\n                            <TableCell align=\"center\">Timestamp</TableCell>\r\n                            <TableCell align=\"center\">Date</TableCell>\r\n                            <TableCell align=\"center\" />\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {history.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((target) => (\r\n                                target.target == \"\" || toDel.indexOf(target.id) > -1 ? \r\n                                    null\r\n                                        :\r\n                                    <TableRow key={target.id} hover>\r\n                                        <TableCell align=\"center\">{target.target.replace('sn\\=', '\\/')}</TableCell>\r\n                                        <TableCell align=\"center\">{target.runTime}</TableCell>\r\n                                        <TableCell align=\"center\">{target.date}</TableCell>\r\n                                        <TableCell align=\"center\">\r\n                                            <Link to=\"/scanResult\">\r\n                                                <IconButton>\r\n                                                    <ShowHistoryIcon />\r\n                                                </IconButton>\r\n                                            </Link>\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                            ))}\r\n                        </TableBody>\r\n                      </Table>\r\n                  </TableContainer>\r\n                  <TablePagination\r\n                  rowsPerPageOptions={[5, 10, 25, 100]}\r\n                  component=\"div\"\r\n                  count={history.length}\r\n                  rowsPerPage={rowsPerPage}\r\n                  page={page}\r\n                  onChangePage={handleChangePage}\r\n                  onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                />\r\n              </Paper>\r\n          </Grid>\r\n      </Grid>\r\n  </>\r\n  );\r\n}","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Backend\\frontendData\\toDelete.tsx",[],"C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\NewScanModeTab\\customisedModeDialog.tsx",["600","601","602","603","604","605","606","607","608","609","610"],"import React, {useState} from 'react';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport List from '@material-ui/core/List';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport { TransitionProps } from '@material-ui/core/transitions';\r\n\r\n// Mobx\r\nimport { observer } from 'mobx-react-lite'\r\nimport mode from '../../Backend/frontendData/customisedScanModeStatus'\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n    paper: {\r\n      padding: theme.spacing(2),\r\n      textAlign: 'left',\r\n      backgroundColor: \"#fefefe\",\r\n      color: \"#333333\",\r\n    },\r\n    centerGrid: {\r\n        textAlign: \"center\",\r\n        marginTop: 15,\r\n    },\r\n    listGrid: {\r\n        width: '100%',\r\n        maxWidth: 360,\r\n        backgroundColor: theme.palette.background.paper,\r\n    },\r\n    appBar: {\r\n        position: 'relative',\r\n        background: \"#333\",\r\n      },\r\n      title: {\r\n        marginLeft: theme.spacing(2),\r\n        flex: 1,\r\n      \r\n    },\r\n    avatarText: {\r\n        background: \"#4A92FF\",\r\n        borderRadius: 6,\r\n        color: \"#fff\",\r\n        padding: \"2px 6px\",\r\n    }, \r\n    sectionStyle: {\r\n        marginTop: 35, \r\n        border: \"1px solid #C4C4C4\", \r\n        padding: \"10px 10px\", \r\n        borderRadius: 5,\r\n    },\r\n    sectionTitleBg: {\r\n        position: \"relative\",\r\n        bottom: 22,\r\n        background: \"#fff\",\r\n        padding: \"0 5px\",\r\n        width: \"auto\",\r\n    },\r\n    sectionTitle: {\r\n        color: \"#757575\",\r\n        fontSize: 13,\r\n    },\r\n  }),\r\n);\r\n\r\nconst Transition = React.forwardRef(function Transition(\r\n  props: TransitionProps & { children?: React.ReactElement },\r\n  ref: React.Ref<unknown>,\r\n) {\r\n  return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\n\r\nexport default observer (({index}:{index: number}) => {\r\n  const classes = useStyles();\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const [value, setValue] = useState<number>(4);\r\n\r\n  const handleFreqChange = (event: any, newValue: number | number[]) => {\r\n    setValue(newValue as number);\r\n  };\r\n\r\n  const [radio, setRadio] = useState(\"-v\");\r\n  const handleRadioChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setRadio((event.target as HTMLInputElement).value);\r\n  };\r\n\r\n\r\n  return (\r\n    <div>\r\n      <Button style={{textTransform: 'capitalize'}} color=\"primary\" onClick={handleClickOpen}>\r\n        Settings<SettingsIcon />\r\n      </Button>\r\n      <Dialog fullScreen open={open} onClose={handleClose} TransitionComponent={Transition}>\r\n        <AppBar className={classes.appBar} style={{backgroundColor: \"#333\"}}>\r\n          <Toolbar>\r\n            <IconButton edge=\"start\" color=\"inherit\" onClick={handleClose} aria-label=\"close\">\r\n              <CloseIcon />\r\n            </IconButton>\r\n              {mode.rows.map((obj, index) => (\r\n                obj.profile.map((data, index) => (\r\n                  <>\r\n                    <Typography variant=\"h6\" className={classes.title}>\r\n                      {data.name}\r\n                    </Typography>\r\n                  </>\r\n                ))\r\n              ))}\r\n            <Button autoFocus color=\"inherit\" onClick={handleClose}>\r\n              save\r\n            </Button>\r\n          </Toolbar>\r\n        </AppBar>\r\n          <table style={{marginTop: 25, padding: \"45px 45px\"}}>\r\n            <tr>\r\n                <td>\r\n                    <TextField \r\n                        id=\"outlined-basic\" \r\n                        label=\"Current Command\" \r\n                        // defaultValue={`${mode.data[index].command} [ Target or Domain ]`}\r\n                        variant=\"outlined\" \r\n                        size=\"small\"\r\n                        style={{\r\n                            width: \"100%\",\r\n                            textAlignLast: \"center\",\r\n                        }}\r\n                        inputProps={{ \r\n                            readOnly: true, \r\n                        }}\r\n                    />\r\n                </td>\r\n            </tr>\r\n                <tr>\r\n                    <td>\r\n                        <div className={classes.sectionStyle}>\r\n                            <span className={classes.sectionTitleBg}>\r\n                                <span className={classes.sectionTitle}>Scan Frequency</span>\r\n                            </span>\r\n                            <div>\r\n                                <Slider \r\n                                    value={value} \r\n                                    onChange={handleFreqChange} \r\n                                    max={5}\r\n                                    min={0}\r\n                                    step={1}\r\n                                    valueLabelDisplay=\"auto\"\r\n                                    style={{\r\n                                        width: \"70%\",\r\n                                        marginLeft: 145,\r\n                                    }}    \r\n                                />\r\n                            </div>\r\n                                <br/>\r\n                            <Typography style={{textAlign: \"right\",marginRight: 35}}>\r\n                                -T&nbsp;\r\n                                <Tooltip \r\n                                    title=\"[ -T ] --- Specifies the timing (Timing) used in the scanning process, there are always 6 levels (0-5), the level increases, the faster the scanning speed.\" \r\n                                    placement=\"top\" \r\n                                    arrow\r\n                                >\r\n                                    <span className={classes.avatarText}>{value}</span>\r\n                                </Tooltip>\r\n                            </Typography>\r\n                        </div>\r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                <td>\r\n                    <div className={classes.sectionStyle}>\r\n                        <span className={classes.sectionTitleBg}>\r\n                            <span className={classes.sectionTitle}>Flag</span>\r\n                        </span>\r\n                    </div>\r\n                </td>\r\n            </tr>\r\n        </table>\r\n    \r\n        </Dialog>\r\n    </div>\r\n  );\r\n})\r\n  ","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Backend\\frontendData\\getPortStatus.tsx",[],"C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Mobx\\Models\\resultSelectStatus.tsx",[],"C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Mobx\\Models\\homeSettingsFlagStatus.tsx",[],"C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Mobx\\Models\\advancedModeStatus.tsx",[],"C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Mobx\\Models\\defaultScanModeStatus.tsx",[],"C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Backend\\frontendData\\isScanning.tsx",[],"C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\AdvancedModeContent.tsx",["611","612"],"import React, {useState} from 'react';\r\nimport { createStyles, Theme, makeStyles } from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\n// Backend\r\nimport { result } from '../Backend/frontendData/advancedScan'\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      width: '100%',\r\n      maxWidth: 360,\r\n      backgroundColor: theme.palette.background.paper,\r\n      position: 'relative',\r\n      overflow: 'auto',\r\n      maxHeight: 300,\r\n    },\r\n    listSection: {\r\n      backgroundColor: 'inherit',\r\n    },\r\n    ul: {\r\n      backgroundColor: 'inherit',\r\n      padding: 0,\r\n    },\r\n    paper: {\r\n      marginBottom: 15,\r\n    }\r\n  }),\r\n);\r\n\r\nexport default function PinnedSubheaderList() {\r\n  const classes = useStyles();\r\n  const [selectedResult, setSelectedResult] = useState(0);\r\n\r\n  return (\r\n    <>\r\n      <Grid container spacing={2} justify='center'>\r\n        <Grid item xs={4}>\r\n          <Paper className={classes.paper}>\r\n            <List className={classes.root} subheader={<li />}>\r\n              {result.map((output, index) => (\r\n                <li className={classes.listSection}>\r\n                  <ul className={classes.ul}>\r\n                    {output.scanID === '' ? null :\r\n                      <ListItem key={index} button selected={index === selectedResult ? true : false}>\r\n                        <ListItemText primary={output.target.replace('sn\\=', '\\/')} onClick={() => setSelectedResult(index)} />\r\n                      </ListItem>\r\n                    }\r\n                  </ul>\r\n                </li>\r\n              ))}\r\n            </List>\r\n          </Paper>\r\n        </Grid>\r\n\r\n        <Grid item xs={8}>\r\n          <Paper className={classes.paper}>\r\n            {result.map((output, index) => (\r\n              index === selectedResult ? \r\n                <Typography style={{padding: '15px 15px', whiteSpace: 'pre-line'}}>{output.output}</Typography> \r\n                  : \r\n                null\r\n            ))}\r\n          </Paper>\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Backend\\frontendData\\customisedScanModeStatus.tsx",["613","614","615","616","617","618","619"],"import { types, Instance } from \"mobx-state-tree\";\r\n\r\ntype profileModel = Instance<typeof profile>\r\ntype pingModel = Instance<typeof ping>\r\ntype nseModel = Instance<typeof nse>\r\ntype targetMode = Instance<typeof target>\r\ntype sourceModel = Instance<typeof source>\r\ntype timingModel = Instance<typeof timing>\r\ntype otherModel = Instance<typeof other>\r\n\r\nconst profile = types\r\n    .model({\r\n        modeID: types.string,\r\n        name: types.string,\r\n        des: types.string,\r\n        freq: types.number,\r\n        tcp: types.string,\r\n        nonTcp: types.string,\r\n    })\r\n    \r\nconst ping = types\r\n    .model({\r\n        flags: types.string,\r\n    })\r\n\r\nconst nse = types\r\n    .model({\r\n        flags: types.string,\r\n    })\r\n\r\nconst target = types\r\n    .model({\r\n        flags: types.string,\r\n    })\r\n\r\nconst source = types\r\n    .model({\r\n        flags: types.string,\r\n    })\r\n\r\nconst timing = types\r\n    .model({\r\n        flags: types.string,\r\n    })\r\n\r\nconst other = types\r\n    .model({\r\n        flags: types.string,\r\n    })\r\n\r\nconst modelData = types\r\n    .model({\r\n        profile: types.array(profile),\r\n        ping: types.array(ping),\r\n        nse: types.array(nse),\r\n        target: types.array(target),\r\n        source: types.array(source),\r\n        timing: types.array(timing),\r\n        other: types.array(other),\r\n    })\r\n    .actions(self => ({\r\n    \r\n    }))\r\n\r\nconst modeArray = types\r\n    .model({\r\n        rows: types.array(modelData)\r\n    })\r\n\r\nconst store = modeArray.create({\r\n    rows: [\r\n        {\r\n            profile: [\r\n                {\r\n                    modeID: \"\",                \r\n                    name: \"\",\r\n                    des: \"\",\r\n                    freq: 0,\r\n                    tcp: \"\",\r\n                    nonTcp: \"\",\r\n                }\r\n            ],\r\n            ping: [\r\n                {\r\n                    flags: \"\",\r\n                }\r\n            ],\r\n            nse: [\r\n                {\r\n                    flags: \"\",\r\n                }\r\n            ],\r\n            target: [\r\n                {\r\n                    flags: \"\",\r\n                }\r\n            ],\r\n            source: [\r\n                {\r\n                    flags: \"\",\r\n                }\r\n            ],\r\n            timing: [\r\n                {\r\n                    flags: \"\",\r\n                }\r\n            ],\r\n            other: [\r\n                {\r\n                    flags: \"\",\r\n                }\r\n            ]\r\n        },\r\n\r\n\r\n{\r\n\"profile\": [\r\n{\r\n\"modeID\": \"WubpGxdoBRiLoYcvufkXH\",\r\n\"name\": \"test\",\r\n\"des\": \"test => description\",\r\n\"freq\": 4,\r\n\"tcp\": \"-sA\",\r\n\"nonTcp\": \"-sO\"\r\n}\r\n],\r\n\"ping\": [\r\n{\r\n\"flags\": \"\"\r\n}\r\n],\r\n\"nse\": [\r\n{\r\n\"flags\": \"\"\r\n}\r\n],\r\n\"target\": [\r\n{\r\n\"flags\": \"\"\r\n}\r\n],\r\n\"source\": [\r\n{\r\n\"flags\": \"\"\r\n}\r\n],\r\n\"timing\": [\r\n{\r\n\"flags\": \"\"\r\n}\r\n],\r\n\"other\": [\r\n{\r\n\"flags\": \"\"\r\n}\r\n]\r\n},\r\n\r\n\r\n{\r\n\"profile\": [\r\n{\r\n\"modeID\": \"txNCGIObylxCQAVuTrWES\",\r\n\"name\": \"nse\",\r\n\"des\": \"nse\",\r\n\"freq\": 4,\r\n\"tcp\": \"-sN\",\r\n\"nonTcp\": \"-sO\"\r\n}\r\n],\r\n\"ping\": [\r\n{\r\n\"flags\": \"\"\r\n}\r\n],\r\n\"nse\": [\r\n{\r\n\"flags\": \"\"\r\n}\r\n],\r\n\"target\": [\r\n{\r\n\"flags\": \"\"\r\n}\r\n],\r\n\"source\": [\r\n{\r\n\"flags\": \"\"\r\n}\r\n],\r\n\"timing\": [\r\n{\r\n\"flags\": \"\"\r\n}\r\n],\r\n\"other\": [\r\n{\r\n\"flags\": \"\"\r\n}\r\n]\r\n},\r\n]})\r\nexport default store;","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\NewScanMode.tsx",["620","621","622","623"],"import React, {useState} from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { makeStyles, Theme } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\n\r\n\r\nimport { TCPoptions } from './TCPoptions'\r\nimport { nonTCPoptions } from './nonTCPoptions'\r\n\r\n// Options \r\nimport Ping from './NewScanModeTab/Ping'\r\nimport NSE from './NewScanModeTab/NSE'\r\nimport Target from './NewScanModeTab/Target'\r\nimport Source from './NewScanModeTab/Source'\r\nimport Timing from './NewScanModeTab/Timing'\r\nimport Others from './NewScanModeTab/Others'\r\n\r\ninterface TabPanelProps {\r\n  children?: React.ReactNode;\r\n  index: any;\r\n  value: any;\r\n}\r\n\r\nconst TabPanel = (props: TabPanelProps) => {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`simple-tabpanel-${index}`}\r\n      aria-labelledby={`simple-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && (\r\n        <Box p={3}>\r\n          <Typography>{children}</Typography>\r\n        </Box>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst a11yProps = (index: any) => {\r\n  return {\r\n    id: `simple-tab-${index}`,\r\n    'aria-controls': `simple-tabpanel-${index}`,\r\n  };\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n  avatarText: {\r\n    background: \"#4A92FF\",\r\n    borderRadius: 6,\r\n    color: \"#fff\",\r\n    padding: \"2px 6px\",\r\n  },  \r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 120,\r\n  },\r\n  fullDes: {\r\n    color: \"red\",\r\n  },\r\n  des: {\r\n\r\n  },\r\n}));\r\n\r\nexport default () => {\r\n  const classes = useStyles();\r\n  const [open, setOpen] = useState(false);\r\n  const [modeName, setModeName] = useState(\"\");\r\n  const [modeDes, setModeDes] = useState(\"\");\r\n  const [value, setValue] = useState(0);\r\n  const [frequency, setFrequency] = useState<number>(4);\r\n  const [TCP, setTCP] = useState('');\r\n  const [nonTCP, setNonTCP] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const handleTCP = (event: React.ChangeEvent<{ value: unknown }>) => {\r\n    setTCP(event.target.value as string);\r\n  };\r\n\r\n  const handleNonTCP = (event: React.ChangeEvent<{ value: unknown }>) => {\r\n    setNonTCP(event.target.value as string);\r\n  };\r\n\r\n  const handleScanFrequency = (event: any, newValue: number | number[]) => {\r\n    setFrequency(newValue as number);\r\n  };\r\n\r\n  const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleModeName = (event: React.ChangeEvent<{ value: unknown }>) => {\r\n    setModeName(event.target.value as string)\r\n  }\r\n\r\n  const handleModeDes = (event: React.ChangeEvent<{ value: unknown }>) => {\r\n    setModeDes(event.target.value as string)\r\n  }\r\n\r\n  // Push to array\r\n  const handleCreate = () => {\r\n    //setTheArray(theArray => [ ...theArray, {name: modeName, link: \"!@3\", value: \"dsad\", des: modeDes} ]);\r\n    //console.log(theArray);\r\n    \r\n   \r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Button variant=\"contained\" onClick={handleClickOpen} style={{width: \"100%\", backgroundColor: \"#ffffff\", color: \"#333333\"}}>\r\n        Add New Scan Mode\r\n      </Button>\r\n        <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\" fullWidth maxWidth=\"sm\">\r\n          <DialogTitle id=\"form-dialog-title\">Add New Scan Mode</DialogTitle>\r\n          <DialogContent>\r\n              <Divider /><br/>\r\n              <AppBar position=\"static\">\r\n                <Tabs value={value} onChange={handleChange} aria-label=\"simple tabs example\" variant=\"scrollable\">\r\n                  <Tab label=\"Profile\" {...a11yProps(0)} />\r\n                  <Tab label=\"Ping\" {...a11yProps(1)} />\r\n                  <Tab label=\"NSE\" {...a11yProps(2)} />\r\n                  <Tab label=\"Target\" {...a11yProps(3)} />\r\n                  <Tab label=\"Source\" {...a11yProps(4)} />\r\n                  <Tab label=\"Timing\" {...a11yProps(5)} />\r\n                  <Tab label=\"Others\" {...a11yProps(6)} />\r\n                </Tabs>\r\n              </AppBar>\r\n              <TabPanel value={value} index={0}>\r\n                <Grid container spacing={3} justify=\"center\">\r\n                    <div style={{textAlign: \"center\", width: \"100%\"}}>\r\n                      <Grid item xs={12}>\r\n                          <TextField \r\n                            value={modeName} \r\n                            onChange={handleModeName} \r\n                            label=\"Mode Name\" \r\n                            margin=\"dense\" \r\n                            size=\"small\"\r\n                            variant=\"outlined\"\r\n                            style={{\r\n                              width: \"80%\",\r\n                            }}\r\n                          />\r\n                      </Grid>\r\n                      <Grid item xs={12}>\r\n                        <TextField \r\n                            value={modeDes}\r\n                            onChange={handleModeDes}\r\n                            label=\"Mode Description (Optional)\" \r\n                            margin=\"dense\" \r\n                            multiline\r\n                            rows={3}\r\n                            size=\"small\"\r\n                            variant=\"outlined\"\r\n                            inputProps={{ \r\n                              maxLength: 100\r\n                            }}\r\n                            style={{\r\n                              width: \"80%\",\r\n                              textAlignLast: \"left\",\r\n                            }}\r\n                        />\r\n                        <Typography style={{textAlign: \"right\", color: \"lightgrey\", fontSize: 10, marginRight: 55}}>\r\n                          <span className={modeDes.length == 100 ? classes.fullDes : classes.des}>{modeDes.length}</span> / 100\r\n                        </Typography>\r\n                      </Grid>\r\n                      <br/><Divider variant=\"middle\" /><br/>\r\n                      <Grid item xs={12}>\r\n                          <Typography style={{textAlign: \"left\"}}>Scan Frequency</Typography>\r\n                          <Slider \r\n                            value={frequency} \r\n                            onChange={handleScanFrequency}  \r\n                            min={0}\r\n                            max={5}\r\n                            step={1}\r\n                            valueLabelDisplay=\"auto\"\r\n                            aria-labelledby=\"continuous-slider\" \r\n                            style={{\r\n                              width: \"50%\",\r\n                            }}\r\n                          />\r\n\r\n                          <Tooltip \r\n                              title=\"[ -T ] --- Specifies the timing (Timing) used in the scanning process, there are always 6 levels (0-5), the level increases, the faster the scanning speed.\" \r\n                              placement=\"top\" \r\n                              arrow\r\n                          >\r\n                            <Typography style={{textAlign: \"center\"}}>-T <span className={classes.avatarText}>{frequency}</span></Typography>\r\n                          </Tooltip>\r\n                      </Grid>\r\n                      <br/><Divider variant=\"middle\" /><br/>\r\n                      <Grid item xs={12}>\r\n                        <Tooltip \r\n                          arrow \r\n                          placement=\"left\"\r\n                          title=\"TCP connect scan is the default TCP scan type when SYN scan is not an option.\"\r\n                        >\r\n                          <FormControl className={classes.formControl}>\r\n                            <InputLabel id=\"demo-simple-select-label\">TCP Scans</InputLabel>\r\n                            <Select\r\n                              labelId=\"demo-simple-select-label\"\r\n                              id=\"demo-simple-select\"\r\n                              value={TCP}\r\n                              onChange={handleTCP}\r\n                              style={{\r\n                                width: 250,\r\n                              }}\r\n                            >\r\n                              <MenuItem>None</MenuItem>\r\n                              {TCPoptions.map((option) => (\r\n                                <MenuItem value={option.value}>{option.flag}</MenuItem>\r\n                              ))}\r\n                            </Select>\r\n                          </FormControl>\r\n                        </Tooltip>\r\n                      </Grid>\r\n                      <br/><Divider variant=\"middle\" /><br/>\r\n                      <Grid item xs={12}>\r\n                          <Tooltip \r\n                            arrow \r\n                            placement=\"left\"\r\n                            title=\"Non-TCP connect scan is the default non-TCP scan type when SYN scan is not an option.\"\r\n                          >\r\n                            <FormControl className={classes.formControl}>\r\n                              <InputLabel id=\"demo-simple-select-label\">Non-TCP Scans</InputLabel>\r\n                              <Select\r\n                                labelId=\"demo-simple-select-label\"\r\n                                id=\"demo-simple-select\"\r\n                                value={nonTCP}\r\n                                onChange={handleNonTCP}\r\n                                style={{\r\n                                  width: 250,\r\n                                }}\r\n                              >\r\n                                <MenuItem>None</MenuItem>\r\n                                {nonTCPoptions.map((option) => (\r\n                                  <MenuItem value={option.value}>{option.flag}</MenuItem>\r\n                                ))}\r\n                              </Select>\r\n                            </FormControl>\r\n                          </Tooltip>\r\n                      </Grid>\r\n                    </div>\r\n                </Grid>\r\n              </TabPanel>\r\n\r\n              <TabPanel value={value} index={1}>\r\n                <Ping />\r\n              </TabPanel>\r\n              <TabPanel value={value} index={2}>\r\n                <NSE />\r\n              </TabPanel>\r\n              <TabPanel value={value} index={3}>\r\n                <Target />\r\n              </TabPanel>\r\n              <TabPanel value={value} index={4}>\r\n                <Source />\r\n              </TabPanel>\r\n              <TabPanel value={value} index={5}>\r\n                <Timing />\r\n              </TabPanel>\r\n              <TabPanel value={value} index={6}>\r\n                <Others />\r\n              </TabPanel>\r\n              \r\n          </DialogContent>\r\n              <Divider variant=\"middle\" style={{display: loading === true ? 'none' : 'block'}}/>\r\n              <LinearProgress style={{display: loading === true ? 'block' : 'none'}}/>\r\n          <DialogActions>\r\n            <Button onClick={handleClose} color=\"primary\">\r\n              Cancel\r\n            </Button>\r\n            <form method='post' action=\"http://localhost:5000/addMode\">\r\n              <div style={{display: 'none'}}>\r\n                <input type='text' name='name' value={modeName} />\r\n                <input type='text' name='des' value={modeDes} />\r\n                <input type='text' name='freq' value={frequency} />\r\n                <input type='text' name='tcp' value={TCP} />\r\n                <input type='text' name='nontcp' value={nonTCP} />\r\n              </div>\r\n              <input \r\n              color=\"primary\" \r\n              style={{\r\n                float: \"right\",\r\n                position: 'relative',\r\n                bottom: 2,\r\n                borderRadius: 4,\r\n                fontSize: 14,\r\n              }}\r\n              onClick={()=>setLoading(true)}\r\n              type=\"submit\"\r\n              value=\"Create\"\r\n              id=\"scanBtn\"\r\n            />\r\n            </form>\r\n            \r\n          </DialogActions>\r\n        </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\ScanResults\\CVEResult.tsx",["624","625","626","627","628","629","630","631","632","633","634"],"C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\ScanResults\\ExportResult.tsx",["635","636","637","638","639","640","641","642","643","644","645","646","647","648","649"],"import React, {useState} from 'react';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Tooltip from '@material-ui/core/Tooltip'\r\nimport { observer } from 'mobx-react-lite'\r\nimport HelpIcon from '@material-ui/icons/Help';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox, { CheckboxProps } from '@material-ui/core/Checkbox';\r\nimport { CSVLink } from \"react-csv\";\r\n\r\nimport { scanTarget, targetData, targetTime } from '../target'\r\n\r\n// Backend\r\nimport { isScanning } from '../../Backend/frontendData/isScanning'\r\nimport { pureOutput } from '../../Backend/frontendData/Result'\r\nimport scannedIn from '../../Backend/frontendData/scannedIn.json'\r\nimport scannedTarget from '../../Backend/frontendData/scannedTargetForSelect.json'\r\nimport { rows } from '../../Backend/frontendData/getPortStatus'\r\n\r\n// Mobx Global Status\r\nimport storeTarget from '../../Mobx/Models/resultSelectStatus'\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      '& > *': {\r\n        margin: theme.spacing(1),\r\n        width: '25ch',\r\n      },\r\n    },\r\n  }),\r\n);\r\n\r\n\r\nexport default () => {\r\n    const [state, setState] = React.useState({\r\n        cve: false,\r\n        whois: false,\r\n        traceroute: false,\r\n    });\r\n    \r\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setState({ ...state, [event.target.name]: event.target.checked });\r\n    };\r\n    \r\n    const resultTarget = scannedIn.map((data) => data.id === storeTarget.target ? data.target : null)\r\n    const resultDate = scannedIn.map((data) => data.id === storeTarget.target ? data.date : null)\r\n    const resultTime = scannedIn.map((data) => data.id === storeTarget.target ? data.time : null)\r\n    const mapResult = pureOutput.map((data) => data.id === storeTarget.target ? data.output : null)\r\n\r\n    const data = [\r\n        { colOne: 'Target', colTwo: 'Date', colThree: 'Time', colFour: 'Result' },\r\n        { colOne: resultTarget, colTwo: resultDate, colThree: resultTime, colFour: mapResult },\r\n        { colOne: 'CVE', colTwo: 'CVE Info' }\r\n    ]\r\n    \r\n    console.log(data)\r\n\r\n    return (\r\n      <>\r\n          {scannedIn.map((obj) => (\r\n              obj.id !=  storeTarget.target ||  storeTarget.target === \"\" || obj.target === \"\" ?\r\n                  null\r\n                      :\r\n                  <>\r\n                      <Grid container justify=\"center\" spacing={4}>\r\n                          <Grid item xs={12} style={{textAlign: \"center\"}}>\r\n                              <form \r\n                                  noValidate \r\n                                  autoComplete=\"off\"\r\n                              >\r\n                                  <TextField \r\n                                      id=\"outlined-basic\" \r\n                                      label=\"Current Target\" \r\n                                      variant=\"outlined\" \r\n                                      value={obj.targetForSelect.replace('sn\\=', '\\/')}\r\n                                      inputProps={{\r\n                                          readOnly: true,\r\n                                      }}\r\n                                      style={{\r\n                                          textAlignLast: \"center\",\r\n                                          width: \"100%\",\r\n                                      }}\r\n                                  />\r\n                                  \r\n                              </form>\r\n                          </Grid>\r\n                          <Grid item xs={6} style={{textAlign: \"center\"}}>\r\n                              <form \r\n                                  noValidate \r\n                                  autoComplete=\"off\"\r\n                              >\r\n                                  <TextField \r\n                                      id=\"outlined-basic\" \r\n                                      label=\"Target Scan Date [D/M/Y]\" \r\n                                      variant=\"outlined\" \r\n                                      value={obj.date}\r\n                                      inputProps={{\r\n                                          readOnly: true,\r\n                                      }}\r\n                                      style={{\r\n                                          textAlignLast: \"center\",\r\n                                          width: \"100%\",\r\n                                      }}\r\n                                  />\r\n                                  \r\n                              </form>\r\n                          </Grid>\r\n                          <Grid item xs={6} style={{textAlign: \"center\"}}>\r\n                            <Tooltip title=\"\" arrow placement=\"top\">\r\n                              <form \r\n                                  noValidate \r\n                                  autoComplete=\"off\"\r\n                              >\r\n                                  \r\n                                    <TextField \r\n                                        id=\"outlined-basic\" \r\n                                        label=\"Target Scan Time\" \r\n                                        variant=\"outlined\" \r\n                                        value={obj.time}\r\n                                        inputProps={{\r\n                                            readOnly: true,\r\n                                        }}\r\n                                        style={{\r\n                                            textAlignLast: \"center\",\r\n                                            width: \"100%\",\r\n                                        }}\r\n                                    />\r\n                              </form>\r\n                              </Tooltip>\r\n                          </Grid>\r\n\r\n                          <Grid item xs={6} style={{textAlign: \"center\"}}>\r\n                              <table style={{width: '100%'}}>\r\n                                  <tr>\r\n                                      <td style={{width: '33.3%'}}>\r\n                                            <FormControlLabel\r\n                                                control={<Checkbox checked={state.cve} color=\"primary\" onChange={handleChange} name=\"cve\" />}\r\n                                                label=\"CVE\"\r\n                                            /> \r\n                                      </td>\r\n                                      <td style={{width: '33.3%'}}>\r\n                                            <FormControlLabel\r\n                                                control={<Checkbox checked={state.whois} color=\"primary\" onChange={handleChange} name=\"whois\" />}\r\n                                                label=\"WhoIS\"\r\n                                            />\r\n                                      </td>\r\n                                      <td style={{width: '33.3%'}}>\r\n                                            <FormControlLabel\r\n                                                control={<Checkbox checked={state.traceroute} color=\"primary\" onChange={handleChange} name=\"traceroute\" />}\r\n                                                label=\"Traceroute\"\r\n                                            />\r\n                                      </td>\r\n                                  </tr>\r\n                              </table>\r\n                          </Grid>\r\n  \r\n                            <Grid item xs={12} style={{textAlign: \"center\", position: \"relative\", left: 12,}}>\r\n                                <ButtonGroup \r\n                                    size=\"large\" \r\n                                    color=\"primary\" \r\n                                >\r\n                                    <Button \r\n                                      style={{width: \"50%\"}}\r\n                                    >\r\n                                        <CSVLink data={data} filename='scanResult.csv' style={{color: '#4050B5'}}>\r\n                                            CSV\r\n                                        </CSVLink>\r\n                                    </Button>\r\n                                    \r\n                                    <Button style={{width: \"50%\"}}>\r\n                                        PDF\r\n                                    </Button>\r\n                                </ButtonGroup>\r\n                                <Tooltip title=\"By clicking the button, the scan result will be exported to a file in the format of CSV or Excel.\" arrow placement=\"top\">\r\n                                    <span style={{position:\"relative\", top: 5, left: 15, color: \"lightgrey\", cursor: \"pointer\"}}>\r\n                                        <HelpIcon style={{fontSize: 20}}/>\r\n                                    </span>\r\n                                </Tooltip>\r\n                            </Grid>\r\n                      </Grid>\r\n                      \r\n                  </>\r\n          ))}\r\n      </>\r\n    );\r\n}\r\n","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\ScanResults\\WhoIs.tsx",["650","651","652","653","654"],"import React, {useState} from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\n// Mobx\r\nimport storeTarget from '../../Mobx/Models/resultSelectStatus'\r\n\r\n// Backend\r\nimport { whoisScanOutput } from '../../Backend/frontendData/whoisScan'\r\nimport { targetGeo } from '../../Backend/frontendData/targetGeo'\r\nimport store from '../../Mobx/Models/homeSettingsStatus'\r\n\r\nconst useStyles = makeStyles({\r\n    table: {\r\n        minWidth: 'auto',\r\n    },\r\n});\r\n\r\nfunction createData(name: string, calories: number, fat: number, carbs: number, protein: number) {\r\n    return { name, calories, fat, carbs, protein };\r\n}\r\n  \r\nexport default () => {\r\n    const classes = useStyles();\r\n    \r\n\r\n    return (\r\n        <Grid container justify='center' spacing={3}>\r\n            <Grid item xs={6}>\r\n                <TableContainer>\r\n                    <Table className={classes.table} aria-label=\"simple table\">\r\n                        <TableBody>\r\n                            {whoisScanOutput.map((data) => (\r\n                                data.scanId === storeTarget.target ?\r\n                                <>\r\n                                    <TableRow hover>\r\n                                        <TableCell style={{width: 200, fontWeight: 'bold'}}>Domain Name</TableCell>\r\n                                        <TableCell align='right'>{data.name}</TableCell>\r\n                                    </TableRow>\r\n                                    <TableRow hover>\r\n                                        <TableCell style={{width: 200, fontWeight: 'bold'}}>Creation Date</TableCell>\r\n                                        <TableCell align='right'>{data.creationDate}</TableCell>\r\n                                    </TableRow>\r\n                                    <TableRow hover>\r\n                                        <TableCell style={{width: 200, fontWeight: 'bold'}}>Expiration Date</TableCell>\r\n                                        <TableCell align='right'>{data.expirationDate}</TableCell>\r\n                                    </TableRow>\r\n                                    <TableRow hover>\r\n                                        <TableCell style={{width: 200, fontWeight: 'bold'}}>Last Updated</TableCell>\r\n                                        <TableCell align='right'>{data.lastUpdated}</TableCell>\r\n                                    </TableRow>\r\n                                    <TableRow hover>\r\n                                        <TableCell style={{width: 200, fontWeight: 'bold'}}>Registrar</TableCell>\r\n                                        <TableCell align='right'>{data.registrar}</TableCell>\r\n                                    </TableRow>\r\n                                </> : null\r\n                            ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n                <TableContainer>\r\n                    <Table className={classes.table} aria-label=\"simple table\">\r\n                        <TableBody>\r\n                            {targetGeo.map((geo) => (\r\n                                geo.scanId === storeTarget.target ?\r\n                                <>\r\n                                    <TableRow hover>\r\n                                        <TableCell style={{width: 200, fontWeight: 'bold'}}>IP</TableCell>\r\n                                        <TableCell align='right'>{geo.target}</TableCell>\r\n                                    </TableRow>\r\n                                    <TableRow hover>\r\n                                        <TableCell style={{width: 200, fontWeight: 'bold'}}>Region</TableCell>\r\n                                        <TableCell align='right'>{geo.region}</TableCell>\r\n                                    </TableRow>\r\n                                    <TableRow hover>\r\n                                        <TableCell style={{width: 200, fontWeight: 'bold'}}>City</TableCell>\r\n                                        <TableCell align='right'>{geo.city}</TableCell>\r\n                                    </TableRow>\r\n                                    <TableRow hover>\r\n                                        <TableCell style={{width: 200, fontWeight: 'bold'}}>Longitude</TableCell>\r\n                                        <TableCell align='right'>{geo.longitude}</TableCell>\r\n                                    </TableRow>\r\n                                    <TableRow hover>\r\n                                        <TableCell style={{width: 200, fontWeight: 'bold'}}>Latitude</TableCell>\r\n                                        <TableCell align='right'>{geo.latitude}</TableCell>\r\n                                    </TableRow>\r\n                                </> : null\r\n                            ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <TableContainer>\r\n                    <Table className={classes.table} aria-label=\"simple table\">\r\n                        <TableBody>\r\n                            {whoisScanOutput.map((data) => (\r\n                                data.scanId === storeTarget.target ?\r\n                                <>\r\n                                    <TableRow hover>\r\n                                        <TableCell style={{width: 200, fontWeight: 'bold'}}>Netrange</TableCell>\r\n                                        <TableCell align='right'>{data.netrange}</TableCell>\r\n                                    </TableRow>\r\n                                    <TableRow hover>\r\n                                        <TableCell style={{width: 200, fontWeight: 'bold'}}>Netname</TableCell>\r\n                                        <TableCell align='right'>{data.netname}</TableCell>\r\n                                    </TableRow>\r\n                                    <TableRow hover>\r\n                                        <TableCell style={{width: 200, fontWeight: 'bold'}}>Organisation Name</TableCell>\r\n                                        <TableCell align='right'>{data.orgname}</TableCell>\r\n                                    </TableRow>\r\n                                    <TableRow hover>\r\n                                        <TableCell style={{width: 200, fontWeight: 'bold'}}>Organisation ID</TableCell>\r\n                                        <TableCell align='right'>{data.orgid}</TableCell>\r\n                                    </TableRow>\r\n                                    <TableRow hover>\r\n                                        <TableCell style={{width: 200, fontWeight: 'bold'}}>Country</TableCell>\r\n                                        <TableCell align='right'>{data.country.substring(9)}</TableCell>\r\n                                    </TableRow>\r\n                                    <TableRow hover>\r\n                                        <TableCell style={{width: 200, fontWeight: 'bold'}}>State and Province</TableCell>\r\n                                        <TableCell align='right'>{data.stateprov.substring(11)}</TableCell>\r\n                                    </TableRow>\r\n                                    <TableRow hover>\r\n                                        <TableCell style={{width: 200, fontWeight: 'bold'}}>Organisation Tech Name</TableCell>\r\n                                        <TableCell align='right'>{data.orgtechname}</TableCell>\r\n                                    </TableRow>\r\n                                    <TableRow hover>\r\n                                        <TableCell style={{width: 200, fontWeight: 'bold'}}>Organisation Tech E-mail</TableCell>\r\n                                        <TableCell align='right'>{data.orgtechemail}</TableCell>\r\n                                    </TableRow>\r\n                                </> : null\r\n                            ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n}","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\ScanResults\\ScanDetails.tsx",["655","656","657","658","659","660","661","662","663","664","665","666","667","668","669","670","671","672","673","674","675","676","677","678","679","680","681","682","683","684","685","686","687"],"import React, {useState} from 'react';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Timeline from '@material-ui/lab/Timeline';\r\nimport TimelineItem from '@material-ui/lab/TimelineItem';\r\nimport TimelineSeparator from '@material-ui/lab/TimelineSeparator';\r\nimport TimelineConnector from '@material-ui/lab/TimelineConnector';\r\nimport TimelineContent from '@material-ui/lab/TimelineContent';\r\nimport TimelineOppositeContent from '@material-ui/lab/TimelineOppositeContent';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport TimelineDot from '@material-ui/lab/TimelineDot';\r\nimport TracerouteIcon from '@material-ui/icons/SelectAll';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport { scanTarget, targetData, targetTime, chosenMode, scanDate } from '../target'\r\n\r\n// Backend\r\nimport { isScanning } from '../../Backend/frontendData/isScanning'\r\nimport { pureOutput } from '../../Backend/frontendData/Result'\r\nimport scannedIn from '../../Backend/frontendData/scannedIn.json'\r\nimport scannedTarget from '../../Backend/frontendData/scannedTargetForSelect.json'\r\nimport { rows } from '../../Backend/frontendData/getPortStatus'\r\nimport { traceroute } from '../../Backend/frontendData/tracerouteOutput'\r\n\r\n// Mobx Global Status\r\nimport storeTarget from '../../Mobx/Models/resultSelectStatus'\r\n\r\nconst mainStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n    paper: {\r\n      padding: theme.spacing(2),\r\n      textAlign: 'left',\r\n      backgroundColor: \"#fefefe\",\r\n      color: \"#333333\",\r\n    },\r\n    centerGrid: {\r\n        textAlign: \"center\",\r\n        marginTop: 15,\r\n    },\r\n    btnTabs: {\r\n        textTransform: \"capitalize\",\r\n    },\r\n    cardRoot: {\r\n        marginTop: 25,\r\n    },\r\n    title: {\r\n        fontSize: 14,\r\n        whiteSpace: \"pre-line\",\r\n    },\r\n    pos: {\r\n        marginBottom: 12,\r\n    },\r\n    defaultShow: {\r\n\r\n    },\r\n    defaultHide: {\r\n        display: \"none\",\r\n    },\r\n    centering: {\r\n      textAlignLast: \"center\",\r\n      width: \"70%\",\r\n      userSelect: \"none\",\r\n    },\r\n    datepicker: {\r\n      marginLeft: theme.spacing(1),\r\n      marginRight: theme.spacing(1),\r\n      width: 200,\r\n    },\r\n    secondaryTail: {\r\n      backgroundColor: theme.palette.secondary.main,\r\n    },\r\n  }),\r\n);\r\n\r\nexport default () => {\r\n  const classes = mainStyles();\r\n\r\n  const handleClick = () => {\r\n    console.log(targetData);\r\n  }\r\n\r\n  return (\r\n    <>\r\n        {scannedIn.map((data) => (\r\n          data.id !=  storeTarget.target ||  storeTarget.target === \"\" || data.target === \"\" ?\r\n              null\r\n                  :\r\n              <>\r\n              {/* <button onClick={handleClick}>click</button> */}\r\n              <form \r\n                  className={classes.root} \r\n                  noValidate \r\n                  autoComplete=\"off\"\r\n              >\r\n                  <br/>\r\n                  <Grid container justify=\"center\" spacing={2} style={{width: \"100%\", textAlign: \"center\"}}>\r\n                    <>\r\n                      <Grid item xs={12} style={{width: \"100%\", marginBottom: 15,}}>\r\n                        <div style={{textAlign: \"left\"}}><FormLabel component=\"legend\">Basic Details: </FormLabel></div>\r\n                      </Grid>\r\n\r\n                      <Grid item xs={12} style={{width: \"100%\", marginBottom: 55}}>\r\n                        <TextField\r\n                            className={classes.centering} \r\n                            id=\"outlined-basic\" \r\n                            label=\"Scan Target\" \r\n                            variant=\"outlined\" \r\n                            multiline\r\n                            style={{\r\n                              width: \"85%\",\r\n                            }}\r\n                            value={data.target.replace('sn\\=', '\\/')}\r\n                            inputProps={{\r\n                                readOnly: true,\r\n                            }}\r\n                        />\r\n                      </Grid>\r\n                    \r\n\r\n                      <Grid item xs={6} style={{width: \"100%\", marginBottom: 55}}>\r\n                        <TextField\r\n                            className={classes.centering} \r\n                            id=\"outlined-basic\" \r\n                            label=\"Scan Time\" \r\n                            variant=\"outlined\" \r\n                            value={data.time}\r\n                            inputProps={{\r\n                                readOnly: true,\r\n                            }}\r\n                        />\r\n                      </Grid>\r\n\r\n                      <Grid item xs={6} style={{width: \"100%\"}}>\r\n                        <TextField\r\n                            className={classes.centering} \r\n                            id=\"outlined-basic\" \r\n                            label=\"Chosen Scan Mode\" \r\n                            variant=\"outlined\" \r\n                            value={\r\n                              data.scanMode == \"\" ? \"Regular Scan\" : data.scanMode\r\n                            }\r\n                            inputProps={{\r\n                                readOnly: true,\r\n                            }}\r\n                          />\r\n                      </Grid>\r\n                      \r\n                      <Grid item xs={6} style={{width: \"100%\", marginBottom: 55}}>\r\n                        <Tooltip \r\n                          arrow \r\n                          placement=\"top\"\r\n                          title={\r\n                            (parseInt(data.runTime)/60).toFixed(3) + \" min; \" + (parseInt(data.runTime)/60/60).toFixed(3) + \" hr\"\r\n                          } \r\n                        >\r\n                          <TextField\r\n                              className={classes.centering} \r\n                              id=\"outlined-basic\" \r\n                              label=\"Target Scanned In\" \r\n                              variant=\"outlined\" \r\n                              value={data.runTime}\r\n                              inputProps={{\r\n                                  readOnly: true,\r\n                              }}\r\n                            />\r\n                          </Tooltip>\r\n                      </Grid>\r\n                  \r\n                  \r\n                      <Grid item xs={6} style={{width: \"100%\"}}>\r\n                        <TextField\r\n                          className={classes.centering} \r\n                          id=\"outlined-basic\" \r\n                          label='Scan Date [Y-M-D]' \r\n                          variant=\"outlined\" \r\n                          value={data.date}\r\n                          inputProps={{\r\n                              readOnly: true,\r\n                          }}\r\n                        />\r\n                      </Grid>\r\n                      \r\n                      <Grid item xs={6} style={{width: \"100%\", marginBottom: 55}}>\r\n                        <TextField\r\n                            className={classes.centering} \r\n                            id=\"outlined-basic\" \r\n                            label=\"Scan Latency\" \r\n                            variant=\"outlined\" \r\n                            multiline={\r\n                              data.latency.length > 17 ? true : false\r\n                            }\r\n                            value={\r\n                              data.latency == '' ? \"Target host is down\" \r\n                              //   :\r\n                              // data.latency.length > 17 ? data.target + \": \" + data.latency\r\n                                 :\r\n                              data.latency\r\n                            }\r\n                            inputProps={{\r\n                                readOnly: true,\r\n                            }}\r\n                          />\r\n                      </Grid>\r\n\r\n                      <Grid item xs={6} style={{width: \"100%\", marginBottom: 55}}>\r\n                        <TextField\r\n                            className={classes.centering} \r\n                            id=\"outlined-basic\" \r\n                            label=\"Up Host\" \r\n                            variant=\"outlined\" \r\n                            value={data.upHost == '' ? \"Target host is down\" : data.upHost}\r\n                            inputProps={{\r\n                                readOnly: true,\r\n                            }}\r\n                          />\r\n                      </Grid>\r\n                      \r\n                      <Grid item xs={6} style={{width: \"100%\", marginBottom: 55}}>\r\n                        <TextField\r\n                            className={classes.centering} \r\n                            id=\"outlined-basic\" \r\n                            label=\"Closed Port Qty.\" \r\n                            variant=\"outlined\" \r\n                            multiline={\r\n                              data.notShown.length > 15 ? true : false\r\n                            }\r\n                            value={data.notShown == '' ? \"Target host is down\" : data.notShown}\r\n                            inputProps={{\r\n                                readOnly: true,\r\n                            }}\r\n                          />\r\n                      </Grid>\r\n\r\n                      <Grid item xs={6} style={{width: \"100%\", marginBottom: 55}}>\r\n                        <TextField\r\n                            className={classes.centering} \r\n                            id=\"outlined-basic\" \r\n                            label=\"Nmap Version\" \r\n                            variant=\"outlined\" \r\n                            multiline\r\n                            value={data.nmapVer}\r\n                            inputProps={{\r\n                                readOnly: true,\r\n                            }}\r\n                          />\r\n                      </Grid>\r\n\r\n                    <Grid item xs={12} style={{width: \"100%\", marginBottom: 15, marginTop: 25,}}>\r\n                      <Divider /><br/>\r\n                      <div style={{textAlign: \"left\"}}><FormLabel component=\"legend\">Advanced Details: </FormLabel></div>\r\n                    </Grid>\r\n                      \r\n                      <Grid item xs={12} style={{width: \"100%\", marginBottom: 55}}>\r\n                        <TextField\r\n                            className={classes.centering} \r\n                            id=\"outlined-basic\" \r\n                            label=\"Target OS\" \r\n                            variant=\"outlined\" \r\n                            style={{\r\n                              width: \"85%\",\r\n                            }}\r\n                            multiline={\r\n                              data.os.length > 5 ? true : false\r\n                            }\r\n                            value={data.os == \"\" ? \"No OS matches for host. If target is alive, check out aggressive os guessing\" : data.os}\r\n                            inputProps={{\r\n                                readOnly: true,\r\n                            }}\r\n                          />\r\n                      </Grid>\r\n\r\n                      <Grid item xs={12} style={{width: \"100%\", marginBottom: 55}}>\r\n                        <TextField\r\n                            className={classes.centering} \r\n                            id=\"outlined-basic\" \r\n                            label=\"Aggressive OS Guessing\" \r\n                            variant=\"outlined\" \r\n                            style={{\r\n                              width: \"85%\",\r\n                            }}\r\n                            multiline={\r\n                              data.aggrOS.length > 5 ? true : false\r\n                            }\r\n                            value={\r\n                              data.aggrOS == \"\" ? \"No OS matches for host\" : data.aggrOS\r\n                            }\r\n                            inputProps={{\r\n                                readOnly: true,\r\n                            }}\r\n                          />\r\n                      </Grid>\r\n\r\n                      <Grid item xs={6} style={{width: \"100%\", marginBottom: 55}}>\r\n                        <TextField\r\n                            className={classes.centering} \r\n                            id=\"outlined-basic\" \r\n                            label=\"Network Distance\" \r\n                            variant=\"outlined\" \r\n                            multiline={\r\n                              data.hop.length > 5 ? true : false\r\n                            }\r\n                            value={\r\n                              data.hop == \"\" ? \r\n                                \"Enable -v to discover\" \r\n                                : \r\n                              data.hop\r\n\r\n                            }\r\n                            inputProps={{\r\n                                readOnly: true,\r\n                            }}\r\n                          />\r\n                      </Grid>\r\n                      \r\n                      <Grid item xs={6} style={{width: \"100%\", marginBottom: 55}}>\r\n                        <TextField\r\n                            className={classes.centering} \r\n                            id=\"outlined-basic\" \r\n                            label=\"TCP Sequence Prediction\" \r\n                            variant=\"outlined\" \r\n                            multiline={\r\n                              data.notShown.length > 15 ? true : false\r\n                            }\r\n                            value={data.difficulty == '' ? \"Target host is down\" : data.difficulty}\r\n                            inputProps={{\r\n                                readOnly: true,\r\n                            }}\r\n                          />\r\n                      </Grid>\r\n                      \r\n                      <Grid item xs={6} style={{width: \"100%\", marginBottom: 55}}>\r\n                        <TextField\r\n                            className={classes.centering} \r\n                            id=\"outlined-basic\" \r\n                            label=\"Device Type\" \r\n                            variant=\"outlined\" \r\n                            multiline={\r\n                              data.macAddr.length > 17 ? true : false\r\n                            }\r\n                            value={\r\n                              data.deviceType == \"\" ? \"Enable -v to discover\" : data.deviceType\r\n                            }\r\n                            inputProps={{\r\n                                readOnly: true,\r\n                            }}\r\n                          />\r\n                      </Grid>\r\n\r\n                      <Grid item xs={6} style={{width: \"100%\", marginBottom: 55}}>\r\n                        <TextField\r\n                            className={classes.centering} \r\n                            id=\"outlined-basic\" \r\n                            label=\"MAC Address\" \r\n                            variant=\"outlined\" \r\n                            multiline={\r\n                              data.macAddr.length > 28 ? true : false\r\n                            }\r\n                            value={\r\n                              data.macAddr == \"\" ? \"MAC Address not found\" : data.macAddr\r\n                            }\r\n                            inputProps={{\r\n                                readOnly: true,\r\n                            }}\r\n                          />\r\n                      </Grid>\r\n\r\n                      <Grid item xs={12} style={{width: \"100%\", marginBottom: 55}}>\r\n                        <TextField\r\n                            className={classes.centering} \r\n                            id=\"outlined-basic\" \r\n                            label=\"Up Time\" \r\n                            variant=\"outlined\" \r\n                            multiline\r\n                            style={{\r\n                              width: \"85%\",\r\n                            }}\r\n                            value={\r\n                              data.uptime == \"\" ? \"Enable -v to discover\" : data.uptime\r\n                            }\r\n                            inputProps={{\r\n                                readOnly: true,\r\n                            }}\r\n                          />\r\n                      </Grid>\r\n\r\n                      <Grid item xs={6} style={{width: \"100%\", marginBottom: 55}}>\r\n                        <TextField\r\n                            className={classes.centering} \r\n                            id=\"outlined-basic\" \r\n                            label=\"Raw Packets Sent\" \r\n                            variant=\"outlined\" \r\n                            value={\r\n                              data.rawPacket == \"\" ? \"Enable -v to discover\" : data.rawPacket\r\n                            }\r\n                            inputProps={{\r\n                                readOnly: true,\r\n                            }}\r\n                          />\r\n                      </Grid>\r\n\r\n                      <Grid item xs={6} style={{width: \"100%\", marginBottom: 55}}>\r\n                        <TextField\r\n                            className={classes.centering} \r\n                            id=\"outlined-basic\" \r\n                            label=\"Raw Packets Received\" \r\n                            variant=\"outlined\" \r\n                            value={\r\n                              data.rcvd == \"\" ? \"Enable -v to discover\" : data.rcvd\r\n                            }\r\n                            inputProps={{\r\n                                readOnly: true,\r\n                            }}\r\n                          />\r\n                      </Grid>\r\n\r\n\r\n                    <Grid item xs={12} style={{width: \"100%\", marginBottom: 15, marginTop: 25,}}>\r\n                      <Divider /><br/>\r\n                      <div style={{textAlign: \"left\"}}><FormLabel component=\"legend\">Scan Settings</FormLabel></div>\r\n                    </Grid>\r\n                        <Grid item xs={6} style={{width: \"100%\", marginBottom: 55}}>\r\n                          <TextField\r\n                              className={classes.centering} \r\n                              id=\"outlined-basic\" \r\n                              label=\"Automation\" \r\n                              variant=\"outlined\" \r\n                              value={\r\n                                data.auto === \"true\" ? \"Enabled\" : \"Disabled\"\r\n                              }\r\n                              inputProps={{\r\n                                  readOnly: true,\r\n                              }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={6} style={{width: \"100%\", marginBottom: 55}}>\r\n                          <TextField\r\n                              className={classes.centering} \r\n                              id=\"outlined-basic\" \r\n                              label=\"CVE Detection\" \r\n                              variant=\"outlined\" \r\n                              value={\r\n                                data.cveDetect === \"true\" ? \"Enabled\" : \"Disabled\"\r\n                              }\r\n                              inputProps={{\r\n                                  readOnly: true,\r\n                              }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={6} style={{width: \"100%\", marginBottom: 55}}>\r\n                          <TextField\r\n                              className={classes.centering} \r\n                              id=\"outlined-basic\" \r\n                              label=\"Scan Range\" \r\n                              variant=\"outlined\" \r\n                              value={\r\n                                data.setRange == \" \" ? \"Not Specify\" : data.setRange\r\n                              }\r\n                              inputProps={{\r\n                                  readOnly: true,\r\n                              }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={6} style={{width: \"100%\", marginBottom: 55}}>\r\n                          <TextField\r\n                              className={classes.centering} \r\n                              id=\"outlined-basic\" \r\n                              label=\"Set Flags\" \r\n                              variant=\"outlined\" \r\n                              multiline\r\n                              value={\r\n                                // data.flags == \" \" ? \"Null\" : data.flags\r\n                                '-sF'\r\n                              }\r\n                              inputProps={{\r\n                                  readOnly: true,\r\n                              }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={6} style={{width: \"100%\", marginBottom: 55}}>\r\n                          <TextField\r\n                              className={classes.centering} \r\n                              id=\"outlined-basic\" \r\n                              label=\"WhoIS\" \r\n                              variant=\"outlined\" \r\n                              multiline\r\n                              value={\r\n                                data.whois === \"true\" ? \"Enabled\" : \"Disabled\"\r\n                              }\r\n                              inputProps={{\r\n                                  readOnly: true,\r\n                              }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={6} style={{width: \"100%\", marginBottom: 55}}>\r\n                          <TextField\r\n                              className={classes.centering} \r\n                              id=\"outlined-basic\" \r\n                              label=\"Ping Probes Blocking Bypass\" \r\n                              variant=\"outlined\" \r\n                              multiline\r\n                              value={\r\n                                data.pbb === \"true\" ? \"Enabled\" : \"Disabled\"\r\n                              }\r\n                              inputProps={{\r\n                                  readOnly: true,\r\n                              }}\r\n                            />\r\n                        </Grid>\r\n\r\n                        <Grid item xs={12} style={{width: \"100%\", marginBottom: 15, marginTop: 25,}}>\r\n                          <Divider /><br/>\r\n                          <div style={{textAlign: \"left\"}}><FormLabel component=\"legend\">Traceroute</FormLabel></div>\r\n                        </Grid>\r\n\r\n                        <Grid item xs={12} style={{width: \"100%\", marginBottom: 55, textAlign: 'left'}}>\r\n                          \r\n                          <Timeline align=\"alternate\">\r\n                            {traceroute.map((tr, index) => {\r\n                              return(\r\n                                tr.scanId !=  storeTarget.target ||  storeTarget.target === \"\" || data.target === \"\" || tr.rtt === \"\" ? null :\r\n                                <>\r\n                                  <TimelineItem key={index}>\r\n                                    <TimelineSeparator>\r\n                                      <TimelineDot color=\"primary\" variant=\"outlined\" style={{marginLeft: 5, marginRight: 5}}>\r\n                                        <TracerouteIcon />\r\n                                      </TimelineDot>\r\n                                      <TimelineConnector className={classes.secondaryTail}/>\r\n                                    </TimelineSeparator>\r\n                                      <TimelineContent style={{background: '#F5F5F5', borderRadius: 6,}}>\r\n                                        <Chip \r\n                                            label={tr.addr}\r\n                                            variant=\"outlined\"\r\n                                            clickable\r\n                                            size='small'\r\n                                            color='primary'\r\n                                            style={{\r\n                                              marginTop: 5,\r\n                                              width: 'auto',\r\n                                            }}\r\n                                          />\r\n                                            <br/>\r\n                                          <Chip \r\n                                            label={tr.rtt}\r\n                                            variant=\"outlined\"\r\n                                            clickable\r\n                                            size='small'\r\n                                            color='primary'\r\n                                            style={{\r\n                                              width: 'auto',\r\n                                              marginTop: 10,\r\n                                              marginBottom: 5,\r\n                                            }}\r\n                                          />\r\n                                      </TimelineContent>\r\n                                   \r\n                                  </TimelineItem>\r\n                                </>\r\n                              )\r\n                            })}\r\n                          </Timeline>\r\n                        </Grid>\r\n\r\n                      </>\r\n                    \r\n                  </Grid>\r\n              </form>\r\n              </>\r\n        ))}\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\ScanResults\\Firewalk.tsx",["688","689","690","691","692","693"],"import React, {useState} from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\n// Mobx\r\nimport storeTarget from '../../Mobx/Models/resultSelectStatus'\r\n\r\n// Backend\r\nimport { rows } from '../../Backend/frontendData/firewalkOutput'\r\nimport { targetGeo } from '../../Backend/frontendData/targetGeo'\r\nimport store from '../../Mobx/Models/homeSettingsStatus'\r\n\r\nconst useStyles = makeStyles({\r\n    table: {\r\n        minWidth: 'auto',\r\n    },\r\n});\r\n\r\nfunction createData(name: string, calories: number, fat: number, carbs: number, protein: number) {\r\n    return { name, calories, fat, carbs, protein };\r\n}\r\n  \r\nexport default () => {\r\n    const classes = useStyles();\r\n    \r\n\r\n    return (\r\n        <Grid container justify='center' spacing={3}>\r\n            <Grid item xs={12}>\r\n                <TableContainer>\r\n                    <Table className={classes.table} aria-label=\"simple table\">\r\n                        <TableBody>\r\n                            {rows.map((data) => (\r\n                                data.scanId === storeTarget.target ?\r\n                                <>\r\n                                    <TableRow hover>\r\n                                        <TableCell style={{width: 300, fontWeight: 'bold'}}>Hop</TableCell>\r\n                                        <TableCell>{data.hop.substring(1)}</TableCell>\r\n                                    </TableRow>\r\n                                    <TableRow hover>\r\n                                        <TableCell style={{width: 300, fontWeight: 'bold'}}>Host</TableCell>\r\n                                        <TableCell>{data.host}</TableCell>\r\n                                    </TableRow>\r\n                                    <TableRow hover>\r\n                                        <TableCell style={{width: 300, fontWeight: 'bold'}}>Protocol</TableCell>\r\n                                        <TableCell>{data.protocol}</TableCell>\r\n                                    </TableRow>\r\n                                    <TableRow hover>\r\n                                        <TableCell style={{width: 300, fontWeight: 'bold'}}>Blocked Ports</TableCell>\r\n                                        <TableCell>{data.blockedPorts}</TableCell>\r\n                                    </TableRow>\r\n                                </> : null\r\n                            ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n}","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\ScanResults\\ExploitCVE.tsx",["694","695","696","697","698","699","700","701","702","703","704"],"import React, {useState} from 'react';\r\nimport { makeStyles, createStyles, Theme, lighten } from '@material-ui/core/styles';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Button from '@material-ui/core/Button';\r\nimport LinkIcon from '@material-ui/icons/Link';\r\nimport InfoIcon from '@material-ui/icons/Info';\r\nimport CVEicon from '@material-ui/icons/Extension';\r\n\r\n// import { targetData, chosenMode, scanTarget } from './target'\r\n\r\n// Backend\r\nimport { rows } from '../../Backend/frontendData/exploitCVEoutput'\r\n\r\n// Mobx Global Status\r\n// import { observer } from 'mobx-react-lite'\r\nimport storeTarget from '../../Mobx/Models/resultSelectStatus'\r\n\r\nconst mainStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n    paper: {\r\n      padding: theme.spacing(2),\r\n      textAlign: 'left',\r\n      backgroundColor: \"#fefefe\",\r\n      color: \"#333333\",\r\n    },\r\n    centerGrid: {\r\n        textAlign: \"center\",\r\n        marginTop: 15,\r\n    },\r\n    btnTabs: {\r\n        textTransform: \"capitalize\",\r\n    },\r\n    cardRoot: {\r\n        marginTop: 25,\r\n    },\r\n    title: {\r\n        fontSize: 14,\r\n        whiteSpace: \"pre-line\",\r\n    },\r\n    pos: {\r\n        marginBottom: 12,\r\n    },\r\n    defaultShow: {\r\n\r\n    },\r\n    defaultHide: {\r\n        display: \"none\",\r\n    },\r\n    centering: {\r\n      textAlignLast: \"center\",\r\n      width: \"70%\",\r\n      userSelect: \"none\",\r\n    },\r\n    datepicker: {\r\n      marginLeft: theme.spacing(1),\r\n      marginRight: theme.spacing(1),\r\n      width: 200,\r\n    },\r\n  }),\r\n);\r\n\r\nexport default () => {\r\nconst classes = mainStyles();\r\nvar [dataQty, setDataQty] = useState(50)\r\n  \r\n    return (\r\n      <TableContainer>\r\n        <Table aria-label=\"simple table\">\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell />\r\n              <TableCell align=\"left\" style={{whiteSpace: 'nowrap'}}>Exploit ID</TableCell>\r\n              <TableCell align=\"left\">Name</TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {rows.map((row, index) => (\r\n              <>\r\n                {\r\n                  row.scanId === storeTarget.target ?\r\n                      <>\r\n                        <TableRow key={index} hover>\r\n                          <TableCell>\r\n                              <Tooltip title='Click for more information' placement='top'>\r\n                                  <a href={`https://vuldb.com/?id.${row.eid.substring(1, row.eid.length-1)}`} target='_blank'>\r\n                                      <IconButton>\r\n                                          <LinkIcon style={{color: '#416CEC'}} />\r\n                                      </IconButton>\r\n                                  </a>\r\n                              </Tooltip>\r\n                          </TableCell>\r\n                          <TableCell align=\"left\" style={{whiteSpace: 'nowrap', fontWeight: 'bold'}}>\r\n                              {row.eid.substring(1, row.eid.length-1)}\r\n                          </TableCell>\r\n                          <TableCell align=\"left\">{row.name}</TableCell>\r\n                        </TableRow>\r\n                      </>\r\n                      : \r\n                   null\r\n                }\r\n              </>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    );\r\n}","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\ScanResults\\HostsAndPorts.tsx",["705","706","707","708","709","710","711","712","713"],"import React, {useState} from 'react';\r\nimport { makeStyles, createStyles, Theme, lighten } from '@material-ui/core/styles';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport PortOpened from '@material-ui/icons/Visibility';\r\nimport PortFiltered from '@material-ui/icons/VisibilityOff';\r\n\r\n// import { targetData, chosenMode, scanTarget } from './target'\r\n\r\n// Backend\r\nimport { rows } from '../../Backend/frontendData/getPortStatus'\r\n\r\n// Components\r\nimport NmapOutput from './NmapOutput'\r\n\r\n// Mobx Global Status\r\nimport { observer } from 'mobx-react-lite'\r\nimport storeTarget from '../../Mobx/Models/resultSelectStatus'\r\n\r\nconst mainStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n    paper: {\r\n      padding: theme.spacing(2),\r\n      textAlign: 'left',\r\n      backgroundColor: \"#fefefe\",\r\n      color: \"#333333\",\r\n    },\r\n    centerGrid: {\r\n        textAlign: \"center\",\r\n        marginTop: 15,\r\n    },\r\n    btnTabs: {\r\n        textTransform: \"capitalize\",\r\n    },\r\n    cardRoot: {\r\n        marginTop: 25,\r\n    },\r\n    title: {\r\n        fontSize: 14,\r\n        whiteSpace: \"pre-line\",\r\n    },\r\n    pos: {\r\n        marginBottom: 12,\r\n    },\r\n    defaultShow: {\r\n\r\n    },\r\n    defaultHide: {\r\n        display: \"none\",\r\n    },\r\n    centering: {\r\n      textAlignLast: \"center\",\r\n      width: \"70%\",\r\n      userSelect: \"none\",\r\n    },\r\n    datepicker: {\r\n      marginLeft: theme.spacing(1),\r\n      marginRight: theme.spacing(1),\r\n      width: 200,\r\n    },\r\n  }),\r\n);\r\n\r\nexport default () => {\r\nconst classes = mainStyles();\r\n  \r\n    return (\r\n      <TableContainer>\r\n        <Table aria-label=\"simple table\">\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell align=\"center\">PORT</TableCell>\r\n              <TableCell align=\"center\">STATUS</TableCell>\r\n              <TableCell align=\"center\">SERVICE</TableCell>\r\n              <TableCell align=\"center\">VERSION/REASON</TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {rows.map((row) => (\r\n              <>\r\n                {\r\n                  row.scanId == storeTarget.target ?\r\n                    <>\r\n                      <TableRow key={row.scanId + \"_\" + row.portno}>\r\n                        <TableCell align=\"center\">\r\n                          {row.portno}/{row.port}\r\n                        </TableCell>\r\n                        <TableCell align=\"center\">\r\n                          <Chip\r\n                            label={row.status}\r\n                            style={{\r\n                              textTransform: \"uppercase\",\r\n                              // fontWeight: \"bold\",\r\n                              color: row.status == 'open' ? '#198BF7' : '#BA3B28',\r\n                              minWidth: 120,\r\n                            }}\r\n                            icon={\r\n                              row.status == 'open' ? <PortOpened style={{color: '#198BF7'}}/> : <PortFiltered style={{color: '#BA3B28'}}/>\r\n                            }\r\n                            clickable\r\n                            variant=\"outlined\"\r\n                          />\r\n                        </TableCell>\r\n                        <TableCell align=\"center\">{row.service}</TableCell>\r\n                        <TableCell align=\"center\">\r\n                          {/\\d+\\/(tcp|udp)$/.test(row.version) === true ? 'N/A' : row.version}\r\n                        </TableCell>\r\n                      </TableRow>\r\n                    </>\r\n                      : null\r\n                }\r\n              </>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    );\r\n}","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\ScanResults\\NmapOutput.tsx",["714","715","716","717","718","719","720","721","722","723"],"import React, {useState, useEffect} from 'react';\r\nimport Typography from '@material-ui/core/Typography'\r\n\r\nimport { scanTarget, targetData, targetTime } from '../target'\r\n\r\n// Backend\r\nimport { isScanning } from '../../Backend/frontendData/isScanning'\r\nimport { pureOutput } from '../../Backend/frontendData/Result'\r\nimport scannedIn from '../../Backend/frontendData/scannedIn.json'\r\nimport { rows } from '../../Backend/frontendData/getPortStatus'\r\n\r\n// Mobx Global Status\r\nimport selectResult from '../../Mobx/Models/resultSelectStatus'\r\n\r\nexport default () => {\r\n\r\n    return(\r\n      <>\r\n          {pureOutput.map((obj) => (\r\n            <>\r\n              {\r\n                obj.id == selectResult.target ?\r\n                  <>\r\n                     <Typography style={{whiteSpace: \"pre-line\"}}>\r\n                        {obj.output}\r\n                      </Typography>\r\n                  </>\r\n                    :\r\n                  null\r\n              }\r\n            </>\r\n          ))}\r\n        \r\n      </>\r\n    );\r\n}","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\defaultScanModes\\defaultModeDialog.tsx",["724","725","726","727","728","729"],"import React, {useState} from 'react';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport List from '@material-ui/core/List';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport { TransitionProps } from '@material-ui/core/transitions';\r\n\r\n// Mobx\r\nimport { observer } from 'mobx-react-lite'\r\nimport mode from '../../Mobx/Models/defaultScanModeStatus'\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n    paper: {\r\n      padding: theme.spacing(2),\r\n      textAlign: 'left',\r\n      backgroundColor: \"#fefefe\",\r\n      color: \"#333333\",\r\n    },\r\n    centerGrid: {\r\n        textAlign: \"center\",\r\n        marginTop: 15,\r\n    },\r\n    listGrid: {\r\n        width: '100%',\r\n        maxWidth: 360,\r\n        backgroundColor: theme.palette.background.paper,\r\n    },\r\n    appBar: {\r\n        position: 'relative',\r\n        background: \"#333\",\r\n      },\r\n      title: {\r\n        marginLeft: theme.spacing(2),\r\n        flex: 1,\r\n      \r\n    },\r\n    avatarText: {\r\n        background: \"#4A92FF\",\r\n        borderRadius: 6,\r\n        color: \"#fff\",\r\n        padding: \"2px 6px\",\r\n    }, \r\n    sectionStyle: {\r\n        marginTop: 35, \r\n        border: \"1px solid #C4C4C4\", \r\n        padding: \"10px 10px\", \r\n        borderRadius: 5,\r\n    },\r\n    sectionTitleBg: {\r\n        position: \"relative\",\r\n        bottom: 22,\r\n        background: \"#fff\",\r\n        padding: \"0 5px\",\r\n        width: \"auto\",\r\n    },\r\n    sectionTitle: {\r\n        color: \"#757575\",\r\n        fontSize: 13,\r\n    },\r\n  }),\r\n);\r\n\r\nconst Transition = React.forwardRef(function Transition(\r\n  props: TransitionProps & { children?: React.ReactElement },\r\n  ref: React.Ref<unknown>,\r\n) {\r\n  return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\n\r\nexport default observer (({index}:{index: number}) => {\r\n  const classes = useStyles();\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const [value, setValue] = useState<number>(mode.data[index].freq);\r\n\r\n  const handleFreqChange = (event: any, newValue: number | number[]) => {\r\n    setValue(newValue as number);\r\n  };\r\n\r\n  const [radio, setRadio] = useState(\"-v\");\r\n  const handleRadioChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setRadio((event.target as HTMLInputElement).value);\r\n  };\r\n\r\n\r\n  return (\r\n    <div>\r\n      <Button variant=\"outlined\" color=\"primary\" onClick={handleClickOpen}>\r\n        Settings\r\n      </Button>\r\n      <Dialog fullScreen open={open} onClose={handleClose} TransitionComponent={Transition}>\r\n        <AppBar className={classes.appBar} style={{backgroundColor: \"#333\"}}>\r\n          <Toolbar>\r\n            <IconButton edge=\"start\" color=\"inherit\" onClick={handleClose} aria-label=\"close\">\r\n              <CloseIcon />\r\n            </IconButton>\r\n            <Typography variant=\"h6\" className={classes.title}>\r\n              {mode.data[index].name}\r\n            </Typography>\r\n            <Button autoFocus color=\"inherit\" onClick={handleClose}>\r\n              save\r\n            </Button>\r\n          </Toolbar>\r\n        </AppBar>\r\n          <table style={{marginTop: 25, padding: \"45px 45px\"}}>\r\n            <tr>\r\n                <td>\r\n                    <TextField \r\n                        id=\"outlined-basic\" \r\n                        label=\"Current Command\" \r\n                        defaultValue={`${mode.data[index].command} [ Target or Domain ]`}\r\n                        variant=\"outlined\" \r\n                        size=\"small\"\r\n                        style={{\r\n                            width: \"100%\",\r\n                            textAlignLast: \"center\",\r\n                        }}\r\n                        inputProps={{ \r\n                            readOnly: true, \r\n                        }}\r\n                    />\r\n                </td>\r\n            </tr>\r\n                <tr>\r\n                    <td>\r\n                        <div className={classes.sectionStyle}>\r\n                            <span className={classes.sectionTitleBg}>\r\n                                <span className={classes.sectionTitle}>Scan Frequency</span>\r\n                            </span>\r\n                            <div>\r\n                                <Slider \r\n                                    value={value} \r\n                                    onChange={handleFreqChange} \r\n                                    max={5}\r\n                                    min={0}\r\n                                    step={1}\r\n                                    valueLabelDisplay=\"auto\"\r\n                                    style={{\r\n                                        width: \"70%\",\r\n                                        marginLeft: 145,\r\n                                    }}    \r\n                                />\r\n                            </div>\r\n                                <br/>\r\n                            <Typography style={{textAlign: \"right\",marginRight: 35}}>\r\n                                -T&nbsp;\r\n                                <Tooltip \r\n                                    title=\"[ -T ] --- Specifies the timing (Timing) used in the scanning process, there are always 6 levels (0-5), the level increases, the faster the scanning speed.\" \r\n                                    placement=\"top\" \r\n                                    arrow\r\n                                >\r\n                                    <span className={classes.avatarText}>{value}</span>\r\n                                </Tooltip>\r\n                            </Typography>\r\n                        </div>\r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                <td>\r\n                    <div className={classes.sectionStyle}>\r\n                        <span className={classes.sectionTitleBg}>\r\n                            <span className={classes.sectionTitle}>Flag</span>\r\n                        </span>\r\n                        <div style={{textAlign: \"center\"}}>\r\n                            <FormControl component=\"fieldset\">\r\n                                <table className=\"scanModeSettingFlagTable\">\r\n                                    <tr>\r\n                                        <td>\r\n                                            {\r\n                                              mode.data[index].value == \"topOneHundredScanMode\" ? \r\n                                                null \r\n                                                  :\r\n                                                <>\r\n                                                  <RadioGroup row aria-label=\"position\" name=\"position\" defaultValue=\"top\" value={radio} onChange={handleRadioChange}>\r\n                                                      <Tooltip title=\"Increase the verbosity level\" placement=\"top\" arrow>\r\n                                                          <FormControlLabel\r\n                                                              value=\"-v\"\r\n                                                              control={<Radio color=\"primary\"/>}\r\n                                                              label=\"-v\"\r\n                                                              labelPlacement=\"end\"\r\n                                                          />\r\n                                                      </Tooltip>\r\n                                                      <Tooltip title=\"Use more v for greater effect\" placement=\"top\" arrow>\r\n                                                          <FormControlLabel\r\n                                                              value=\"-vv\"\r\n                                                              control={<Radio color=\"primary\" />}\r\n                                                              label=\"-vv\"\r\n                                                              labelPlacement=\"end\"\r\n                                                          />\r\n                                                      </Tooltip>\r\n                                                  </RadioGroup>\r\n                                                </>\r\n                                            }\r\n                                        </td>\r\n                                        <td>\r\n                                            <Tooltip arrow placement=\"top\" title={mode.data[index].flagsDes}>\r\n                                              <FormControlLabel\r\n                                                  value={mode.data[index].flags}\r\n                                                  control={\r\n                                                    <Checkbox \r\n                                                      color=\"primary\" \r\n                                                      defaultChecked={mode.data[index].stMust === true ? true : false}\r\n                                                      disabled={mode.data[index].stMust === true ? true : false}\r\n                                                    />\r\n                                                  }\r\n                                                  label={mode.data[index].flags}\r\n                                                  labelPlacement=\"end\"\r\n                                                  \r\n                                              />\r\n                                            </Tooltip>\r\n                                            {\r\n                                              mode.data[index].secFlags == \"\" ? null :\r\n                                              <>\r\n                                                <Tooltip arrow placement=\"top\" title={mode.data[index].secFlagsDes}>\r\n                                                  <FormControlLabel\r\n                                                      value={mode.data[index].secFlags}\r\n                                                      control={\r\n                                                        <Checkbox \r\n                                                          color=\"primary\" \r\n                                                          defaultChecked={mode.data[index].secMust === true ? true : false}\r\n                                                          disabled={mode.data[index].secMust === true ? true : false}\r\n                                                        />\r\n                                                      }\r\n                                                      label={mode.data[index].secFlags}\r\n                                                      labelPlacement=\"end\"\r\n                                                  />\r\n                                                </Tooltip>\r\n                                              </>\r\n                                            }\r\n                                        </td>\r\n                                    </tr>\r\n                                </table>\r\n                            </FormControl>\r\n                        </div>\r\n                    </div>\r\n                </td>\r\n            </tr>\r\n        </table>\r\n    \r\n        </Dialog>\r\n    </div>\r\n  );\r\n})\r\n  ","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Mobx\\Models\\homeSettingsStatus.tsx",["730","731","732"],"C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Backend\\frontendData\\advancedScan.tsx",[],"C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Backend\\frontendData\\Result.tsx",["733","734"],"C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\NewScanModeTab\\Others.tsx",["735","736","737","738"],"import React from 'react';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\n\r\nimport { Others } from './NewModeOptions'\r\n\r\nexport default function FormControlLabelPosition() {\r\n  return (\r\n    <>\r\n      <Grid container spacing={3}>\r\n        {Others.map((option) => (\r\n          <Grid item xs={12}>\r\n            <Tooltip title={option.tooltip} arrow placement=\"right\">\r\n              <FormControl component=\"fieldset\" style={{width: 450}}>\r\n                <FormControlLabel\r\n                  value={option.value}\r\n                  control={<Checkbox color=\"primary\" />}\r\n                  label={option.des}\r\n                  labelPlacement=\"end\"\r\n                />\r\n                {\r\n                  option.input === true ?\r\n                    <>\r\n                      <TextField \r\n                          label={`Example Input: ${option.egInput}`} \r\n                          margin=\"dense\" \r\n                          size=\"small\"\r\n                          variant=\"outlined\"\r\n                          style={{\r\n                            width: \"100%\",\r\n                            textAlignLast: \"center\",\r\n                          }}\r\n                      />\r\n                    </>\r\n                      :\r\n                    null\r\n                }\r\n              </FormControl>\r\n            </Tooltip>\r\n          </Grid>\r\n        ))}\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Backend\\frontendData\\exploitCVEoutput.tsx",[],"C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Backend\\frontendData\\firewalkOutput.tsx",[],"C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Backend\\frontendData\\tracerouteOutput.tsx",[],"C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Backend\\frontendData\\cveScanOutput.tsx",[],"C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\target.tsx",["739","740"],"import { automation, cveDetection } from './HomeSettings/homeSettingsData'\r\n\r\nexport const targetTime: string[] = [];\r\nexport const scanTarget: string[] = [];\r\nexport const targetData = [\r\n    {\r\n        target: \"\",\r\n        value: \"\",\r\n        time: \"\",\r\n        scanMode: \"\",\r\n        scanDate: \"\",\r\n        id: \"\",\r\n        setRange: \"\",\r\n        auto: false,\r\n        cve: false,\r\n    }\r\n];\r\n\r\nexport const chosenMode: string[] = [];\r\nexport const scanDate: any[] = [];\r\n\r\n","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Backend\\frontendData\\targetGeo.tsx",[],"C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Backend\\frontendData\\whoisScan.tsx",[],"C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\NewScanModeTab\\NewModeOptions.tsx",[],"C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\NewScanModeTab\\Timing.tsx",["741","742"],"import React from 'react';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nimport { Timing } from './NewModeOptions'\r\n\r\nexport default function FormControlLabelPosition() {\r\n  return (\r\n    <>\r\n      <Grid container spacing={3}>\r\n        {Timing.map((option) => (\r\n          <Grid item xs={12}>\r\n            <Tooltip title={option.tooltip} arrow placement=\"right\">\r\n              <FormControl component=\"fieldset\" style={{width: 450}}>\r\n                <FormControlLabel\r\n                  value={option.value}\r\n                  control={<Checkbox color=\"primary\" />}\r\n                  label={option.des}\r\n                  labelPlacement=\"end\"\r\n                />\r\n                {\r\n                  option.input === true ?\r\n                    <>\r\n                      <TextField \r\n                          label={`Example Input: ${option.egInput}`} \r\n                          margin=\"dense\" \r\n                          size=\"small\"\r\n                          variant=\"outlined\"\r\n                          style={{\r\n                            width: \"100%\",\r\n                            textAlignLast: \"center\",\r\n                          }}\r\n                      />\r\n                    </>\r\n                      :\r\n                    null\r\n                }\r\n              </FormControl>\r\n            </Tooltip>\r\n          </Grid>\r\n        ))}\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\NewScanModeTab\\Source.tsx",["743","744"],"import React from 'react';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nimport { Source } from './NewModeOptions'\r\n\r\nexport default function FormControlLabelPosition() {\r\n  return (\r\n    <>\r\n      <Grid container spacing={3}>\r\n        {Source.map((option) => (\r\n          <Grid item xs={12}>\r\n            <Tooltip title={option.tooltip} arrow placement=\"right\">\r\n              <FormControl component=\"fieldset\" style={{width: 450}}>\r\n                <FormControlLabel\r\n                  value={option.value}\r\n                  control={<Checkbox color=\"primary\" />}\r\n                  label={option.des}\r\n                  labelPlacement=\"end\"\r\n                />\r\n                {\r\n                  option.input === true ?\r\n                    <>\r\n                      <TextField \r\n                          label={`Example Input: ${option.egInput}`} \r\n                          margin=\"dense\" \r\n                          size=\"small\"\r\n                          variant=\"outlined\"\r\n                          style={{\r\n                            width: \"100%\",\r\n                            textAlignLast: \"center\",\r\n                          }}\r\n                      />\r\n                    </>\r\n                      :\r\n                    null\r\n                }\r\n              </FormControl>\r\n            </Tooltip>\r\n          </Grid>\r\n        ))}\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\NewScanModeTab\\Target.tsx",["745","746","747"],"import React from 'react';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nimport { Target } from './NewModeOptions'\r\n\r\nexport default function FormControlLabelPosition() {\r\n  return (\r\n    <>\r\n      <Grid container spacing={3}>\r\n        {Target.map((option) => (\r\n          <Grid item xs={12}>\r\n            <Tooltip title={option.tooltip} arrow placement=\"right\">\r\n              <FormControl component=\"fieldset\" style={{width: 450}}>\r\n                <FormControlLabel\r\n                  value={option.value}\r\n                  control={<Checkbox color=\"primary\" />}\r\n                  label={option.des}\r\n                  labelPlacement=\"end\"\r\n                />\r\n                {\r\n                  option.input === true ?\r\n                    <>\r\n                      <TextField \r\n                          label={`Example Input: ${option.egInput}`} \r\n                          margin=\"dense\" \r\n                          size=\"small\"\r\n                          variant=\"outlined\"\r\n                          style={{\r\n                            width: \"100%\",\r\n                            textAlignLast: \"center\",\r\n                          }}\r\n                      />\r\n                    </>\r\n                      :\r\n                    null\r\n                }\r\n              </FormControl>\r\n            </Tooltip>\r\n          </Grid>\r\n        ))}\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\NewScanModeTab\\NSE.tsx",["748","749","750","751","752","753","754","755","756","757","758","759","760","761","762","763","764","765","766","767","768","769","770","771","772","773","774","775","776","777","778","779","780","781","782"],"import React from 'react';\r\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\r\nimport ListSubheader from '@material-ui/core/ListSubheader';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\r\nimport DraftsIcon from '@material-ui/icons/Drafts';\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport DynamicFeedIcon from '@material-ui/icons/DynamicFeed';\r\nimport ExpandLess from '@material-ui/icons/ExpandLess';\r\nimport ExpandMore from '@material-ui/icons/ExpandMore';\r\nimport StarBorder from '@material-ui/icons/StarBorder';\r\nimport ExtensionIcon from '@material-ui/icons/ExtensionOutlined';\r\nimport AccountTreeOutlinedIcon from '@material-ui/icons/AccountTreeOutlined';\r\n\r\nimport DiscoveryBroadcast from './nseData/Discovery/Broadcast'\r\nimport DiscoveryDatabase from './nseData/Discovery/Database'\r\nimport DiscoveryHTTP from './nseData/Discovery/HTTP'\r\nimport DiscoveryIP from './nseData/Discovery/IP'\r\nimport DiscoveryHadoop from './nseData/Discovery/Hadoop'\r\nimport DiscoveryNetwork from './nseData/Discovery/Network'\r\nimport DiscoveryServerMessageBlock from './nseData/Discovery/ServerMessageBlock'\r\nimport DiscoveryServer from './nseData/Discovery/Server'\r\nimport DiscoverySMTP from './nseData/Discovery/SMTP'\r\nimport DiscoveryTargets from './nseData/Discovery/Targets'\r\n\r\nimport ExploitFTP from './nseData/Exploit/FTP'\r\nimport ExploitHTTP from './nseData/Exploit/HTTP'\r\nimport ExploitOthers from './nseData/Exploit/Others'\r\nimport ExploitSMB from './nseData/Exploit/SMB'\r\n\r\nimport VulnFTP from './nseData/Vulnerability/FTP'\r\nimport VulnHTTP from './nseData/Vulnerability/HTTP'\r\nimport VulnOthers from './nseData/Vulnerability/Others'\r\nimport VulnSMB from './nseData/Vulnerability/SMB'\r\nimport VulnSSL from './nseData/Vulnerability/SSL'\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      width: '100%',\r\n      backgroundColor: theme.palette.background.paper,\r\n    },\r\n    nested: {\r\n      paddingLeft: theme.spacing(4),\r\n    },\r\n  }),\r\n);\r\n\r\nconst menuItem = [\r\n    {\r\n        cateName: \"Discovery\",\r\n        handle: \"handleDiscovery\",\r\n        subItem: [\r\n            \"Broadcast\", \"Database\", \"Hadoop\", \"HTTP\", \"IP\", \r\n            \"Network\", \"Server Message Block\", \"Server\", \"SMTP\", \"Others\", \r\n        ],        \r\n    },\r\n    {\r\n        cateName: \"Exploit\",\r\n        handle: \"handleExploit\",\r\n        subItem: [\r\n            \"FTP\", \"HTTP\", \"SMB\", \"Others\", \r\n        ],        \r\n    },\r\n    {\r\n        cateName: \"Vulnerability\",\r\n        handle: \"handleVulnerability\",\r\n        subItem: [\r\n            \"FTP\", \"HTTP\", \"SMB\", \"SSL\", \"Others\",\r\n        ],        \r\n    },\r\n]\r\n\r\nexport default function NestedList() {\r\n  const classes = useStyles();\r\n  const [Discovery, setDiscovery] = React.useState(false);\r\n\r\n  const handleDiscovery = () => {\r\n    setDiscovery(!Discovery);\r\n\r\n    if( Exploit == true ){\r\n        setExploit(false)\r\n    }\r\n    if( Vulnerability == true ){\r\n        setVulnerability(false)\r\n    }\r\n  };\r\n\r\n  const [Exploit, setExploit] = React.useState(false);\r\n\r\n  const handleExploit = () => {\r\n    setExploit(!Exploit);\r\n    \r\n    if( Discovery == true ){\r\n        setDiscovery(false)\r\n    }\r\n    if( Vulnerability == true ){\r\n        setVulnerability(false)\r\n    }\r\n  };\r\n\r\n  const [Vulnerability, setVulnerability] = React.useState(false);\r\n\r\n  const handleVulnerability = () => {\r\n    setVulnerability(!Vulnerability);\r\n     \r\n    if( Discovery == true ){\r\n        setDiscovery(false)\r\n    }\r\n    if( Exploit == true ){\r\n        setExploit(false)\r\n    }\r\n  };\r\n\r\n  return (\r\n    <List\r\n      component=\"nav\"\r\n      aria-labelledby=\"nested-list-subheader\"\r\n      className={classes.root}\r\n    >\r\n      {menuItem.map((obj) => (\r\n         obj.cateName == \"Discovery\" ?\r\n            <>\r\n                <ListItem button onClick={handleDiscovery}>\r\n                    <ListItemIcon>\r\n                        <AccountTreeOutlinedIcon />\r\n                    </ListItemIcon>\r\n                    <ListItemText primary={obj.cateName} />\r\n                    {Discovery ? <ExpandLess /> : <ExpandMore />}\r\n                </ListItem>\r\n                <Collapse in={Discovery} timeout=\"auto\" unmountOnExit>\r\n                    {obj.subItem.map((subObj) => (\r\n                        <List component=\"div\" disablePadding>\r\n                            {\r\n                                subObj == \"Broadcast\" ? <DiscoveryBroadcast /> : \r\n                                    subObj == \"Database\" ? <DiscoveryDatabase /> : \r\n                                        subObj == \"Hadoop\" ? <DiscoveryHadoop /> : \r\n                                            subObj == \"HTTP\" ? <DiscoveryHTTP /> : \r\n                                                subObj == \"IP\" ? <DiscoveryIP /> : \r\n                                                subObj == \"Network\" ? <DiscoveryNetwork /> : \r\n                                            subObj == \"Server Message Block\" ? <DiscoveryServerMessageBlock /> : \r\n                                        subObj == \"Server\" ? <DiscoveryServer /> : \r\n                                    subObj == \"SMTP\" ? <DiscoverySMTP /> : \r\n                                subObj == \"Targets\" ? <DiscoveryTargets /> : null\r\n                            }\r\n                        </List>\r\n                    ))}\r\n                    \r\n                </Collapse>\r\n            </>\r\n            :\r\n        obj.cateName == \"Exploit\" ?\r\n            <>\r\n                <ListItem button onClick={handleExploit}>\r\n                    <ListItemIcon>\r\n                        <AccountTreeOutlinedIcon />\r\n                    </ListItemIcon>\r\n                    <ListItemText primary={obj.cateName} />\r\n                    {Exploit ? <ExpandLess /> : <ExpandMore />}\r\n                </ListItem>\r\n                <Collapse in={Exploit} timeout=\"auto\" unmountOnExit>\r\n                    {obj.subItem.map((subObj) => (\r\n                        <List component=\"div\" disablePadding>\r\n                            {\r\n                                subObj == \"FTP\" ? <ExploitFTP /> : \r\n                                    subObj == \"HTTP\" ? <ExploitHTTP /> :\r\n                                        subObj == \"Others\" ? <ExploitOthers /> :\r\n                                            subObj == \"SMB\" ? <ExploitSMB /> : null\r\n                            }\r\n                        </List>\r\n                    ))}\r\n                    \r\n                </Collapse>\r\n            </>\r\n            :\r\n        obj.cateName == \"Vulnerability\" ?\r\n            <>\r\n                <ListItem button onClick={handleVulnerability}>\r\n                    <ListItemIcon>\r\n                        <AccountTreeOutlinedIcon />\r\n                    </ListItemIcon>\r\n                    <ListItemText primary={obj.cateName} />\r\n                    {Vulnerability ? <ExpandLess /> : <ExpandMore />}\r\n                </ListItem>\r\n                <Collapse in={Vulnerability} timeout=\"auto\" unmountOnExit>\r\n                    {obj.subItem.map((subObj) => (\r\n                        <List component=\"div\" disablePadding>\r\n                            {\r\n                                subObj == \"FTP\" ? <VulnFTP /> : \r\n                                    subObj == \"HTTP\" ? <VulnHTTP /> :\r\n                                        subObj == \"Others\" ? <VulnOthers /> :\r\n                                    subObj == \"SMB\" ? <VulnSMB /> :\r\n                                subObj == \"SSL\" ? <VulnSSL /> : null\r\n                            }\r\n                        </List>\r\n                    ))}\r\n                    \r\n                </Collapse>\r\n            </>\r\n            :\r\n            null\r\n      ))}\r\n      \r\n    </List>\r\n  );\r\n}\r\n","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\NewScanModeTab\\Ping.tsx",["783","784"],"import React from 'react';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nimport { Ping } from './NewModeOptions'\r\n\r\nexport default function FormControlLabelPosition() {\r\n  return (\r\n    <>\r\n      <Grid container spacing={3}>\r\n        {Ping.map((option) => (\r\n          <Grid item xs={12}>\r\n            <Tooltip title={option.tooltip} arrow placement=\"right\">\r\n              <FormControl component=\"fieldset\" style={{width: 450}}>\r\n                <FormControlLabel\r\n                  value={option.value}\r\n                  control={<Checkbox color=\"primary\" />}\r\n                  label={option.des}\r\n                  labelPlacement=\"end\"\r\n                />\r\n                {\r\n                  option.input === true ?\r\n                    <>\r\n                      <TextField \r\n                          label={`Example Input: ${option.egInput}`} \r\n                          margin=\"dense\" \r\n                          size=\"small\"\r\n                          variant=\"outlined\"\r\n                          style={{\r\n                            width: \"100%\",\r\n                            textAlignLast: \"center\",\r\n                          }}\r\n                      />\r\n                    </>\r\n                      :\r\n                    null\r\n                }\r\n              </FormControl>\r\n            </Tooltip>\r\n          </Grid>\r\n        ))}\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\nonTCPoptions.tsx",[],"C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\TCPoptions.tsx",[],"C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\HomeSettings\\HomeSettings.tsx",["785","786","787","788","789","790","791","792","793","794"],"import React, {useState} from 'react';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport ExpandLessIcon from '@material-ui/icons/ExpandLess';\r\n\r\n// Components\r\nimport scanTechniquesData from './json/ScanTechniques/data.json'\r\nimport hostDiscovery from './json/HostDiscovery/data.json'\r\nimport osDetection from './json/OSDetection/data.json'\r\nimport outputOpt from './json/Output/data.json'\r\nimport portSpecification from './json/PortSpecification/data.json'\r\nimport serviceAndVersionDetectiony from './json/ServiceAndVersionDetectiony/data.json'\r\n\r\n// Mobx\r\nimport settingsStatus from '../../Mobx/Models/homeSettingsStatus'\r\n// import settingsFlagsStatus from '../../Mobx/Models/homeSettingsFlagStatus'\r\n\r\nimport SetFlags from './SetFlags'\r\nimport { automation, cveDetection } from './homeSettingsData'\r\nimport { targetData } from '../target'\r\nimport { settings } from 'cluster';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n    },\r\n    container: {\r\n      display: 'flex',\r\n    },\r\n    polygon: {\r\n      fill: theme.palette.common.white,\r\n      stroke: theme.palette.divider,\r\n      strokeWidth: 1,\r\n    },\r\n  }),\r\n);\r\n\r\nexport default () => {\r\n  const classes = useStyles();\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setOpen(false);\r\n    settingsStatus.setAuto(false)\r\n    settingsStatus.setCve(false)\r\n    setOthers({\r\n      automation: false,\r\n      cveDetect: false,\r\n      pn: false,\r\n      whoIs: false,\r\n      firewalk: false,\r\n      cleverTrickery: false,\r\n    })\r\n  }\r\n\r\n  const [others, setOthers] = useState({\r\n    automation: false,\r\n    cveDetect: false,\r\n    pn: false,\r\n    whoIs: false,\r\n    firewalk: false,\r\n    cleverTrickery: false,\r\n  });\r\n\r\n  const handleOthersChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setOthers({ ...others, [event.target.name]: event.target.checked });\r\n  };\r\n\r\n  const [setRange, setSetRange] = useState('none');\r\n\r\n  const handleSetRange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setSetRange((event.target as HTMLInputElement).value);\r\n    settingsStatus.setRange((event.target as HTMLInputElement).value);\r\n    if (/.0\\/\\d\\d$/.test(settingsStatus.target) === false){\r\n      settingsStatus.setRange('none');\r\n      setSetRange('none')\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Button \r\n        onClick={handleClickOpen}\r\n        style={{\r\n          textTransform: \"none\"\r\n        }}\r\n        disabled={settingsStatus.target.length > 0 ? false : true}\r\n      >\r\n        Settings\r\n      </Button>\r\n      <Dialog\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n      >\r\n        <DialogTitle id=\"alert-dialog-title\">{\"Add-on Features\"}</DialogTitle>\r\n        <DialogContent>\r\n          <Divider variant=\"middle\" style={{marginBottom: 25}}/>\r\n          <Grid container spacing={6}>\r\n            <Grid item xs={12}>\r\n              <Paper style={{background: \"#f9f9f9\", padding: \"15px 15px\", textAlign: \"center\"}} elevation={0}>\r\n                  <Typography>Target:&nbsp;{settingsStatus.target}</Typography>\r\n              </Paper>\r\n            </Grid>\r\n            {/* Set Range */}\r\n            <Grid item xs={12}>\r\n              <Tooltip title=\"Scan range only for the target with range, e.g. 192.168.1.0/24\" arrow placement=\"top\" disableHoverListener={/.0\\/\\d\\d$/.test(settingsStatus.target) === true ? true : false}>\r\n                <Paper style={{background: \"#f9f9f9\", padding: \"15px 15px\"}} elevation={0}>\r\n                <FormControl component=\"fieldset\">\r\n                  <FormLabel component=\"legend\">Set Range</FormLabel>\r\n                  <RadioGroup aria-label=\"gender\" name=\"gender1\" value={setRange} onChange={handleSetRange} style={{marginLeft: 65,marginTop:15}}>\r\n                    <table>\r\n                      <tr>\r\n                      {/* disabled={'.0\\/\\d+$'.test(homeSettings.target) === true ? false : true} */}\r\n                        <td>\r\n                          <FormControlLabel \r\n                            value=\"oddOnly\" \r\n                            control={\r\n                              <Radio \r\n                                disabled={\r\n                                  /.0\\/2\\d$/.test(settingsStatus.target) === true ? false : true\r\n                                }\r\n                              />\r\n                            } \r\n                            label=\"Odd Numbers Only\" \r\n                          />\r\n                        </td>\r\n                        <td>\r\n                          <FormControlLabel \r\n                            value=\"even\" \r\n                            control={\r\n                              <Radio \r\n                                disabled={\r\n                                  /.0\\/2\\d$/.test(settingsStatus.target) === true ? false : true\r\n                                }\r\n                              />\r\n                            } \r\n                            label=\"Even Numbers Only\" \r\n                          />\r\n                        </td>\r\n                      </tr>\r\n                      <tr>\r\n                        <td>\r\n                          <FormControlLabel \r\n                            value=\"every5hosts\" \r\n                            control={\r\n                              <Radio \r\n                                disabled={\r\n                                  /.0\\/2\\d$/.test(settingsStatus.target) === true ? false : true\r\n                                }\r\n                              />\r\n                            } \r\n                            label=\"Every 5 hosts\" \r\n                          />\r\n                        </td>\r\n                        <td>\r\n                          <FormControlLabel \r\n                            value=\"every10hosts\" \r\n                            control={\r\n                              <Radio \r\n                                disabled={\r\n                                  /.0\\/2\\d$/.test(settingsStatus.target) === true ? false : true\r\n                                }\r\n                              />\r\n                            } \r\n                            label=\"Every 10 hosts\" \r\n                          />\r\n                        </td>\r\n                      </tr>\r\n                      <tr>\r\n                        <td>\r\n                          <FormControlLabel \r\n                            value=\"every15hosts\" \r\n                            control={\r\n                              <Radio \r\n                                disabled={\r\n                                  /.0\\/2\\d$/.test(settingsStatus.target) === true ? false : true\r\n                                }\r\n                              />\r\n                            } \r\n                            label=\"Every 15 hosts\" \r\n                          />\r\n                        </td>\r\n                        <td>\r\n                          <FormControlLabel \r\n                            value=\"every20hosts\" \r\n                            control={\r\n                              <Radio \r\n                                disabled={\r\n                                  /.0\\/2\\d$/.test(settingsStatus.target) === true ? false : true\r\n                                }\r\n                              />\r\n                            } \r\n                            label=\"Every 20 hosts\" \r\n                          />\r\n                        </td>\r\n                      </tr>\r\n                      <tr>\r\n                        <td>\r\n                          <FormControlLabel \r\n                            value=\"none\" \r\n                            control={\r\n                              <Radio \r\n                                disabled={\r\n                                  /.0\\/2\\d$/.test(settingsStatus.target) === true ? false : true\r\n                                }\r\n                              />\r\n                            } \r\n                            label=\"None\" \r\n                          />\r\n\r\n                        </td>\r\n                      </tr>\r\n                    </table>\r\n                  </RadioGroup>\r\n                </FormControl>\r\n              </Paper>\r\n              </Tooltip>\r\n            </Grid>\r\n            {/* Set Flags */}\r\n            <Grid item xs={12} style={{textAlign: \"left\"}}>\r\n              <Paper style={{background: \"#f9f9f9\", padding: \"15px 15px\", textAlign: \"center\"}} elevation={0}>\r\n                <Typography style={{textAlign: \"left\",marginBottom: 12,}}>Scan Techniques</Typography>\r\n                {scanTechniquesData.map((data, index) => {\r\n                  const [opt, setOpt] = useState(false)\r\n\r\n                  return(\r\n                    <Tooltip title={data.tooltip} arrow placement=\"top\">\r\n                      <FormControlLabel\r\n                          value={opt}\r\n                          control={\r\n                              <Checkbox \r\n                                  color=\"primary\" \r\n                                  checked={opt}\r\n                                  onChange={(event: React.ChangeEvent<HTMLInputElement>)=> {\r\n                                    settingsStatus.setFlag(settingsStatus.flag + 1); \r\n                                    console.log(settingsStatus.flag);\r\n                                    setOpt(event.target.checked);\r\n                                    // settingsFlagsStatus.pushFlags()\r\n                                  }}\r\n                              />\r\n                          }\r\n                          label={data.flag}\r\n                          labelPlacement=\"end\"\r\n                      />\r\n                    </Tooltip>\r\n                  )\r\n                })}\r\n                <Divider variant=\"middle\" style={{marginTop: 10, marginBottom: 20,}}/>\r\n                \r\n                <Typography style={{textAlign: \"left\",marginBottom: 12,}}>Host Discovery</Typography>\r\n                {hostDiscovery.map((data, index) => {\r\n                    const [opt, setOpt] = useState(false)\r\n\r\n                  return(\r\n                    <Tooltip title={data.tooltip} arrow placement=\"top\">\r\n                      <FormControlLabel\r\n                          value={opt}\r\n                          control={\r\n                              <Checkbox \r\n                                  color=\"primary\" \r\n                                  checked={opt}\r\n                                  onChange={(event: React.ChangeEvent<HTMLInputElement>)=> {\r\n                                    settingsStatus.setFlag(settingsStatus.flag + 1); \r\n                                    console.log(settingsStatus.flag);\r\n                                    setOpt(event.target.checked);\r\n                                  }}\r\n                              />\r\n                          }\r\n                          label={data.flag}\r\n                          labelPlacement=\"end\"\r\n                      />\r\n                    </Tooltip>\r\n                  )\r\n                })}\r\n                <Divider variant=\"middle\" style={{marginTop: 10, marginBottom: 20,}}/>\r\n\r\n                <Typography style={{textAlign: \"left\",marginBottom: 12,}}>OS Detection</Typography>\r\n                {osDetection.map((data, index) => {\r\n                    const [opt, setOpt] = useState(false)\r\n\r\n                  return(\r\n                    <Tooltip title={data.tooltip} arrow placement=\"top\">\r\n                      <FormControlLabel\r\n                          value={opt}\r\n                          control={\r\n                              <Checkbox \r\n                                  color=\"primary\" \r\n                                  checked={opt}\r\n                                  onChange={(event: React.ChangeEvent<HTMLInputElement>)=> {\r\n                                    settingsStatus.setFlag(settingsStatus.flag + 1); \r\n                                    console.log(settingsStatus.flag);\r\n                                    setOpt(event.target.checked);\r\n                                  }}\r\n                              />\r\n                          }\r\n                          label={data.flag}\r\n                          labelPlacement=\"end\"\r\n                      />\r\n                    </Tooltip>\r\n                  )\r\n                })}\r\n                <Divider variant=\"middle\" style={{marginTop: 10, marginBottom: 20,}}/>\r\n\r\n                <Typography style={{textAlign: \"left\",marginBottom: 12,}}>Output</Typography>\r\n                {outputOpt.map((data, index) => {\r\n                    const [opt, setOpt] = useState(false)\r\n\r\n                  return(\r\n                    <Tooltip title={data.tooltip} arrow placement=\"top\">\r\n                      <FormControlLabel\r\n                          value={opt}\r\n                          control={\r\n                              <Checkbox \r\n                                  color=\"primary\" \r\n                                  checked={opt}\r\n                                  onChange={(event: React.ChangeEvent<HTMLInputElement>)=> {\r\n                                    settingsStatus.setFlag(settingsStatus.flag + 1); \r\n                                    console.log(settingsStatus.flag);\r\n                                    setOpt(event.target.checked);\r\n                                  }}\r\n                              />\r\n                          }\r\n                          label={data.flag}\r\n                          labelPlacement=\"end\"\r\n                      />\r\n                    </Tooltip>\r\n                  )\r\n                })}\r\n                <Divider variant=\"middle\" style={{marginTop: 10, marginBottom: 20,}}/>\r\n\r\n                <Typography style={{textAlign: \"left\",marginBottom: 12,}}>Port Specification</Typography>\r\n                {portSpecification.map((data, index) => {\r\n                    const [opt, setOpt] = useState(false)\r\n\r\n                  return(\r\n                    <Tooltip title={data.tooltip} arrow placement=\"top\">\r\n                      <FormControlLabel\r\n                          value={opt}\r\n                          control={\r\n                              <Checkbox \r\n                                  color=\"primary\" \r\n                                  checked={opt}\r\n                                  onChange={(event: React.ChangeEvent<HTMLInputElement>)=> {\r\n                                    settingsStatus.setFlag(settingsStatus.flag + 1); \r\n                                    console.log(settingsStatus.flag);\r\n                                    setOpt(event.target.checked);\r\n                                  }}\r\n                              />\r\n                          }\r\n                          label={data.flag}\r\n                          labelPlacement=\"end\"\r\n                      />\r\n                    </Tooltip>\r\n                  )\r\n                })}\r\n                <Divider variant=\"middle\" style={{marginTop: 10, marginBottom: 20,}}/>\r\n\r\n                <Typography style={{textAlign: \"left\",marginBottom: 12,}}>Service And Version Detectiony</Typography>\r\n                {serviceAndVersionDetectiony.map((data, index) => {\r\n                    const [opt, setOpt] = useState(false)\r\n\r\n                  return(\r\n                    <Tooltip title={data.tooltip} arrow placement=\"top\">\r\n                      <FormControlLabel\r\n                          value={opt}\r\n                          control={\r\n                              <Checkbox \r\n                                  color=\"primary\" \r\n                                  checked={opt}\r\n                                  onChange={(event: React.ChangeEvent<HTMLInputElement>)=> {\r\n                                    settingsStatus.setFlag(settingsStatus.flag + 1); \r\n                                    console.log(settingsStatus.flag);\r\n                                    setOpt(event.target.checked);\r\n                                  }}\r\n                              />\r\n                          }\r\n                          label={data.flag}\r\n                          labelPlacement=\"end\"\r\n                      />\r\n                    </Tooltip>\r\n                  )\r\n                })}\r\n                <Divider variant=\"middle\" style={{marginTop: 10, marginBottom: 20,}}/>\r\n                \r\n              </Paper>\r\n            </Grid>\r\n\r\n            {/* NSE */}\r\n            <Grid item xs={12}>\r\n              <Paper style={{background: \"#f9f9f9\", padding: \"15px 15px\"}} elevation={0}>\r\n                <table id='homeSettingNSETable'>\r\n                  <tbody>\r\n                    <tr>\r\n                      <td style={{textAlign: 'left'}}>\r\n                        <FormLabel component=\"legend\" style={{marginBottom: 10}}>NSE Quick Access</FormLabel>\r\n                      </td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>\r\n                        <div>\r\n                        <Tooltip title=\"The end result is that all-port Nmap scans against your servers may increase, as frustrated legitimate users try to find where essential services are hidden.\" arrow placement=\"top\">\r\n                          <FormControlLabel\r\n                            label=\"Clever Trickery\"\r\n                            control={\r\n                              <Switch\r\n                                checked={others.cleverTrickery}\r\n                                onChange={handleOthersChange}\r\n                                onClick={() => settingsStatus.setCleverTrickery(!settingsStatus.cleverTrickery)}\r\n                                name=\"cleverTrickery\"\r\n                                inputProps={{ 'aria-label': 'Clever Trickery' }}\r\n                              />\r\n                            }\r\n                          />\r\n                        </Tooltip>\r\n                        </div>\r\n                      </td>\r\n                      <td>\r\n                        <div>\r\n                        <Tooltip arrow placement='top' title='Tries to discover firewall rules using an IP TTL expiration technique known as firewalking.'>\r\n                          <FormControlLabel\r\n                            label=\"Firewalk\"\r\n                            control={\r\n                              <Switch\r\n                                checked={others.firewalk}\r\n                                onChange={handleOthersChange}\r\n                                onClick={() => settingsStatus.setFirewalk(!settingsStatus.firewalk)}\r\n                                name=\"firewalk\"\r\n                                inputProps={{ 'aria-label': 'Firewalk' }}\r\n                              />\r\n                            }\r\n                          />\r\n                        </Tooltip>\r\n                        </div>\r\n                      </td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>\r\n                        <div>\r\n                        <Tooltip title=\"When the system scan find out the result output as no host is alive, automation will allow the scan run again until there is at least one host is alive or all the hosts in desinated range is scanned.\" arrow placement=\"top\">\r\n                          <FormControlLabel\r\n                            label=\"Automation\"\r\n                            control={\r\n                              <Switch\r\n                                checked={others.automation}\r\n                                onChange={handleOthersChange}\r\n                                onClick={() => settingsStatus.setAuto(!settingsStatus.automation)}\r\n                                name=\"automation\"\r\n                                inputProps={{ 'aria-label': 'Automation' }}\r\n                              />\r\n                            }\r\n                          />\r\n                        </Tooltip>\r\n                        </div>\r\n                      </td>\r\n                      <td>\r\n                        <div>\r\n                        <FormControlLabel\r\n                          label=\"CVE Detection\"\r\n                          control={\r\n                            <Switch\r\n                              checked={others.cveDetect}\r\n                              onChange={handleOthersChange}\r\n                              onClick={() => settingsStatus.setCve(!settingsStatus.cve)}\r\n                              name=\"cveDetect\"\r\n                              inputProps={{ 'aria-label': 'CVE Detection' }}\r\n                            />\r\n                          }\r\n                        />\r\n                      </div>\r\n                      </td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>\r\n                        <div>\r\n                        <FormControlLabel\r\n                          label=\"Ping Block Bypassing\"\r\n                          control={\r\n                            <Switch\r\n                              checked={others.pn}\r\n                              onChange={handleOthersChange}\r\n                              onClick={() => settingsStatus.setPn(!settingsStatus.pn)}\r\n                              name=\"pn\"\r\n                              inputProps={{ 'aria-label': 'Ping Block Bypassing' }}\r\n                            />\r\n                          }\r\n                        />\r\n                      </div>\r\n                      </td>\r\n                      <td>\r\n                        <div>\r\n                        <FormControlLabel\r\n                            label=\"WhoIs\"\r\n                            control={\r\n                              <Switch\r\n                                checked={others.whoIs}\r\n                                onChange={handleOthersChange}\r\n                                onClick={() => settingsStatus.setWhoIs(!settingsStatus.whoIs)}\r\n                                name=\"whoIs\"\r\n                                disabled={\r\n                                  /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.test(settingsStatus.target) === true ? true : false\r\n                                }\r\n                                inputProps={{ 'aria-label': 'WhoIs' }}\r\n                              />\r\n                            }\r\n                          />\r\n                          </div>\r\n                      </td>\r\n                    </tr>\r\n\r\n                  </tbody>\r\n                </table>\r\n              </Paper>\r\n            </Grid>\r\n          </Grid>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleCancel} color=\"secondary\">\r\n            Cancel\r\n          </Button>\r\n          <Button onClick={handleClose} color=\"primary\" autoFocus>\r\n            Save\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\HomeSettings\\ScanRangeDisplay.tsx",["795","796","797"],"import React, {useState} from 'react';\r\nimport { createStyles, Theme, withStyles, WithStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\r\nimport MuiDialogContent from '@material-ui/core/DialogContent';\r\nimport MuiDialogActions from '@material-ui/core/DialogActions';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\n// Mobx\r\nimport homeSettingsStatus from '../../Mobx/Models/homeSettingsStatus'\r\n\r\nconst styles = (theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      margin: 0,\r\n      padding: theme.spacing(2),\r\n    },\r\n    closeButton: {\r\n      position: 'absolute',\r\n      right: theme.spacing(1),\r\n      top: theme.spacing(1),\r\n      color: theme.palette.grey[500],\r\n    },\r\n  });\r\n\r\nexport interface DialogTitleProps extends WithStyles<typeof styles> {\r\n  id: string;\r\n  children: React.ReactNode;\r\n  onClose: () => void;\r\n}\r\n\r\nconst DialogTitle = withStyles(styles)((props: DialogTitleProps) => {\r\n  const { children, classes, onClose, ...other } = props;\r\n  return (\r\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\r\n      <Typography variant=\"h6\">{children}</Typography>\r\n      {onClose ? (\r\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\r\n          <CloseIcon />\r\n        </IconButton>\r\n      ) : null}\r\n    </MuiDialogTitle>\r\n  );\r\n});\r\n\r\nconst DialogContent = withStyles((theme: Theme) => ({\r\n  root: {\r\n    padding: theme.spacing(2),\r\n  },\r\n}))(MuiDialogContent);\r\n\r\nconst DialogActions = withStyles((theme: Theme) => ({\r\n  root: {\r\n    margin: 0,\r\n    padding: theme.spacing(1),\r\n  },\r\n}))(MuiDialogActions);\r\n\r\nexport default () => {\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const [setRange, setSetRange] = useState('')\r\n  const RangeCalc = () => {\r\n    var target = homeSettingsStatus.target;\r\n    var range  = homeSettingsStatus.range;\r\n    var subnet = target.split(\"/\").pop();\r\n    var s: number, e: number, xrange: number;\r\n\r\n    if(subnet === '24'){\r\n        s = 0; e = 256;\r\n    } else if(subnet === '25') {\r\n        s = 0; e = 128;\r\n    } else if(subnet === '26') {\r\n        s = 0; e = 64;\r\n    } else if(subnet === '27') {\r\n        s = 0; e = 32;\r\n    } else if(subnet === '28') {\r\n        s = 0; e = 16;\r\n    } else if(subnet === '29') {\r\n        s = 0; e = 8;\r\n    } else {\r\n        s = 0; e = 4;\r\n    }\r\n\r\n    s += 1;\r\n    e -= 2;\r\n    \r\n    range === 'every5hosts' ? xrange = 5 :\r\n    range === 'every10hosts' ? xrange = 10 :\r\n    range === 'every15hosts' ? xrange = 15 :\r\n    range === 'every20hosts' ? xrange = 20 : xrange = 404\r\n\r\n    // Calculation\r\n    var i;\r\n    var calced = target.substr(0, target.indexOf('.0')) + '.'; \r\n    if(range === 'evenOnly'){\r\n        for(i=s; i<=e; i++){\r\n            if(i % 2 === 0){// Get even number\r\n                calced += i + ',';\r\n            }\r\n        }\r\n    } else if(range === 'oddOnly') {\r\n        for(i=s; i<=e; i++){\r\n            if(i % 2 === 1){ // Get odd numbers\r\n                calced += i + ',';\r\n            }\r\n        }\r\n    } else if(range === 'every5hosts') {\r\n        for(i=s; i<=e; i++){\r\n            if(i % 5 === 1){ // Get every 5 hosts\r\n                calced += i + ',';\r\n            }\r\n        }\r\n    } else if(range === 'every10hosts') {\r\n        for(i=s; i<=e; i++){\r\n            if(i % 10 === 1){ // Get every 10 hosts\r\n                calced += i + ',';\r\n            }\r\n        }\r\n    } else if(range === 'every15hosts') {\r\n        for(i=s; i<=e; i++){\r\n            if(i % 15 === 1){ // Get every 15 hosts\r\n                calced += i + ',';\r\n            }\r\n        }\r\n    } else if(range === 'every20hosts') {\r\n        for(i=s; i<=e; i++){\r\n            if(i % 20 === 1){ // Get every 20 hosts\r\n                calced += i + ',';\r\n            }\r\n        }\r\n    }\r\n    \r\n    var output: any, exceeded: boolean = false;\r\n    var dotOneTarget: any = target.slice(0, -4) + '1' ;\r\n    if(s + e < xrange){\r\n        output = \"**For /\" + subnet + \", there's only \" + (s + e - 1) + ' hosts only.**'; \r\n        exceeded = true;\r\n        homeSettingsStatus.setRangeTarget(output)\r\n    } else {\r\n        output = calced.slice(0, -1);\r\n        exceeded = false;\r\n        homeSettingsStatus.setRangeTarget(output)\r\n    }\r\n\r\n    return(\r\n        <>\r\n            <Typography style={{whiteSpace: 'normal'}}>\r\n                {output}{exceeded === true ? <><br/><br/>{dotOneTarget}</> : null}\r\n            </Typography>\r\n        </>\r\n    )\r\n\r\n  }\r\n\r\n  return (\r\n    <div>\r\n        <Button \r\n            variant=\"outlined\" \r\n            style={{\r\n                width: \"100%\", \r\n                whiteSpace: \"nowrap\",\r\n            }}\r\n            onClick={handleClickOpen}\r\n            size=\"small\"\r\n            color=\"primary\"\r\n            disabled={homeSettingsStatus.range === '' || homeSettingsStatus.range === 'none' ? true : false}\r\n        >\r\n            Set Range:&nbsp;\r\n            {\r\n                homeSettingsStatus.range === '' ? 'none':\r\n                homeSettingsStatus.range === 'oddOnly' ?  'Odd Numbers Only' :\r\n                homeSettingsStatus.range === 'evenOnly' ?  'Even Numbers Only' :\r\n                homeSettingsStatus.range === 'every5hosts' ?  'Every 5 Hosts' :\r\n                homeSettingsStatus.range === 'every10hosts' ?  'Every 10 Hosts' :\r\n                homeSettingsStatus.range === 'every15hosts' ?  'Every 15 Hosts' : 'Every 20 Hosts'\r\n            }\r\n        </Button>\r\n      <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open} fullWidth maxWidth=\"sm\">\r\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\r\n            Scan Range\r\n        </DialogTitle>\r\n        <DialogContent dividers>\r\n            <Grid container justify=\"center\" spacing={4}>\r\n                <Grid item xs={6} style={{textAlign: 'center'}}>\r\n                    <Paper style={{background: \"#f9f9f9\", padding: \"15px 15px\"}} elevation={0}>\r\n                        <Typography>\r\n                            {homeSettingsStatus.target}\r\n                        </Typography>\r\n                    </Paper>\r\n                </Grid>\r\n                <Grid item xs={6} style={{textAlign: 'center'}}>\r\n                    <Paper style={{background: \"#f9f9f9\", padding: \"15px 15px\"}} elevation={0}>\r\n                        <Typography>\r\n                            {\r\n                                homeSettingsStatus.range === '' ? 'none' :\r\n                                homeSettingsStatus.range === 'oddOnly' ?  'Odd Numbers Only' :\r\n                                homeSettingsStatus.range === 'evenOnly' ?  'Even Numbers Only' :\r\n                                homeSettingsStatus.range === 'every5hosts' ?  'Every 5 Hosts' :\r\n                                homeSettingsStatus.range === 'every10hosts' ?  'Every 10 Hosts' :\r\n                                homeSettingsStatus.range === 'every15hosts' ?  'Every 15 Hosts' : 'Every 20 Hosts'\r\n                            }\r\n                        </Typography>\r\n                    </Paper>\r\n                </Grid>\r\n                <Grid item xs={12} style={{textAlign: 'center'}}>\r\n                    <Paper style={{background: \"#f9f9f9\", padding: \"15px 15px\"}} elevation={0}>\r\n                        <RangeCalc />\r\n                    </Paper>\r\n                </Grid>\r\n            </Grid>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button autoFocus onClick={handleClose} color=\"primary\">\r\n            Save changes\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\NewScanModeTab\\nseData\\Discovery\\Database.tsx",["798","799"],"import React from 'react';\r\nimport { createStyles, Theme, withStyles, WithStyles, makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\r\nimport MuiDialogContent from '@material-ui/core/DialogContent';\r\nimport MuiDialogActions from '@material-ui/core/DialogActions';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ExtensionIcon from '@material-ui/icons/ExtensionOutlined';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox, { CheckboxProps } from '@material-ui/core/Checkbox';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Separator from '@material-ui/icons/ArrowRightOutlined';\r\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\r\n\r\n// NSE Options\r\nimport NSEoption from './json/Database.json'\r\n\r\nconst styles = (theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      margin: 0,\r\n      padding: theme.spacing(2),\r\n    },\r\n    closeButton: {\r\n      position: 'absolute',\r\n      right: theme.spacing(1),\r\n      top: theme.spacing(1),\r\n      color: theme.palette.grey[500],\r\n    },\r\n  });\r\n\r\nexport interface DialogTitleProps extends WithStyles<typeof styles> {\r\n  id: string;\r\n  children: React.ReactNode;\r\n  onClose: () => void;\r\n}\r\n\r\nconst DialogTitle = withStyles(styles)((props: DialogTitleProps) => {\r\n  const { children, classes, onClose, ...other } = props;\r\n  return (\r\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\r\n      <Typography variant=\"h6\">{children}</Typography>\r\n      {onClose ? (\r\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\r\n          <CloseIcon />\r\n        </IconButton>\r\n      ) : null}\r\n    </MuiDialogTitle>\r\n  );\r\n});\r\n\r\nconst DialogContent = withStyles((theme: Theme) => ({\r\n  root: {\r\n    padding: theme.spacing(2),\r\n  },\r\n}))(MuiDialogContent);\r\n\r\nconst DialogActions = withStyles((theme: Theme) => ({\r\n  root: {\r\n    margin: 0,\r\n    padding: theme.spacing(1),\r\n  },\r\n}))(MuiDialogActions);\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    nested: {\r\n      paddingLeft: theme.spacing(4),\r\n    },\r\n  }),\r\n);\r\n\r\nfunction handleClick(event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) {\r\n    event.preventDefault();\r\n    console.info('You clicked a breadcrumb.');\r\n  }\r\n  \r\n  function Breadcrumb() {\r\n    return (\r\n      <Breadcrumbs separator={<Separator />} >\r\n        <Typography color=\"textPrimary\">NSE</Typography>\r\n        <Typography color=\"textPrimary\">Discovery</Typography>\r\n        <Typography color=\"primary\" style={{fontWeight: \"bold\"}}>Database</Typography>\r\n      </Breadcrumbs>\r\n    );\r\n  }\r\n\r\nexport default function CustomizedDialogs() {\r\n  const [open, setOpen] = React.useState(false);\r\n  const classes = useStyles();\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <ListItem button className={classes.nested} onClick={handleClickOpen}>\r\n        <ListItemIcon>\r\n            <ExtensionIcon />\r\n        </ListItemIcon>\r\n        <ListItemText>Database</ListItemText>\r\n    </ListItem>\r\n      <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\r\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\r\n          <Breadcrumb />\r\n        </DialogTitle>\r\n        <DialogContent dividers>\r\n          <Grid container justify=\"center\" spacing={3}>\r\n              {NSEoption.map((option) => (\r\n                <Grid item xs={6}>\r\n                    <Tooltip arrow placement=\"top\" title={option.des}>\r\n                        <FormControlLabel\r\n                            value={option.id}\r\n                            control={<Checkbox color=\"primary\" />}\r\n                            label={option.id}\r\n                            labelPlacement=\"end\"\r\n                        />\r\n                    </Tooltip>\r\n                </Grid>\r\n              ))}\r\n          </Grid>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button autoFocus onClick={handleClose} color=\"primary\">\r\n            Save changes\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\NewScanModeTab\\nseData\\Discovery\\Broadcast.tsx",["800","801"],"import React from 'react';\r\nimport { createStyles, Theme, withStyles, WithStyles, makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\r\nimport MuiDialogContent from '@material-ui/core/DialogContent';\r\nimport MuiDialogActions from '@material-ui/core/DialogActions';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ExtensionIcon from '@material-ui/icons/ExtensionOutlined';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox, { CheckboxProps } from '@material-ui/core/Checkbox';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Separator from '@material-ui/icons/ArrowRightOutlined';\r\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\r\n\r\n// NSE Options\r\nimport NSEoption from './json/Broadcast.json'\r\n\r\nconst styles = (theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      margin: 0,\r\n      padding: theme.spacing(2),\r\n    },\r\n    closeButton: {\r\n      position: 'absolute',\r\n      right: theme.spacing(1),\r\n      top: theme.spacing(1),\r\n      color: theme.palette.grey[500],\r\n    },\r\n  });\r\n\r\nexport interface DialogTitleProps extends WithStyles<typeof styles> {\r\n  id: string;\r\n  children: React.ReactNode;\r\n  onClose: () => void;\r\n}\r\n\r\nconst DialogTitle = withStyles(styles)((props: DialogTitleProps) => {\r\n  const { children, classes, onClose, ...other } = props;\r\n  return (\r\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\r\n      <Typography variant=\"h6\">{children}</Typography>\r\n      {onClose ? (\r\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\r\n          <CloseIcon />\r\n        </IconButton>\r\n      ) : null}\r\n    </MuiDialogTitle>\r\n  );\r\n});\r\n\r\nconst DialogContent = withStyles((theme: Theme) => ({\r\n  root: {\r\n    padding: theme.spacing(2),\r\n  },\r\n}))(MuiDialogContent);\r\n\r\nconst DialogActions = withStyles((theme: Theme) => ({\r\n  root: {\r\n    margin: 0,\r\n    padding: theme.spacing(1),\r\n  },\r\n}))(MuiDialogActions);\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    nested: {\r\n      paddingLeft: theme.spacing(4),\r\n    },\r\n  }),\r\n);\r\n\r\nfunction handleClick(event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) {\r\n    event.preventDefault();\r\n    console.info('You clicked a breadcrumb.');\r\n  }\r\n  \r\n  function Breadcrumb() {\r\n    return (\r\n      <Breadcrumbs separator={<Separator />} >\r\n        <Typography color=\"textPrimary\">NSE</Typography>\r\n        <Typography color=\"textPrimary\">Discovery</Typography>\r\n        <Typography color=\"primary\" style={{fontWeight: \"bold\"}}>Broadcast</Typography>\r\n      </Breadcrumbs>\r\n    );\r\n  }\r\n\r\nexport default function CustomizedDialogs() {\r\n  const [open, setOpen] = React.useState(false);\r\n  const classes = useStyles();\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <ListItem button className={classes.nested} onClick={handleClickOpen}>\r\n        <ListItemIcon>\r\n            <ExtensionIcon />\r\n        </ListItemIcon>\r\n        <ListItemText>Broadcast</ListItemText>\r\n    </ListItem>\r\n      <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\r\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\r\n          <Breadcrumb />\r\n        </DialogTitle>\r\n        <DialogContent dividers>\r\n          <Grid container justify=\"center\" spacing={3}>\r\n              {NSEoption.map((option) => (\r\n                <Grid item xs={6}>\r\n                    <Tooltip arrow placement=\"top\" title={option.des}>\r\n                        <FormControlLabel\r\n                            value={option.id}\r\n                            control={<Checkbox color=\"primary\" />}\r\n                            label={option.id}\r\n                            labelPlacement=\"end\"\r\n                        />\r\n                    </Tooltip>\r\n                </Grid>\r\n              ))}\r\n          </Grid>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button autoFocus onClick={handleClose} color=\"primary\">\r\n            Save changes\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\NewScanModeTab\\nseData\\Discovery\\Hadoop.tsx",["802","803"],"import React from 'react';\r\nimport { createStyles, Theme, withStyles, WithStyles, makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\r\nimport MuiDialogContent from '@material-ui/core/DialogContent';\r\nimport MuiDialogActions from '@material-ui/core/DialogActions';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ExtensionIcon from '@material-ui/icons/ExtensionOutlined';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox, { CheckboxProps } from '@material-ui/core/Checkbox';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Separator from '@material-ui/icons/ArrowRightOutlined';\r\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\r\n\r\n// NSE Options\r\nimport NSEoption from './json/Hadoop.json'\r\n\r\nconst styles = (theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      margin: 0,\r\n      padding: theme.spacing(2),\r\n    },\r\n    closeButton: {\r\n      position: 'absolute',\r\n      right: theme.spacing(1),\r\n      top: theme.spacing(1),\r\n      color: theme.palette.grey[500],\r\n    },\r\n  });\r\n\r\nexport interface DialogTitleProps extends WithStyles<typeof styles> {\r\n  id: string;\r\n  children: React.ReactNode;\r\n  onClose: () => void;\r\n}\r\n\r\nconst DialogTitle = withStyles(styles)((props: DialogTitleProps) => {\r\n  const { children, classes, onClose, ...other } = props;\r\n  return (\r\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\r\n      <Typography variant=\"h6\">{children}</Typography>\r\n      {onClose ? (\r\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\r\n          <CloseIcon />\r\n        </IconButton>\r\n      ) : null}\r\n    </MuiDialogTitle>\r\n  );\r\n});\r\n\r\nconst DialogContent = withStyles((theme: Theme) => ({\r\n  root: {\r\n    padding: theme.spacing(2),\r\n  },\r\n}))(MuiDialogContent);\r\n\r\nconst DialogActions = withStyles((theme: Theme) => ({\r\n  root: {\r\n    margin: 0,\r\n    padding: theme.spacing(1),\r\n  },\r\n}))(MuiDialogActions);\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    nested: {\r\n      paddingLeft: theme.spacing(4),\r\n    },\r\n  }),\r\n);\r\n\r\nfunction handleClick(event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) {\r\n    event.preventDefault();\r\n    console.info('You clicked a breadcrumb.');\r\n  }\r\n  \r\n  function Breadcrumb() {\r\n    return (\r\n      <Breadcrumbs separator={<Separator />} >\r\n        <Typography color=\"textPrimary\">NSE</Typography>\r\n        <Typography color=\"textPrimary\">Discovery</Typography>\r\n        <Typography color=\"primary\" style={{fontWeight: \"bold\"}}>Hadoop</Typography>\r\n      </Breadcrumbs>\r\n    );\r\n  }\r\n\r\nexport default function CustomizedDialogs() {\r\n  const [open, setOpen] = React.useState(false);\r\n  const classes = useStyles();\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <ListItem button className={classes.nested} onClick={handleClickOpen}>\r\n        <ListItemIcon>\r\n            <ExtensionIcon />\r\n        </ListItemIcon>\r\n        <ListItemText>Hadoop</ListItemText>\r\n    </ListItem>\r\n      <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\r\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\r\n          <Breadcrumb />\r\n        </DialogTitle>\r\n        <DialogContent dividers>\r\n          <Grid container justify=\"center\" spacing={3}>\r\n              {NSEoption.map((option) => (\r\n                <Grid item xs={6}>\r\n                    <Tooltip arrow placement=\"top\" title={option.des}>\r\n                        <FormControlLabel\r\n                            value={option.id}\r\n                            control={<Checkbox color=\"primary\" />}\r\n                            label={option.id}\r\n                            labelPlacement=\"end\"\r\n                        />\r\n                    </Tooltip>\r\n                </Grid>\r\n              ))}\r\n          </Grid>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button autoFocus onClick={handleClose} color=\"primary\">\r\n            Save changes\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\NewScanModeTab\\nseData\\Discovery\\IP.tsx",["804","805"],"import React from 'react';\r\nimport { createStyles, Theme, withStyles, WithStyles, makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\r\nimport MuiDialogContent from '@material-ui/core/DialogContent';\r\nimport MuiDialogActions from '@material-ui/core/DialogActions';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ExtensionIcon from '@material-ui/icons/ExtensionOutlined';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox, { CheckboxProps } from '@material-ui/core/Checkbox';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Separator from '@material-ui/icons/ArrowRightOutlined';\r\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\r\n\r\n// NSE Options\r\nimport NSEoption from './json/IP.json'\r\n\r\nconst styles = (theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      margin: 0,\r\n      padding: theme.spacing(2),\r\n    },\r\n    closeButton: {\r\n      position: 'absolute',\r\n      right: theme.spacing(1),\r\n      top: theme.spacing(1),\r\n      color: theme.palette.grey[500],\r\n    },\r\n  });\r\n\r\nexport interface DialogTitleProps extends WithStyles<typeof styles> {\r\n  id: string;\r\n  children: React.ReactNode;\r\n  onClose: () => void;\r\n}\r\n\r\nconst DialogTitle = withStyles(styles)((props: DialogTitleProps) => {\r\n  const { children, classes, onClose, ...other } = props;\r\n  return (\r\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\r\n      <Typography variant=\"h6\">{children}</Typography>\r\n      {onClose ? (\r\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\r\n          <CloseIcon />\r\n        </IconButton>\r\n      ) : null}\r\n    </MuiDialogTitle>\r\n  );\r\n});\r\n\r\nconst DialogContent = withStyles((theme: Theme) => ({\r\n  root: {\r\n    padding: theme.spacing(2),\r\n  },\r\n}))(MuiDialogContent);\r\n\r\nconst DialogActions = withStyles((theme: Theme) => ({\r\n  root: {\r\n    margin: 0,\r\n    padding: theme.spacing(1),\r\n  },\r\n}))(MuiDialogActions);\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    nested: {\r\n      paddingLeft: theme.spacing(4),\r\n    },\r\n  }),\r\n);\r\n\r\nfunction handleClick(event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) {\r\n    event.preventDefault();\r\n    console.info('You clicked a breadcrumb.');\r\n  }\r\n  \r\n  function Breadcrumb() {\r\n    return (\r\n      <Breadcrumbs separator={<Separator />} >\r\n        <Typography color=\"textPrimary\">NSE</Typography>\r\n        <Typography color=\"textPrimary\">Discovery</Typography>\r\n        <Typography color=\"primary\" style={{fontWeight: \"bold\"}}>IP</Typography>\r\n      </Breadcrumbs>\r\n    );\r\n  }\r\n\r\nexport default function CustomizedDialogs() {\r\n  const [open, setOpen] = React.useState(false);\r\n  const classes = useStyles();\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <ListItem button className={classes.nested} onClick={handleClickOpen}>\r\n        <ListItemIcon>\r\n            <ExtensionIcon />\r\n        </ListItemIcon>\r\n        <ListItemText>IP</ListItemText>\r\n    </ListItem>\r\n      <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\r\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\r\n          <Breadcrumb />\r\n        </DialogTitle>\r\n        <DialogContent dividers>\r\n          <Grid container justify=\"center\" spacing={3}>\r\n              {NSEoption.map((option) => (\r\n                <Grid item xs={6}>\r\n                    <Tooltip arrow placement=\"top\" title={option.des}>\r\n                        <FormControlLabel\r\n                            value={option.id}\r\n                            control={<Checkbox color=\"primary\" />}\r\n                            label={option.id}\r\n                            labelPlacement=\"end\"\r\n                        />\r\n                    </Tooltip>\r\n                </Grid>\r\n              ))}\r\n          </Grid>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button autoFocus onClick={handleClose} color=\"primary\">\r\n            Save changes\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\NewScanModeTab\\nseData\\Discovery\\HTTP.tsx",["806","807"],"import React from 'react';\r\nimport { createStyles, Theme, withStyles, WithStyles, makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\r\nimport MuiDialogContent from '@material-ui/core/DialogContent';\r\nimport MuiDialogActions from '@material-ui/core/DialogActions';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ExtensionIcon from '@material-ui/icons/ExtensionOutlined';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox, { CheckboxProps } from '@material-ui/core/Checkbox';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Separator from '@material-ui/icons/ArrowRightOutlined';\r\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\r\n\r\n// NSE Options\r\nimport NSEoption from './json/HTTP.json'\r\n\r\nconst styles = (theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      margin: 0,\r\n      padding: theme.spacing(2),\r\n    },\r\n    closeButton: {\r\n      position: 'absolute',\r\n      right: theme.spacing(1),\r\n      top: theme.spacing(1),\r\n      color: theme.palette.grey[500],\r\n    },\r\n  });\r\n\r\nexport interface DialogTitleProps extends WithStyles<typeof styles> {\r\n  id: string;\r\n  children: React.ReactNode;\r\n  onClose: () => void;\r\n}\r\n\r\nconst DialogTitle = withStyles(styles)((props: DialogTitleProps) => {\r\n  const { children, classes, onClose, ...other } = props;\r\n  return (\r\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\r\n      <Typography variant=\"h6\">{children}</Typography>\r\n      {onClose ? (\r\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\r\n          <CloseIcon />\r\n        </IconButton>\r\n      ) : null}\r\n    </MuiDialogTitle>\r\n  );\r\n});\r\n\r\nconst DialogContent = withStyles((theme: Theme) => ({\r\n  root: {\r\n    padding: theme.spacing(2),\r\n  },\r\n}))(MuiDialogContent);\r\n\r\nconst DialogActions = withStyles((theme: Theme) => ({\r\n  root: {\r\n    margin: 0,\r\n    padding: theme.spacing(1),\r\n  },\r\n}))(MuiDialogActions);\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    nested: {\r\n      paddingLeft: theme.spacing(4),\r\n    },\r\n  }),\r\n);\r\n\r\nfunction handleClick(event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) {\r\n    event.preventDefault();\r\n    console.info('You clicked a breadcrumb.');\r\n  }\r\n  \r\n  function Breadcrumb() {\r\n    return (\r\n      <Breadcrumbs separator={<Separator />} >\r\n        <Typography color=\"textPrimary\">NSE</Typography>\r\n        <Typography color=\"textPrimary\">Discovery</Typography>\r\n        <Typography color=\"primary\" style={{fontWeight: \"bold\"}}>HTTP</Typography>\r\n      </Breadcrumbs>\r\n    );\r\n  }\r\n\r\nexport default function CustomizedDialogs() {\r\n  const [open, setOpen] = React.useState(false);\r\n  const classes = useStyles();\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <ListItem button className={classes.nested} onClick={handleClickOpen}>\r\n        <ListItemIcon>\r\n            <ExtensionIcon />\r\n        </ListItemIcon>\r\n        <ListItemText>HTTP</ListItemText>\r\n    </ListItem>\r\n      <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\r\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\r\n          <Breadcrumb />\r\n        </DialogTitle>\r\n        <DialogContent dividers>\r\n          <Grid container justify=\"center\" spacing={3}>\r\n              {NSEoption.map((option) => (\r\n                <Grid item xs={6}>\r\n                    <Tooltip arrow placement=\"top\" title={option.des}>\r\n                        <FormControlLabel\r\n                            value={option.id}\r\n                            control={<Checkbox color=\"primary\" />}\r\n                            label={option.id}\r\n                            labelPlacement=\"end\"\r\n                        />\r\n                    </Tooltip>\r\n                </Grid>\r\n              ))}\r\n          </Grid>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button autoFocus onClick={handleClose} color=\"primary\">\r\n            Save changes\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\NewScanModeTab\\nseData\\Discovery\\SMTP.tsx",["808","809"],"import React from 'react';\r\nimport { createStyles, Theme, withStyles, WithStyles, makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\r\nimport MuiDialogContent from '@material-ui/core/DialogContent';\r\nimport MuiDialogActions from '@material-ui/core/DialogActions';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ExtensionIcon from '@material-ui/icons/ExtensionOutlined';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox, { CheckboxProps } from '@material-ui/core/Checkbox';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Separator from '@material-ui/icons/ArrowRightOutlined';\r\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\r\n\r\n// NSE Options\r\nimport NSEoption from './json/SMTP.json'\r\n\r\nconst styles = (theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      margin: 0,\r\n      padding: theme.spacing(2),\r\n    },\r\n    closeButton: {\r\n      position: 'absolute',\r\n      right: theme.spacing(1),\r\n      top: theme.spacing(1),\r\n      color: theme.palette.grey[500],\r\n    },\r\n  });\r\n\r\nexport interface DialogTitleProps extends WithStyles<typeof styles> {\r\n  id: string;\r\n  children: React.ReactNode;\r\n  onClose: () => void;\r\n}\r\n\r\nconst DialogTitle = withStyles(styles)((props: DialogTitleProps) => {\r\n  const { children, classes, onClose, ...other } = props;\r\n  return (\r\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\r\n      <Typography variant=\"h6\">{children}</Typography>\r\n      {onClose ? (\r\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\r\n          <CloseIcon />\r\n        </IconButton>\r\n      ) : null}\r\n    </MuiDialogTitle>\r\n  );\r\n});\r\n\r\nconst DialogContent = withStyles((theme: Theme) => ({\r\n  root: {\r\n    padding: theme.spacing(2),\r\n  },\r\n}))(MuiDialogContent);\r\n\r\nconst DialogActions = withStyles((theme: Theme) => ({\r\n  root: {\r\n    margin: 0,\r\n    padding: theme.spacing(1),\r\n  },\r\n}))(MuiDialogActions);\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    nested: {\r\n      paddingLeft: theme.spacing(4),\r\n    },\r\n  }),\r\n);\r\n\r\nfunction handleClick(event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) {\r\n    event.preventDefault();\r\n    console.info('You clicked a breadcrumb.');\r\n  }\r\n  \r\n  function Breadcrumb() {\r\n    return (\r\n      <Breadcrumbs separator={<Separator />} >\r\n        <Typography color=\"textPrimary\">NSE</Typography>\r\n        <Typography color=\"textPrimary\">Discovery</Typography>\r\n        <Typography color=\"primary\" style={{fontWeight: \"bold\"}}>SMTP</Typography>\r\n      </Breadcrumbs>\r\n    );\r\n  }\r\n\r\nexport default function CustomizedDialogs() {\r\n  const [open, setOpen] = React.useState(false);\r\n  const classes = useStyles();\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <ListItem button className={classes.nested} onClick={handleClickOpen}>\r\n        <ListItemIcon>\r\n            <ExtensionIcon />\r\n        </ListItemIcon>\r\n        <ListItemText>SMTP</ListItemText>\r\n    </ListItem>\r\n      <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\r\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\r\n          <Breadcrumb />\r\n        </DialogTitle>\r\n        <DialogContent dividers>\r\n          <Grid container justify=\"center\" spacing={3}>\r\n              {NSEoption.map((option) => (\r\n                <Grid item xs={6}>\r\n                    <Tooltip arrow placement=\"top\" title={option.des}>\r\n                        <FormControlLabel\r\n                            value={option.id}\r\n                            control={<Checkbox color=\"primary\" />}\r\n                            label={option.id}\r\n                            labelPlacement=\"end\"\r\n                        />\r\n                    </Tooltip>\r\n                </Grid>\r\n              ))}\r\n          </Grid>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button autoFocus onClick={handleClose} color=\"primary\">\r\n            Save changes\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\NewScanModeTab\\nseData\\Discovery\\Server.tsx",["810","811"],"import React from 'react';\r\nimport { createStyles, Theme, withStyles, WithStyles, makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\r\nimport MuiDialogContent from '@material-ui/core/DialogContent';\r\nimport MuiDialogActions from '@material-ui/core/DialogActions';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ExtensionIcon from '@material-ui/icons/ExtensionOutlined';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox, { CheckboxProps } from '@material-ui/core/Checkbox';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Separator from '@material-ui/icons/ArrowRightOutlined';\r\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\r\n\r\n// NSE Options\r\nimport NSEoption from './json/Server.json'\r\n\r\nconst styles = (theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      margin: 0,\r\n      padding: theme.spacing(2),\r\n    },\r\n    closeButton: {\r\n      position: 'absolute',\r\n      right: theme.spacing(1),\r\n      top: theme.spacing(1),\r\n      color: theme.palette.grey[500],\r\n    },\r\n  });\r\n\r\nexport interface DialogTitleProps extends WithStyles<typeof styles> {\r\n  id: string;\r\n  children: React.ReactNode;\r\n  onClose: () => void;\r\n}\r\n\r\nconst DialogTitle = withStyles(styles)((props: DialogTitleProps) => {\r\n  const { children, classes, onClose, ...other } = props;\r\n  return (\r\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\r\n      <Typography variant=\"h6\">{children}</Typography>\r\n      {onClose ? (\r\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\r\n          <CloseIcon />\r\n        </IconButton>\r\n      ) : null}\r\n    </MuiDialogTitle>\r\n  );\r\n});\r\n\r\nconst DialogContent = withStyles((theme: Theme) => ({\r\n  root: {\r\n    padding: theme.spacing(2),\r\n  },\r\n}))(MuiDialogContent);\r\n\r\nconst DialogActions = withStyles((theme: Theme) => ({\r\n  root: {\r\n    margin: 0,\r\n    padding: theme.spacing(1),\r\n  },\r\n}))(MuiDialogActions);\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    nested: {\r\n      paddingLeft: theme.spacing(4),\r\n    },\r\n  }),\r\n);\r\n\r\nfunction handleClick(event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) {\r\n    event.preventDefault();\r\n    console.info('You clicked a breadcrumb.');\r\n  }\r\n  \r\n  function Breadcrumb() {\r\n    return (\r\n      <Breadcrumbs separator={<Separator />} >\r\n        <Typography color=\"textPrimary\">NSE</Typography>\r\n        <Typography color=\"textPrimary\">Discovery</Typography>\r\n        <Typography color=\"primary\" style={{fontWeight: \"bold\"}}>Server</Typography>\r\n      </Breadcrumbs>\r\n    );\r\n  }\r\n\r\nexport default function CustomizedDialogs() {\r\n  const [open, setOpen] = React.useState(false);\r\n  const classes = useStyles();\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <ListItem button className={classes.nested} onClick={handleClickOpen}>\r\n        <ListItemIcon>\r\n            <ExtensionIcon />\r\n        </ListItemIcon>\r\n        <ListItemText>Server</ListItemText>\r\n    </ListItem>\r\n      <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\r\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\r\n          <Breadcrumb />\r\n        </DialogTitle>\r\n        <DialogContent dividers>\r\n          <Grid container justify=\"center\" spacing={3}>\r\n              {NSEoption.map((option) => (\r\n                <Grid item xs={6}>\r\n                    <Tooltip arrow placement=\"top\" title={option.des}>\r\n                        <FormControlLabel\r\n                            value={option.id}\r\n                            control={<Checkbox color=\"primary\" />}\r\n                            label={option.id}\r\n                            labelPlacement=\"end\"\r\n                        />\r\n                    </Tooltip>\r\n                </Grid>\r\n              ))}\r\n          </Grid>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button autoFocus onClick={handleClose} color=\"primary\">\r\n            Save changes\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\NewScanModeTab\\nseData\\Discovery\\ServerMessageBlock.tsx",["812","813"],"import React from 'react';\r\nimport { createStyles, Theme, withStyles, WithStyles, makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\r\nimport MuiDialogContent from '@material-ui/core/DialogContent';\r\nimport MuiDialogActions from '@material-ui/core/DialogActions';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ExtensionIcon from '@material-ui/icons/ExtensionOutlined';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox, { CheckboxProps } from '@material-ui/core/Checkbox';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Separator from '@material-ui/icons/ArrowRightOutlined';\r\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\r\n\r\n// NSE Options\r\nimport NSEoption from './json/ServerMessageBlock.json'\r\n\r\nconst styles = (theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      margin: 0,\r\n      padding: theme.spacing(2),\r\n    },\r\n    closeButton: {\r\n      position: 'absolute',\r\n      right: theme.spacing(1),\r\n      top: theme.spacing(1),\r\n      color: theme.palette.grey[500],\r\n    },\r\n  });\r\n\r\nexport interface DialogTitleProps extends WithStyles<typeof styles> {\r\n  id: string;\r\n  children: React.ReactNode;\r\n  onClose: () => void;\r\n}\r\n\r\nconst DialogTitle = withStyles(styles)((props: DialogTitleProps) => {\r\n  const { children, classes, onClose, ...other } = props;\r\n  return (\r\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\r\n      <Typography variant=\"h6\">{children}</Typography>\r\n      {onClose ? (\r\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\r\n          <CloseIcon />\r\n        </IconButton>\r\n      ) : null}\r\n    </MuiDialogTitle>\r\n  );\r\n});\r\n\r\nconst DialogContent = withStyles((theme: Theme) => ({\r\n  root: {\r\n    padding: theme.spacing(2),\r\n  },\r\n}))(MuiDialogContent);\r\n\r\nconst DialogActions = withStyles((theme: Theme) => ({\r\n  root: {\r\n    margin: 0,\r\n    padding: theme.spacing(1),\r\n  },\r\n}))(MuiDialogActions);\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    nested: {\r\n      paddingLeft: theme.spacing(4),\r\n    },\r\n  }),\r\n);\r\n\r\nfunction handleClick(event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) {\r\n    event.preventDefault();\r\n    console.info('You clicked a breadcrumb.');\r\n  }\r\n  \r\n  function Breadcrumb() {\r\n    return (\r\n      <Breadcrumbs separator={<Separator />} >\r\n        <Typography color=\"textPrimary\">NSE</Typography>\r\n        <Typography color=\"textPrimary\">Discovery</Typography>\r\n        <Typography color=\"primary\" style={{fontWeight: \"bold\"}}>Server Message Block</Typography>\r\n      </Breadcrumbs>\r\n    );\r\n  }\r\n\r\nexport default function CustomizedDialogs() {\r\n  const [open, setOpen] = React.useState(false);\r\n  const classes = useStyles();\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <ListItem button className={classes.nested} onClick={handleClickOpen}>\r\n        <ListItemIcon>\r\n            <ExtensionIcon />\r\n        </ListItemIcon>\r\n        <ListItemText>ServerMessageBlock</ListItemText>\r\n    </ListItem>\r\n      <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\r\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\r\n          <Breadcrumb />\r\n        </DialogTitle>\r\n        <DialogContent dividers>\r\n          <Grid container justify=\"center\" spacing={3}>\r\n              {NSEoption.map((option) => (\r\n                <Grid item xs={6}>\r\n                    <Tooltip arrow placement=\"top\" title={option.des}>\r\n                        <FormControlLabel\r\n                            value={option.id}\r\n                            control={<Checkbox color=\"primary\" />}\r\n                            label={option.id}\r\n                            labelPlacement=\"end\"\r\n                        />\r\n                    </Tooltip>\r\n                </Grid>\r\n              ))}\r\n          </Grid>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button autoFocus onClick={handleClose} color=\"primary\">\r\n            Save changes\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\NewScanModeTab\\nseData\\Discovery\\Network.tsx",["814","815"],"import React from 'react';\r\nimport { createStyles, Theme, withStyles, WithStyles, makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\r\nimport MuiDialogContent from '@material-ui/core/DialogContent';\r\nimport MuiDialogActions from '@material-ui/core/DialogActions';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ExtensionIcon from '@material-ui/icons/ExtensionOutlined';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox, { CheckboxProps } from '@material-ui/core/Checkbox';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Separator from '@material-ui/icons/ArrowRightOutlined';\r\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\r\n\r\n// NSE Options\r\nimport NSEoption from './json/Network.json'\r\n\r\nconst styles = (theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      margin: 0,\r\n      padding: theme.spacing(2),\r\n    },\r\n    closeButton: {\r\n      position: 'absolute',\r\n      right: theme.spacing(1),\r\n      top: theme.spacing(1),\r\n      color: theme.palette.grey[500],\r\n    },\r\n  });\r\n\r\nexport interface DialogTitleProps extends WithStyles<typeof styles> {\r\n  id: string;\r\n  children: React.ReactNode;\r\n  onClose: () => void;\r\n}\r\n\r\nconst DialogTitle = withStyles(styles)((props: DialogTitleProps) => {\r\n  const { children, classes, onClose, ...other } = props;\r\n  return (\r\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\r\n      <Typography variant=\"h6\">{children}</Typography>\r\n      {onClose ? (\r\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\r\n          <CloseIcon />\r\n        </IconButton>\r\n      ) : null}\r\n    </MuiDialogTitle>\r\n  );\r\n});\r\n\r\nconst DialogContent = withStyles((theme: Theme) => ({\r\n  root: {\r\n    padding: theme.spacing(2),\r\n  },\r\n}))(MuiDialogContent);\r\n\r\nconst DialogActions = withStyles((theme: Theme) => ({\r\n  root: {\r\n    margin: 0,\r\n    padding: theme.spacing(1),\r\n  },\r\n}))(MuiDialogActions);\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    nested: {\r\n      paddingLeft: theme.spacing(4),\r\n    },\r\n  }),\r\n);\r\n\r\nfunction handleClick(event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) {\r\n    event.preventDefault();\r\n    console.info('You clicked a breadcrumb.');\r\n  }\r\n  \r\n  function Breadcrumb() {\r\n    return (\r\n      <Breadcrumbs separator={<Separator />} >\r\n        <Typography color=\"textPrimary\">NSE</Typography>\r\n        <Typography color=\"textPrimary\">Discovery</Typography>\r\n        <Typography color=\"primary\" style={{fontWeight: \"bold\"}}>Network</Typography>\r\n      </Breadcrumbs>\r\n    );\r\n  }\r\n\r\nexport default function CustomizedDialogs() {\r\n  const [open, setOpen] = React.useState(false);\r\n  const classes = useStyles();\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <ListItem button className={classes.nested} onClick={handleClickOpen}>\r\n        <ListItemIcon>\r\n            <ExtensionIcon />\r\n        </ListItemIcon>\r\n        <ListItemText>Network</ListItemText>\r\n    </ListItem>\r\n      <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\r\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\r\n          <Breadcrumb />\r\n        </DialogTitle>\r\n        <DialogContent dividers>\r\n          <Grid container justify=\"center\" spacing={3}>\r\n              {NSEoption.map((option) => (\r\n                <Grid item xs={6}>\r\n                    <Tooltip arrow placement=\"top\" title={option.des}>\r\n                        <FormControlLabel\r\n                            value={option.id}\r\n                            control={<Checkbox color=\"primary\" />}\r\n                            label={option.id}\r\n                            labelPlacement=\"end\"\r\n                        />\r\n                    </Tooltip>\r\n                </Grid>\r\n              ))}\r\n          </Grid>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button autoFocus onClick={handleClose} color=\"primary\">\r\n            Save changes\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\NewScanModeTab\\nseData\\Vulnerability\\SSL.tsx",["816","817"],"import React from 'react';\r\nimport { createStyles, Theme, withStyles, WithStyles, makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\r\nimport MuiDialogContent from '@material-ui/core/DialogContent';\r\nimport MuiDialogActions from '@material-ui/core/DialogActions';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ExtensionIcon from '@material-ui/icons/ExtensionOutlined';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox, { CheckboxProps } from '@material-ui/core/Checkbox';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Separator from '@material-ui/icons/ArrowRightOutlined';\r\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\r\n\r\n// NSE Options\r\nimport NSEoption from './json/SSL.json'\r\n\r\nconst styles = (theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      margin: 0,\r\n      padding: theme.spacing(2),\r\n    },\r\n    closeButton: {\r\n      position: 'absolute',\r\n      right: theme.spacing(1),\r\n      top: theme.spacing(1),\r\n      color: theme.palette.grey[500],\r\n    },\r\n  });\r\n\r\nexport interface DialogTitleProps extends WithStyles<typeof styles> {\r\n  id: string;\r\n  children: React.ReactNode;\r\n  onClose: () => void;\r\n}\r\n\r\nconst DialogTitle = withStyles(styles)((props: DialogTitleProps) => {\r\n  const { children, classes, onClose, ...other } = props;\r\n  return (\r\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\r\n      <Typography variant=\"h6\">{children}</Typography>\r\n      {onClose ? (\r\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\r\n          <CloseIcon />\r\n        </IconButton>\r\n      ) : null}\r\n    </MuiDialogTitle>\r\n  );\r\n});\r\n\r\nconst DialogContent = withStyles((theme: Theme) => ({\r\n  root: {\r\n    padding: theme.spacing(2),\r\n  },\r\n}))(MuiDialogContent);\r\n\r\nconst DialogActions = withStyles((theme: Theme) => ({\r\n  root: {\r\n    margin: 0,\r\n    padding: theme.spacing(1),\r\n  },\r\n}))(MuiDialogActions);\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    nested: {\r\n      paddingLeft: theme.spacing(4),\r\n    },\r\n  }),\r\n);\r\n\r\nfunction handleClick(event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) {\r\n    event.preventDefault();\r\n    console.info('You clicked a breadcrumb.');\r\n  }\r\n  \r\n  function Breadcrumb() {\r\n    return (\r\n      <Breadcrumbs separator={<Separator />} >\r\n        <Typography color=\"textPrimary\">NSE</Typography>\r\n        <Typography color=\"textPrimary\">Vulnerability</Typography>\r\n        <Typography color=\"primary\" style={{fontWeight: \"bold\"}}>SSL</Typography>\r\n      </Breadcrumbs>\r\n    );\r\n  }\r\n\r\nexport default function CustomizedDialogs() {\r\n  const [open, setOpen] = React.useState(false);\r\n  const classes = useStyles();\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <ListItem button className={classes.nested} onClick={handleClickOpen}>\r\n        <ListItemIcon>\r\n            <ExtensionIcon />\r\n        </ListItemIcon>\r\n        <ListItemText>SSL</ListItemText>\r\n    </ListItem>\r\n      <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\r\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\r\n          <Breadcrumb />\r\n        </DialogTitle>\r\n        <DialogContent dividers>\r\n          <Grid container justify=\"center\" spacing={3}>\r\n              {NSEoption.map((option) => (\r\n                <Grid item xs={6}>\r\n                    <Tooltip arrow placement=\"top\" title={option.des}>\r\n                        <FormControlLabel\r\n                            value={option.id}\r\n                            control={<Checkbox color=\"primary\" />}\r\n                            label={option.id}\r\n                            labelPlacement=\"end\"\r\n                        />\r\n                    </Tooltip>\r\n                </Grid>\r\n              ))}\r\n          </Grid>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button autoFocus onClick={handleClose} color=\"primary\">\r\n            Save changes\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\NewScanModeTab\\nseData\\Discovery\\Targets.tsx",["818","819"],"import React from 'react';\r\nimport { createStyles, Theme, withStyles, WithStyles, makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\r\nimport MuiDialogContent from '@material-ui/core/DialogContent';\r\nimport MuiDialogActions from '@material-ui/core/DialogActions';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ExtensionIcon from '@material-ui/icons/ExtensionOutlined';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox, { CheckboxProps } from '@material-ui/core/Checkbox';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Separator from '@material-ui/icons/ArrowRightOutlined';\r\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\r\n\r\n// NSE Options\r\nimport NSEoption from './json/Targets.json'\r\n\r\nconst styles = (theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      margin: 0,\r\n      padding: theme.spacing(2),\r\n    },\r\n    closeButton: {\r\n      position: 'absolute',\r\n      right: theme.spacing(1),\r\n      top: theme.spacing(1),\r\n      color: theme.palette.grey[500],\r\n    },\r\n  });\r\n\r\nexport interface DialogTitleProps extends WithStyles<typeof styles> {\r\n  id: string;\r\n  children: React.ReactNode;\r\n  onClose: () => void;\r\n}\r\n\r\nconst DialogTitle = withStyles(styles)((props: DialogTitleProps) => {\r\n  const { children, classes, onClose, ...other } = props;\r\n  return (\r\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\r\n      <Typography variant=\"h6\">{children}</Typography>\r\n      {onClose ? (\r\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\r\n          <CloseIcon />\r\n        </IconButton>\r\n      ) : null}\r\n    </MuiDialogTitle>\r\n  );\r\n});\r\n\r\nconst DialogContent = withStyles((theme: Theme) => ({\r\n  root: {\r\n    padding: theme.spacing(2),\r\n  },\r\n}))(MuiDialogContent);\r\n\r\nconst DialogActions = withStyles((theme: Theme) => ({\r\n  root: {\r\n    margin: 0,\r\n    padding: theme.spacing(1),\r\n  },\r\n}))(MuiDialogActions);\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    nested: {\r\n      paddingLeft: theme.spacing(4),\r\n    },\r\n  }),\r\n);\r\n\r\nfunction handleClick(event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) {\r\n    event.preventDefault();\r\n    console.info('You clicked a breadcrumb.');\r\n  }\r\n  \r\n  function Breadcrumb() {\r\n    return (\r\n      <Breadcrumbs separator={<Separator />} >\r\n        <Typography color=\"textPrimary\">NSE</Typography>\r\n        <Typography color=\"textPrimary\">Discovery</Typography>\r\n        <Typography color=\"primary\" style={{fontWeight: \"bold\"}}>Targets</Typography>\r\n      </Breadcrumbs>\r\n    );\r\n  }\r\n\r\nexport default function CustomizedDialogs() {\r\n  const [open, setOpen] = React.useState(false);\r\n  const classes = useStyles();\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <ListItem button className={classes.nested} onClick={handleClickOpen}>\r\n        <ListItemIcon>\r\n            <ExtensionIcon />\r\n        </ListItemIcon>\r\n        <ListItemText>Targets</ListItemText>\r\n    </ListItem>\r\n      <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\r\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\r\n          <Breadcrumb />\r\n        </DialogTitle>\r\n        <DialogContent dividers>\r\n          <Grid container justify=\"center\" spacing={3}>\r\n              {NSEoption.map((option) => (\r\n                <Grid item xs={6}>\r\n                    <Tooltip arrow placement=\"top\" title={option.des}>\r\n                        <FormControlLabel\r\n                            value={option.id}\r\n                            control={<Checkbox color=\"primary\" />}\r\n                            label={option.id}\r\n                            labelPlacement=\"end\"\r\n                        />\r\n                    </Tooltip>\r\n                </Grid>\r\n              ))}\r\n          </Grid>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button autoFocus onClick={handleClose} color=\"primary\">\r\n            Save changes\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\NewScanModeTab\\nseData\\Vulnerability\\Others.tsx",["820","821"],"import React from 'react';\r\nimport { createStyles, Theme, withStyles, WithStyles, makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\r\nimport MuiDialogContent from '@material-ui/core/DialogContent';\r\nimport MuiDialogActions from '@material-ui/core/DialogActions';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ExtensionIcon from '@material-ui/icons/ExtensionOutlined';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox, { CheckboxProps } from '@material-ui/core/Checkbox';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Separator from '@material-ui/icons/ArrowRightOutlined';\r\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\r\n\r\n// NSE Options\r\nimport NSEoption from './json/Others.json'\r\n\r\nconst styles = (theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      margin: 0,\r\n      padding: theme.spacing(2),\r\n    },\r\n    closeButton: {\r\n      position: 'absolute',\r\n      right: theme.spacing(1),\r\n      top: theme.spacing(1),\r\n      color: theme.palette.grey[500],\r\n    },\r\n  });\r\n\r\nexport interface DialogTitleProps extends WithStyles<typeof styles> {\r\n  id: string;\r\n  children: React.ReactNode;\r\n  onClose: () => void;\r\n}\r\n\r\nconst DialogTitle = withStyles(styles)((props: DialogTitleProps) => {\r\n  const { children, classes, onClose, ...other } = props;\r\n  return (\r\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\r\n      <Typography variant=\"h6\">{children}</Typography>\r\n      {onClose ? (\r\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\r\n          <CloseIcon />\r\n        </IconButton>\r\n      ) : null}\r\n    </MuiDialogTitle>\r\n  );\r\n});\r\n\r\nconst DialogContent = withStyles((theme: Theme) => ({\r\n  root: {\r\n    padding: theme.spacing(2),\r\n  },\r\n}))(MuiDialogContent);\r\n\r\nconst DialogActions = withStyles((theme: Theme) => ({\r\n  root: {\r\n    margin: 0,\r\n    padding: theme.spacing(1),\r\n  },\r\n}))(MuiDialogActions);\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    nested: {\r\n      paddingLeft: theme.spacing(4),\r\n    },\r\n  }),\r\n);\r\n\r\nfunction handleClick(event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) {\r\n    event.preventDefault();\r\n    console.info('You clicked a breadcrumb.');\r\n  }\r\n  \r\n  function Breadcrumb() {\r\n    return (\r\n      <Breadcrumbs separator={<Separator />} >\r\n        <Typography color=\"textPrimary\">NSE</Typography>\r\n        <Typography color=\"textPrimary\">Vulnerability</Typography>\r\n        <Typography color=\"primary\" style={{fontWeight: \"bold\"}}>Others</Typography>\r\n      </Breadcrumbs>\r\n    );\r\n  }\r\n\r\nexport default function CustomizedDialogs() {\r\n  const [open, setOpen] = React.useState(false);\r\n  const classes = useStyles();\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <ListItem button className={classes.nested} onClick={handleClickOpen}>\r\n        <ListItemIcon>\r\n            <ExtensionIcon />\r\n        </ListItemIcon>\r\n        <ListItemText>Others</ListItemText>\r\n    </ListItem>\r\n      <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\r\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\r\n          <Breadcrumb />\r\n        </DialogTitle>\r\n        <DialogContent dividers>\r\n          <Grid container justify=\"center\" spacing={3}>\r\n              {NSEoption.map((option) => (\r\n                <Grid item xs={6}>\r\n                    <Tooltip arrow placement=\"top\" title={option.des}>\r\n                        <FormControlLabel\r\n                            value={option.id}\r\n                            control={<Checkbox color=\"primary\" />}\r\n                            label={option.id}\r\n                            labelPlacement=\"end\"\r\n                        />\r\n                    </Tooltip>\r\n                </Grid>\r\n              ))}\r\n          </Grid>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button autoFocus onClick={handleClose} color=\"primary\">\r\n            Save changes\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\NewScanModeTab\\nseData\\Vulnerability\\SMB.tsx",["822","823"],"import React from 'react';\r\nimport { createStyles, Theme, withStyles, WithStyles, makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\r\nimport MuiDialogContent from '@material-ui/core/DialogContent';\r\nimport MuiDialogActions from '@material-ui/core/DialogActions';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ExtensionIcon from '@material-ui/icons/ExtensionOutlined';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox, { CheckboxProps } from '@material-ui/core/Checkbox';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Separator from '@material-ui/icons/ArrowRightOutlined';\r\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\r\n\r\n// NSE Options\r\nimport NSEoption from './json/SMB.json'\r\n\r\nconst styles = (theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      margin: 0,\r\n      padding: theme.spacing(2),\r\n    },\r\n    closeButton: {\r\n      position: 'absolute',\r\n      right: theme.spacing(1),\r\n      top: theme.spacing(1),\r\n      color: theme.palette.grey[500],\r\n    },\r\n  });\r\n\r\nexport interface DialogTitleProps extends WithStyles<typeof styles> {\r\n  id: string;\r\n  children: React.ReactNode;\r\n  onClose: () => void;\r\n}\r\n\r\nconst DialogTitle = withStyles(styles)((props: DialogTitleProps) => {\r\n  const { children, classes, onClose, ...other } = props;\r\n  return (\r\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\r\n      <Typography variant=\"h6\">{children}</Typography>\r\n      {onClose ? (\r\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\r\n          <CloseIcon />\r\n        </IconButton>\r\n      ) : null}\r\n    </MuiDialogTitle>\r\n  );\r\n});\r\n\r\nconst DialogContent = withStyles((theme: Theme) => ({\r\n  root: {\r\n    padding: theme.spacing(2),\r\n  },\r\n}))(MuiDialogContent);\r\n\r\nconst DialogActions = withStyles((theme: Theme) => ({\r\n  root: {\r\n    margin: 0,\r\n    padding: theme.spacing(1),\r\n  },\r\n}))(MuiDialogActions);\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    nested: {\r\n      paddingLeft: theme.spacing(4),\r\n    },\r\n  }),\r\n);\r\n\r\nfunction handleClick(event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) {\r\n    event.preventDefault();\r\n    console.info('You clicked a breadcrumb.');\r\n  }\r\n  \r\n  function Breadcrumb() {\r\n    return (\r\n      <Breadcrumbs separator={<Separator />} >\r\n        <Typography color=\"textPrimary\">NSE</Typography>\r\n        <Typography color=\"textPrimary\">Vulnerability</Typography>\r\n        <Typography color=\"primary\" style={{fontWeight: \"bold\"}}>SMB</Typography>\r\n      </Breadcrumbs>\r\n    );\r\n  }\r\n\r\nexport default function CustomizedDialogs() {\r\n  const [open, setOpen] = React.useState(false);\r\n  const classes = useStyles();\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <ListItem button className={classes.nested} onClick={handleClickOpen}>\r\n        <ListItemIcon>\r\n            <ExtensionIcon />\r\n        </ListItemIcon>\r\n        <ListItemText>SMB</ListItemText>\r\n    </ListItem>\r\n      <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\r\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\r\n          <Breadcrumb />\r\n        </DialogTitle>\r\n        <DialogContent dividers>\r\n          <Grid container justify=\"center\" spacing={3}>\r\n              {NSEoption.map((option) => (\r\n                <Grid item xs={6}>\r\n                    <Tooltip arrow placement=\"top\" title={option.des}>\r\n                        <FormControlLabel\r\n                            value={option.id}\r\n                            control={<Checkbox color=\"primary\" />}\r\n                            label={option.id}\r\n                            labelPlacement=\"end\"\r\n                        />\r\n                    </Tooltip>\r\n                </Grid>\r\n              ))}\r\n          </Grid>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button autoFocus onClick={handleClose} color=\"primary\">\r\n            Save changes\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\NewScanModeTab\\nseData\\Vulnerability\\FTP.tsx",["824","825"],"import React from 'react';\r\nimport { createStyles, Theme, withStyles, WithStyles, makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\r\nimport MuiDialogContent from '@material-ui/core/DialogContent';\r\nimport MuiDialogActions from '@material-ui/core/DialogActions';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ExtensionIcon from '@material-ui/icons/ExtensionOutlined';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox, { CheckboxProps } from '@material-ui/core/Checkbox';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Separator from '@material-ui/icons/ArrowRightOutlined';\r\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\r\n\r\n// NSE Options\r\nimport NSEoption from './json/FTP.json'\r\n\r\nconst styles = (theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      margin: 0,\r\n      padding: theme.spacing(2),\r\n    },\r\n    closeButton: {\r\n      position: 'absolute',\r\n      right: theme.spacing(1),\r\n      top: theme.spacing(1),\r\n      color: theme.palette.grey[500],\r\n    },\r\n  });\r\n\r\nexport interface DialogTitleProps extends WithStyles<typeof styles> {\r\n  id: string;\r\n  children: React.ReactNode;\r\n  onClose: () => void;\r\n}\r\n\r\nconst DialogTitle = withStyles(styles)((props: DialogTitleProps) => {\r\n  const { children, classes, onClose, ...other } = props;\r\n  return (\r\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\r\n      <Typography variant=\"h6\">{children}</Typography>\r\n      {onClose ? (\r\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\r\n          <CloseIcon />\r\n        </IconButton>\r\n      ) : null}\r\n    </MuiDialogTitle>\r\n  );\r\n});\r\n\r\nconst DialogContent = withStyles((theme: Theme) => ({\r\n  root: {\r\n    padding: theme.spacing(2),\r\n  },\r\n}))(MuiDialogContent);\r\n\r\nconst DialogActions = withStyles((theme: Theme) => ({\r\n  root: {\r\n    margin: 0,\r\n    padding: theme.spacing(1),\r\n  },\r\n}))(MuiDialogActions);\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    nested: {\r\n      paddingLeft: theme.spacing(4),\r\n    },\r\n  }),\r\n);\r\n\r\nfunction handleClick(event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) {\r\n    event.preventDefault();\r\n    console.info('You clicked a breadcrumb.');\r\n  }\r\n  \r\n  function Breadcrumb() {\r\n    return (\r\n      <Breadcrumbs separator={<Separator />} >\r\n        <Typography color=\"textPrimary\">NSE</Typography>\r\n        <Typography color=\"textPrimary\">Vulnerability</Typography>\r\n        <Typography color=\"primary\" style={{fontWeight: \"bold\"}}>FTP</Typography>\r\n      </Breadcrumbs>\r\n    );\r\n  }\r\n\r\nexport default function CustomizedDialogs() {\r\n  const [open, setOpen] = React.useState(false);\r\n  const classes = useStyles();\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <ListItem button className={classes.nested} onClick={handleClickOpen}>\r\n        <ListItemIcon>\r\n            <ExtensionIcon />\r\n        </ListItemIcon>\r\n        <ListItemText>FTP</ListItemText>\r\n    </ListItem>\r\n      <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\r\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\r\n          <Breadcrumb />\r\n        </DialogTitle>\r\n        <DialogContent dividers>\r\n          <Grid container justify=\"center\" spacing={3}>\r\n              {NSEoption.map((option) => (\r\n                <Grid item xs={6}>\r\n                    <Tooltip arrow placement=\"top\" title={option.des}>\r\n                        <FormControlLabel\r\n                            value={option.id}\r\n                            control={<Checkbox color=\"primary\" />}\r\n                            label={option.id}\r\n                            labelPlacement=\"end\"\r\n                        />\r\n                    </Tooltip>\r\n                </Grid>\r\n              ))}\r\n          </Grid>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button autoFocus onClick={handleClose} color=\"primary\">\r\n            Save changes\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\NewScanModeTab\\nseData\\Exploit\\SMB.tsx",["826","827"],"import React from 'react';\r\nimport { createStyles, Theme, withStyles, WithStyles, makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\r\nimport MuiDialogContent from '@material-ui/core/DialogContent';\r\nimport MuiDialogActions from '@material-ui/core/DialogActions';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ExtensionIcon from '@material-ui/icons/ExtensionOutlined';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox, { CheckboxProps } from '@material-ui/core/Checkbox';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Separator from '@material-ui/icons/ArrowRightOutlined';\r\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\r\n\r\n// NSE Options\r\nimport NSEoption from './json/SMB.json'\r\n\r\nconst styles = (theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      margin: 0,\r\n      padding: theme.spacing(2),\r\n    },\r\n    closeButton: {\r\n      position: 'absolute',\r\n      right: theme.spacing(1),\r\n      top: theme.spacing(1),\r\n      color: theme.palette.grey[500],\r\n    },\r\n  });\r\n\r\nexport interface DialogTitleProps extends WithStyles<typeof styles> {\r\n  id: string;\r\n  children: React.ReactNode;\r\n  onClose: () => void;\r\n}\r\n\r\nconst DialogTitle = withStyles(styles)((props: DialogTitleProps) => {\r\n  const { children, classes, onClose, ...other } = props;\r\n  return (\r\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\r\n      <Typography variant=\"h6\">{children}</Typography>\r\n      {onClose ? (\r\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\r\n          <CloseIcon />\r\n        </IconButton>\r\n      ) : null}\r\n    </MuiDialogTitle>\r\n  );\r\n});\r\n\r\nconst DialogContent = withStyles((theme: Theme) => ({\r\n  root: {\r\n    padding: theme.spacing(2),\r\n  },\r\n}))(MuiDialogContent);\r\n\r\nconst DialogActions = withStyles((theme: Theme) => ({\r\n  root: {\r\n    margin: 0,\r\n    padding: theme.spacing(1),\r\n  },\r\n}))(MuiDialogActions);\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    nested: {\r\n      paddingLeft: theme.spacing(4),\r\n    },\r\n  }),\r\n);\r\n\r\nfunction handleClick(event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) {\r\n    event.preventDefault();\r\n    console.info('You clicked a breadcrumb.');\r\n  }\r\n  \r\n  function Breadcrumb() {\r\n    return (\r\n      <Breadcrumbs separator={<Separator />} >\r\n        <Typography color=\"textPrimary\">NSE</Typography>\r\n        <Typography color=\"textPrimary\">Exploit</Typography>\r\n        <Typography color=\"primary\" style={{fontWeight: \"bold\"}}>SMB</Typography>\r\n      </Breadcrumbs>\r\n    );\r\n  }\r\n\r\nexport default function CustomizedDialogs() {\r\n  const [open, setOpen] = React.useState(false);\r\n  const classes = useStyles();\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <ListItem button className={classes.nested} onClick={handleClickOpen}>\r\n        <ListItemIcon>\r\n            <ExtensionIcon />\r\n        </ListItemIcon>\r\n        <ListItemText>SMB</ListItemText>\r\n    </ListItem>\r\n      <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\r\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\r\n          <Breadcrumb />\r\n        </DialogTitle>\r\n        <DialogContent dividers>\r\n          <Grid container justify=\"center\" spacing={3}>\r\n              {NSEoption.map((option) => (\r\n                <Grid item xs={6}>\r\n                    <Tooltip arrow placement=\"top\" title={option.des}>\r\n                        <FormControlLabel\r\n                            value={option.id}\r\n                            control={<Checkbox color=\"primary\" />}\r\n                            label={option.id}\r\n                            labelPlacement=\"end\"\r\n                        />\r\n                    </Tooltip>\r\n                </Grid>\r\n              ))}\r\n          </Grid>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button autoFocus onClick={handleClose} color=\"primary\">\r\n            Save changes\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\NewScanModeTab\\nseData\\Vulnerability\\HTTP.tsx",["828","829"],"import React from 'react';\r\nimport { createStyles, Theme, withStyles, WithStyles, makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\r\nimport MuiDialogContent from '@material-ui/core/DialogContent';\r\nimport MuiDialogActions from '@material-ui/core/DialogActions';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ExtensionIcon from '@material-ui/icons/ExtensionOutlined';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox, { CheckboxProps } from '@material-ui/core/Checkbox';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Separator from '@material-ui/icons/ArrowRightOutlined';\r\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\r\n\r\n// NSE Options\r\nimport NSEoption from './json/HTTP.json'\r\n\r\nconst styles = (theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      margin: 0,\r\n      padding: theme.spacing(2),\r\n    },\r\n    closeButton: {\r\n      position: 'absolute',\r\n      right: theme.spacing(1),\r\n      top: theme.spacing(1),\r\n      color: theme.palette.grey[500],\r\n    },\r\n  });\r\n\r\nexport interface DialogTitleProps extends WithStyles<typeof styles> {\r\n  id: string;\r\n  children: React.ReactNode;\r\n  onClose: () => void;\r\n}\r\n\r\nconst DialogTitle = withStyles(styles)((props: DialogTitleProps) => {\r\n  const { children, classes, onClose, ...other } = props;\r\n  return (\r\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\r\n      <Typography variant=\"h6\">{children}</Typography>\r\n      {onClose ? (\r\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\r\n          <CloseIcon />\r\n        </IconButton>\r\n      ) : null}\r\n    </MuiDialogTitle>\r\n  );\r\n});\r\n\r\nconst DialogContent = withStyles((theme: Theme) => ({\r\n  root: {\r\n    padding: theme.spacing(2),\r\n  },\r\n}))(MuiDialogContent);\r\n\r\nconst DialogActions = withStyles((theme: Theme) => ({\r\n  root: {\r\n    margin: 0,\r\n    padding: theme.spacing(1),\r\n  },\r\n}))(MuiDialogActions);\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    nested: {\r\n      paddingLeft: theme.spacing(4),\r\n    },\r\n  }),\r\n);\r\n\r\nfunction handleClick(event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) {\r\n    event.preventDefault();\r\n    console.info('You clicked a breadcrumb.');\r\n  }\r\n  \r\n  function Breadcrumb() {\r\n    return (\r\n      <Breadcrumbs separator={<Separator />} >\r\n        <Typography color=\"textPrimary\">NSE</Typography>\r\n        <Typography color=\"textPrimary\">Vulnerability</Typography>\r\n        <Typography color=\"primary\" style={{fontWeight: \"bold\"}}>HTTP</Typography>\r\n      </Breadcrumbs>\r\n    );\r\n  }\r\n\r\nexport default function CustomizedDialogs() {\r\n  const [open, setOpen] = React.useState(false);\r\n  const classes = useStyles();\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <ListItem button className={classes.nested} onClick={handleClickOpen}>\r\n        <ListItemIcon>\r\n            <ExtensionIcon />\r\n        </ListItemIcon>\r\n        <ListItemText>HTTP</ListItemText>\r\n    </ListItem>\r\n      <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\r\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\r\n          <Breadcrumb />\r\n        </DialogTitle>\r\n        <DialogContent dividers>\r\n          <Grid container justify=\"center\" spacing={3}>\r\n              {NSEoption.map((option) => (\r\n                <Grid item xs={6}>\r\n                    <Tooltip arrow placement=\"top\" title={option.des}>\r\n                        <FormControlLabel\r\n                            value={option.id}\r\n                            control={<Checkbox color=\"primary\" />}\r\n                            label={option.id}\r\n                            labelPlacement=\"end\"\r\n                        />\r\n                    </Tooltip>\r\n                </Grid>\r\n              ))}\r\n          </Grid>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button autoFocus onClick={handleClose} color=\"primary\">\r\n            Save changes\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\NewScanModeTab\\nseData\\Exploit\\Others.tsx",["830","831"],"import React from 'react';\r\nimport { createStyles, Theme, withStyles, WithStyles, makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\r\nimport MuiDialogContent from '@material-ui/core/DialogContent';\r\nimport MuiDialogActions from '@material-ui/core/DialogActions';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ExtensionIcon from '@material-ui/icons/ExtensionOutlined';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox, { CheckboxProps } from '@material-ui/core/Checkbox';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Separator from '@material-ui/icons/ArrowRightOutlined';\r\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\r\n\r\n// NSE Options\r\nimport NSEoption from './json/Others.json'\r\n\r\nconst styles = (theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      margin: 0,\r\n      padding: theme.spacing(2),\r\n    },\r\n    closeButton: {\r\n      position: 'absolute',\r\n      right: theme.spacing(1),\r\n      top: theme.spacing(1),\r\n      color: theme.palette.grey[500],\r\n    },\r\n  });\r\n\r\nexport interface DialogTitleProps extends WithStyles<typeof styles> {\r\n  id: string;\r\n  children: React.ReactNode;\r\n  onClose: () => void;\r\n}\r\n\r\nconst DialogTitle = withStyles(styles)((props: DialogTitleProps) => {\r\n  const { children, classes, onClose, ...other } = props;\r\n  return (\r\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\r\n      <Typography variant=\"h6\">{children}</Typography>\r\n      {onClose ? (\r\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\r\n          <CloseIcon />\r\n        </IconButton>\r\n      ) : null}\r\n    </MuiDialogTitle>\r\n  );\r\n});\r\n\r\nconst DialogContent = withStyles((theme: Theme) => ({\r\n  root: {\r\n    padding: theme.spacing(2),\r\n  },\r\n}))(MuiDialogContent);\r\n\r\nconst DialogActions = withStyles((theme: Theme) => ({\r\n  root: {\r\n    margin: 0,\r\n    padding: theme.spacing(1),\r\n  },\r\n}))(MuiDialogActions);\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    nested: {\r\n      paddingLeft: theme.spacing(4),\r\n    },\r\n  }),\r\n);\r\n\r\nfunction handleClick(event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) {\r\n    event.preventDefault();\r\n    console.info('You clicked a breadcrumb.');\r\n  }\r\n  \r\n  function Breadcrumb() {\r\n    return (\r\n      <Breadcrumbs separator={<Separator />} >\r\n        <Typography color=\"textPrimary\">NSE</Typography>\r\n        <Typography color=\"textPrimary\">Exploit</Typography>\r\n        <Typography color=\"primary\" style={{fontWeight: \"bold\"}}>Others</Typography>\r\n      </Breadcrumbs>\r\n    );\r\n  }\r\n\r\nexport default function CustomizedDialogs() {\r\n  const [open, setOpen] = React.useState(false);\r\n  const classes = useStyles();\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <ListItem button className={classes.nested} onClick={handleClickOpen}>\r\n        <ListItemIcon>\r\n            <ExtensionIcon />\r\n        </ListItemIcon>\r\n        <ListItemText>Others</ListItemText>\r\n    </ListItem>\r\n      <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\r\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\r\n          <Breadcrumb />\r\n        </DialogTitle>\r\n        <DialogContent dividers>\r\n          <Grid container justify=\"center\" spacing={3}>\r\n              {NSEoption.map((option) => (\r\n                <Grid item xs={6}>\r\n                    <Tooltip arrow placement=\"top\" title={option.des}>\r\n                        <FormControlLabel\r\n                            value={option.id}\r\n                            control={<Checkbox color=\"primary\" />}\r\n                            label={option.id}\r\n                            labelPlacement=\"end\"\r\n                        />\r\n                    </Tooltip>\r\n                </Grid>\r\n              ))}\r\n          </Grid>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button autoFocus onClick={handleClose} color=\"primary\">\r\n            Save changes\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\NewScanModeTab\\nseData\\Exploit\\FTP.tsx",["832","833"],"import React from 'react';\r\nimport { createStyles, Theme, withStyles, WithStyles, makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\r\nimport MuiDialogContent from '@material-ui/core/DialogContent';\r\nimport MuiDialogActions from '@material-ui/core/DialogActions';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ExtensionIcon from '@material-ui/icons/ExtensionOutlined';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox, { CheckboxProps } from '@material-ui/core/Checkbox';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Separator from '@material-ui/icons/ArrowRightOutlined';\r\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\r\n\r\n// NSE Options\r\nimport NSEoption from './json/FTP.json'\r\n\r\nconst styles = (theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      margin: 0,\r\n      padding: theme.spacing(2),\r\n    },\r\n    closeButton: {\r\n      position: 'absolute',\r\n      right: theme.spacing(1),\r\n      top: theme.spacing(1),\r\n      color: theme.palette.grey[500],\r\n    },\r\n  });\r\n\r\nexport interface DialogTitleProps extends WithStyles<typeof styles> {\r\n  id: string;\r\n  children: React.ReactNode;\r\n  onClose: () => void;\r\n}\r\n\r\nconst DialogTitle = withStyles(styles)((props: DialogTitleProps) => {\r\n  const { children, classes, onClose, ...other } = props;\r\n  return (\r\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\r\n      <Typography variant=\"h6\">{children}</Typography>\r\n      {onClose ? (\r\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\r\n          <CloseIcon />\r\n        </IconButton>\r\n      ) : null}\r\n    </MuiDialogTitle>\r\n  );\r\n});\r\n\r\nconst DialogContent = withStyles((theme: Theme) => ({\r\n  root: {\r\n    padding: theme.spacing(2),\r\n  },\r\n}))(MuiDialogContent);\r\n\r\nconst DialogActions = withStyles((theme: Theme) => ({\r\n  root: {\r\n    margin: 0,\r\n    padding: theme.spacing(1),\r\n  },\r\n}))(MuiDialogActions);\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    nested: {\r\n      paddingLeft: theme.spacing(4),\r\n    },\r\n  }),\r\n);\r\n\r\nfunction handleClick(event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) {\r\n    event.preventDefault();\r\n    console.info('You clicked a breadcrumb.');\r\n  }\r\n  \r\n  function Breadcrumb() {\r\n    return (\r\n      <Breadcrumbs separator={<Separator />} >\r\n        <Typography color=\"textPrimary\">NSE</Typography>\r\n        <Typography color=\"textPrimary\">Exploit</Typography>\r\n        <Typography color=\"primary\" style={{fontWeight: \"bold\"}}>FTP</Typography>\r\n      </Breadcrumbs>\r\n    );\r\n  }\r\n\r\nexport default function CustomizedDialogs() {\r\n  const [open, setOpen] = React.useState(false);\r\n  const classes = useStyles();\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <ListItem button className={classes.nested} onClick={handleClickOpen}>\r\n        <ListItemIcon>\r\n            <ExtensionIcon />\r\n        </ListItemIcon>\r\n        <ListItemText>FTP</ListItemText>\r\n    </ListItem>\r\n      <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\r\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\r\n          <Breadcrumb />\r\n        </DialogTitle>\r\n        <DialogContent dividers>\r\n          <Grid container justify=\"center\" spacing={3}>\r\n              {NSEoption.map((option) => (\r\n                <Grid item xs={6}>\r\n                    <Tooltip arrow placement=\"top\" title={option.des}>\r\n                        <FormControlLabel\r\n                            value={option.id}\r\n                            control={<Checkbox color=\"primary\" />}\r\n                            label={option.id}\r\n                            labelPlacement=\"end\"\r\n                        />\r\n                    </Tooltip>\r\n                </Grid>\r\n              ))}\r\n          </Grid>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button autoFocus onClick={handleClose} color=\"primary\">\r\n            Save changes\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\josue\\Desktop\\ChiNmap\\chinmap-frontend\\src\\Components\\NewScanModeTab\\nseData\\Exploit\\HTTP.tsx",["834","835"],"import React from 'react';\r\nimport { createStyles, Theme, withStyles, WithStyles, makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\r\nimport MuiDialogContent from '@material-ui/core/DialogContent';\r\nimport MuiDialogActions from '@material-ui/core/DialogActions';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ExtensionIcon from '@material-ui/icons/ExtensionOutlined';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox, { CheckboxProps } from '@material-ui/core/Checkbox';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Separator from '@material-ui/icons/ArrowRightOutlined';\r\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\r\n\r\n// NSE Options\r\nimport NSEoption from './json/HTTP.json'\r\n\r\nconst styles = (theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      margin: 0,\r\n      padding: theme.spacing(2),\r\n    },\r\n    closeButton: {\r\n      position: 'absolute',\r\n      right: theme.spacing(1),\r\n      top: theme.spacing(1),\r\n      color: theme.palette.grey[500],\r\n    },\r\n  });\r\n\r\nexport interface DialogTitleProps extends WithStyles<typeof styles> {\r\n  id: string;\r\n  children: React.ReactNode;\r\n  onClose: () => void;\r\n}\r\n\r\nconst DialogTitle = withStyles(styles)((props: DialogTitleProps) => {\r\n  const { children, classes, onClose, ...other } = props;\r\n  return (\r\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\r\n      <Typography variant=\"h6\">{children}</Typography>\r\n      {onClose ? (\r\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\r\n          <CloseIcon />\r\n        </IconButton>\r\n      ) : null}\r\n    </MuiDialogTitle>\r\n  );\r\n});\r\n\r\nconst DialogContent = withStyles((theme: Theme) => ({\r\n  root: {\r\n    padding: theme.spacing(2),\r\n  },\r\n}))(MuiDialogContent);\r\n\r\nconst DialogActions = withStyles((theme: Theme) => ({\r\n  root: {\r\n    margin: 0,\r\n    padding: theme.spacing(1),\r\n  },\r\n}))(MuiDialogActions);\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    nested: {\r\n      paddingLeft: theme.spacing(4),\r\n    },\r\n  }),\r\n);\r\n\r\nfunction handleClick(event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) {\r\n    event.preventDefault();\r\n    console.info('You clicked a breadcrumb.');\r\n  }\r\n  \r\n  function Breadcrumb() {\r\n    return (\r\n      <Breadcrumbs separator={<Separator />} >\r\n        <Typography color=\"textPrimary\">NSE</Typography>\r\n        <Typography color=\"textPrimary\">Exploit</Typography>\r\n        <Typography color=\"primary\" style={{fontWeight: \"bold\"}}>HTTP</Typography>\r\n      </Breadcrumbs>\r\n    );\r\n  }\r\n\r\nexport default function CustomizedDialogs() {\r\n  const [open, setOpen] = React.useState(false);\r\n  const classes = useStyles();\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <ListItem button className={classes.nested} onClick={handleClickOpen}>\r\n        <ListItemIcon>\r\n            <ExtensionIcon />\r\n        </ListItemIcon>\r\n        <ListItemText>HTTP</ListItemText>\r\n    </ListItem>\r\n      <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\r\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\r\n          <Breadcrumb />\r\n        </DialogTitle>\r\n        <DialogContent dividers>\r\n          <Grid container justify=\"center\" spacing={3}>\r\n              {NSEoption.map((option) => (\r\n                <Grid item xs={6}>\r\n                    <Tooltip arrow placement=\"top\" title={option.des}>\r\n                        <FormControlLabel\r\n                            value={option.id}\r\n                            control={<Checkbox color=\"primary\" />}\r\n                            label={option.id}\r\n                            labelPlacement=\"end\"\r\n                        />\r\n                    </Tooltip>\r\n                </Grid>\r\n              ))}\r\n          </Grid>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button autoFocus onClick={handleClose} color=\"primary\">\r\n            Save changes\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n",{"ruleId":"836","replacedBy":"837"},{"ruleId":"838","replacedBy":"839"},{"ruleId":"840","severity":1,"message":"841","line":2,"column":8,"nodeType":"842","messageId":"843","endLine":2,"endColumn":12},{"ruleId":"840","severity":1,"message":"844","line":16,"column":8,"nodeType":"842","messageId":"843","endLine":16,"endColumn":16},{"ruleId":"840","severity":1,"message":"845","line":18,"column":8,"nodeType":"842","messageId":"843","endLine":18,"endColumn":14},{"ruleId":"840","severity":1,"message":"846","line":19,"column":8,"nodeType":"842","messageId":"843","endLine":19,"endColumn":24},{"ruleId":"840","severity":1,"message":"847","line":21,"column":8,"nodeType":"842","messageId":"843","endLine":21,"endColumn":16},{"ruleId":"840","severity":1,"message":"848","line":35,"column":8,"nodeType":"842","messageId":"843","endLine":35,"endColumn":18},{"ruleId":"849","severity":1,"message":"850","line":86,"column":1,"nodeType":"851","endLine":287,"endColumn":2},{"ruleId":"840","severity":1,"message":"852","line":3,"column":10,"nodeType":"842","messageId":"843","endLine":3,"endColumn":16},{"ruleId":"840","severity":1,"message":"853","line":3,"column":18,"nodeType":"842","messageId":"843","endLine":3,"endColumn":23},{"ruleId":"840","severity":1,"message":"854","line":3,"column":31,"nodeType":"842","messageId":"843","endLine":3,"endColumn":44},{"ruleId":"840","severity":1,"message":"855","line":15,"column":8,"nodeType":"842","messageId":"843","endLine":15,"endColumn":17},{"ruleId":"840","severity":1,"message":"856","line":23,"column":8,"nodeType":"842","messageId":"843","endLine":23,"endColumn":20},{"ruleId":"840","severity":1,"message":"852","line":3,"column":10,"nodeType":"842","messageId":"843","endLine":3,"endColumn":16},{"ruleId":"840","severity":1,"message":"853","line":3,"column":18,"nodeType":"842","messageId":"843","endLine":3,"endColumn":23},{"ruleId":"840","severity":1,"message":"854","line":3,"column":31,"nodeType":"842","messageId":"843","endLine":3,"endColumn":44},{"ruleId":"840","severity":1,"message":"855","line":15,"column":8,"nodeType":"842","messageId":"843","endLine":15,"endColumn":17},{"ruleId":"840","severity":1,"message":"856","line":23,"column":8,"nodeType":"842","messageId":"843","endLine":23,"endColumn":20},{"ruleId":"840","severity":1,"message":"852","line":3,"column":10,"nodeType":"842","messageId":"843","endLine":3,"endColumn":16},{"ruleId":"840","severity":1,"message":"853","line":3,"column":18,"nodeType":"842","messageId":"843","endLine":3,"endColumn":23},{"ruleId":"840","severity":1,"message":"854","line":3,"column":31,"nodeType":"842","messageId":"843","endLine":3,"endColumn":44},{"ruleId":"840","severity":1,"message":"855","line":15,"column":8,"nodeType":"842","messageId":"843","endLine":15,"endColumn":17},{"ruleId":"840","severity":1,"message":"856","line":23,"column":8,"nodeType":"842","messageId":"843","endLine":23,"endColumn":20},{"ruleId":"840","severity":1,"message":"852","line":3,"column":10,"nodeType":"842","messageId":"843","endLine":3,"endColumn":16},{"ruleId":"840","severity":1,"message":"853","line":3,"column":18,"nodeType":"842","messageId":"843","endLine":3,"endColumn":23},{"ruleId":"840","severity":1,"message":"854","line":3,"column":31,"nodeType":"842","messageId":"843","endLine":3,"endColumn":44},{"ruleId":"840","severity":1,"message":"855","line":15,"column":8,"nodeType":"842","messageId":"843","endLine":15,"endColumn":17},{"ruleId":"840","severity":1,"message":"856","line":23,"column":8,"nodeType":"842","messageId":"843","endLine":23,"endColumn":20},{"ruleId":"840","severity":1,"message":"852","line":3,"column":10,"nodeType":"842","messageId":"843","endLine":3,"endColumn":16},{"ruleId":"840","severity":1,"message":"853","line":3,"column":18,"nodeType":"842","messageId":"843","endLine":3,"endColumn":23},{"ruleId":"840","severity":1,"message":"854","line":3,"column":31,"nodeType":"842","messageId":"843","endLine":3,"endColumn":44},{"ruleId":"840","severity":1,"message":"855","line":15,"column":8,"nodeType":"842","messageId":"843","endLine":15,"endColumn":17},{"ruleId":"840","severity":1,"message":"856","line":23,"column":8,"nodeType":"842","messageId":"843","endLine":23,"endColumn":20},{"ruleId":"840","severity":1,"message":"852","line":3,"column":10,"nodeType":"842","messageId":"843","endLine":3,"endColumn":16},{"ruleId":"840","severity":1,"message":"853","line":3,"column":18,"nodeType":"842","messageId":"843","endLine":3,"endColumn":23},{"ruleId":"840","severity":1,"message":"854","line":3,"column":31,"nodeType":"842","messageId":"843","endLine":3,"endColumn":44},{"ruleId":"840","severity":1,"message":"857","line":11,"column":8,"nodeType":"842","messageId":"843","endLine":11,"endColumn":13},{"ruleId":"840","severity":1,"message":"858","line":12,"column":8,"nodeType":"842","messageId":"843","endLine":12,"endColumn":18},{"ruleId":"840","severity":1,"message":"855","line":15,"column":8,"nodeType":"842","messageId":"843","endLine":15,"endColumn":17},{"ruleId":"840","severity":1,"message":"856","line":23,"column":8,"nodeType":"842","messageId":"843","endLine":23,"endColumn":20},{"ruleId":"840","severity":1,"message":"859","line":1,"column":26,"nodeType":"842","messageId":"843","endLine":1,"endColumn":35},{"ruleId":"840","severity":1,"message":"852","line":3,"column":10,"nodeType":"842","messageId":"843","endLine":3,"endColumn":16},{"ruleId":"840","severity":1,"message":"853","line":3,"column":18,"nodeType":"842","messageId":"843","endLine":3,"endColumn":23},{"ruleId":"840","severity":1,"message":"860","line":3,"column":25,"nodeType":"842","messageId":"843","endLine":3,"endColumn":29},{"ruleId":"840","severity":1,"message":"854","line":3,"column":31,"nodeType":"842","messageId":"843","endLine":3,"endColumn":44},{"ruleId":"840","severity":1,"message":"861","line":19,"column":8,"nodeType":"842","messageId":"843","endLine":19,"endColumn":15},{"ruleId":"840","severity":1,"message":"862","line":20,"column":8,"nodeType":"842","messageId":"843","endLine":20,"endColumn":16},{"ruleId":"840","severity":1,"message":"863","line":21,"column":8,"nodeType":"842","messageId":"843","endLine":21,"endColumn":15},{"ruleId":"840","severity":1,"message":"864","line":22,"column":8,"nodeType":"842","messageId":"843","endLine":22,"endColumn":28},{"ruleId":"840","severity":1,"message":"865","line":23,"column":8,"nodeType":"842","messageId":"843","endLine":23,"endColumn":12},{"ruleId":"840","severity":1,"message":"866","line":25,"column":8,"nodeType":"842","messageId":"843","endLine":25,"endColumn":18},{"ruleId":"840","severity":1,"message":"867","line":28,"column":8,"nodeType":"842","messageId":"843","endLine":28,"endColumn":22},{"ruleId":"840","severity":1,"message":"868","line":33,"column":10,"nodeType":"842","messageId":"843","endLine":33,"endColumn":20},{"ruleId":"840","severity":1,"message":"869","line":33,"column":22,"nodeType":"842","messageId":"843","endLine":33,"endColumn":32},{"ruleId":"840","severity":1,"message":"870","line":33,"column":34,"nodeType":"842","messageId":"843","endLine":33,"endColumn":44},{"ruleId":"840","severity":1,"message":"871","line":33,"column":46,"nodeType":"842","messageId":"843","endLine":33,"endColumn":56},{"ruleId":"840","severity":1,"message":"872","line":33,"column":58,"nodeType":"842","messageId":"843","endLine":33,"endColumn":66},{"ruleId":"840","severity":1,"message":"873","line":43,"column":8,"nodeType":"842","messageId":"843","endLine":43,"endColumn":26},{"ruleId":"840","severity":1,"message":"874","line":68,"column":7,"nodeType":"842","messageId":"843","endLine":68,"endColumn":21},{"ruleId":"840","severity":1,"message":"875","line":71,"column":9,"nodeType":"842","messageId":"843","endLine":71,"endColumn":20},{"ruleId":"840","severity":1,"message":"876","line":116,"column":10,"nodeType":"842","messageId":"843","endLine":116,"endColumn":17},{"ruleId":"840","severity":1,"message":"877","line":122,"column":10,"nodeType":"842","messageId":"843","endLine":122,"endColumn":16},{"ruleId":"840","severity":1,"message":"878","line":122,"column":18,"nodeType":"842","messageId":"843","endLine":122,"endColumn":27},{"ruleId":"879","severity":1,"message":"880","line":126,"column":54,"nodeType":"881","messageId":"882","endLine":126,"endColumn":56},{"ruleId":"840","severity":1,"message":"883","line":132,"column":10,"nodeType":"842","messageId":"843","endLine":132,"endColumn":15},{"ruleId":"840","severity":1,"message":"884","line":132,"column":17,"nodeType":"842","messageId":"843","endLine":132,"endColumn":25},{"ruleId":"840","severity":1,"message":"852","line":3,"column":10,"nodeType":"842","messageId":"843","endLine":3,"endColumn":16},{"ruleId":"840","severity":1,"message":"853","line":3,"column":18,"nodeType":"842","messageId":"843","endLine":3,"endColumn":23},{"ruleId":"840","severity":1,"message":"860","line":3,"column":25,"nodeType":"842","messageId":"843","endLine":3,"endColumn":29},{"ruleId":"840","severity":1,"message":"854","line":3,"column":31,"nodeType":"842","messageId":"843","endLine":3,"endColumn":44},{"ruleId":"840","severity":1,"message":"885","line":11,"column":10,"nodeType":"842","messageId":"843","endLine":11,"endColumn":18},{"ruleId":"840","severity":1,"message":"886","line":14,"column":8,"nodeType":"842","messageId":"843","endLine":14,"endColumn":14},{"ruleId":"840","severity":1,"message":"887","line":20,"column":8,"nodeType":"842","messageId":"843","endLine":20,"endColumn":16},{"ruleId":"849","severity":1,"message":"850","line":76,"column":1,"nodeType":"851","endLine":119,"endColumn":2},{"ruleId":"840","severity":1,"message":"888","line":2,"column":43,"nodeType":"842","messageId":"843","endLine":2,"endColumn":50},{"ruleId":"840","severity":1,"message":"852","line":3,"column":10,"nodeType":"842","messageId":"843","endLine":3,"endColumn":16},{"ruleId":"840","severity":1,"message":"853","line":3,"column":18,"nodeType":"842","messageId":"843","endLine":3,"endColumn":23},{"ruleId":"840","severity":1,"message":"860","line":3,"column":25,"nodeType":"842","messageId":"843","endLine":3,"endColumn":29},{"ruleId":"840","severity":1,"message":"854","line":3,"column":31,"nodeType":"842","messageId":"843","endLine":3,"endColumn":44},{"ruleId":"840","severity":1,"message":"889","line":8,"column":8,"nodeType":"842","messageId":"843","endLine":8,"endColumn":18},{"ruleId":"840","severity":1,"message":"890","line":9,"column":8,"nodeType":"842","messageId":"843","endLine":9,"endColumn":17},{"ruleId":"840","severity":1,"message":"891","line":24,"column":10,"nodeType":"842","messageId":"843","endLine":24,"endColumn":20},{"ruleId":"840","severity":1,"message":"892","line":25,"column":8,"nodeType":"842","messageId":"843","endLine":25,"endColumn":17},{"ruleId":"840","severity":1,"message":"893","line":27,"column":10,"nodeType":"842","messageId":"843","endLine":27,"endColumn":14},{"ruleId":"840","severity":1,"message":"894","line":43,"column":8,"nodeType":"842","messageId":"843","endLine":43,"endColumn":13},{"ruleId":"895","severity":1,"message":"896","line":251,"column":65,"nodeType":"897","messageId":"898","endLine":251,"endColumn":66,"suggestions":"899"},{"ruleId":"895","severity":1,"message":"900","line":251,"column":71,"nodeType":"897","messageId":"898","endLine":251,"endColumn":72,"suggestions":"901"},{"ruleId":"840","severity":1,"message":"865","line":6,"column":8,"nodeType":"842","messageId":"843","endLine":6,"endColumn":12},{"ruleId":"840","severity":1,"message":"868","line":32,"column":10,"nodeType":"842","messageId":"843","endLine":32,"endColumn":20},{"ruleId":"840","severity":1,"message":"869","line":32,"column":22,"nodeType":"842","messageId":"843","endLine":32,"endColumn":32},{"ruleId":"840","severity":1,"message":"870","line":32,"column":34,"nodeType":"842","messageId":"843","endLine":32,"endColumn":44},{"ruleId":"840","severity":1,"message":"891","line":36,"column":10,"nodeType":"842","messageId":"843","endLine":36,"endColumn":20},{"ruleId":"849","severity":1,"message":"850","line":145,"column":1,"nodeType":"851","endLine":990,"endColumn":2},{"ruleId":"879","severity":1,"message":"880","line":155,"column":21,"nodeType":"881","messageId":"882","endLine":155,"endColumn":23},{"ruleId":"879","severity":1,"message":"880","line":215,"column":52,"nodeType":"881","messageId":"882","endLine":215,"endColumn":54},{"ruleId":"879","severity":1,"message":"880","line":222,"column":52,"nodeType":"881","messageId":"882","endLine":222,"endColumn":54},{"ruleId":"879","severity":1,"message":"880","line":236,"column":52,"nodeType":"881","messageId":"882","endLine":236,"endColumn":54},{"ruleId":"879","severity":1,"message":"880","line":243,"column":52,"nodeType":"881","messageId":"882","endLine":243,"endColumn":54},{"ruleId":"879","severity":1,"message":"880","line":257,"column":52,"nodeType":"881","messageId":"882","endLine":257,"endColumn":54},{"ruleId":"879","severity":1,"message":"880","line":264,"column":52,"nodeType":"881","messageId":"882","endLine":264,"endColumn":54},{"ruleId":"879","severity":1,"message":"880","line":278,"column":52,"nodeType":"881","messageId":"882","endLine":278,"endColumn":54},{"ruleId":"879","severity":1,"message":"880","line":285,"column":52,"nodeType":"881","messageId":"882","endLine":285,"endColumn":54},{"ruleId":"879","severity":1,"message":"880","line":299,"column":52,"nodeType":"881","messageId":"882","endLine":299,"endColumn":54},{"ruleId":"879","severity":1,"message":"880","line":306,"column":52,"nodeType":"881","messageId":"882","endLine":306,"endColumn":54},{"ruleId":"879","severity":1,"message":"880","line":320,"column":52,"nodeType":"881","messageId":"882","endLine":320,"endColumn":54},{"ruleId":"879","severity":1,"message":"880","line":327,"column":52,"nodeType":"881","messageId":"882","endLine":327,"endColumn":54},{"ruleId":"879","severity":1,"message":"880","line":341,"column":52,"nodeType":"881","messageId":"882","endLine":341,"endColumn":54},{"ruleId":"879","severity":1,"message":"880","line":348,"column":52,"nodeType":"881","messageId":"882","endLine":348,"endColumn":54},{"ruleId":"879","severity":1,"message":"880","line":362,"column":52,"nodeType":"881","messageId":"882","endLine":362,"endColumn":54},{"ruleId":"879","severity":1,"message":"880","line":369,"column":52,"nodeType":"881","messageId":"882","endLine":369,"endColumn":54},{"ruleId":"879","severity":1,"message":"880","line":383,"column":52,"nodeType":"881","messageId":"882","endLine":383,"endColumn":54},{"ruleId":"879","severity":1,"message":"880","line":390,"column":52,"nodeType":"881","messageId":"882","endLine":390,"endColumn":54},{"ruleId":"879","severity":1,"message":"880","line":404,"column":52,"nodeType":"881","messageId":"882","endLine":404,"endColumn":54},{"ruleId":"879","severity":1,"message":"880","line":411,"column":52,"nodeType":"881","messageId":"882","endLine":411,"endColumn":54},{"ruleId":"879","severity":1,"message":"880","line":425,"column":52,"nodeType":"881","messageId":"882","endLine":425,"endColumn":54},{"ruleId":"879","severity":1,"message":"880","line":432,"column":52,"nodeType":"881","messageId":"882","endLine":432,"endColumn":54},{"ruleId":"879","severity":1,"message":"902","line":463,"column":70,"nodeType":"881","messageId":"882","endLine":463,"endColumn":72},{"ruleId":"879","severity":1,"message":"880","line":469,"column":52,"nodeType":"881","messageId":"882","endLine":469,"endColumn":54},{"ruleId":"879","severity":1,"message":"880","line":476,"column":52,"nodeType":"881","messageId":"882","endLine":476,"endColumn":54},{"ruleId":"879","severity":1,"message":"902","line":484,"column":66,"nodeType":"881","messageId":"882","endLine":484,"endColumn":68},{"ruleId":"879","severity":1,"message":"880","line":490,"column":52,"nodeType":"881","messageId":"882","endLine":490,"endColumn":54},{"ruleId":"879","severity":1,"message":"880","line":497,"column":52,"nodeType":"881","messageId":"882","endLine":497,"endColumn":54},{"ruleId":"879","severity":1,"message":"902","line":505,"column":66,"nodeType":"881","messageId":"882","endLine":505,"endColumn":68},{"ruleId":"879","severity":1,"message":"880","line":511,"column":52,"nodeType":"881","messageId":"882","endLine":511,"endColumn":54},{"ruleId":"879","severity":1,"message":"880","line":518,"column":52,"nodeType":"881","messageId":"882","endLine":518,"endColumn":54},{"ruleId":"879","severity":1,"message":"902","line":526,"column":69,"nodeType":"881","messageId":"882","endLine":526,"endColumn":71},{"ruleId":"879","severity":1,"message":"880","line":532,"column":52,"nodeType":"881","messageId":"882","endLine":532,"endColumn":54},{"ruleId":"879","severity":1,"message":"880","line":539,"column":52,"nodeType":"881","messageId":"882","endLine":539,"endColumn":54},{"ruleId":"879","severity":1,"message":"902","line":547,"column":70,"nodeType":"881","messageId":"882","endLine":547,"endColumn":72},{"ruleId":"879","severity":1,"message":"880","line":553,"column":52,"nodeType":"881","messageId":"882","endLine":553,"endColumn":54},{"ruleId":"879","severity":1,"message":"880","line":560,"column":52,"nodeType":"881","messageId":"882","endLine":560,"endColumn":54},{"ruleId":"879","severity":1,"message":"902","line":568,"column":69,"nodeType":"881","messageId":"882","endLine":568,"endColumn":71},{"ruleId":"879","severity":1,"message":"880","line":574,"column":52,"nodeType":"881","messageId":"882","endLine":574,"endColumn":54},{"ruleId":"879","severity":1,"message":"880","line":581,"column":52,"nodeType":"881","messageId":"882","endLine":581,"endColumn":54},{"ruleId":"879","severity":1,"message":"902","line":589,"column":69,"nodeType":"881","messageId":"882","endLine":589,"endColumn":71},{"ruleId":"879","severity":1,"message":"880","line":595,"column":52,"nodeType":"881","messageId":"882","endLine":595,"endColumn":54},{"ruleId":"879","severity":1,"message":"880","line":602,"column":52,"nodeType":"881","messageId":"882","endLine":602,"endColumn":54},{"ruleId":"879","severity":1,"message":"902","line":610,"column":66,"nodeType":"881","messageId":"882","endLine":610,"endColumn":68},{"ruleId":"879","severity":1,"message":"880","line":616,"column":52,"nodeType":"881","messageId":"882","endLine":616,"endColumn":54},{"ruleId":"879","severity":1,"message":"880","line":623,"column":52,"nodeType":"881","messageId":"882","endLine":623,"endColumn":54},{"ruleId":"879","severity":1,"message":"902","line":631,"column":71,"nodeType":"881","messageId":"882","endLine":631,"endColumn":73},{"ruleId":"879","severity":1,"message":"880","line":637,"column":52,"nodeType":"881","messageId":"882","endLine":637,"endColumn":54},{"ruleId":"879","severity":1,"message":"880","line":644,"column":52,"nodeType":"881","messageId":"882","endLine":644,"endColumn":54},{"ruleId":"879","severity":1,"message":"902","line":652,"column":67,"nodeType":"881","messageId":"882","endLine":652,"endColumn":69},{"ruleId":"879","severity":1,"message":"880","line":658,"column":52,"nodeType":"881","messageId":"882","endLine":658,"endColumn":54},{"ruleId":"879","severity":1,"message":"880","line":665,"column":52,"nodeType":"881","messageId":"882","endLine":665,"endColumn":54},{"ruleId":"879","severity":1,"message":"902","line":673,"column":65,"nodeType":"881","messageId":"882","endLine":673,"endColumn":67},{"ruleId":"879","severity":1,"message":"880","line":679,"column":52,"nodeType":"881","messageId":"882","endLine":679,"endColumn":54},{"ruleId":"879","severity":1,"message":"880","line":686,"column":52,"nodeType":"881","messageId":"882","endLine":686,"endColumn":54},{"ruleId":"879","severity":1,"message":"902","line":721,"column":51,"nodeType":"881","messageId":"882","endLine":721,"endColumn":53},{"ruleId":"879","severity":1,"message":"902","line":722,"column":54,"nodeType":"881","messageId":"882","endLine":722,"endColumn":56},{"ruleId":"879","severity":1,"message":"902","line":745,"column":51,"nodeType":"881","messageId":"882","endLine":745,"endColumn":53},{"ruleId":"879","severity":1,"message":"902","line":746,"column":54,"nodeType":"881","messageId":"882","endLine":746,"endColumn":56},{"ruleId":"879","severity":1,"message":"902","line":775,"column":51,"nodeType":"881","messageId":"882","endLine":775,"endColumn":53},{"ruleId":"879","severity":1,"message":"902","line":776,"column":54,"nodeType":"881","messageId":"882","endLine":776,"endColumn":56},{"ruleId":"879","severity":1,"message":"902","line":799,"column":51,"nodeType":"881","messageId":"882","endLine":799,"endColumn":53},{"ruleId":"879","severity":1,"message":"902","line":800,"column":54,"nodeType":"881","messageId":"882","endLine":800,"endColumn":56},{"ruleId":"895","severity":1,"message":"896","line":870,"column":72,"nodeType":"897","messageId":"898","endLine":870,"endColumn":73,"suggestions":"903"},{"ruleId":"895","severity":1,"message":"900","line":870,"column":78,"nodeType":"897","messageId":"898","endLine":870,"endColumn":79,"suggestions":"904"},{"ruleId":"879","severity":1,"message":"880","line":903,"column":60,"nodeType":"881","messageId":"882","endLine":903,"endColumn":62},{"ruleId":"879","severity":1,"message":"902","line":903,"column":93,"nodeType":"881","messageId":"882","endLine":903,"endColumn":95},{"ruleId":"879","severity":1,"message":"880","line":938,"column":60,"nodeType":"881","messageId":"882","endLine":938,"endColumn":62},{"ruleId":"879","severity":1,"message":"902","line":938,"column":93,"nodeType":"881","messageId":"882","endLine":938,"endColumn":95},{"ruleId":"879","severity":1,"message":"880","line":969,"column":42,"nodeType":"881","messageId":"882","endLine":969,"endColumn":44},{"ruleId":"879","severity":1,"message":"880","line":969,"column":64,"nodeType":"881","messageId":"882","endLine":969,"endColumn":66},{"ruleId":"840","severity":1,"message":"852","line":3,"column":10,"nodeType":"842","messageId":"843","endLine":3,"endColumn":16},{"ruleId":"840","severity":1,"message":"853","line":3,"column":18,"nodeType":"842","messageId":"843","endLine":3,"endColumn":23},{"ruleId":"840","severity":1,"message":"860","line":3,"column":25,"nodeType":"842","messageId":"843","endLine":3,"endColumn":29},{"ruleId":"840","severity":1,"message":"854","line":3,"column":31,"nodeType":"842","messageId":"843","endLine":3,"endColumn":44},{"ruleId":"840","severity":1,"message":"905","line":8,"column":8,"nodeType":"842","messageId":"843","endLine":8,"endColumn":12},{"ruleId":"840","severity":1,"message":"906","line":9,"column":8,"nodeType":"842","messageId":"843","endLine":9,"endColumn":16},{"ruleId":"840","severity":1,"message":"907","line":9,"column":20,"nodeType":"842","messageId":"843","endLine":9,"endColumn":33},{"ruleId":"840","severity":1,"message":"908","line":10,"column":8,"nodeType":"842","messageId":"843","endLine":10,"endColumn":20},{"ruleId":"840","severity":1,"message":"909","line":11,"column":8,"nodeType":"842","messageId":"843","endLine":11,"endColumn":20},{"ruleId":"840","severity":1,"message":"910","line":17,"column":8,"nodeType":"842","messageId":"843","endLine":17,"endColumn":14},{"ruleId":"840","severity":1,"message":"856","line":19,"column":8,"nodeType":"842","messageId":"843","endLine":19,"endColumn":20},{"ruleId":"840","severity":1,"message":"911","line":24,"column":8,"nodeType":"842","messageId":"843","endLine":24,"endColumn":18},{"ruleId":"849","severity":1,"message":"850","line":52,"column":1,"nodeType":"851","endLine":122,"endColumn":2},{"ruleId":"840","severity":1,"message":"912","line":55,"column":10,"nodeType":"842","messageId":"843","endLine":55,"endColumn":14},{"ruleId":"840","severity":1,"message":"913","line":56,"column":9,"nodeType":"842","messageId":"843","endLine":56,"endColumn":21},{"ruleId":"840","severity":1,"message":"914","line":64,"column":10,"nodeType":"842","messageId":"843","endLine":64,"endColumn":14},{"ruleId":"840","severity":1,"message":"915","line":64,"column":16,"nodeType":"842","messageId":"843","endLine":64,"endColumn":23},{"ruleId":"849","severity":1,"message":"850","line":35,"column":1,"nodeType":"851","endLine":266,"endColumn":2},{"ruleId":"895","severity":1,"message":"896","line":50,"column":64,"nodeType":"897","messageId":"898","endLine":50,"endColumn":65,"suggestions":"916"},{"ruleId":"879","severity":1,"message":"902","line":52,"column":23,"nodeType":"881","messageId":"882","endLine":52,"endColumn":25},{"ruleId":"895","severity":1,"message":"896","line":73,"column":64,"nodeType":"897","messageId":"898","endLine":73,"endColumn":65,"suggestions":"917"},{"ruleId":"879","severity":1,"message":"902","line":77,"column":11,"nodeType":"881","messageId":"882","endLine":77,"endColumn":13},{"ruleId":"879","severity":1,"message":"902","line":79,"column":18,"nodeType":"881","messageId":"882","endLine":79,"endColumn":20},{"ruleId":"879","severity":1,"message":"902","line":81,"column":30,"nodeType":"881","messageId":"882","endLine":81,"endColumn":32},{"ruleId":"840","severity":1,"message":"852","line":3,"column":10,"nodeType":"842","messageId":"843","endLine":3,"endColumn":16},{"ruleId":"840","severity":1,"message":"853","line":3,"column":18,"nodeType":"842","messageId":"843","endLine":3,"endColumn":23},{"ruleId":"840","severity":1,"message":"854","line":3,"column":31,"nodeType":"842","messageId":"843","endLine":3,"endColumn":44},{"ruleId":"840","severity":1,"message":"918","line":19,"column":8,"nodeType":"842","messageId":"843","endLine":19,"endColumn":16},{"ruleId":"840","severity":1,"message":"919","line":19,"column":20,"nodeType":"842","messageId":"843","endLine":19,"endColumn":30},{"ruleId":"840","severity":1,"message":"910","line":20,"column":8,"nodeType":"842","messageId":"843","endLine":20,"endColumn":14},{"ruleId":"840","severity":1,"message":"892","line":27,"column":8,"nodeType":"842","messageId":"843","endLine":27,"endColumn":17},{"ruleId":"840","severity":1,"message":"920","line":55,"column":7,"nodeType":"842","messageId":"843","endLine":55,"endColumn":19},{"ruleId":"840","severity":1,"message":"875","line":58,"column":11,"nodeType":"842","messageId":"843","endLine":58,"endColumn":22},{"ruleId":"849","severity":1,"message":"850","line":100,"column":1,"nodeType":"851","endLine":181,"endColumn":2},{"ruleId":"879","severity":1,"message":"880","line":148,"column":47,"nodeType":"881","messageId":"882","endLine":148,"endColumn":49},{"ruleId":"895","severity":1,"message":"896","line":152,"column":93,"nodeType":"897","messageId":"898","endLine":152,"endColumn":94,"suggestions":"921"},{"ruleId":"895","severity":1,"message":"900","line":152,"column":99,"nodeType":"897","messageId":"898","endLine":152,"endColumn":100,"suggestions":"922"},{"ruleId":"840","severity":1,"message":"909","line":5,"column":8,"nodeType":"842","messageId":"843","endLine":5,"endColumn":20},{"ruleId":"840","severity":1,"message":"906","line":6,"column":8,"nodeType":"842","messageId":"843","endLine":6,"endColumn":16},{"ruleId":"840","severity":1,"message":"905","line":7,"column":8,"nodeType":"842","messageId":"843","endLine":7,"endColumn":12},{"ruleId":"840","severity":1,"message":"861","line":8,"column":8,"nodeType":"842","messageId":"843","endLine":8,"endColumn":15},{"ruleId":"840","severity":1,"message":"923","line":16,"column":8,"nodeType":"842","messageId":"843","endLine":16,"endColumn":16},{"ruleId":"840","severity":1,"message":"857","line":17,"column":8,"nodeType":"842","messageId":"843","endLine":17,"endColumn":13},{"ruleId":"840","severity":1,"message":"858","line":18,"column":8,"nodeType":"842","messageId":"843","endLine":18,"endColumn":18},{"ruleId":"840","severity":1,"message":"924","line":20,"column":8,"nodeType":"842","messageId":"843","endLine":20,"endColumn":19},{"ruleId":"840","severity":1,"message":"925","line":21,"column":8,"nodeType":"842","messageId":"843","endLine":21,"endColumn":24},{"ruleId":"840","severity":1,"message":"926","line":111,"column":10,"nodeType":"842","messageId":"843","endLine":111,"endColumn":15},{"ruleId":"840","severity":1,"message":"927","line":112,"column":9,"nodeType":"842","messageId":"843","endLine":112,"endColumn":26},{"ruleId":"895","severity":1,"message":"896","line":51,"column":73,"nodeType":"897","messageId":"898","endLine":51,"endColumn":74,"suggestions":"928"},{"ruleId":"895","severity":1,"message":"900","line":51,"column":79,"nodeType":"897","messageId":"898","endLine":51,"endColumn":80,"suggestions":"929"},{"ruleId":"840","severity":1,"message":"930","line":3,"column":6,"nodeType":"842","messageId":"843","endLine":3,"endColumn":18},{"ruleId":"840","severity":1,"message":"931","line":4,"column":6,"nodeType":"842","messageId":"843","endLine":4,"endColumn":15},{"ruleId":"840","severity":1,"message":"932","line":5,"column":6,"nodeType":"842","messageId":"843","endLine":5,"endColumn":14},{"ruleId":"840","severity":1,"message":"933","line":6,"column":6,"nodeType":"842","messageId":"843","endLine":6,"endColumn":16},{"ruleId":"840","severity":1,"message":"934","line":7,"column":6,"nodeType":"842","messageId":"843","endLine":7,"endColumn":17},{"ruleId":"840","severity":1,"message":"935","line":8,"column":6,"nodeType":"842","messageId":"843","endLine":8,"endColumn":17},{"ruleId":"840","severity":1,"message":"936","line":9,"column":6,"nodeType":"842","messageId":"843","endLine":9,"endColumn":16},{"ruleId":"840","severity":1,"message":"937","line":7,"column":8,"nodeType":"842","messageId":"843","endLine":7,"endColumn":25},{"ruleId":"849","severity":1,"message":"850","line":93,"column":1,"nodeType":"851","endLine":336,"endColumn":2},{"ruleId":"840","severity":1,"message":"938","line":137,"column":9,"nodeType":"842","messageId":"843","endLine":137,"endColumn":21},{"ruleId":"879","severity":1,"message":"880","line":199,"column":59,"nodeType":"881","messageId":"882","endLine":199,"endColumn":61},{"ruleId":"840","severity":1,"message":"888","line":2,"column":43,"nodeType":"842","messageId":"843","endLine":2,"endColumn":50},{"ruleId":"840","severity":1,"message":"865","line":3,"column":8,"nodeType":"842","messageId":"843","endLine":3,"endColumn":12},{"ruleId":"840","severity":1,"message":"939","line":9,"column":8,"nodeType":"842","messageId":"843","endLine":9,"endColumn":23},{"ruleId":"840","severity":1,"message":"910","line":13,"column":8,"nodeType":"842","messageId":"843","endLine":13,"endColumn":14},{"ruleId":"840","severity":1,"message":"940","line":15,"column":8,"nodeType":"842","messageId":"843","endLine":15,"endColumn":16},{"ruleId":"840","severity":1,"message":"941","line":16,"column":8,"nodeType":"842","messageId":"843","endLine":16,"endColumn":15},{"ruleId":"849","severity":1,"message":"850","line":74,"column":1,"nodeType":"851","endLine":119,"endColumn":2},{"ruleId":"840","severity":1,"message":"942","line":75,"column":7,"nodeType":"842","messageId":"843","endLine":75,"endColumn":14},{"ruleId":"840","severity":1,"message":"943","line":76,"column":6,"nodeType":"842","messageId":"843","endLine":76,"endColumn":13},{"ruleId":"840","severity":1,"message":"944","line":76,"column":15,"nodeType":"842","messageId":"843","endLine":76,"endColumn":25},{"ruleId":"945","severity":1,"message":"946","line":97,"column":35,"nodeType":"947","endLine":97,"endColumn":138},{"ruleId":"840","severity":1,"message":"948","line":1,"column":16,"nodeType":"842","messageId":"843","endLine":1,"endColumn":24},{"ruleId":"840","severity":1,"message":"885","line":8,"column":10,"nodeType":"842","messageId":"843","endLine":8,"endColumn":18},{"ruleId":"840","severity":1,"message":"949","line":10,"column":8,"nodeType":"842","messageId":"843","endLine":10,"endColumn":17},{"ruleId":"840","severity":1,"message":"950","line":12,"column":20,"nodeType":"842","messageId":"843","endLine":12,"endColumn":33},{"ruleId":"840","severity":1,"message":"868","line":15,"column":10,"nodeType":"842","messageId":"843","endLine":15,"endColumn":20},{"ruleId":"840","severity":1,"message":"869","line":15,"column":22,"nodeType":"842","messageId":"843","endLine":15,"endColumn":32},{"ruleId":"840","severity":1,"message":"870","line":15,"column":34,"nodeType":"842","messageId":"843","endLine":15,"endColumn":44},{"ruleId":"840","severity":1,"message":"951","line":18,"column":10,"nodeType":"842","messageId":"843","endLine":18,"endColumn":20},{"ruleId":"840","severity":1,"message":"952","line":21,"column":8,"nodeType":"842","messageId":"843","endLine":21,"endColumn":21},{"ruleId":"840","severity":1,"message":"893","line":22,"column":10,"nodeType":"842","messageId":"843","endLine":22,"endColumn":14},{"ruleId":"840","severity":1,"message":"953","line":28,"column":7,"nodeType":"842","messageId":"843","endLine":28,"endColumn":16},{"ruleId":"849","severity":1,"message":"850","line":40,"column":1,"nodeType":"851","endLine":192,"endColumn":2},{"ruleId":"879","severity":1,"message":"902","line":67,"column":22,"nodeType":"881","messageId":"882","endLine":67,"endColumn":24},{"ruleId":"895","severity":1,"message":"896","line":81,"column":77,"nodeType":"897","messageId":"898","endLine":81,"endColumn":78,"suggestions":"954"},{"ruleId":"895","severity":1,"message":"900","line":81,"column":83,"nodeType":"897","messageId":"898","endLine":81,"endColumn":84,"suggestions":"955"},{"ruleId":"840","severity":1,"message":"948","line":1,"column":16,"nodeType":"842","messageId":"843","endLine":1,"endColumn":24},{"ruleId":"840","severity":1,"message":"956","line":3,"column":8,"nodeType":"842","messageId":"843","endLine":3,"endColumn":18},{"ruleId":"840","severity":1,"message":"894","line":17,"column":8,"nodeType":"842","messageId":"843","endLine":17,"endColumn":13},{"ruleId":"840","severity":1,"message":"957","line":25,"column":10,"nodeType":"842","messageId":"843","endLine":25,"endColumn":20},{"ruleId":"849","severity":1,"message":"850","line":29,"column":1,"nodeType":"851","endLine":148,"endColumn":2},{"ruleId":"840","severity":1,"message":"948","line":1,"column":16,"nodeType":"842","messageId":"843","endLine":1,"endColumn":24},{"ruleId":"840","severity":1,"message":"889","line":3,"column":8,"nodeType":"842","messageId":"843","endLine":3,"endColumn":18},{"ruleId":"840","severity":1,"message":"958","line":14,"column":8,"nodeType":"842","messageId":"843","endLine":14,"endColumn":31},{"ruleId":"840","severity":1,"message":"959","line":18,"column":8,"nodeType":"842","messageId":"843","endLine":18,"endColumn":13},{"ruleId":"840","severity":1,"message":"956","line":19,"column":8,"nodeType":"842","messageId":"843","endLine":19,"endColumn":18},{"ruleId":"840","severity":1,"message":"868","line":21,"column":10,"nodeType":"842","messageId":"843","endLine":21,"endColumn":20},{"ruleId":"840","severity":1,"message":"870","line":21,"column":34,"nodeType":"842","messageId":"843","endLine":21,"endColumn":44},{"ruleId":"840","severity":1,"message":"871","line":21,"column":46,"nodeType":"842","messageId":"843","endLine":21,"endColumn":56},{"ruleId":"840","severity":1,"message":"872","line":21,"column":58,"nodeType":"842","messageId":"843","endLine":21,"endColumn":66},{"ruleId":"840","severity":1,"message":"951","line":24,"column":10,"nodeType":"842","messageId":"843","endLine":24,"endColumn":20},{"ruleId":"840","severity":1,"message":"891","line":25,"column":10,"nodeType":"842","messageId":"843","endLine":25,"endColumn":20},{"ruleId":"840","severity":1,"message":"952","line":27,"column":8,"nodeType":"842","messageId":"843","endLine":27,"endColumn":21},{"ruleId":"840","severity":1,"message":"893","line":28,"column":10,"nodeType":"842","messageId":"843","endLine":28,"endColumn":14},{"ruleId":"849","severity":1,"message":"850","line":84,"column":1,"nodeType":"851","endLine":580,"endColumn":2},{"ruleId":"840","severity":1,"message":"875","line":87,"column":9,"nodeType":"842","messageId":"843","endLine":87,"endColumn":20},{"ruleId":"879","severity":1,"message":"902","line":94,"column":19,"nodeType":"881","messageId":"882","endLine":94,"endColumn":21},{"ruleId":"895","severity":1,"message":"896","line":121,"column":59,"nodeType":"897","messageId":"898","endLine":121,"endColumn":60,"suggestions":"960"},{"ruleId":"895","severity":1,"message":"900","line":121,"column":65,"nodeType":"897","messageId":"898","endLine":121,"endColumn":66,"suggestions":"961"},{"ruleId":"879","severity":1,"message":"880","line":149,"column":45,"nodeType":"881","messageId":"882","endLine":149,"endColumn":47},{"ruleId":"879","severity":1,"message":"880","line":202,"column":44,"nodeType":"881","messageId":"882","endLine":202,"endColumn":46},{"ruleId":"879","severity":1,"message":"880","line":220,"column":48,"nodeType":"881","messageId":"882","endLine":220,"endColumn":50},{"ruleId":"879","severity":1,"message":"880","line":236,"column":50,"nodeType":"881","messageId":"882","endLine":236,"endColumn":52},{"ruleId":"879","severity":1,"message":"880","line":274,"column":44,"nodeType":"881","messageId":"882","endLine":274,"endColumn":46},{"ruleId":"879","severity":1,"message":"880","line":294,"column":43,"nodeType":"881","messageId":"882","endLine":294,"endColumn":45},{"ruleId":"879","severity":1,"message":"880","line":312,"column":40,"nodeType":"881","messageId":"882","endLine":312,"endColumn":42},{"ruleId":"879","severity":1,"message":"880","line":333,"column":52,"nodeType":"881","messageId":"882","endLine":333,"endColumn":54},{"ruleId":"879","severity":1,"message":"880","line":350,"column":47,"nodeType":"881","messageId":"882","endLine":350,"endColumn":49},{"ruleId":"879","severity":1,"message":"880","line":368,"column":44,"nodeType":"881","messageId":"882","endLine":368,"endColumn":46},{"ruleId":"879","severity":1,"message":"880","line":387,"column":43,"nodeType":"881","messageId":"882","endLine":387,"endColumn":45},{"ruleId":"879","severity":1,"message":"880","line":402,"column":46,"nodeType":"881","messageId":"882","endLine":402,"endColumn":48},{"ruleId":"879","severity":1,"message":"880","line":417,"column":41,"nodeType":"881","messageId":"882","endLine":417,"endColumn":43},{"ruleId":"879","severity":1,"message":"880","line":465,"column":47,"nodeType":"881","messageId":"882","endLine":465,"endColumn":49},{"ruleId":"879","severity":1,"message":"902","line":529,"column":43,"nodeType":"881","messageId":"882","endLine":529,"endColumn":45},{"ruleId":"840","severity":1,"message":"948","line":1,"column":16,"nodeType":"842","messageId":"843","endLine":1,"endColumn":24},{"ruleId":"840","severity":1,"message":"956","line":3,"column":8,"nodeType":"842","messageId":"843","endLine":3,"endColumn":18},{"ruleId":"840","severity":1,"message":"962","line":16,"column":10,"nodeType":"842","messageId":"843","endLine":16,"endColumn":19},{"ruleId":"840","severity":1,"message":"894","line":17,"column":8,"nodeType":"842","messageId":"843","endLine":17,"endColumn":13},{"ruleId":"840","severity":1,"message":"957","line":25,"column":10,"nodeType":"842","messageId":"843","endLine":25,"endColumn":20},{"ruleId":"849","severity":1,"message":"850","line":29,"column":1,"nodeType":"851","endLine":66,"endColumn":2},{"ruleId":"840","severity":1,"message":"888","line":2,"column":43,"nodeType":"842","messageId":"843","endLine":2,"endColumn":50},{"ruleId":"840","severity":1,"message":"865","line":3,"column":8,"nodeType":"842","messageId":"843","endLine":3,"endColumn":12},{"ruleId":"840","severity":1,"message":"939","line":9,"column":8,"nodeType":"842","messageId":"843","endLine":9,"endColumn":23},{"ruleId":"840","severity":1,"message":"910","line":13,"column":8,"nodeType":"842","messageId":"843","endLine":13,"endColumn":14},{"ruleId":"840","severity":1,"message":"940","line":15,"column":8,"nodeType":"842","messageId":"843","endLine":15,"endColumn":16},{"ruleId":"840","severity":1,"message":"941","line":16,"column":8,"nodeType":"842","messageId":"843","endLine":16,"endColumn":15},{"ruleId":"849","severity":1,"message":"850","line":74,"column":1,"nodeType":"851","endLine":119,"endColumn":2},{"ruleId":"840","severity":1,"message":"942","line":75,"column":7,"nodeType":"842","messageId":"843","endLine":75,"endColumn":14},{"ruleId":"840","severity":1,"message":"943","line":76,"column":6,"nodeType":"842","messageId":"843","endLine":76,"endColumn":13},{"ruleId":"840","severity":1,"message":"944","line":76,"column":15,"nodeType":"842","messageId":"843","endLine":76,"endColumn":25},{"ruleId":"945","severity":1,"message":"946","line":97,"column":35,"nodeType":"947","endLine":97,"endColumn":127},{"ruleId":"840","severity":1,"message":"948","line":1,"column":16,"nodeType":"842","messageId":"843","endLine":1,"endColumn":24},{"ruleId":"840","severity":1,"message":"888","line":2,"column":43,"nodeType":"842","messageId":"843","endLine":2,"endColumn":50},{"ruleId":"840","severity":1,"message":"963","line":19,"column":8,"nodeType":"842","messageId":"843","endLine":19,"endColumn":18},{"ruleId":"840","severity":1,"message":"885","line":22,"column":10,"nodeType":"842","messageId":"843","endLine":22,"endColumn":18},{"ruleId":"849","severity":1,"message":"850","line":72,"column":1,"nodeType":"851","endLine":126,"endColumn":2},{"ruleId":"840","severity":1,"message":"942","line":73,"column":7,"nodeType":"842","messageId":"843","endLine":73,"endColumn":14},{"ruleId":"879","severity":1,"message":"880","line":90,"column":30,"nodeType":"881","messageId":"882","endLine":90,"endColumn":32},{"ruleId":"879","severity":1,"message":"880","line":102,"column":49,"nodeType":"881","messageId":"882","endLine":102,"endColumn":51},{"ruleId":"879","severity":1,"message":"880","line":106,"column":42,"nodeType":"881","messageId":"882","endLine":106,"endColumn":44},{"ruleId":"840","severity":1,"message":"948","line":1,"column":16,"nodeType":"842","messageId":"843","endLine":1,"endColumn":24},{"ruleId":"840","severity":1,"message":"859","line":1,"column":26,"nodeType":"842","messageId":"843","endLine":1,"endColumn":35},{"ruleId":"840","severity":1,"message":"868","line":4,"column":10,"nodeType":"842","messageId":"843","endLine":4,"endColumn":20},{"ruleId":"840","severity":1,"message":"869","line":4,"column":22,"nodeType":"842","messageId":"843","endLine":4,"endColumn":32},{"ruleId":"840","severity":1,"message":"870","line":4,"column":34,"nodeType":"842","messageId":"843","endLine":4,"endColumn":44},{"ruleId":"840","severity":1,"message":"951","line":7,"column":10,"nodeType":"842","messageId":"843","endLine":7,"endColumn":20},{"ruleId":"840","severity":1,"message":"892","line":9,"column":8,"nodeType":"842","messageId":"843","endLine":9,"endColumn":17},{"ruleId":"840","severity":1,"message":"893","line":10,"column":10,"nodeType":"842","messageId":"843","endLine":10,"endColumn":14},{"ruleId":"849","severity":1,"message":"850","line":15,"column":1,"nodeType":"851","endLine":36,"endColumn":2},{"ruleId":"879","severity":1,"message":"880","line":22,"column":24,"nodeType":"881","messageId":"882","endLine":22,"endColumn":26},{"ruleId":"840","severity":1,"message":"909","line":5,"column":8,"nodeType":"842","messageId":"843","endLine":5,"endColumn":20},{"ruleId":"840","severity":1,"message":"906","line":6,"column":8,"nodeType":"842","messageId":"843","endLine":6,"endColumn":16},{"ruleId":"840","severity":1,"message":"905","line":7,"column":8,"nodeType":"842","messageId":"843","endLine":7,"endColumn":12},{"ruleId":"840","severity":1,"message":"861","line":8,"column":8,"nodeType":"842","messageId":"843","endLine":8,"endColumn":15},{"ruleId":"879","severity":1,"message":"880","line":200,"column":70,"nodeType":"881","messageId":"882","endLine":200,"endColumn":72},{"ruleId":"879","severity":1,"message":"880","line":242,"column":73,"nodeType":"881","messageId":"882","endLine":242,"endColumn":75},{"ruleId":"840","severity":1,"message":"964","line":2,"column":10,"nodeType":"842","messageId":"843","endLine":2,"endColumn":17},{"ruleId":"895","severity":1,"message":"896","line":21,"column":72,"nodeType":"897","messageId":"898","endLine":21,"endColumn":73,"suggestions":"965"},{"ruleId":"879","severity":1,"message":"902","line":23,"column":31,"nodeType":"881","messageId":"882","endLine":23,"endColumn":33},{"ruleId":"895","severity":1,"message":"966","line":213,"column":25,"nodeType":"967","messageId":"898","endLine":213,"endColumn":26,"suggestions":"968"},{"ruleId":"895","severity":1,"message":"969","line":213,"column":45,"nodeType":"967","messageId":"898","endLine":213,"endColumn":46,"suggestions":"970"},{"ruleId":"840","severity":1,"message":"949","line":3,"column":8,"nodeType":"842","messageId":"843","endLine":3,"endColumn":17},{"ruleId":"840","severity":1,"message":"855","line":6,"column":8,"nodeType":"842","messageId":"843","endLine":6,"endColumn":17},{"ruleId":"840","severity":1,"message":"971","line":10,"column":8,"nodeType":"842","messageId":"843","endLine":10,"endColumn":14},{"ruleId":"840","severity":1,"message":"972","line":11,"column":8,"nodeType":"842","messageId":"843","endLine":11,"endColumn":16},{"ruleId":"840","severity":1,"message":"973","line":1,"column":10,"nodeType":"842","messageId":"843","endLine":1,"endColumn":20},{"ruleId":"840","severity":1,"message":"974","line":1,"column":22,"nodeType":"842","messageId":"843","endLine":1,"endColumn":34},{"ruleId":"840","severity":1,"message":"949","line":3,"column":8,"nodeType":"842","messageId":"843","endLine":3,"endColumn":17},{"ruleId":"840","severity":1,"message":"855","line":6,"column":8,"nodeType":"842","messageId":"843","endLine":6,"endColumn":17},{"ruleId":"840","severity":1,"message":"949","line":3,"column":8,"nodeType":"842","messageId":"843","endLine":3,"endColumn":17},{"ruleId":"840","severity":1,"message":"855","line":6,"column":8,"nodeType":"842","messageId":"843","endLine":6,"endColumn":17},{"ruleId":"840","severity":1,"message":"949","line":3,"column":8,"nodeType":"842","messageId":"843","endLine":3,"endColumn":17},{"ruleId":"840","severity":1,"message":"855","line":6,"column":8,"nodeType":"842","messageId":"843","endLine":6,"endColumn":17},{"ruleId":"840","severity":1,"message":"861","line":7,"column":8,"nodeType":"842","messageId":"843","endLine":7,"endColumn":15},{"ruleId":"840","severity":1,"message":"975","line":3,"column":8,"nodeType":"842","messageId":"843","endLine":3,"endColumn":21},{"ruleId":"840","severity":1,"message":"976","line":9,"column":8,"nodeType":"842","messageId":"843","endLine":9,"endColumn":17},{"ruleId":"840","severity":1,"message":"977","line":10,"column":8,"nodeType":"842","messageId":"843","endLine":10,"endColumn":18},{"ruleId":"840","severity":1,"message":"978","line":11,"column":8,"nodeType":"842","messageId":"843","endLine":11,"endColumn":16},{"ruleId":"840","severity":1,"message":"979","line":12,"column":8,"nodeType":"842","messageId":"843","endLine":12,"endColumn":23},{"ruleId":"840","severity":1,"message":"980","line":15,"column":8,"nodeType":"842","messageId":"843","endLine":15,"endColumn":18},{"ruleId":"840","severity":1,"message":"981","line":16,"column":8,"nodeType":"842","messageId":"843","endLine":16,"endColumn":21},{"ruleId":"879","severity":1,"message":"880","line":87,"column":17,"nodeType":"881","messageId":"882","endLine":87,"endColumn":19},{"ruleId":"879","severity":1,"message":"880","line":90,"column":23,"nodeType":"881","messageId":"882","endLine":90,"endColumn":25},{"ruleId":"879","severity":1,"message":"880","line":100,"column":19,"nodeType":"881","messageId":"882","endLine":100,"endColumn":21},{"ruleId":"879","severity":1,"message":"880","line":103,"column":23,"nodeType":"881","messageId":"882","endLine":103,"endColumn":25},{"ruleId":"879","severity":1,"message":"880","line":113,"column":19,"nodeType":"881","messageId":"882","endLine":113,"endColumn":21},{"ruleId":"879","severity":1,"message":"880","line":116,"column":17,"nodeType":"881","messageId":"882","endLine":116,"endColumn":19},{"ruleId":"879","severity":1,"message":"880","line":128,"column":23,"nodeType":"881","messageId":"882","endLine":128,"endColumn":25},{"ruleId":"879","severity":1,"message":"880","line":141,"column":40,"nodeType":"881","messageId":"882","endLine":141,"endColumn":42},{"ruleId":"879","severity":1,"message":"880","line":142,"column":44,"nodeType":"881","messageId":"882","endLine":142,"endColumn":46},{"ruleId":"879","severity":1,"message":"880","line":143,"column":48,"nodeType":"881","messageId":"882","endLine":143,"endColumn":50},{"ruleId":"879","severity":1,"message":"880","line":144,"column":52,"nodeType":"881","messageId":"882","endLine":144,"endColumn":54},{"ruleId":"879","severity":1,"message":"880","line":145,"column":56,"nodeType":"881","messageId":"882","endLine":145,"endColumn":58},{"ruleId":"879","severity":1,"message":"880","line":146,"column":56,"nodeType":"881","messageId":"882","endLine":146,"endColumn":58},{"ruleId":"879","severity":1,"message":"880","line":147,"column":52,"nodeType":"881","messageId":"882","endLine":147,"endColumn":54},{"ruleId":"879","severity":1,"message":"880","line":148,"column":48,"nodeType":"881","messageId":"882","endLine":148,"endColumn":50},{"ruleId":"879","severity":1,"message":"880","line":149,"column":44,"nodeType":"881","messageId":"882","endLine":149,"endColumn":46},{"ruleId":"879","severity":1,"message":"880","line":150,"column":40,"nodeType":"881","messageId":"882","endLine":150,"endColumn":42},{"ruleId":"879","severity":1,"message":"880","line":158,"column":22,"nodeType":"881","messageId":"882","endLine":158,"endColumn":24},{"ruleId":"879","severity":1,"message":"880","line":171,"column":40,"nodeType":"881","messageId":"882","endLine":171,"endColumn":42},{"ruleId":"879","severity":1,"message":"880","line":172,"column":44,"nodeType":"881","messageId":"882","endLine":172,"endColumn":46},{"ruleId":"879","severity":1,"message":"880","line":173,"column":48,"nodeType":"881","messageId":"882","endLine":173,"endColumn":50},{"ruleId":"879","severity":1,"message":"880","line":174,"column":52,"nodeType":"881","messageId":"882","endLine":174,"endColumn":54},{"ruleId":"879","severity":1,"message":"880","line":182,"column":22,"nodeType":"881","messageId":"882","endLine":182,"endColumn":24},{"ruleId":"879","severity":1,"message":"880","line":195,"column":40,"nodeType":"881","messageId":"882","endLine":195,"endColumn":42},{"ruleId":"879","severity":1,"message":"880","line":196,"column":44,"nodeType":"881","messageId":"882","endLine":196,"endColumn":46},{"ruleId":"879","severity":1,"message":"880","line":197,"column":48,"nodeType":"881","messageId":"882","endLine":197,"endColumn":50},{"ruleId":"879","severity":1,"message":"880","line":198,"column":44,"nodeType":"881","messageId":"882","endLine":198,"endColumn":46},{"ruleId":"879","severity":1,"message":"880","line":199,"column":40,"nodeType":"881","messageId":"882","endLine":199,"endColumn":42},{"ruleId":"840","severity":1,"message":"949","line":3,"column":8,"nodeType":"842","messageId":"843","endLine":3,"endColumn":17},{"ruleId":"840","severity":1,"message":"855","line":6,"column":8,"nodeType":"842","messageId":"843","endLine":6,"endColumn":17},{"ruleId":"840","severity":1,"message":"862","line":5,"column":8,"nodeType":"842","messageId":"843","endLine":5,"endColumn":16},{"ruleId":"840","severity":1,"message":"937","line":11,"column":8,"nodeType":"842","messageId":"843","endLine":11,"endColumn":25},{"ruleId":"840","severity":1,"message":"982","line":22,"column":8,"nodeType":"842","messageId":"843","endLine":22,"endColumn":22},{"ruleId":"840","severity":1,"message":"983","line":23,"column":8,"nodeType":"842","messageId":"843","endLine":23,"endColumn":22},{"ruleId":"840","severity":1,"message":"984","line":37,"column":8,"nodeType":"842","messageId":"843","endLine":37,"endColumn":16},{"ruleId":"840","severity":1,"message":"973","line":38,"column":10,"nodeType":"842","messageId":"843","endLine":38,"endColumn":20},{"ruleId":"840","severity":1,"message":"974","line":38,"column":22,"nodeType":"842","messageId":"843","endLine":38,"endColumn":34},{"ruleId":"840","severity":1,"message":"869","line":39,"column":10,"nodeType":"842","messageId":"843","endLine":39,"endColumn":20},{"ruleId":"840","severity":1,"message":"985","line":40,"column":10,"nodeType":"842","messageId":"843","endLine":40,"endColumn":18},{"ruleId":"849","severity":1,"message":"850","line":57,"column":1,"nodeType":"851","endLine":556,"endColumn":2},{"ruleId":"849","severity":1,"message":"850","line":64,"column":1,"nodeType":"851","endLine":233,"endColumn":2},{"ruleId":"840","severity":1,"message":"986","line":74,"column":10,"nodeType":"842","messageId":"843","endLine":74,"endColumn":18},{"ruleId":"840","severity":1,"message":"987","line":74,"column":20,"nodeType":"842","messageId":"843","endLine":74,"endColumn":31},{"ruleId":"840","severity":1,"message":"950","line":17,"column":20,"nodeType":"842","messageId":"843","endLine":17,"endColumn":33},{"ruleId":"840","severity":1,"message":"988","line":81,"column":10,"nodeType":"842","messageId":"843","endLine":81,"endColumn":21},{"ruleId":"840","severity":1,"message":"950","line":17,"column":20,"nodeType":"842","messageId":"843","endLine":17,"endColumn":33},{"ruleId":"840","severity":1,"message":"988","line":81,"column":10,"nodeType":"842","messageId":"843","endLine":81,"endColumn":21},{"ruleId":"840","severity":1,"message":"950","line":17,"column":20,"nodeType":"842","messageId":"843","endLine":17,"endColumn":33},{"ruleId":"840","severity":1,"message":"988","line":81,"column":10,"nodeType":"842","messageId":"843","endLine":81,"endColumn":21},{"ruleId":"840","severity":1,"message":"950","line":17,"column":20,"nodeType":"842","messageId":"843","endLine":17,"endColumn":33},{"ruleId":"840","severity":1,"message":"988","line":81,"column":10,"nodeType":"842","messageId":"843","endLine":81,"endColumn":21},{"ruleId":"840","severity":1,"message":"950","line":17,"column":20,"nodeType":"842","messageId":"843","endLine":17,"endColumn":33},{"ruleId":"840","severity":1,"message":"988","line":81,"column":10,"nodeType":"842","messageId":"843","endLine":81,"endColumn":21},{"ruleId":"840","severity":1,"message":"950","line":17,"column":20,"nodeType":"842","messageId":"843","endLine":17,"endColumn":33},{"ruleId":"840","severity":1,"message":"988","line":81,"column":10,"nodeType":"842","messageId":"843","endLine":81,"endColumn":21},{"ruleId":"840","severity":1,"message":"950","line":17,"column":20,"nodeType":"842","messageId":"843","endLine":17,"endColumn":33},{"ruleId":"840","severity":1,"message":"988","line":81,"column":10,"nodeType":"842","messageId":"843","endLine":81,"endColumn":21},{"ruleId":"840","severity":1,"message":"950","line":17,"column":20,"nodeType":"842","messageId":"843","endLine":17,"endColumn":33},{"ruleId":"840","severity":1,"message":"988","line":81,"column":10,"nodeType":"842","messageId":"843","endLine":81,"endColumn":21},{"ruleId":"840","severity":1,"message":"950","line":17,"column":20,"nodeType":"842","messageId":"843","endLine":17,"endColumn":33},{"ruleId":"840","severity":1,"message":"988","line":81,"column":10,"nodeType":"842","messageId":"843","endLine":81,"endColumn":21},{"ruleId":"840","severity":1,"message":"950","line":17,"column":20,"nodeType":"842","messageId":"843","endLine":17,"endColumn":33},{"ruleId":"840","severity":1,"message":"988","line":81,"column":10,"nodeType":"842","messageId":"843","endLine":81,"endColumn":21},{"ruleId":"840","severity":1,"message":"950","line":17,"column":20,"nodeType":"842","messageId":"843","endLine":17,"endColumn":33},{"ruleId":"840","severity":1,"message":"988","line":81,"column":10,"nodeType":"842","messageId":"843","endLine":81,"endColumn":21},{"ruleId":"840","severity":1,"message":"950","line":17,"column":20,"nodeType":"842","messageId":"843","endLine":17,"endColumn":33},{"ruleId":"840","severity":1,"message":"988","line":81,"column":10,"nodeType":"842","messageId":"843","endLine":81,"endColumn":21},{"ruleId":"840","severity":1,"message":"950","line":17,"column":20,"nodeType":"842","messageId":"843","endLine":17,"endColumn":33},{"ruleId":"840","severity":1,"message":"988","line":81,"column":10,"nodeType":"842","messageId":"843","endLine":81,"endColumn":21},{"ruleId":"840","severity":1,"message":"950","line":17,"column":20,"nodeType":"842","messageId":"843","endLine":17,"endColumn":33},{"ruleId":"840","severity":1,"message":"988","line":81,"column":10,"nodeType":"842","messageId":"843","endLine":81,"endColumn":21},{"ruleId":"840","severity":1,"message":"950","line":17,"column":20,"nodeType":"842","messageId":"843","endLine":17,"endColumn":33},{"ruleId":"840","severity":1,"message":"988","line":81,"column":10,"nodeType":"842","messageId":"843","endLine":81,"endColumn":21},{"ruleId":"840","severity":1,"message":"950","line":17,"column":20,"nodeType":"842","messageId":"843","endLine":17,"endColumn":33},{"ruleId":"840","severity":1,"message":"988","line":81,"column":10,"nodeType":"842","messageId":"843","endLine":81,"endColumn":21},{"ruleId":"840","severity":1,"message":"950","line":17,"column":20,"nodeType":"842","messageId":"843","endLine":17,"endColumn":33},{"ruleId":"840","severity":1,"message":"988","line":81,"column":10,"nodeType":"842","messageId":"843","endLine":81,"endColumn":21},{"ruleId":"840","severity":1,"message":"950","line":17,"column":20,"nodeType":"842","messageId":"843","endLine":17,"endColumn":33},{"ruleId":"840","severity":1,"message":"988","line":81,"column":10,"nodeType":"842","messageId":"843","endLine":81,"endColumn":21},{"ruleId":"840","severity":1,"message":"950","line":17,"column":20,"nodeType":"842","messageId":"843","endLine":17,"endColumn":33},{"ruleId":"840","severity":1,"message":"988","line":81,"column":10,"nodeType":"842","messageId":"843","endLine":81,"endColumn":21},"no-native-reassign",["989"],"no-negated-in-lhs",["990"],"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'MailIcon' is defined but never used.","'IPIcon' is defined but never used.","'AdvancedModeIcon' is defined but never used.","'HomeIcon' is defined but never used.","'Whatismyip' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'Switch' is defined but never used.","'Route' is defined but never used.","'BrowserRouter' is defined but never used.","'FormLabel' is defined but never used.","'ScanModeIcon' is defined but never used.","'Radio' is defined but never used.","'RadioGroup' is defined but never used.","'useEffect' is defined but never used.","'Link' is defined but never used.","'Divider' is defined but never used.","'Collapse' is defined but never used.","'Popover' is defined but never used.","'LiveHelpOutlinedIcon' is defined but never used.","'Chip' is defined but never used.","'WhatismyIP' is defined but never used.","'AutomationIcon' is defined but never used.","'scanTarget' is defined but never used.","'targetData' is defined but never used.","'targetTime' is defined but never used.","'chosenMode' is defined but never used.","'scanDate' is defined but never used.","'advancedModeStatus' is defined but never used.","'ScanOnProgress' is assigned a value but never used.","'handleClick' is assigned a value but never used.","'isEmpty' is assigned a value but never used.","'target' is assigned a value but never used.","'setTarget' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'reset' is assigned a value but never used.","'setReset' is assigned a value but never used.","'observer' is defined but never used.","'Result' is defined but never used.","'scanMode' is defined but never used.","'lighten' is defined but never used.","'IconButton' is defined but never used.","'CloseIcon' is defined but never used.","'pureOutput' is defined but never used.","'scannedIn' is defined but never used.","'rows' is defined but never used.","'store' is defined but never used.","no-useless-escape","Unnecessary escape character: \\=.","Literal","unnecessaryEscape",["991","992"],"Unnecessary escape character: \\/.",["993","994"],"Expected '!==' and instead saw '!='.",["995","996"],["997","998"],"'List' is defined but never used.","'ListItem' is defined but never used.","'ListItemProps' is defined but never used.","'ListItemIcon' is defined but never used.","'ListItemText' is defined but never used.","'Button' is defined but never used.","'AddNewMode' is defined but never used.","'type' is assigned a value but never used.","'handleChange' is assigned a value but never used.","'mode' is assigned a value but never used.","'setMode' is assigned a value but never used.",["999","1000"],["1001","1002"],"'MuiAlert' is defined but never used.","'AlertProps' is defined but never used.","'DoneScanning' is assigned a value but never used.",["1003","1004"],["1005","1006"],"'Checkbox' is defined but never used.","'FormControl' is defined but never used.","'FormControlLabel' is defined but never used.","'radio' is assigned a value but never used.","'handleRadioChange' is assigned a value but never used.",["1007","1008"],["1009","1010"],"'profileModel' is defined but never used.","'pingModel' is defined but never used.","'nseModel' is defined but never used.","'targetMode' is defined but never used.","'sourceModel' is defined but never used.","'timingModel' is defined but never used.","'otherModel' is defined but never used.","'DialogContentText' is defined but never used.","'handleCreate' is assigned a value but never used.","'TablePagination' is defined but never used.","'InfoIcon' is defined but never used.","'CVEicon' is defined but never used.","'classes' is assigned a value but never used.","'dataQty' is assigned a value but never used.","'setDataQty' is assigned a value but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","'useState' is defined but never used.","'FormGroup' is defined but never used.","'CheckboxProps' is defined but never used.","'isScanning' is defined but never used.","'scannedTarget' is defined but never used.","'useStyles' is assigned a value but never used.",["1011","1012"],["1013","1014"],"'Typography' is defined but never used.","'createData' is defined but never used.","'TimelineOppositeContent' is defined but never used.","'Paper' is defined but never used.",["1015","1016"],["1017","1018"],"'targetGeo' is defined but never used.","'NmapOutput' is defined but never used.","'boolean' is defined but never used.",["1019","1020"],"Unnecessary escape character: \\P.","TemplateElement",["1021","1022"],"Unnecessary escape character: \\N.",["1023","1024"],"'Select' is defined but never used.","'MenuItem' is defined but never used.","'automation' is defined but never used.","'cveDetection' is defined but never used.","'ListSubheader' is defined but never used.","'InboxIcon' is defined but never used.","'DraftsIcon' is defined but never used.","'SendIcon' is defined but never used.","'DynamicFeedIcon' is defined but never used.","'StarBorder' is defined but never used.","'ExtensionIcon' is defined but never used.","'ExpandMoreIcon' is defined but never used.","'ExpandLessIcon' is defined but never used.","'SetFlags' is defined but never used.","'settings' is defined but never used.","'setRange' is assigned a value but never used.","'setSetRange' is assigned a value but never used.","'handleClick' is defined but never used.","no-global-assign","no-unsafe-negation",{"messageId":"1025","fix":"1026","desc":"1027"},{"messageId":"1028","fix":"1029","desc":"1030"},{"messageId":"1025","fix":"1031","desc":"1027"},{"messageId":"1028","fix":"1032","desc":"1030"},{"messageId":"1025","fix":"1033","desc":"1027"},{"messageId":"1028","fix":"1034","desc":"1030"},{"messageId":"1025","fix":"1035","desc":"1027"},{"messageId":"1028","fix":"1036","desc":"1030"},{"messageId":"1025","fix":"1037","desc":"1027"},{"messageId":"1028","fix":"1038","desc":"1030"},{"messageId":"1025","fix":"1039","desc":"1027"},{"messageId":"1028","fix":"1040","desc":"1030"},{"messageId":"1025","fix":"1041","desc":"1027"},{"messageId":"1028","fix":"1042","desc":"1030"},{"messageId":"1025","fix":"1043","desc":"1027"},{"messageId":"1028","fix":"1044","desc":"1030"},{"messageId":"1025","fix":"1045","desc":"1027"},{"messageId":"1028","fix":"1046","desc":"1030"},{"messageId":"1025","fix":"1047","desc":"1027"},{"messageId":"1028","fix":"1048","desc":"1030"},{"messageId":"1025","fix":"1049","desc":"1027"},{"messageId":"1028","fix":"1050","desc":"1030"},{"messageId":"1025","fix":"1051","desc":"1027"},{"messageId":"1028","fix":"1052","desc":"1030"},{"messageId":"1025","fix":"1053","desc":"1027"},{"messageId":"1028","fix":"1054","desc":"1030"},{"messageId":"1025","fix":"1055","desc":"1027"},{"messageId":"1028","fix":"1056","desc":"1030"},{"messageId":"1025","fix":"1057","desc":"1027"},{"messageId":"1028","fix":"1058","desc":"1030"},{"messageId":"1025","fix":"1059","desc":"1027"},{"messageId":"1028","fix":"1060","desc":"1030"},{"messageId":"1025","fix":"1061","desc":"1027"},{"messageId":"1028","fix":"1062","desc":"1030"},"removeEscape",{"range":"1063","text":"1064"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"1065","text":"1066"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"1067","text":"1064"},{"range":"1068","text":"1066"},{"range":"1069","text":"1064"},{"range":"1070","text":"1066"},{"range":"1071","text":"1064"},{"range":"1072","text":"1066"},{"range":"1073","text":"1064"},{"range":"1074","text":"1066"},{"range":"1075","text":"1064"},{"range":"1076","text":"1066"},{"range":"1077","text":"1064"},{"range":"1078","text":"1066"},{"range":"1079","text":"1064"},{"range":"1080","text":"1066"},{"range":"1081","text":"1064"},{"range":"1082","text":"1066"},{"range":"1083","text":"1064"},{"range":"1084","text":"1066"},{"range":"1085","text":"1064"},{"range":"1086","text":"1066"},{"range":"1087","text":"1064"},{"range":"1088","text":"1066"},{"range":"1089","text":"1064"},{"range":"1090","text":"1066"},{"range":"1091","text":"1064"},{"range":"1092","text":"1066"},{"range":"1093","text":"1064"},{"range":"1094","text":"1066"},{"range":"1095","text":"1064"},{"range":"1096","text":"1066"},{"range":"1097","text":"1064"},{"range":"1098","text":"1066"},[8371,8372],"",[8371,8371],"\\",[8377,8378],[8377,8377],[46430,46431],[46430,46430],[46436,46437],[46436,46436],[1665,1666],[1665,1665],[2346,2347],[2346,2346],[5497,5498],[5497,5497],[5503,5504],[5503,5503],[1687,1688],[1687,1687],[1693,1694],[1693,1693],[3271,3272],[3271,3271],[3277,3278],[3277,3277],[4173,4174],[4173,4173],[4179,4180],[4179,4179],[741,742],[741,741],[8195,8196],[8195,8195],[8215,8216],[8215,8215]]