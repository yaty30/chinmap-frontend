[{"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Backend/frontendData/cveScanOutput.tsx":"1","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Backend/frontendData/isScanning.tsx":"2","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Backend/frontendData/getPortStatus.tsx":"3","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Backend/frontendData/Result.tsx":"4","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/HomeSettings/HomeSettings.tsx":"5","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/Home.tsx":"6","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/ScanResult.tsx":"7","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Mobx/Models/homeSettingsStatus.tsx":"8","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/ScanResults/ScanDetails.tsx":"9","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/ScanResults/WhoIs.tsx":"10","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Backend/frontendData/whoisScan.tsx":"11","/Users/yipjames/Desktop/INS/FYP/chinmap/src/index.tsx":"12","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Views/DefaultScanMode.tsx":"13","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Views/ScanComparison.tsx":"14","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/defaultScanModes/fullPortsScanMode.tsx":"15","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/defaultScanModes/intenseScanMode.tsx":"16","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/defaultScanModes/top100portsScanMode.tsx":"17","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Views/Home.tsx":"18","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Mobx/Models/defaultScanModeStatus.tsx":"19","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/NSE.tsx":"20","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Vulnerability/HTTP.tsx":"21","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Discovery/Targets.tsx":"22","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Discovery/Database.tsx":"23","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/ScanResults/NmapOutput.tsx":"24","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Views/CustomisedScanMode.tsx":"25","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/Target.tsx":"26","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/NewModeOptions.tsx":"27","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Exploit/HTTP.tsx":"28","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Discovery/ServerMessageBlock.tsx":"29","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Discovery/Network.tsx":"30","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/TCPoptions.tsx":"31","/Users/yipjames/Desktop/INS/FYP/chinmap/src/App.tsx":"32","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/Others.tsx":"33","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/Source.tsx":"34","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Vulnerability/Others.tsx":"35","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Discovery/SMTP.tsx":"36","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Discovery/Hadoop.tsx":"37","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Views/Drawer.tsx":"38","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Exploit/SMB.tsx":"39","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Discovery/Broadcast.tsx":"40","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/Drawer.tsx":"41","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Views/ScanHistory.tsx":"42","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Views/ScanResult.tsx":"43","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/defaultScanModes/pingScanMode.tsx":"44","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/CustomisedScanMode.tsx":"45","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/ScanComparison.tsx":"46","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanMode.tsx":"47","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/ScanResults/CVEResult.tsx":"48","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/nonTCPoptions.tsx":"49","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Exploit/Others.tsx":"50","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/Ping.tsx":"51","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Discovery/Server.tsx":"52","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Vulnerability/SMB.tsx":"53","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Exploit/FTP.tsx":"54","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Discovery/IP.tsx":"55","/Users/yipjames/Desktop/INS/FYP/chinmap/src/reportWebVitals.ts":"56","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/defaultScanModes/nonPingScanMode.tsx":"57","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/defaultScanModes/lightningScanMode.tsx":"58","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/target.tsx":"59","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Vulnerability/SSL.tsx":"60","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Discovery/HTTP.tsx":"61","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Vulnerability/FTP.tsx":"62","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/HomeSettings/ScanRangeDisplay.tsx":"63","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/ScanResults/HostsAndPorts.tsx":"64"},{"size":678,"mtime":1614617808030,"results":"65","hashOfConfig":"66"},{"size":33,"mtime":1614531546169,"results":"67","hashOfConfig":"66"},{"size":4079,"mtime":1614617808731,"results":"68","hashOfConfig":"66"},{"size":9329,"mtime":1614652857739,"results":"69","hashOfConfig":"66"},{"size":20199,"mtime":1614652263510,"results":"70","hashOfConfig":"66"},{"size":15638,"mtime":1614652735337,"results":"71","hashOfConfig":"66"},{"size":10468,"mtime":1614179894501,"results":"72","hashOfConfig":"66"},{"size":1171,"mtime":1614652624636,"results":"73","hashOfConfig":"66"},{"size":18882,"mtime":1614507032309,"results":"74","hashOfConfig":"66"},{"size":703,"mtime":1614180203274,"results":"75","hashOfConfig":"66"},{"size":1096,"mtime":1614652852669,"results":"76","hashOfConfig":"66"},{"size":500,"mtime":1612188541082,"results":"77","hashOfConfig":"66"},{"size":211,"mtime":1612328485908,"results":"78","hashOfConfig":"66"},{"size":207,"mtime":1612324657583,"results":"79","hashOfConfig":"66"},{"size":8996,"mtime":1613489966000,"results":"80","hashOfConfig":"66"},{"size":9062,"mtime":1613489966000,"results":"81","hashOfConfig":"66"},{"size":7700,"mtime":1613489966000,"results":"82","hashOfConfig":"66"},{"size":167,"mtime":1612256006489,"results":"83","hashOfConfig":"66"},{"size":3852,"mtime":1614006373442,"results":"84","hashOfConfig":"66"},{"size":7765,"mtime":1613489966000,"results":"85","hashOfConfig":"66"},{"size":4495,"mtime":1613489966000,"results":"86","hashOfConfig":"66"},{"size":4500,"mtime":1613489966000,"results":"87","hashOfConfig":"66"},{"size":4503,"mtime":1613489966000,"results":"88","hashOfConfig":"66"},{"size":990,"mtime":1614245542639,"results":"89","hashOfConfig":"66"},{"size":223,"mtime":1612346221802,"results":"90","hashOfConfig":"66"},{"size":1780,"mtime":1613489966000,"results":"91","hashOfConfig":"66"},{"size":10883,"mtime":1613489966000,"results":"92","hashOfConfig":"66"},{"size":4489,"mtime":1613489966000,"results":"93","hashOfConfig":"66"},{"size":4535,"mtime":1613489966000,"results":"94","hashOfConfig":"66"},{"size":4500,"mtime":1613489966000,"results":"95","hashOfConfig":"66"},{"size":606,"mtime":1613489966000,"results":"96","hashOfConfig":"66"},{"size":897,"mtime":1612255057253,"results":"97","hashOfConfig":"66"},{"size":1829,"mtime":1613489966000,"results":"98","hashOfConfig":"66"},{"size":1731,"mtime":1613489966000,"results":"99","hashOfConfig":"66"},{"size":4501,"mtime":1613489966000,"results":"100","hashOfConfig":"66"},{"size":4491,"mtime":1613489966000,"results":"101","hashOfConfig":"66"},{"size":4497,"mtime":1613489966000,"results":"102","hashOfConfig":"66"},{"size":175,"mtime":1612188434038,"results":"103","hashOfConfig":"66"},{"size":4486,"mtime":1613489966000,"results":"104","hashOfConfig":"66"},{"size":4506,"mtime":1613489966000,"results":"105","hashOfConfig":"66"},{"size":9482,"mtime":1614317280868,"results":"106","hashOfConfig":"66"},{"size":195,"mtime":1612327203632,"results":"107","hashOfConfig":"66"},{"size":191,"mtime":1612266398943,"results":"108","hashOfConfig":"66"},{"size":8951,"mtime":1613882659609,"results":"109","hashOfConfig":"66"},{"size":4977,"mtime":1614008998712,"results":"110","hashOfConfig":"66"},{"size":19442,"mtime":1614053519586,"results":"111","hashOfConfig":"66"},{"size":11741,"mtime":1613845963672,"results":"112","hashOfConfig":"66"},{"size":703,"mtime":1614144548617,"results":"113","hashOfConfig":"66"},{"size":487,"mtime":1613489966000,"results":"114","hashOfConfig":"66"},{"size":4495,"mtime":1613489966000,"results":"115","hashOfConfig":"66"},{"size":1727,"mtime":1613489966000,"results":"116","hashOfConfig":"66"},{"size":4497,"mtime":1613489966000,"results":"117","hashOfConfig":"66"},{"size":4492,"mtime":1613489966000,"results":"118","hashOfConfig":"66"},{"size":4486,"mtime":1613489966000,"results":"119","hashOfConfig":"66"},{"size":4485,"mtime":1613489966000,"results":"120","hashOfConfig":"66"},{"size":425,"mtime":1612188541084,"results":"121","hashOfConfig":"66"},{"size":8779,"mtime":1613489966000,"results":"122","hashOfConfig":"66"},{"size":10073,"mtime":1613489966000,"results":"123","hashOfConfig":"66"},{"size":456,"mtime":1613489966000,"results":"124","hashOfConfig":"66"},{"size":4492,"mtime":1613489966000,"results":"125","hashOfConfig":"66"},{"size":4491,"mtime":1613489966000,"results":"126","hashOfConfig":"66"},{"size":4492,"mtime":1613489966000,"results":"127","hashOfConfig":"66"},{"size":7753,"mtime":1614652699195,"results":"128","hashOfConfig":"66"},{"size":3626,"mtime":1613844819990,"results":"129","hashOfConfig":"66"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1122jn7",{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"138","messages":"139","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"140","messages":"141","errorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"146"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"149","messages":"150","errorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"159"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"159"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"159"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"159"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"169","messages":"170","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"146"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"176","messages":"177","errorCount":0,"warningCount":35,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"179"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"182","messages":"183","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"184","messages":"185","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"196"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"199","messages":"200","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"201","messages":"202","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"192"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"146"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"209","messages":"210","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"211","messages":"212","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213","usedDeprecatedRules":"214"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"217","usedDeprecatedRules":"214"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"220","usedDeprecatedRules":"221"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"224","messages":"225","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"230","usedDeprecatedRules":"146"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"233","messages":"234","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"159"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"159"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"241","messages":"242","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"243","messages":"244","errorCount":0,"warningCount":35,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"245","messages":"246","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"247","messages":"248","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"253","messages":"254","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"255","usedDeprecatedRules":"256"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"259","messages":"260","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"261","usedDeprecatedRules":"214"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"264"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"267","messages":"268","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"269","messages":"270","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"271","usedDeprecatedRules":"159"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"274","messages":"275","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"276","messages":"277","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"278","messages":"279","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"280","usedDeprecatedRules":"214"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"283","messages":"284","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"285"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Backend/frontendData/cveScanOutput.tsx",[],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Backend/frontendData/isScanning.tsx",[],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Backend/frontendData/getPortStatus.tsx",[],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Backend/frontendData/Result.tsx",[],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/HomeSettings/HomeSettings.tsx",["288","289","290","291","292","293","294","295","296","297"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/Home.tsx",["298","299","300","301","302","303","304","305","306","307","308","309","310","311","312","313","314","315","316","317","318","319","320","321","322"],"import React, {useState, useEffect} from 'react';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport { Switch, Route, Link, BrowserRouter } from \"react-router-dom\";\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography'\nimport TextField from '@material-ui/core/TextField';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Select from '@material-ui/core/Select';\nimport FormControl from '@material-ui/core/FormControl';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport Button from '@material-ui/core/Button';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Divider from '@material-ui/core/Divider';\nimport Collapse from '@material-ui/core/Collapse';\nimport Popover from '@material-ui/core/Popover';\nimport LiveHelpOutlinedIcon from '@material-ui/icons/LiveHelpOutlined';\nimport Chip from '@material-ui/core/Chip';\nimport { observer } from 'mobx-react-lite'\n\nimport AutomationIcon from '@material-ui/icons/BrightnessAuto';\nimport ScanRangeDisplay from './HomeSettings/ScanRangeDisplay'\n\nimport Settings from './HomeSettings/HomeSettings'\nimport { customisedScanModes } from './NewScanModeArray'\n\nimport { scanTarget, targetData, targetTime, chosenMode, scanDate } from './target'\n\n// Backend\nimport { isScanning } from '../Backend/frontendData/isScanning'\nimport scanModeData from '../Backend/frontendData/scanModes/default.json'\n\n// Mobx\nimport homeSettingsStatus from '../Mobx/Models/homeSettingsStatus'\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    paper: {\n      padding: theme.spacing(2),\n      textAlign: 'left',\n      backgroundColor: \"#fefefe\",\n      color: \"#333333\",\n      minHeight: 155,\n    },\n    centerGrid: {\n        textAlign: \"center\",\n        marginTop: 15,\n    },\n    typography: {\n      padding: theme.spacing(2),\n      width: 350,\n    },\n  }),\n);\n\nconst ScanOnProgress = () => {\n  const [open, setOpen] = useState(true);\n\n  const handleClick = () => {\n    setOpen(true);\n  };\n\n  const handleClose = (event: React.SyntheticEvent | React.MouseEvent, reason?: string) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    setOpen(false);\n  };\n\n  return (\n    <div>\n      {isScanning.map((status) => (\n          status === true ?\n              <>\n                  <Snackbar\n                      anchorOrigin={{\n                          vertical: 'bottom',\n                          horizontal: 'left',\n                      }}\n                      open={open}\n                      autoHideDuration={6000}\n                      onClose={handleClose}\n                      message=\"Scanning is progressing...\"\n                      action={\n                          <React.Fragment>\n                          <IconButton size=\"small\" aria-label=\"close\" color=\"inherit\" onClick={handleClose}>\n                              <CloseIcon fontSize=\"small\" />\n                          </IconButton>\n                          </React.Fragment>\n                      }\n                      />\n              </>\n          :\n              null\n      ))}\n    </div>\n  );\n}\n\nexport default observer (() => {\n  const classes = useStyles();\n  const [scanMode, setScanMode] = useState('');\n  const [isEmpty, setIsEmpty] = useState(true);\n\n  const handleChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n    setScanMode(event.target.value as string);\n  };\n\n  const [target, setTarget] = useState(\"\");\n  const handleScanTarget = (event: React.ChangeEvent<{ value: unknown }>) => {\n    homeSettingsStatus.setTarget(event.target.value as string)\n    homeSettingsStatus.target.length < 1 || scanMode == \"\" ? setIsEmpty(true) : setIsEmpty(false);\n    homeSettingsStatus.setRange('none');\n    homeSettingsStatus.setRangeTarget('');\n    setTargetVal(event.target.value as string)\n  }\n\n  const [reset, setReset] = useState(false);\n  const handleReset = () => {\n    homeSettingsStatus.setAuto(false);\n    homeSettingsStatus.setCve(false);\n    homeSettingsStatus.setPn(false);\n    homeSettingsStatus.setWhoIs(false);\n    homeSettingsStatus.setRange('none');\n    homeSettingsStatus.setTarget('');\n    homeSettingsStatus.setRangeTarget('');\n    setTargetVal('');\n  }\n\n  const [targetVal, setTargetVal] = useState('');\n\n\n  return (\n    <div className={classes.root}>\n      <form method='post' action=\"http://localhost:5000/runAPI\">\n        <Grid container spacing={5} justify=\"center\" alignItems=\"center\">\n          <Grid item xs={10}>\n            <Paper className={classes.paper}>\n                <Typography variant=\"h6\">\n                    Scan Information\n                </Typography>\n                <br/>\n                <div style={{marginTop: 25, textAlign: \"center\"}}>\n                  <Tooltip title=\"Example: scanme.nmap.org, 209.168.29.115, 192.168.1.0/24\" aria-label=\"add\" arrow placement=\"top\">\n                      <TextField \n                          id=\"homeTargetField\"\n                          label=\"Target IP or Domain\"\n                          variant=\"outlined\" \n                          size=\"small\"\n                          name=\"target\"\n                          style={{\n                              width: \"70%\",\n                              textAlignLast: \"center\",\n                          }}\n                          onChange={handleScanTarget}\n                          value={homeSettingsStatus.target}\n                      />\n                  </Tooltip>\n                </div>\n                <Grid container spacing={3}>\n                  <Grid item xs={12} className={classes.centerGrid}>\n                      <Settings />\n                  </Grid>\n                  <Grid item xs={12}>\n                    <table style={{width: \"100%\",textAlign: \"center\"}}>\n                      <tbody>\n                        <tr>\n                          <td style={{width: \"25%\"}}>\n                            <Button \n                              variant=\"outlined\" \n                              style={{\n                                width: \"100%\", \n                                whiteSpace: \"nowrap\",\n                                cursor: 'default',\n                              }}\n                              size=\"small\"\n                              color=\"primary\"\n                              disabled={homeSettingsStatus.automation === true ? false : true}\n                            >\n                              Automation\n                            </Button>\n                          </td>\n                          <td style={{width: \"25%\"}}>\n                            <Button \n                              variant=\"outlined\" \n                              style={{\n                                width: \"100%\", \n                                whiteSpace: \"nowrap\",\n                                cursor: 'default',\n                              }}\n                              size=\"small\"\n                              color=\"primary\"\n                              disabled={homeSettingsStatus.cve === true ? false : true}\n                            >\n                              CVE Detection\n                            </Button>\n                          </td>\n                          <td style={{width: \"25%\"}}>\n                            <Button \n                              variant=\"outlined\" \n                              style={{\n                                width: \"100%\", \n                                whiteSpace: \"nowrap\",\n                                cursor: 'default',\n                              }}\n                              size=\"small\"\n                              color=\"primary\"\n                              disabled={homeSettingsStatus.pn === true ? false : true}\n                            >\n                              Ping Block Bypass\n                            </Button>\n                          </td>\n                          <td style={{width: \"25%\"}}>\n                            <Button \n                              variant=\"outlined\" \n                              style={{\n                                width: \"100%\", \n                                whiteSpace: \"nowrap\",\n                                cursor: 'default',\n                              }}\n                              size=\"small\"\n                              color=\"primary\"\n                              disabled={homeSettingsStatus.whoIs === true ? false : true}\n                            >\n                              WhoIs\n                            </Button>\n                          </td>\n                        </tr>\n                        <tr>\n                          <td colSpan={2}>\n                            <ScanRangeDisplay />\n                          </td>\n                          <td colSpan={3}>\n                            <Button \n                              variant=\"outlined\" \n                              style={{\n                                width: \"100%\", \n                                whiteSpace: \"nowrap\",\n                                cursor: 'default',\n                                textTransform: \"capitalize\",\n                              }}\n                              size=\"small\"\n                              color=\"primary\"\n                              disabled={homeSettingsStatus.flag > 0 ? false : true}\n                            >\n                              Flags: &nbsp;{homeSettingsStatus.flag}\n                            </Button>\n                          </td>\n                        </tr>\n                      </tbody>\n                    </table>\n                  </Grid>\n                </Grid>\n            </Paper>\n          </Grid>\n\n          <Grid item xs={10}>\n              <Paper className={classes.paper}>\n                  <Typography variant=\"h6\">\n                      Scan Mode\n                  </Typography>\n                  <div style={{textAlign: \"center\",marginTop: 15,marginLeft: 70}}>\n                      <FormControl variant=\"outlined\" style={{width: \"100%\"}}>\n                          <InputLabel id=\"demo-simple-select-outlined-label\">Scan Mode</InputLabel>\n                            <Select\n                                labelId=\"demo-simple-select-outlined-label\"\n                                id=\"demo-simple-select-outlined\"\n                                value={scanMode}\n                                onChange={handleChange}\n                                label=\"Scan Mode\"\n                                style={{\n                                    width: \"85%\",\n                                    textAlign: \"center\",\n                                }}\n                            >\n                                <ListSubheader>Default Scan Modes</ListSubheader>\n                                {scanModeData.map((data, index) => (\n                                  data.cardInfo.map((data, index) => (\n                                    <MenuItem value={data.name} key={index} className=\"default\">{data.name}</MenuItem>\n                                  ))\n                                ))}\n                                \n                                {/* <ListSubheader>Customised Scan Modes</ListSubheader>\n                                {customisedScanModes.map((modes) => (\n                                  <MenuItem value={modes.value} className=\"customised\">{modes.name}</MenuItem>\n                                ))} */}\n                            </Select>\n                        </FormControl>\n                    </div>\n                </Paper>\n            </Grid>\n            \n          \n          {/* Scan data temporary storing */}\n    \n          <div style={{position: 'fixed', width: 865, bottom: 10}}>\n          <div style={{display: \"\"}}>\n            <input type=\"text\" readOnly name=\"nm\" value={homeSettingsStatus.rangeTarget === '' ? targetVal : homeSettingsStatus.rangeTarget} />\n            <input type=\"text\" readOnly name=\"auto\" value={homeSettingsStatus.automation === true ? \"true\" : \"false\"} />\n            <input type=\"text\" readOnly name=\"cve\" value={homeSettingsStatus.cve === true ? \"true\" : \"false\"} />\n            <input type=\"text\" readOnly name=\"pbb\" value={homeSettingsStatus.pn === true ? \"true\" : \"false\"} />\n            <input type=\"text\" readOnly name=\"whois\" value={homeSettingsStatus.whoIs === true ? \"true\" : \"false\"} />\n            <input type=\"text\" readOnly name=\"scanMode\" value={scanMode}/>\n            <input type=\"text\" readOnly name=\"scanRange\" value={homeSettingsStatus.range}/>\n          </div>\n\n            <Paper className={classes.paper} style={{minHeight: 0,}}>\n                  <Button \n                    color=\"primary\"\n                    onClick={handleReset}\n                  >\n                    Reset\n                  </Button>\n                  {isScanning.map((isScanning) => (\n                    isScanning === true ?\n                      <>\n                        <Tooltip title=\"Previous scan is progressing, please wait...\" arrow placement=\"top\">\n                          <Typography \n                            style={{\n                              display: \"inline-block\",\n                              position: \"relative\",\n                              top: 6,\n                              right: 5,\n                              color: \"lightgrey\",\n                              float: \"right\",\n                              cursor: \"default\",\n                              userSelect: \"none\",\n                              textTransform: \"uppercase\",\n                            }}\n                          >\n                            Scan\n                          </Typography>\n                        </Tooltip>\n                      </>\n                      :\n                      homeSettingsStatus.target === \"\" ?\n                      <>\n                        <Tooltip title=\"Please Enter the Target.\" arrow placement=\"top\">\n                          <span \n                            color=\"primary\" \n                            style={{\n                              float: \"right\",\n                            }}\n                            id=\"scanBtnDisabled\"\n                          >\n                            Scan\n                          </span>\n                        </Tooltip>\n                      </>\n                      :\n                      <>\n                        <input \n                          color=\"primary\" \n                          style={{\n                            float: \"right\",\n                          }}\n                          type=\"submit\"\n                          value=\"Scan\"\n                          id=\"scanBtn\"\n                        />\n                      </> \n                  ))}\n              </Paper>\n              {isScanning.map((isScanning) => (\n                  isScanning === true ?\n                    <>\n                      <Tooltip title=\"Previous scan is progressing, please wait...\" arrow placement=\"top\">\n                        <LinearProgress style={{height: 5, position:\"relative\",bottom:4}}/>\n                      </Tooltip>\n                    </>\n                      :\n                    null\n              ))}\n          </div>\n        </Grid>\n      </form>\n    </div>\n  );\n})","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/ScanResult.tsx",["323","324","325","326","327","328","329","330","331","332","333","334","335","336","337","338","339","340","341","342","343"],"import React, {useState} from 'react';\nimport { makeStyles, createStyles, Theme, lighten } from '@material-ui/core/styles';\nimport { Switch, Route, Link, BrowserRouter } from \"react-router-dom\";\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography'\nimport TextField from '@material-ui/core/TextField';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Select from '@material-ui/core/Select';\nimport FormControl from '@material-ui/core/FormControl';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Divider from '@material-ui/core/Divider';\nimport Button from '@material-ui/core/Button';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport Tabs from '@material-ui/core/Tabs';\nimport Chip from '@material-ui/core/Chip';\nimport Tab from '@material-ui/core/Tab';\nimport Box from '@material-ui/core/Box';\nimport AppBar from '@material-ui/core/AppBar';\nimport { Page, Text, View, Document, StyleSheet } from '@react-pdf/renderer';\nimport LinearProgress from '@material-ui/core/LinearProgress';\n\n// Backend\nimport { isScanning } from '../Backend/frontendData/isScanning'\nimport { pureOutput } from '../Backend/frontendData/Result'\nimport scannedIn from '../Backend/frontendData/scannedIn.json'\nimport scannedTarget from '../Backend/frontendData/scannedTargetForSelect.json'\nimport { rows } from '../Backend/frontendData/getPortStatus'\n\n// Components\nimport NmapOutput from './ScanResults/NmapOutput'\nimport HostsAndPorts from './ScanResults/HostsAndPorts'\nimport ScanDetails from './ScanResults/ScanDetails'\nimport CVEResult from './ScanResults/CVEResult'\nimport WhoIs from './ScanResults/WhoIs'\nimport ExportResult from './ScanResults/ExportResult'\n\n// Mobx Global Status\nimport { observer } from 'mobx-react-lite'\nimport storeTarget from '../Mobx/Models/resultSelectStatus'\n\nconst mainStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    paper: {\n      padding: theme.spacing(2),\n      textAlign: 'left',\n      backgroundColor: \"#fefefe\",\n      color: \"#333333\",\n    },\n    centerGrid: {\n        textAlign: \"center\",\n        marginTop: 15,\n    },\n    btnTabs: {\n        textTransform: \"capitalize\",\n    },\n    cardRoot: {\n        marginTop: 25,\n    },\n    title: {\n        fontSize: 14,\n        whiteSpace: \"pre-line\",\n    },\n    pos: {\n        marginBottom: 12,\n    },\n    defaultShow: {\n\n    },\n    defaultHide: {\n        display: \"none\",\n    },\n    centering: {\n      textAlignLast: \"center\",\n      width: \"70%\",\n      userSelect: \"none\",\n    },\n    datepicker: {\n      marginLeft: theme.spacing(1),\n      marginRight: theme.spacing(1),\n      width: 200,\n    },\n  }),\n);\n\ninterface TabPanelProps {\n    children?: React.ReactNode;\n    index: any;\n    value: any;\n  }\n  \n  const TabPanel = (props: TabPanelProps) => {\n    const { children, value, index, ...other } = props;\n  \n    return (\n      <div\n        role=\"tabpanel\"\n        hidden={value !== index}\n        id={`simple-tabpanel-${index}`}\n        aria-labelledby={`simple-tab-${index}`}\n        {...other}\n      >\n        {value === index && (\n          <Box p={3}>\n            <Typography>{children}</Typography>\n          </Box>\n        )}\n      </div>\n    );\n  }\n  \nconst a11yProps = (index: any) => {\n  return {\n    id: `simple-tab-${index}`,\n    'aria-controls': `simple-tabpanel-${index}`,\n  };\n}\n\nexport default observer (() => {\n  const classes = mainStyles();\n\n  const handleChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n    // setTarget(event.target.value as any);\n    storeTarget.setTarget(event.target.value as any)\n  };\n\n  const [value, setValue] = React.useState(0);\n\n  const handleTabChange = (event: React.ChangeEvent<{}>, newValue: number) => {\n    setValue(newValue);\n  };\n\n  const handleClickJO = () => {\n    console.log(scannedIn)\n  }\n\n  const [open, setOpen] = React.useState(true);\n  const [checked, setChecked] = React.useState(true);\n\n  const handleClose = () => {\n    setOpen(false);\n    setChecked((prev) => !prev);\n  };\n  const handleToggle = () => {\n    setOpen(!open);\n  };\n\n  function FadeOutTime() {\n    var min = 1500;\n    var max = 4000;\n    \n    return Math.random() * (max - min) + min;\n  }\n\n  return (\n    <div className={classes.root}>\n       {isScanning.map((status) => (\n           status === true ?\n            <>\n              <div style={{textAlign: \"center\"}}>\n                <Tooltip title=\"Previous scan is progressing, please wait...\" arrow placement=\"top\">\n                  <LinearProgress style={{width: \"100%\",marginLeft:0, height: 5, color: \"#333\"}} />\n                </Tooltip>\n              </div>\n            </>\n            :\n            null\n        ))}\n      <Grid container spacing={5} justify=\"center\" alignItems=\"center\">\n        <Grid item xs={12}>\n          {/* <button onClick={handleClickJO}>click</button> */}\n                <Paper className={classes.paper}>\n                    <table style={{width: \"100%\"}}>\n                      <tr>\n                        <td style={{width: \"20%\"}}>\n                            <Typography variant=\"h6\">\n                              Scan Result\n                            </Typography>\n                        </td>\n                        <td style={{textAlign: \"right\"}}>\n                            <span style={{marginRight: 120, position: \"relative\", top: 5,}}>\n                              \n                            </span>\n                        </td>\n                      </tr>\n                    </table>\n\n                    \n                    <div style={{textAlign: \"center\",marginTop: 15,marginLeft: 120}}>\n                        <FormControl variant=\"outlined\" style={{width: \"100%\"}}>\n                            <InputLabel id=\"demo-simple-select-outlined-label\">\n                                Choose a target IP or Domain\n                            </InputLabel>\n                            <Select\n                                labelId=\"demo-simple-select-outlined-label\"\n                                id=\"demo-simple-select-outlined\"\n                                value={storeTarget.target}\n                                onChange={handleChange}\n                                label=\"Choose a target IP or Domain\"\n                                style={{\n                                    width: \"83%\",\n                                    textAlign: \"center\",\n                                }}\n                            >\n                              {scannedTarget.map((target) => (\n                                  <MenuItem \n                                    key={target.id}\n                                    value={target.id}\n                                  >\n                                    {target.target} - {target.runTime}\n                                  </MenuItem>\n                              ))}\n                            </Select>\n                        </FormControl>\n                    </div>\n                    { \n                        storeTarget.target === \"\" ?\n                        null\n                            :\n                        <>\n                            <br/><Divider variant=\"middle\" />\n                            <div id=\"scanResultTab\">\n                                <AppBar position=\"static\">\n                                    <Tabs \n                                        value={value} \n                                        onChange={handleTabChange} \n                                        indicatorColor=\"primary\"\n                                        textColor=\"primary\"\n                                        centered>\n                                      <Tab label=\"Nmap Output\" {...a11yProps(0)} style={{textTransform: \"capitalize\"}} />\n                                      <Tab label=\"Hosts and Ports\" {...a11yProps(1)} style={{textTransform: \"capitalize\"}} />\n                                      <Tab label=\"Scan Details\" {...a11yProps(2)} style={{textTransform: \"capitalize\"}} />\n                                      <Tab label=\"CVE\" {...a11yProps(3)} style={{textTransform: \"capitalize\"}} />\n                                      <Tab label=\"WhoIs\" {...a11yProps(4)} style={{textTransform: \"capitalize\"}} />\n                                      <Tab label=\"Export Results\" {...a11yProps(5)} style={{textTransform: \"capitalize\"}} />\n                                    </Tabs>\n                                </AppBar>\n                                <Paper className={classes.paper}>\n                                    <TabPanel value={value} index={0}>\n                                        <NmapOutput />\n                                    </TabPanel>\n                                    <TabPanel value={value} index={1}>\n                                      <div style={{whiteSpace: \"normal\"}}>\n                                        <HostsAndPorts />\n                                      </div>\n                                    </TabPanel>\n                                    <TabPanel value={value} index={2}>\n                                        <ScanDetails />\n                                    </TabPanel>\n                                    <TabPanel value={value} index={3}>\n                                        <CVEResult />\n                                    </TabPanel>\n                                    <TabPanel value={value} index={4}>\n                                        <WhoIs />\n                                    </TabPanel>\n                                    <TabPanel value={value} index={5}>\n                                        <ExportResult />\n                                    </TabPanel>\n                                </Paper>\n                                <Button\n                                  style={{\n                                    width: \"100%\",\n                                    marginTop: 15,\n                                  }}\n                                  variant=\"outlined\"\n                                  color=\"secondary\"\n                                >\n                                  Delete Result\n                                </Button>\n                            </div>\n                        </>\n                    }\n                    \n                </Paper>\n            </Grid>\n\n      </Grid>\n      \n    </div>\n  );\n}\n)",["344","345"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Mobx/Models/homeSettingsStatus.tsx",[],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/ScanResults/ScanDetails.tsx",["346","347","348","349","350","351","352","353","354","355","356","357","358","359","360","361","362","363","364","365","366","367","368","369","370","371"],"import React, {useState} from 'react';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport Divider from '@material-ui/core/Divider';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Tooltip from '@material-ui/core/Tooltip';\n\nimport { scanTarget, targetData, targetTime, chosenMode, scanDate } from '../target'\n\n// Backend\nimport { isScanning } from '../../Backend/frontendData/isScanning'\nimport { pureOutput } from '../../Backend/frontendData/Result'\nimport scannedIn from '../../Backend/frontendData/scannedIn.json'\nimport scannedTarget from '../../Backend/frontendData/scannedTargetForSelect.json'\nimport { rows } from '../../Backend/frontendData/getPortStatus'\n\n// Mobx Global Status\nimport storeTarget from '../../Mobx/Models/resultSelectStatus'\n\nconst mainStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    paper: {\n      padding: theme.spacing(2),\n      textAlign: 'left',\n      backgroundColor: \"#fefefe\",\n      color: \"#333333\",\n    },\n    centerGrid: {\n        textAlign: \"center\",\n        marginTop: 15,\n    },\n    btnTabs: {\n        textTransform: \"capitalize\",\n    },\n    cardRoot: {\n        marginTop: 25,\n    },\n    title: {\n        fontSize: 14,\n        whiteSpace: \"pre-line\",\n    },\n    pos: {\n        marginBottom: 12,\n    },\n    defaultShow: {\n\n    },\n    defaultHide: {\n        display: \"none\",\n    },\n    centering: {\n      textAlignLast: \"center\",\n      width: \"70%\",\n      userSelect: \"none\",\n    },\n    datepicker: {\n      marginLeft: theme.spacing(1),\n      marginRight: theme.spacing(1),\n      width: 200,\n    },\n  }),\n);\n\nexport default () => {\n  const classes = mainStyles();\n\n  const handleClick = () => {\n    console.log(targetData);\n  }\n\n  return (\n    <>\n        {scannedIn.map((data) => (\n          data.id !=  storeTarget.target ||  storeTarget.target === \"\" || data.target === \"\" ?\n              null\n                  :\n              <>\n              {/* <button onClick={handleClick}>click</button> */}\n              <form \n                  className={classes.root} \n                  noValidate \n                  autoComplete=\"off\"\n              >\n                  <br/>\n                  <Grid container justify=\"center\" spacing={2} style={{width: \"100%\", textAlign: \"center\"}}>\n                    <>\n                      <Grid item xs={12} style={{width: \"100%\", marginBottom: 15,}}>\n                        <div style={{textAlign: \"left\"}}><FormLabel component=\"legend\">Basic Details: </FormLabel></div>\n                      </Grid>\n\n                      <Grid item xs={12} style={{width: \"100%\", marginBottom: 55}}>\n                        <TextField\n                            className={classes.centering} \n                            id=\"outlined-basic\" \n                            label=\"Scan Target\" \n                            variant=\"outlined\" \n                            multiline\n                            style={{\n                              width: \"85%\",\n                            }}\n                            value={data.target}\n                            inputProps={{\n                                readOnly: true,\n                            }}\n                        />\n                      </Grid>\n                    \n\n                      <Grid item xs={6} style={{width: \"100%\", marginBottom: 55}}>\n                        <TextField\n                            className={classes.centering} \n                            id=\"outlined-basic\" \n                            label=\"Scan Time\" \n                            variant=\"outlined\" \n                            value={data.time}\n                            inputProps={{\n                                readOnly: true,\n                            }}\n                        />\n                      </Grid>\n\n                      <Grid item xs={6} style={{width: \"100%\"}}>\n                        <TextField\n                            className={classes.centering} \n                            id=\"outlined-basic\" \n                            label=\"Chosen Scan Mode\" \n                            variant=\"outlined\" \n                            value={\n                              data.scanMode == \"\" ? \"Regular Scan\" : data.scanMode\n                            }\n                            inputProps={{\n                                readOnly: true,\n                            }}\n                          />\n                      </Grid>\n                      \n                      <Grid item xs={6} style={{width: \"100%\", marginBottom: 55}}>\n                        <Tooltip \n                          arrow \n                          placement=\"top\"\n                          title={\n                            (parseInt(data.runTime)/60).toFixed(3) + \" min; \" + (parseInt(data.runTime)/60/60).toFixed(3) + \" hr\"\n                          } \n                        >\n                          <TextField\n                              className={classes.centering} \n                              id=\"outlined-basic\" \n                              label=\"Target Scanned In\" \n                              variant=\"outlined\" \n                              value={data.runTime}\n                              inputProps={{\n                                  readOnly: true,\n                              }}\n                            />\n                          </Tooltip>\n                      </Grid>\n                  \n                  \n                      <Grid item xs={6} style={{width: \"100%\"}}>\n                        <TextField\n                          className={classes.centering} \n                          id=\"outlined-basic\" \n                          label='Scan Date [Y-M-D]' \n                          variant=\"outlined\" \n                          value={data.date}\n                          inputProps={{\n                              readOnly: true,\n                          }}\n                        />\n                      </Grid>\n                      \n                      <Grid item xs={6} style={{width: \"100%\", marginBottom: 55}}>\n                        <TextField\n                            className={classes.centering} \n                            id=\"outlined-basic\" \n                            label=\"Scan Latency\" \n                            variant=\"outlined\" \n                            multiline={\n                              data.latency.length > 17 ? true : false\n                            }\n                            value={\n                              data.latency == '' ? \"Target host is down\" \n                              //   :\n                              // data.latency.length > 17 ? data.target + \": \" + data.latency\n                                 :\n                              data.latency\n                            }\n                            inputProps={{\n                                readOnly: true,\n                            }}\n                          />\n                      </Grid>\n\n                      <Grid item xs={6} style={{width: \"100%\", marginBottom: 55}}>\n                        <TextField\n                            className={classes.centering} \n                            id=\"outlined-basic\" \n                            label=\"Up Host\" \n                            variant=\"outlined\" \n                            value={data.upHost == '' ? \"Target host is down\" : data.upHost}\n                            inputProps={{\n                                readOnly: true,\n                            }}\n                          />\n                      </Grid>\n                      \n                      <Grid item xs={6} style={{width: \"100%\", marginBottom: 55}}>\n                        <TextField\n                            className={classes.centering} \n                            id=\"outlined-basic\" \n                            label=\"Closed Port Qty.\" \n                            variant=\"outlined\" \n                            multiline={\n                              data.notShown.length > 15 ? true : false\n                            }\n                            value={data.notShown == '' ? \"Target host is down\" : data.notShown}\n                            inputProps={{\n                                readOnly: true,\n                            }}\n                          />\n                      </Grid>\n\n                      <Grid item xs={6} style={{width: \"100%\", marginBottom: 55}}>\n                        <TextField\n                            className={classes.centering} \n                            id=\"outlined-basic\" \n                            label=\"Nmap Version\" \n                            variant=\"outlined\" \n                            multiline\n                            value={data.nmapVer}\n                            inputProps={{\n                                readOnly: true,\n                            }}\n                          />\n                      </Grid>\n\n                    <Grid item xs={12} style={{width: \"100%\", marginBottom: 15, marginTop: 25,}}>\n                      <Divider /><br/>\n                      <div style={{textAlign: \"left\"}}><FormLabel component=\"legend\">Advanced Details: </FormLabel></div>\n                    </Grid>\n                      \n                      <Grid item xs={12} style={{width: \"100%\", marginBottom: 55}}>\n                        <TextField\n                            className={classes.centering} \n                            id=\"outlined-basic\" \n                            label=\"Target OS\" \n                            variant=\"outlined\" \n                            style={{\n                              width: \"85%\",\n                            }}\n                            multiline={\n                              data.os.length > 5 ? true : false\n                            }\n                            value={\n                              data.os == \"\" ? \"No OS found or target is currently down\" : data.os\n                            }\n                            inputProps={{\n                                readOnly: true,\n                            }}\n                          />\n                      </Grid>\n\n                      <Grid item xs={6} style={{width: \"100%\", marginBottom: 55}}>\n                        <TextField\n                            className={classes.centering} \n                            id=\"outlined-basic\" \n                            label=\"Network Distance\" \n                            variant=\"outlined\" \n                            multiline={\n                              data.hop.length > 5 ? true : false\n                            }\n                            value={\n                              data.hop == \"\" ? \n                                \"Enable -v to discover\" \n                                : \n                              data.hop\n\n                            }\n                            inputProps={{\n                                readOnly: true,\n                            }}\n                          />\n                      </Grid>\n                      \n                      <Grid item xs={6} style={{width: \"100%\", marginBottom: 55}}>\n                        <TextField\n                            className={classes.centering} \n                            id=\"outlined-basic\" \n                            label=\"TCP Sequence Prediction\" \n                            variant=\"outlined\" \n                            multiline={\n                              data.notShown.length > 15 ? true : false\n                            }\n                            value={data.difficulty == '' ? \"Target host is down\" : data.difficulty}\n                            inputProps={{\n                                readOnly: true,\n                            }}\n                          />\n                      </Grid>\n                      \n                      <Grid item xs={6} style={{width: \"100%\", marginBottom: 55}}>\n                        <TextField\n                            className={classes.centering} \n                            id=\"outlined-basic\" \n                            label=\"Device Type\" \n                            variant=\"outlined\" \n                            multiline={\n                              data.macAddr.length > 17 ? true : false\n                            }\n                            value={\n                              data.deviceType == \"\" ? \"Enable -v to discover\" : data.deviceType\n                            }\n                            inputProps={{\n                                readOnly: true,\n                            }}\n                          />\n                      </Grid>\n\n                      <Grid item xs={6} style={{width: \"100%\", marginBottom: 55}}>\n                        <TextField\n                            className={classes.centering} \n                            id=\"outlined-basic\" \n                            label=\"MAC Address\" \n                            variant=\"outlined\" \n                            multiline={\n                              data.macAddr.length > 28 ? true : false\n                            }\n                            value={\n                              data.macAddr == \"\" ? \"MAC Address not found\" : data.macAddr\n                            }\n                            inputProps={{\n                                readOnly: true,\n                            }}\n                          />\n                      </Grid>\n\n                      <Grid item xs={12} style={{width: \"100%\", marginBottom: 55}}>\n                        <TextField\n                            className={classes.centering} \n                            id=\"outlined-basic\" \n                            label=\"Up Time\" \n                            variant=\"outlined\" \n                            multiline\n                            style={{\n                              width: \"85%\",\n                            }}\n                            value={\n                              data.uptime == \"\" ? \"Enable -v to discover\" : data.uptime\n                            }\n                            inputProps={{\n                                readOnly: true,\n                            }}\n                          />\n                      </Grid>\n\n                      <Grid item xs={6} style={{width: \"100%\", marginBottom: 55}}>\n                        <TextField\n                            className={classes.centering} \n                            id=\"outlined-basic\" \n                            label=\"Raw Packets Sent\" \n                            variant=\"outlined\" \n                            value={\n                              data.rawPacket == \"\" ? \"Enable -v to discover\" : data.rawPacket\n                            }\n                            inputProps={{\n                                readOnly: true,\n                            }}\n                          />\n                      </Grid>\n\n                      <Grid item xs={6} style={{width: \"100%\", marginBottom: 55}}>\n                        <TextField\n                            className={classes.centering} \n                            id=\"outlined-basic\" \n                            label=\"Raw Packets Received\" \n                            variant=\"outlined\" \n                            value={\n                              data.rcvd == \"\" ? \"Enable -v to discover\" : data.rcvd\n                            }\n                            inputProps={{\n                                readOnly: true,\n                            }}\n                          />\n                      </Grid>\n\n\n                    <Grid item xs={12} style={{width: \"100%\", marginBottom: 15, marginTop: 25,}}>\n                      <Divider /><br/>\n                      <div style={{textAlign: \"left\"}}><FormLabel component=\"legend\">Scan Settings</FormLabel></div>\n                    </Grid>\n\n                        <Grid item xs={6} style={{width: \"100%\", marginBottom: 55}}>\n                          <TextField\n                              className={classes.centering} \n                              id=\"outlined-basic\" \n                              label=\"Automation\" \n                              variant=\"outlined\" \n                              value={\n                                data.auto === \"true\" ? \"Enabled\" : \"Disabled\"\n                              }\n                              inputProps={{\n                                  readOnly: true,\n                              }}\n                            />\n                        </Grid>\n                        <Grid item xs={6} style={{width: \"100%\", marginBottom: 55}}>\n                          <TextField\n                              className={classes.centering} \n                              id=\"outlined-basic\" \n                              label=\"CVE Detection\" \n                              variant=\"outlined\" \n                              value={\n                                data.cveDetect === \"true\" ? \"Enabled\" : \"Disabled\"\n                              }\n                              inputProps={{\n                                  readOnly: true,\n                              }}\n                            />\n                        </Grid>\n                        <Grid item xs={6} style={{width: \"100%\", marginBottom: 55}}>\n                          <TextField\n                              className={classes.centering} \n                              id=\"outlined-basic\" \n                              label=\"Scan Range\" \n                              variant=\"outlined\" \n                              value={\n                                data.setRange == \" \" ? \"Not Specify\" : data.setRange\n                              }\n                              inputProps={{\n                                  readOnly: true,\n                              }}\n                            />\n                        </Grid>\n                        <Grid item xs={6} style={{width: \"100%\", marginBottom: 55}}>\n                          <TextField\n                              className={classes.centering} \n                              id=\"outlined-basic\" \n                              label=\"Set Flags\" \n                              variant=\"outlined\" \n                              multiline\n                              value={\n                                data.flags == \" \" ? \"Null\" : data.flags\n                              }\n                              inputProps={{\n                                  readOnly: true,\n                              }}\n                            />\n                        </Grid>\n                      </>\n                    \n                  </Grid>\n              </form>\n              </>\n        ))}\n    </>\n  );\n}\n","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/ScanResults/WhoIs.tsx",["372","373","374"],"import React, {useState} from 'react'\nimport Typography from '@material-ui/core/Typography'\n\n// Mobx\nimport storeTarget from '../../Mobx/Models/resultSelectStatus'\n\n// Backend\nimport { whoisScanOutput } from '../../Backend/frontendData/whoisScan'\nimport store from '../../Mobx/Models/homeSettingsStatus'\n\nexport default () => {\n    return(\n        <>\n            {whoisScanOutput.map((data, index) => \n            \n               storeTarget.target === data.scanId ?\n                <>\n                    <Typography key={data.scanId} style={{whiteSpace: \"pre-line\"}}>\n                        {data.output}\n                    </Typography>\n                </> : null\n            )}\n        </>\n    )\n}","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Backend/frontendData/whoisScan.tsx",[],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/index.tsx",[],["375","376"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Views/DefaultScanMode.tsx",[],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Views/ScanComparison.tsx",[],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/defaultScanModes/fullPortsScanMode.tsx",["377","378","379","380","381"],"import React from 'react';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport { Switch, Route, Link, BrowserRouter } from \"react-router-dom\";\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography'\nimport TextField from '@material-ui/core/TextField';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Slider from '@material-ui/core/Slider';\n\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Switcher from '@material-ui/core/Switch';\nimport Button from '@material-ui/core/Button';\n\nimport IconButton from '@material-ui/core/IconButton';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport CloseIcon from '@material-ui/icons/Close';\n\nimport ScanModeIcon from '@material-ui/icons/Settings';\n\nimport '../../Styles/DefaultScanMode.css'\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    paper: {\n      padding: theme.spacing(2),\n      textAlign: 'left',\n      backgroundColor: \"#fefefe\",\n      color: \"#333333\",\n    },\n    centerGrid: {\n        textAlign: \"center\",\n        marginTop: 15,\n    },\n    avatarText: {\n        background: \"#4A92FF\",\n        borderRadius: 6,\n        color: \"#fff\",\n        padding: \"2px 6px\",\n    },  \n    switch: {\n        disaply: \"inline-block\",\n    },\n  }),\n);\n\nexport default function CenteredGrid() {\n  const classes = useStyles();\n  const [value, setValue] = React.useState<number>(4);\n\n  const handleChange = (event: any, newValue: number | number[]) => {\n    setValue(newValue as number);\n  };\n\n  const [state, setState] = React.useState({\n    p: true,\n  });\n\n  const handleSwitchChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setState({ ...state, [event.target.name]: event.target.checked });\n  };\n\n  const [open, setOpen] = React.useState(false);\n\n  const handleClick = () => {\n    setOpen(true);\n  };\n\n  const handleClose = (event: React.SyntheticEvent | React.MouseEvent, reason?: string) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    setOpen(false);\n  };\n\n  return (\n    <div className={classes.root}>\n      <Grid container spacing={5} justify=\"center\" alignItems=\"center\">\n       \n        <Grid item xs={10}>\n            <Paper className={classes.paper}>\n                <Typography variant=\"h6\">\n                    Full Ports Scan Modes\n                </Typography>\n                    <br/>\n                <div>\n                    <TextField \n                        id=\"outlined-basic\" \n                        label=\"Current Command\" \n                        defaultValue=\"nmap -T4 -p- -v -v + [ Target IP / Domain ] \"\n                        variant=\"outlined\" \n                        size=\"small\"\n                        style={{\n                            width: \"80%\",\n                            marginLeft: 85,\n                            textAlignLast: \"center\",\n                        }}\n                        inputProps={{ \n                            readOnly: true, \n                        }}\n                    />\n                </div>\n                    <br/>\n                <div className={classes.root}>\n                    \n                </div>\n            </Paper>\n        </Grid>\n\n        <Grid item xs={10}>\n            <Paper className={classes.paper}>\n                <Typography variant=\"h6\">\n                    Scan Frequency\n                </Typography>\n                    <br/>\n                <div>\n                     <Slider \n                        value={value} \n                        onChange={handleChange} \n                        max={5}\n                        min={0}\n                        step={1}\n                        valueLabelDisplay=\"on\"\n                        style={{\n                            width: \"70%\",\n                            marginLeft: 145,\n                        }}    \n                    />\n                </div>\n                    <br/>\n                <Typography style={{textAlign: \"right\",marginRight: 35}}>\n                    -T&nbsp;\n                    <Tooltip \n                        title=\"[ -T ] --- Specifies the timing (Timing) used in the scanning process, there are always 6 levels (0-5), the level increases, the faster the scanning speed.\" \n                        placement=\"top\" \n                        arrow\n                    >\n                        <span className={classes.avatarText}>{value}</span>\n                    </Tooltip>\n                </Typography>\n            </Paper>\n        </Grid>\n\n        <Grid item xs={10}>\n           <Paper className={classes.paper}>\n                <Typography variant=\"h6\">\n                    Flags\n                </Typography>\n                    <br/>\n                <div style={{textAlign: \"center\"}}>\n                    <FormControl component=\"fieldset\">\n                        <table className=\"scanModeSettingFlagTable\">\n                            <tr>\n                                <td>\n                                    <RadioGroup row aria-label=\"position\" name=\"position\" defaultValue=\"top\">\n                                        <Tooltip title=\"Increase the verbosity level\" placement=\"top\" arrow>\n                                            <FormControlLabel\n                                                value=\"-v\"\n                                                control={<Radio color=\"primary\" />}\n                                                label=\"-v\"\n                                                labelPlacement=\"end\"\n                                            />\n                                        </Tooltip>\n                                        <Tooltip title=\"Use more v for greater effect\" placement=\"top\" arrow>\n                                            <FormControlLabel\n                                                value=\"-vv\"\n                                                control={<Radio color=\"primary\" />}\n                                                label=\"-vv\"\n                                                labelPlacement=\"end\"\n                                            />\n                                        </Tooltip>\n                                    </RadioGroup>\n                                </td>\n                                <td>\n                                    <Tooltip title=\"Port scan all ports. THIS MUST BE CHOSEN.\" placement=\"top\" arrow>\n                                        <FormControlLabel\n                                            control={\n                                                <Switcher\n                                                    checked={state.p}\n                                                    onChange={handleSwitchChange}\n                                                    name=\"p\"\n                                                    color=\"primary\"\n                                                    disabled={true}\n                                                />\n                                            }\n                                            label=\"-p-\"\n                                            className={classes.switch}\n                                        />\n                                    </Tooltip>\n                                </td>\n                            </tr>\n                        </table>\n                    </FormControl>\n                </div>\n            </Paper>\n        </Grid>\n\n        <Grid item xs={10} style={{position: \"absolute\", width: 902, bottom: 0}}>\n            <Paper className={classes.paper}>\n                <Link to=\"/defaultScanMode\">\n                    <Button variant=\"contained\">Back</Button>\n                </Link>                \n                <Button variant=\"contained\" style={{float: 'right'}} onClick={handleClick}>Save</Button>\n                <Snackbar\n                    anchorOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'left',\n                    }}\n                    open={open}\n                    autoHideDuration={6000}\n                    onClose={handleClose}\n                    message=\"Settings Save Successfully\"\n                    action={\n                    <React.Fragment>\n                         <Link to=\"/defaultScanMode\">\n                            <IconButton size=\"small\" aria-label=\"close\" color=\"inherit\" onClick={handleClose}>\n                                <CloseIcon fontSize=\"small\" style={{color: \"#fff\"}}/>\n                            </IconButton>\n                        </Link>\n                    </React.Fragment>\n                    }\n                />\n            </Paper>\n        </Grid>\n\n      </Grid>\n      \n    </div>\n  );\n}\n","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/defaultScanModes/intenseScanMode.tsx",["382","383","384","385","386"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/defaultScanModes/top100portsScanMode.tsx",["387","388","389","390","391","392","393"],"import React from 'react';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport { Switch, Route, Link, BrowserRouter } from \"react-router-dom\";\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography'\nimport TextField from '@material-ui/core/TextField';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Slider from '@material-ui/core/Slider';\n\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Switcher from '@material-ui/core/Switch';\nimport Button from '@material-ui/core/Button';\n\nimport IconButton from '@material-ui/core/IconButton';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport CloseIcon from '@material-ui/icons/Close';\n\nimport ScanModeIcon from '@material-ui/icons/Settings';\n\nimport '../../Styles/DefaultScanMode.css'\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    paper: {\n      padding: theme.spacing(2),\n      textAlign: 'left',\n      backgroundColor: \"#fefefe\",\n      color: \"#333333\",\n    },\n    centerGrid: {\n        textAlign: \"center\",\n        marginTop: 15,\n    },\n    avatarText: {\n        background: \"#4A92FF\",\n        borderRadius: 6,\n        color: \"#fff\",\n        padding: \"2px 6px\",\n    },  \n    switch: {\n        disaply: \"inline-block\",\n    },\n  }),\n);\n\nexport default function CenteredGrid() {\n  const classes = useStyles();\n  const [value, setValue] = React.useState<number>(4);\n\n  const handleChange = (event: any, newValue: number | number[]) => {\n    setValue(newValue as number);\n  };\n\n  const [state, setState] = React.useState({\n    F: true,\n  });\n\n  const handleSwitchChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setState({ ...state, [event.target.name]: event.target.checked });\n  };\n\n  const [open, setOpen] = React.useState(false);\n\n  const handleClick = () => {\n    setOpen(true);\n  };\n\n  const handleClose = (event: React.SyntheticEvent | React.MouseEvent, reason?: string) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    setOpen(false);\n  };\n\n  return (\n    <div className={classes.root}>\n      <Grid container spacing={5} justify=\"center\" alignItems=\"center\">\n       \n        <Grid item xs={10}>\n            <Paper className={classes.paper}>\n                <Typography variant=\"h6\">\n                    Top 100 Ports Scan Modes\n                </Typography>\n                    <br/>\n                <div>\n                    <TextField \n                        id=\"outlined-basic\" \n                        label=\"Current Command\" \n                        defaultValue=\"nmap -T4 -F + [ Target IP / Domain ] \"\n                        variant=\"outlined\" \n                        size=\"small\"\n                        style={{\n                            width: \"80%\",\n                            marginLeft: 85,\n                            textAlignLast: \"center\",\n                        }}\n                        inputProps={{ \n                            readOnly: true, \n                        }}\n                    />\n                </div>\n                    <br/>\n                <div className={classes.root}>\n                    \n                </div>\n            </Paper>\n        </Grid>\n\n        <Grid item xs={10}>\n            <Paper className={classes.paper}>\n                <Typography variant=\"h6\">\n                    Scan Frequency\n                </Typography>\n                    <br/>\n                <div>\n                     <Slider \n                        value={value} \n                        onChange={handleChange} \n                        max={5}\n                        min={0}\n                        step={1}\n                        valueLabelDisplay=\"on\"\n                        style={{\n                            width: \"70%\",\n                            marginLeft: 145,\n                        }}    \n                    />\n                </div>\n                    <br/>\n                <Typography style={{textAlign: \"right\",marginRight: 35}}>\n                    -T&nbsp;\n                    <Tooltip \n                        title=\"[ -T ] --- Specifies the timing (Timing) used in the scanning process, there are always 6 levels (0-5), the level increases, the faster the scanning speed.\" \n                        placement=\"top\" \n                        arrow\n                    >\n                        <span className={classes.avatarText}>{value}</span>\n                    </Tooltip>\n                </Typography>\n            </Paper>\n        </Grid>\n\n        <Grid item xs={10}>\n           <Paper className={classes.paper}>\n                <Typography variant=\"h6\">\n                    Flags\n                </Typography>\n                    <br/>\n                \n                    <div style={{textAlign: \"center\"}}>\n                    <FormControl component=\"fieldset\">\n                        <table className=\"scanModeSettingFlagTable\">\n                            <tr>\n                                <td>\n                                    <Tooltip title=\"Fast port scan (100 ports). THIS MUST BE CHOSEN.\" placement=\"top\" arrow>\n                                        <FormControlLabel\n                                            control={\n                                                <Switcher\n                                                    checked={state.F}\n                                                    onChange={handleSwitchChange}\n                                                    name=\"F\"\n                                                    color=\"primary\"\n                                                    disabled={true}\n                                                />\n                                            }\n                                            label=\"-F\"\n                                            className={classes.switch}\n                                        />\n                                    </Tooltip>\n                                </td>\n                            </tr>\n                        </table>\n                    </FormControl>\n                </div>\n           </Paper>\n        </Grid>\n\n        <Grid item xs={10} style={{position: \"absolute\", width: 902, bottom: 0}}>\n            <Paper className={classes.paper}>\n                <Link to=\"/defaultScanMode\">\n                    <Button variant=\"contained\">Back</Button>\n                </Link>                \n                <Button variant=\"contained\" style={{float: 'right'}} onClick={handleClick}>Save</Button>\n                <Snackbar\n                    anchorOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'left',\n                    }}\n                    open={open}\n                    autoHideDuration={6000}\n                    onClose={handleClose}\n                    message=\"Settings Save Successfully\"\n                    action={\n                    <React.Fragment>\n                         <Link to=\"/defaultScanMode\">\n                            <IconButton size=\"small\" aria-label=\"close\" color=\"inherit\" onClick={handleClose}>\n                                <CloseIcon fontSize=\"small\" style={{color: \"#fff\"}}/>\n                            </IconButton>\n                        </Link>\n                    </React.Fragment>\n                    }\n                />\n            </Paper>\n        </Grid>\n\n      </Grid>\n      \n    </div>\n  );\n}\n","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Views/Home.tsx",[],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Mobx/Models/defaultScanModeStatus.tsx",[],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/NSE.tsx",["394","395","396","397","398","399","400","401","402","403","404","405","406","407","408","409","410","411","412","413","414","415","416","417","418","419","420","421","422","423","424","425","426","427","428"],"import React from 'react';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Collapse from '@material-ui/core/Collapse';\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\nimport DraftsIcon from '@material-ui/icons/Drafts';\nimport SendIcon from '@material-ui/icons/Send';\nimport DynamicFeedIcon from '@material-ui/icons/DynamicFeed';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport StarBorder from '@material-ui/icons/StarBorder';\nimport ExtensionIcon from '@material-ui/icons/ExtensionOutlined';\nimport AccountTreeOutlinedIcon from '@material-ui/icons/AccountTreeOutlined';\n\nimport DiscoveryBroadcast from './nseData/Discovery/Broadcast'\nimport DiscoveryDatabase from './nseData/Discovery/Database'\nimport DiscoveryHTTP from './nseData/Discovery/HTTP'\nimport DiscoveryIP from './nseData/Discovery/IP'\nimport DiscoveryHadoop from './nseData/Discovery/Hadoop'\nimport DiscoveryNetwork from './nseData/Discovery/Network'\nimport DiscoveryServerMessageBlock from './nseData/Discovery/ServerMessageBlock'\nimport DiscoveryServer from './nseData/Discovery/Server'\nimport DiscoverySMTP from './nseData/Discovery/SMTP'\nimport DiscoveryTargets from './nseData/Discovery/Targets'\n\nimport ExploitFTP from './nseData/Exploit/FTP'\nimport ExploitHTTP from './nseData/Exploit/HTTP'\nimport ExploitOthers from './nseData/Exploit/Others'\nimport ExploitSMB from './nseData/Exploit/SMB'\n\nimport VulnFTP from './nseData/Vulnerability/FTP'\nimport VulnHTTP from './nseData/Vulnerability/HTTP'\nimport VulnOthers from './nseData/Vulnerability/Others'\nimport VulnSMB from './nseData/Vulnerability/SMB'\nimport VulnSSL from './nseData/Vulnerability/SSL'\n\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      width: '100%',\n      backgroundColor: theme.palette.background.paper,\n    },\n    nested: {\n      paddingLeft: theme.spacing(4),\n    },\n  }),\n);\n\nconst menuItem = [\n    {\n        cateName: \"Discovery\",\n        handle: \"handleDiscovery\",\n        subItem: [\n            \"Broadcast\", \"Database\", \"Hadoop\", \"HTTP\", \"IP\", \n            \"Network\", \"Server Message Block\", \"Server\", \"SMTP\", \"Others\", \n        ],        \n    },\n    {\n        cateName: \"Exploit\",\n        handle: \"handleExploit\",\n        subItem: [\n            \"FTP\", \"HTTP\", \"SMB\", \"Others\", \n        ],        \n    },\n    {\n        cateName: \"Vulnerability\",\n        handle: \"handleVulnerability\",\n        subItem: [\n            \"FTP\", \"HTTP\", \"SMB\", \"SSL\", \"Others\",\n        ],        \n    },\n]\n\nexport default function NestedList() {\n  const classes = useStyles();\n  const [Discovery, setDiscovery] = React.useState(false);\n\n  const handleDiscovery = () => {\n    setDiscovery(!Discovery);\n\n    if( Exploit == true ){\n        setExploit(false)\n    }\n    if( Vulnerability == true ){\n        setVulnerability(false)\n    }\n  };\n\n  const [Exploit, setExploit] = React.useState(false);\n\n  const handleExploit = () => {\n    setExploit(!Exploit);\n    \n    if( Discovery == true ){\n        setDiscovery(false)\n    }\n    if( Vulnerability == true ){\n        setVulnerability(false)\n    }\n  };\n\n  const [Vulnerability, setVulnerability] = React.useState(false);\n\n  const handleVulnerability = () => {\n    setVulnerability(!Vulnerability);\n     \n    if( Discovery == true ){\n        setDiscovery(false)\n    }\n    if( Exploit == true ){\n        setExploit(false)\n    }\n  };\n\n  return (\n    <List\n      component=\"nav\"\n      aria-labelledby=\"nested-list-subheader\"\n      className={classes.root}\n    >\n      {menuItem.map((obj) => (\n         obj.cateName == \"Discovery\" ?\n            <>\n                <ListItem button onClick={handleDiscovery}>\n                    <ListItemIcon>\n                        <AccountTreeOutlinedIcon />\n                    </ListItemIcon>\n                    <ListItemText primary={obj.cateName} />\n                    {Discovery ? <ExpandLess /> : <ExpandMore />}\n                </ListItem>\n                <Collapse in={Discovery} timeout=\"auto\" unmountOnExit>\n                    {obj.subItem.map((subObj) => (\n                        <List component=\"div\" disablePadding>\n                            {\n                                subObj == \"Broadcast\" ? <DiscoveryBroadcast /> : \n                                    subObj == \"Database\" ? <DiscoveryDatabase /> : \n                                        subObj == \"Hadoop\" ? <DiscoveryHadoop /> : \n                                            subObj == \"HTTP\" ? <DiscoveryHTTP /> : \n                                                subObj == \"IP\" ? <DiscoveryIP /> : \n                                                subObj == \"Network\" ? <DiscoveryNetwork /> : \n                                            subObj == \"Server Message Block\" ? <DiscoveryServerMessageBlock /> : \n                                        subObj == \"Server\" ? <DiscoveryServer /> : \n                                    subObj == \"SMTP\" ? <DiscoverySMTP /> : \n                                subObj == \"Targets\" ? <DiscoveryTargets /> : null\n                            }\n                        </List>\n                    ))}\n                    \n                </Collapse>\n            </>\n            :\n        obj.cateName == \"Exploit\" ?\n            <>\n                <ListItem button onClick={handleExploit}>\n                    <ListItemIcon>\n                        <AccountTreeOutlinedIcon />\n                    </ListItemIcon>\n                    <ListItemText primary={obj.cateName} />\n                    {Exploit ? <ExpandLess /> : <ExpandMore />}\n                </ListItem>\n                <Collapse in={Exploit} timeout=\"auto\" unmountOnExit>\n                    {obj.subItem.map((subObj) => (\n                        <List component=\"div\" disablePadding>\n                            {\n                                subObj == \"FTP\" ? <ExploitFTP /> : \n                                    subObj == \"HTTP\" ? <ExploitHTTP /> :\n                                        subObj == \"Others\" ? <ExploitOthers /> :\n                                            subObj == \"SMB\" ? <ExploitSMB /> : null\n                            }\n                        </List>\n                    ))}\n                    \n                </Collapse>\n            </>\n            :\n        obj.cateName == \"Vulnerability\" ?\n            <>\n                <ListItem button onClick={handleVulnerability}>\n                    <ListItemIcon>\n                        <AccountTreeOutlinedIcon />\n                    </ListItemIcon>\n                    <ListItemText primary={obj.cateName} />\n                    {Vulnerability ? <ExpandLess /> : <ExpandMore />}\n                </ListItem>\n                <Collapse in={Vulnerability} timeout=\"auto\" unmountOnExit>\n                    {obj.subItem.map((subObj) => (\n                        <List component=\"div\" disablePadding>\n                            {\n                                subObj == \"FTP\" ? <VulnFTP /> : \n                                    subObj == \"HTTP\" ? <VulnHTTP /> :\n                                        subObj == \"Others\" ? <VulnOthers /> :\n                                    subObj == \"SMB\" ? <VulnSMB /> :\n                                subObj == \"SSL\" ? <VulnSSL /> : null\n                            }\n                        </List>\n                    ))}\n                    \n                </Collapse>\n            </>\n            :\n            null\n      ))}\n      \n    </List>\n  );\n}\n",["429","430"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Vulnerability/HTTP.tsx",["431","432"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Discovery/Targets.tsx",["433","434"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Discovery/Database.tsx",["435","436"],"import React from 'react';\nimport { createStyles, Theme, withStyles, WithStyles, makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ExtensionIcon from '@material-ui/icons/ExtensionOutlined';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Grid from '@material-ui/core/Grid';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox, { CheckboxProps } from '@material-ui/core/Checkbox';\n\nimport Typography from '@material-ui/core/Typography';\nimport Separator from '@material-ui/icons/ArrowRightOutlined';\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\n\n// NSE Options\nimport NSEoption from './json/Database.json'\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      margin: 0,\n      padding: theme.spacing(2),\n    },\n    closeButton: {\n      position: 'absolute',\n      right: theme.spacing(1),\n      top: theme.spacing(1),\n      color: theme.palette.grey[500],\n    },\n  });\n\nexport interface DialogTitleProps extends WithStyles<typeof styles> {\n  id: string;\n  children: React.ReactNode;\n  onClose: () => void;\n}\n\nconst DialogTitle = withStyles(styles)((props: DialogTitleProps) => {\n  const { children, classes, onClose, ...other } = props;\n  return (\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\n      <Typography variant=\"h6\">{children}</Typography>\n      {onClose ? (\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n    </MuiDialogTitle>\n  );\n});\n\nconst DialogContent = withStyles((theme: Theme) => ({\n  root: {\n    padding: theme.spacing(2),\n  },\n}))(MuiDialogContent);\n\nconst DialogActions = withStyles((theme: Theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(1),\n  },\n}))(MuiDialogActions);\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    nested: {\n      paddingLeft: theme.spacing(4),\n    },\n  }),\n);\n\nfunction handleClick(event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) {\n    event.preventDefault();\n    console.info('You clicked a breadcrumb.');\n  }\n  \n  function Breadcrumb() {\n    return (\n      <Breadcrumbs separator={<Separator />} >\n        <Typography color=\"textPrimary\">NSE</Typography>\n        <Typography color=\"textPrimary\">Discovery</Typography>\n        <Typography color=\"primary\" style={{fontWeight: \"bold\"}}>Database</Typography>\n      </Breadcrumbs>\n    );\n  }\n\nexport default function CustomizedDialogs() {\n  const [open, setOpen] = React.useState(false);\n  const classes = useStyles();\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div>\n      <ListItem button className={classes.nested} onClick={handleClickOpen}>\n        <ListItemIcon>\n            <ExtensionIcon />\n        </ListItemIcon>\n        <ListItemText>Database</ListItemText>\n    </ListItem>\n      <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n          <Breadcrumb />\n        </DialogTitle>\n        <DialogContent dividers>\n          <Grid container justify=\"center\" spacing={3}>\n              {NSEoption.map((option) => (\n                <Grid item xs={6}>\n                    <Tooltip arrow placement=\"top\" title={option.des}>\n                        <FormControlLabel\n                            value={option.id}\n                            control={<Checkbox color=\"primary\" />}\n                            label={option.id}\n                            labelPlacement=\"end\"\n                        />\n                    </Tooltip>\n                </Grid>\n              ))}\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button autoFocus onClick={handleClose} color=\"primary\">\n            Save changes\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/ScanResults/NmapOutput.tsx",["437","438","439","440","441","442","443","444","445","446"],"import React, {useState, useEffect} from 'react';\nimport Typography from '@material-ui/core/Typography'\n\nimport { scanTarget, targetData, targetTime } from '../target'\n\n// Backend\nimport { isScanning } from '../../Backend/frontendData/isScanning'\nimport { pureOutput } from '../../Backend/frontendData/Result'\nimport scannedIn from '../../Backend/frontendData/scannedIn.json'\nimport { rows } from '../../Backend/frontendData/getPortStatus'\n\n// Mobx Global Status\nimport selectResult from '../../Mobx/Models/resultSelectStatus'\n\nexport default () => {\n\n    return(\n      <>\n          {pureOutput.map((obj) => (\n            <>\n              {\n                obj.id == selectResult.target ?\n                  <>\n                     <Typography style={{whiteSpace: \"pre-line\"}}>\n                        {obj.output}\n                      </Typography>\n                  </>\n                    :\n                  null\n              }\n            </>\n          ))}\n        \n      </>\n    );\n}","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Views/CustomisedScanMode.tsx",[],["447","448"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/Target.tsx",["449","450","451"],"import React from 'react';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Divider from '@material-ui/core/Divider';\nimport Grid from '@material-ui/core/Grid';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport TextField from '@material-ui/core/TextField';\n\nimport { Target } from './NewModeOptions'\n\nexport default function FormControlLabelPosition() {\n  return (\n    <>\n      <Grid container spacing={3}>\n        {Target.map((option) => (\n          <Grid item xs={12}>\n            <Tooltip title={option.tooltip} arrow placement=\"right\">\n              <FormControl component=\"fieldset\" style={{width: 450}}>\n                <FormControlLabel\n                  value={option.value}\n                  control={<Checkbox color=\"primary\" />}\n                  label={option.des}\n                  labelPlacement=\"end\"\n                />\n                {\n                  option.input === true ?\n                    <>\n                      <TextField \n                          label={`Example Input: ${option.egInput}`} \n                          margin=\"dense\" \n                          size=\"small\"\n                          variant=\"outlined\"\n                          style={{\n                            width: \"100%\",\n                            textAlignLast: \"center\",\n                          }}\n                      />\n                    </>\n                      :\n                    null\n                }\n              </FormControl>\n            </Tooltip>\n          </Grid>\n        ))}\n      </Grid>\n    </>\n  );\n}\n",["452","453"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/NewModeOptions.tsx",[],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Exploit/HTTP.tsx",["454","455"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Discovery/ServerMessageBlock.tsx",["456","457"],"import React from 'react';\nimport { createStyles, Theme, withStyles, WithStyles, makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ExtensionIcon from '@material-ui/icons/ExtensionOutlined';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Grid from '@material-ui/core/Grid';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox, { CheckboxProps } from '@material-ui/core/Checkbox';\n\nimport Typography from '@material-ui/core/Typography';\nimport Separator from '@material-ui/icons/ArrowRightOutlined';\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\n\n// NSE Options\nimport NSEoption from './json/ServerMessageBlock.json'\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      margin: 0,\n      padding: theme.spacing(2),\n    },\n    closeButton: {\n      position: 'absolute',\n      right: theme.spacing(1),\n      top: theme.spacing(1),\n      color: theme.palette.grey[500],\n    },\n  });\n\nexport interface DialogTitleProps extends WithStyles<typeof styles> {\n  id: string;\n  children: React.ReactNode;\n  onClose: () => void;\n}\n\nconst DialogTitle = withStyles(styles)((props: DialogTitleProps) => {\n  const { children, classes, onClose, ...other } = props;\n  return (\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\n      <Typography variant=\"h6\">{children}</Typography>\n      {onClose ? (\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n    </MuiDialogTitle>\n  );\n});\n\nconst DialogContent = withStyles((theme: Theme) => ({\n  root: {\n    padding: theme.spacing(2),\n  },\n}))(MuiDialogContent);\n\nconst DialogActions = withStyles((theme: Theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(1),\n  },\n}))(MuiDialogActions);\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    nested: {\n      paddingLeft: theme.spacing(4),\n    },\n  }),\n);\n\nfunction handleClick(event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) {\n    event.preventDefault();\n    console.info('You clicked a breadcrumb.');\n  }\n  \n  function Breadcrumb() {\n    return (\n      <Breadcrumbs separator={<Separator />} >\n        <Typography color=\"textPrimary\">NSE</Typography>\n        <Typography color=\"textPrimary\">Discovery</Typography>\n        <Typography color=\"primary\" style={{fontWeight: \"bold\"}}>Server Message Block</Typography>\n      </Breadcrumbs>\n    );\n  }\n\nexport default function CustomizedDialogs() {\n  const [open, setOpen] = React.useState(false);\n  const classes = useStyles();\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div>\n      <ListItem button className={classes.nested} onClick={handleClickOpen}>\n        <ListItemIcon>\n            <ExtensionIcon />\n        </ListItemIcon>\n        <ListItemText>ServerMessageBlock</ListItemText>\n    </ListItem>\n      <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n          <Breadcrumb />\n        </DialogTitle>\n        <DialogContent dividers>\n          <Grid container justify=\"center\" spacing={3}>\n              {NSEoption.map((option) => (\n                <Grid item xs={6}>\n                    <Tooltip arrow placement=\"top\" title={option.des}>\n                        <FormControlLabel\n                            value={option.id}\n                            control={<Checkbox color=\"primary\" />}\n                            label={option.id}\n                            labelPlacement=\"end\"\n                        />\n                    </Tooltip>\n                </Grid>\n              ))}\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button autoFocus onClick={handleClose} color=\"primary\">\n            Save changes\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Discovery/Network.tsx",["458","459"],"import React from 'react';\nimport { createStyles, Theme, withStyles, WithStyles, makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ExtensionIcon from '@material-ui/icons/ExtensionOutlined';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Grid from '@material-ui/core/Grid';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox, { CheckboxProps } from '@material-ui/core/Checkbox';\n\nimport Typography from '@material-ui/core/Typography';\nimport Separator from '@material-ui/icons/ArrowRightOutlined';\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\n\n// NSE Options\nimport NSEoption from './json/Network.json'\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      margin: 0,\n      padding: theme.spacing(2),\n    },\n    closeButton: {\n      position: 'absolute',\n      right: theme.spacing(1),\n      top: theme.spacing(1),\n      color: theme.palette.grey[500],\n    },\n  });\n\nexport interface DialogTitleProps extends WithStyles<typeof styles> {\n  id: string;\n  children: React.ReactNode;\n  onClose: () => void;\n}\n\nconst DialogTitle = withStyles(styles)((props: DialogTitleProps) => {\n  const { children, classes, onClose, ...other } = props;\n  return (\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\n      <Typography variant=\"h6\">{children}</Typography>\n      {onClose ? (\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n    </MuiDialogTitle>\n  );\n});\n\nconst DialogContent = withStyles((theme: Theme) => ({\n  root: {\n    padding: theme.spacing(2),\n  },\n}))(MuiDialogContent);\n\nconst DialogActions = withStyles((theme: Theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(1),\n  },\n}))(MuiDialogActions);\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    nested: {\n      paddingLeft: theme.spacing(4),\n    },\n  }),\n);\n\nfunction handleClick(event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) {\n    event.preventDefault();\n    console.info('You clicked a breadcrumb.');\n  }\n  \n  function Breadcrumb() {\n    return (\n      <Breadcrumbs separator={<Separator />} >\n        <Typography color=\"textPrimary\">NSE</Typography>\n        <Typography color=\"textPrimary\">Discovery</Typography>\n        <Typography color=\"primary\" style={{fontWeight: \"bold\"}}>Network</Typography>\n      </Breadcrumbs>\n    );\n  }\n\nexport default function CustomizedDialogs() {\n  const [open, setOpen] = React.useState(false);\n  const classes = useStyles();\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div>\n      <ListItem button className={classes.nested} onClick={handleClickOpen}>\n        <ListItemIcon>\n            <ExtensionIcon />\n        </ListItemIcon>\n        <ListItemText>Network</ListItemText>\n    </ListItem>\n      <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n          <Breadcrumb />\n        </DialogTitle>\n        <DialogContent dividers>\n          <Grid container justify=\"center\" spacing={3}>\n              {NSEoption.map((option) => (\n                <Grid item xs={6}>\n                    <Tooltip arrow placement=\"top\" title={option.des}>\n                        <FormControlLabel\n                            value={option.id}\n                            control={<Checkbox color=\"primary\" />}\n                            label={option.id}\n                            labelPlacement=\"end\"\n                        />\n                    </Tooltip>\n                </Grid>\n              ))}\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button autoFocus onClick={handleClose} color=\"primary\">\n            Save changes\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/TCPoptions.tsx",[],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/App.tsx",["460"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/Others.tsx",["461","462","463","464"],"import React from 'react';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Grid from '@material-ui/core/Grid';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport TextField from '@material-ui/core/TextField';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\n\nimport { Others } from './NewModeOptions'\n\nexport default function FormControlLabelPosition() {\n  return (\n    <>\n      <Grid container spacing={3}>\n        {Others.map((option) => (\n          <Grid item xs={12}>\n            <Tooltip title={option.tooltip} arrow placement=\"right\">\n              <FormControl component=\"fieldset\" style={{width: 450}}>\n                <FormControlLabel\n                  value={option.value}\n                  control={<Checkbox color=\"primary\" />}\n                  label={option.des}\n                  labelPlacement=\"end\"\n                />\n                {\n                  option.input === true ?\n                    <>\n                      <TextField \n                          label={`Example Input: ${option.egInput}`} \n                          margin=\"dense\" \n                          size=\"small\"\n                          variant=\"outlined\"\n                          style={{\n                            width: \"100%\",\n                            textAlignLast: \"center\",\n                          }}\n                      />\n                    </>\n                      :\n                    null\n                }\n              </FormControl>\n            </Tooltip>\n          </Grid>\n        ))}\n      </Grid>\n    </>\n  );\n}\n",["465","466"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/Source.tsx",["467","468"],"import React from 'react';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Grid from '@material-ui/core/Grid';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport TextField from '@material-ui/core/TextField';\n\nimport { Source } from './NewModeOptions'\n\nexport default function FormControlLabelPosition() {\n  return (\n    <>\n      <Grid container spacing={3}>\n        {Source.map((option) => (\n          <Grid item xs={12}>\n            <Tooltip title={option.tooltip} arrow placement=\"right\">\n              <FormControl component=\"fieldset\" style={{width: 450}}>\n                <FormControlLabel\n                  value={option.value}\n                  control={<Checkbox color=\"primary\" />}\n                  label={option.des}\n                  labelPlacement=\"end\"\n                />\n                {\n                  option.input === true ?\n                    <>\n                      <TextField \n                          label={`Example Input: ${option.egInput}`} \n                          margin=\"dense\" \n                          size=\"small\"\n                          variant=\"outlined\"\n                          style={{\n                            width: \"100%\",\n                            textAlignLast: \"center\",\n                          }}\n                      />\n                    </>\n                      :\n                    null\n                }\n              </FormControl>\n            </Tooltip>\n          </Grid>\n        ))}\n      </Grid>\n    </>\n  );\n}\n","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Vulnerability/Others.tsx",["469","470"],"import React from 'react';\nimport { createStyles, Theme, withStyles, WithStyles, makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ExtensionIcon from '@material-ui/icons/ExtensionOutlined';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Grid from '@material-ui/core/Grid';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox, { CheckboxProps } from '@material-ui/core/Checkbox';\n\nimport Typography from '@material-ui/core/Typography';\nimport Separator from '@material-ui/icons/ArrowRightOutlined';\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\n\n// NSE Options\nimport NSEoption from './json/Others.json'\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      margin: 0,\n      padding: theme.spacing(2),\n    },\n    closeButton: {\n      position: 'absolute',\n      right: theme.spacing(1),\n      top: theme.spacing(1),\n      color: theme.palette.grey[500],\n    },\n  });\n\nexport interface DialogTitleProps extends WithStyles<typeof styles> {\n  id: string;\n  children: React.ReactNode;\n  onClose: () => void;\n}\n\nconst DialogTitle = withStyles(styles)((props: DialogTitleProps) => {\n  const { children, classes, onClose, ...other } = props;\n  return (\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\n      <Typography variant=\"h6\">{children}</Typography>\n      {onClose ? (\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n    </MuiDialogTitle>\n  );\n});\n\nconst DialogContent = withStyles((theme: Theme) => ({\n  root: {\n    padding: theme.spacing(2),\n  },\n}))(MuiDialogContent);\n\nconst DialogActions = withStyles((theme: Theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(1),\n  },\n}))(MuiDialogActions);\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    nested: {\n      paddingLeft: theme.spacing(4),\n    },\n  }),\n);\n\nfunction handleClick(event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) {\n    event.preventDefault();\n    console.info('You clicked a breadcrumb.');\n  }\n  \n  function Breadcrumb() {\n    return (\n      <Breadcrumbs separator={<Separator />} >\n        <Typography color=\"textPrimary\">NSE</Typography>\n        <Typography color=\"textPrimary\">Vulnerability</Typography>\n        <Typography color=\"primary\" style={{fontWeight: \"bold\"}}>Others</Typography>\n      </Breadcrumbs>\n    );\n  }\n\nexport default function CustomizedDialogs() {\n  const [open, setOpen] = React.useState(false);\n  const classes = useStyles();\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div>\n      <ListItem button className={classes.nested} onClick={handleClickOpen}>\n        <ListItemIcon>\n            <ExtensionIcon />\n        </ListItemIcon>\n        <ListItemText>Others</ListItemText>\n    </ListItem>\n      <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n          <Breadcrumb />\n        </DialogTitle>\n        <DialogContent dividers>\n          <Grid container justify=\"center\" spacing={3}>\n              {NSEoption.map((option) => (\n                <Grid item xs={6}>\n                    <Tooltip arrow placement=\"top\" title={option.des}>\n                        <FormControlLabel\n                            value={option.id}\n                            control={<Checkbox color=\"primary\" />}\n                            label={option.id}\n                            labelPlacement=\"end\"\n                        />\n                    </Tooltip>\n                </Grid>\n              ))}\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button autoFocus onClick={handleClose} color=\"primary\">\n            Save changes\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n",["471","472"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Discovery/SMTP.tsx",["473","474"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Discovery/Hadoop.tsx",["475","476"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Views/Drawer.tsx",[],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Exploit/SMB.tsx",["477","478"],"import React from 'react';\nimport { createStyles, Theme, withStyles, WithStyles, makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ExtensionIcon from '@material-ui/icons/ExtensionOutlined';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Grid from '@material-ui/core/Grid';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox, { CheckboxProps } from '@material-ui/core/Checkbox';\n\nimport Typography from '@material-ui/core/Typography';\nimport Separator from '@material-ui/icons/ArrowRightOutlined';\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\n\n// NSE Options\nimport NSEoption from './json/SMB.json'\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      margin: 0,\n      padding: theme.spacing(2),\n    },\n    closeButton: {\n      position: 'absolute',\n      right: theme.spacing(1),\n      top: theme.spacing(1),\n      color: theme.palette.grey[500],\n    },\n  });\n\nexport interface DialogTitleProps extends WithStyles<typeof styles> {\n  id: string;\n  children: React.ReactNode;\n  onClose: () => void;\n}\n\nconst DialogTitle = withStyles(styles)((props: DialogTitleProps) => {\n  const { children, classes, onClose, ...other } = props;\n  return (\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\n      <Typography variant=\"h6\">{children}</Typography>\n      {onClose ? (\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n    </MuiDialogTitle>\n  );\n});\n\nconst DialogContent = withStyles((theme: Theme) => ({\n  root: {\n    padding: theme.spacing(2),\n  },\n}))(MuiDialogContent);\n\nconst DialogActions = withStyles((theme: Theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(1),\n  },\n}))(MuiDialogActions);\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    nested: {\n      paddingLeft: theme.spacing(4),\n    },\n  }),\n);\n\nfunction handleClick(event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) {\n    event.preventDefault();\n    console.info('You clicked a breadcrumb.');\n  }\n  \n  function Breadcrumb() {\n    return (\n      <Breadcrumbs separator={<Separator />} >\n        <Typography color=\"textPrimary\">NSE</Typography>\n        <Typography color=\"textPrimary\">Exploit</Typography>\n        <Typography color=\"primary\" style={{fontWeight: \"bold\"}}>SMB</Typography>\n      </Breadcrumbs>\n    );\n  }\n\nexport default function CustomizedDialogs() {\n  const [open, setOpen] = React.useState(false);\n  const classes = useStyles();\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div>\n      <ListItem button className={classes.nested} onClick={handleClickOpen}>\n        <ListItemIcon>\n            <ExtensionIcon />\n        </ListItemIcon>\n        <ListItemText>SMB</ListItemText>\n    </ListItem>\n      <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n          <Breadcrumb />\n        </DialogTitle>\n        <DialogContent dividers>\n          <Grid container justify=\"center\" spacing={3}>\n              {NSEoption.map((option) => (\n                <Grid item xs={6}>\n                    <Tooltip arrow placement=\"top\" title={option.des}>\n                        <FormControlLabel\n                            value={option.id}\n                            control={<Checkbox color=\"primary\" />}\n                            label={option.id}\n                            labelPlacement=\"end\"\n                        />\n                    </Tooltip>\n                </Grid>\n              ))}\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button autoFocus onClick={handleClose} color=\"primary\">\n            Save changes\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Discovery/Broadcast.tsx",["479","480"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/Drawer.tsx",["481","482","483"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Views/ScanHistory.tsx",[],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Views/ScanResult.tsx",[],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/defaultScanModes/pingScanMode.tsx",["484","485","486","487","488"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/CustomisedScanMode.tsx",["489","490","491","492","493","494","495","496","497","498","499","500","501","502"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/ScanComparison.tsx",["503","504","505","506","507","508","509","510","511","512","513","514","515","516","517","518","519","520","521","522","523","524","525","526","527","528","529","530","531","532","533","534","535","536","537"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanMode.tsx",["538","539","540","541","542","543"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/ScanResults/CVEResult.tsx",["544","545","546"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/nonTCPoptions.tsx",[],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Exploit/Others.tsx",["547","548"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/Ping.tsx",["549","550"],"import React from 'react';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Grid from '@material-ui/core/Grid';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport TextField from '@material-ui/core/TextField';\n\nimport { Ping } from './NewModeOptions'\n\nexport default function FormControlLabelPosition() {\n  return (\n    <>\n      <Grid container spacing={3}>\n        {Ping.map((option) => (\n          <Grid item xs={12}>\n            <Tooltip title={option.tooltip} arrow placement=\"right\">\n              <FormControl component=\"fieldset\" style={{width: 450}}>\n                <FormControlLabel\n                  value={option.value}\n                  control={<Checkbox color=\"primary\" />}\n                  label={option.des}\n                  labelPlacement=\"end\"\n                />\n                {\n                  option.input === true ?\n                    <>\n                      <TextField \n                          label={`Example Input: ${option.egInput}`} \n                          margin=\"dense\" \n                          size=\"small\"\n                          variant=\"outlined\"\n                          style={{\n                            width: \"100%\",\n                            textAlignLast: \"center\",\n                          }}\n                      />\n                    </>\n                      :\n                    null\n                }\n              </FormControl>\n            </Tooltip>\n          </Grid>\n        ))}\n      </Grid>\n    </>\n  );\n}\n",["551","552"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Discovery/Server.tsx",["553","554"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Vulnerability/SMB.tsx",["555","556"],"import React from 'react';\nimport { createStyles, Theme, withStyles, WithStyles, makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ExtensionIcon from '@material-ui/icons/ExtensionOutlined';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Grid from '@material-ui/core/Grid';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox, { CheckboxProps } from '@material-ui/core/Checkbox';\n\nimport Typography from '@material-ui/core/Typography';\nimport Separator from '@material-ui/icons/ArrowRightOutlined';\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\n\n// NSE Options\nimport NSEoption from './json/SMB.json'\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      margin: 0,\n      padding: theme.spacing(2),\n    },\n    closeButton: {\n      position: 'absolute',\n      right: theme.spacing(1),\n      top: theme.spacing(1),\n      color: theme.palette.grey[500],\n    },\n  });\n\nexport interface DialogTitleProps extends WithStyles<typeof styles> {\n  id: string;\n  children: React.ReactNode;\n  onClose: () => void;\n}\n\nconst DialogTitle = withStyles(styles)((props: DialogTitleProps) => {\n  const { children, classes, onClose, ...other } = props;\n  return (\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\n      <Typography variant=\"h6\">{children}</Typography>\n      {onClose ? (\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n    </MuiDialogTitle>\n  );\n});\n\nconst DialogContent = withStyles((theme: Theme) => ({\n  root: {\n    padding: theme.spacing(2),\n  },\n}))(MuiDialogContent);\n\nconst DialogActions = withStyles((theme: Theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(1),\n  },\n}))(MuiDialogActions);\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    nested: {\n      paddingLeft: theme.spacing(4),\n    },\n  }),\n);\n\nfunction handleClick(event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) {\n    event.preventDefault();\n    console.info('You clicked a breadcrumb.');\n  }\n  \n  function Breadcrumb() {\n    return (\n      <Breadcrumbs separator={<Separator />} >\n        <Typography color=\"textPrimary\">NSE</Typography>\n        <Typography color=\"textPrimary\">Vulnerability</Typography>\n        <Typography color=\"primary\" style={{fontWeight: \"bold\"}}>SMB</Typography>\n      </Breadcrumbs>\n    );\n  }\n\nexport default function CustomizedDialogs() {\n  const [open, setOpen] = React.useState(false);\n  const classes = useStyles();\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div>\n      <ListItem button className={classes.nested} onClick={handleClickOpen}>\n        <ListItemIcon>\n            <ExtensionIcon />\n        </ListItemIcon>\n        <ListItemText>SMB</ListItemText>\n    </ListItem>\n      <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n          <Breadcrumb />\n        </DialogTitle>\n        <DialogContent dividers>\n          <Grid container justify=\"center\" spacing={3}>\n              {NSEoption.map((option) => (\n                <Grid item xs={6}>\n                    <Tooltip arrow placement=\"top\" title={option.des}>\n                        <FormControlLabel\n                            value={option.id}\n                            control={<Checkbox color=\"primary\" />}\n                            label={option.id}\n                            labelPlacement=\"end\"\n                        />\n                    </Tooltip>\n                </Grid>\n              ))}\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button autoFocus onClick={handleClose} color=\"primary\">\n            Save changes\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Exploit/FTP.tsx",["557","558"],"import React from 'react';\nimport { createStyles, Theme, withStyles, WithStyles, makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ExtensionIcon from '@material-ui/icons/ExtensionOutlined';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Grid from '@material-ui/core/Grid';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox, { CheckboxProps } from '@material-ui/core/Checkbox';\n\nimport Typography from '@material-ui/core/Typography';\nimport Separator from '@material-ui/icons/ArrowRightOutlined';\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\n\n// NSE Options\nimport NSEoption from './json/FTP.json'\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      margin: 0,\n      padding: theme.spacing(2),\n    },\n    closeButton: {\n      position: 'absolute',\n      right: theme.spacing(1),\n      top: theme.spacing(1),\n      color: theme.palette.grey[500],\n    },\n  });\n\nexport interface DialogTitleProps extends WithStyles<typeof styles> {\n  id: string;\n  children: React.ReactNode;\n  onClose: () => void;\n}\n\nconst DialogTitle = withStyles(styles)((props: DialogTitleProps) => {\n  const { children, classes, onClose, ...other } = props;\n  return (\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\n      <Typography variant=\"h6\">{children}</Typography>\n      {onClose ? (\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n    </MuiDialogTitle>\n  );\n});\n\nconst DialogContent = withStyles((theme: Theme) => ({\n  root: {\n    padding: theme.spacing(2),\n  },\n}))(MuiDialogContent);\n\nconst DialogActions = withStyles((theme: Theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(1),\n  },\n}))(MuiDialogActions);\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    nested: {\n      paddingLeft: theme.spacing(4),\n    },\n  }),\n);\n\nfunction handleClick(event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) {\n    event.preventDefault();\n    console.info('You clicked a breadcrumb.');\n  }\n  \n  function Breadcrumb() {\n    return (\n      <Breadcrumbs separator={<Separator />} >\n        <Typography color=\"textPrimary\">NSE</Typography>\n        <Typography color=\"textPrimary\">Exploit</Typography>\n        <Typography color=\"primary\" style={{fontWeight: \"bold\"}}>FTP</Typography>\n      </Breadcrumbs>\n    );\n  }\n\nexport default function CustomizedDialogs() {\n  const [open, setOpen] = React.useState(false);\n  const classes = useStyles();\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div>\n      <ListItem button className={classes.nested} onClick={handleClickOpen}>\n        <ListItemIcon>\n            <ExtensionIcon />\n        </ListItemIcon>\n        <ListItemText>FTP</ListItemText>\n    </ListItem>\n      <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n          <Breadcrumb />\n        </DialogTitle>\n        <DialogContent dividers>\n          <Grid container justify=\"center\" spacing={3}>\n              {NSEoption.map((option) => (\n                <Grid item xs={6}>\n                    <Tooltip arrow placement=\"top\" title={option.des}>\n                        <FormControlLabel\n                            value={option.id}\n                            control={<Checkbox color=\"primary\" />}\n                            label={option.id}\n                            labelPlacement=\"end\"\n                        />\n                    </Tooltip>\n                </Grid>\n              ))}\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button autoFocus onClick={handleClose} color=\"primary\">\n            Save changes\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Discovery/IP.tsx",["559","560"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/reportWebVitals.ts",[],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/defaultScanModes/nonPingScanMode.tsx",["561","562","563","564","565"],"import React from 'react';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport { Switch, Route, Link, BrowserRouter } from \"react-router-dom\";\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography'\nimport TextField from '@material-ui/core/TextField';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Slider from '@material-ui/core/Slider';\n\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Switcher from '@material-ui/core/Switch';\nimport Button from '@material-ui/core/Button';\n\nimport IconButton from '@material-ui/core/IconButton';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport CloseIcon from '@material-ui/icons/Close';\n\nimport ScanModeIcon from '@material-ui/icons/Settings';\n\nimport '../../Styles/DefaultScanMode.css'\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    paper: {\n      padding: theme.spacing(2),\n      textAlign: 'left',\n      backgroundColor: \"#fefefe\",\n      color: \"#333333\",\n    },\n    centerGrid: {\n        textAlign: \"center\",\n        marginTop: 15,\n    },\n    avatarText: {\n        background: \"#4A92FF\",\n        borderRadius: 6,\n        color: \"#fff\",\n        padding: \"2px 6px\",\n    },  \n    switch: {\n        disaply: \"inline-block\",\n    },\n  }),\n);\n\nexport default function CenteredGrid() {\n  const classes = useStyles();\n  const [value, setValue] = React.useState<number>(4);\n\n  const handleChange = (event: any, newValue: number | number[]) => {\n    setValue(newValue as number);\n  };\n\n  const [state, setState] = React.useState({\n    Pn: true,\n  });\n\n  const handleSwitchChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setState({ ...state, [event.target.name]: event.target.checked });\n  };\n\n  const [open, setOpen] = React.useState(false);\n\n  const handleClick = () => {\n    setOpen(true);\n  };\n\n  const handleClose = (event: React.SyntheticEvent | React.MouseEvent, reason?: string) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    setOpen(false);\n  };\n\n  return (\n    <div className={classes.root}>\n      <Grid container spacing={5} justify=\"center\" alignItems=\"center\">\n       \n        <Grid item xs={10}>\n            <Paper className={classes.paper}>\n                <Typography variant=\"h6\">\n                    Non-Ping Scan Modes\n                </Typography>\n                    <br/>\n                <div>\n                    <TextField \n                        id=\"outlined-basic\" \n                        label=\"Current Command\" \n                        defaultValue=\"nmap -v -sU -sT -p -U:161, T:80 -T0 + [ Target IP / Domain ]\"\n                        variant=\"outlined\" \n                        size=\"small\"\n                        style={{\n                            width: \"80%\",\n                            marginLeft: 85,\n                            textAlignLast: \"center\",\n                        }}\n                        inputProps={{ \n                            readOnly: true, \n                        }}\n                    />\n                </div>\n                    <br/>\n                <div className={classes.root}>\n                    \n                </div>\n            </Paper>\n        </Grid>\n\n        <Grid item xs={10}>\n            <Paper className={classes.paper}>\n                <Typography variant=\"h6\">\n                    Scan Frequency\n                </Typography>\n                    <br/>\n                <div>\n                     <Slider \n                        value={value} \n                        onChange={handleChange} \n                        max={5}\n                        min={0}\n                        step={1}\n                        valueLabelDisplay=\"on\"\n                        style={{\n                            width: \"70%\",\n                            marginLeft: 145,\n                        }}    \n                    />\n                </div>\n                    <br/>\n                <Typography style={{textAlign: \"right\",marginRight: 35}}>\n                    -T&nbsp;\n                    <Tooltip \n                        title=\"[ -T ] --- Specifies the timing (Timing) used in the scanning process, there are always 6 levels (0-5), the level increases, the faster the scanning speed.\" \n                        placement=\"top\" \n                        arrow\n                    >\n                        <span className={classes.avatarText}>{value}</span>\n                    </Tooltip>\n                </Typography>\n            </Paper>\n        </Grid>\n\n        <Grid item xs={10}>\n           <Paper className={classes.paper}>\n                <Typography variant=\"h6\">\n                    Flags\n                </Typography>\n                    <br/>\n                <div style={{textAlign: \"center\"}}>\n                    <FormControl component=\"fieldset\">\n                    <table className=\"scanModeSettingFlagTable\">\n                        <tr>\n                            <td>\n                                <RadioGroup row aria-label=\"position\" name=\"position\" defaultValue=\"top\">\n                                    <Tooltip title=\"Increase the verbosity level\" placement=\"top\" arrow>\n                                        <FormControlLabel\n                                            value=\"-v\"\n                                            control={<Radio color=\"primary\" />}\n                                            label=\"-v\"\n                                            labelPlacement=\"end\"\n                                        />\n                                    </Tooltip>\n                                    <Tooltip title=\"Use more v for greater effect\" placement=\"top\" arrow>\n                                        <FormControlLabel\n                                            value=\"-vv\"\n                                            control={<Radio color=\"primary\" />}\n                                            label=\"-vv\"\n                                            labelPlacement=\"end\"\n                                        />\n                                    </Tooltip>\n                                </RadioGroup>\n                            </td>\n                            <td>\n                                <Tooltip title=\"Disable host discovery. Port scan only.\" placement=\"top\" arrow>\n                                    <FormControlLabel\n                                        control={\n                                            <Switcher\n                                                checked={state.Pn}\n                                                onChange={handleSwitchChange}\n                                                name=\"Pn\"\n                                                color=\"primary\"\n                                            />\n                                        }\n                                        label=\"-Pn\"\n                                        className={classes.switch}\n                                    />\n                                </Tooltip>\n                            </td>\n                        </tr>\n                    </table>\n                </FormControl>\n                </div>\n            </Paper>\n        </Grid>\n\n        <Grid item xs={10} style={{position: \"absolute\", width: 902, bottom: 0}}>\n            <Paper className={classes.paper}>\n                <Link to=\"/defaultScanMode\">\n                    <Button variant=\"contained\">Back</Button>\n                </Link>                \n                <Button variant=\"contained\" style={{float: 'right'}} onClick={handleClick}>Save</Button>\n                <Snackbar\n                    anchorOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'left',\n                    }}\n                    open={open}\n                    autoHideDuration={6000}\n                    onClose={handleClose}\n                    message=\"Settings Save Successfully\"\n                    action={\n                    <React.Fragment>\n                         <Link to=\"/defaultScanMode\">\n                            <IconButton size=\"small\" aria-label=\"close\" color=\"inherit\" onClick={handleClose}>\n                                <CloseIcon fontSize=\"small\" style={{color: \"#fff\"}}/>\n                            </IconButton>\n                        </Link>\n                    </React.Fragment>\n                    }\n                />\n            </Paper>\n        </Grid>\n\n      </Grid>\n      \n    </div>\n  );\n}\n","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/defaultScanModes/lightningScanMode.tsx",["566","567","568","569","570"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/target.tsx",["571","572"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Vulnerability/SSL.tsx",["573","574"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Discovery/HTTP.tsx",["575","576"],"import React from 'react';\nimport { createStyles, Theme, withStyles, WithStyles, makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ExtensionIcon from '@material-ui/icons/ExtensionOutlined';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Grid from '@material-ui/core/Grid';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox, { CheckboxProps } from '@material-ui/core/Checkbox';\n\nimport Typography from '@material-ui/core/Typography';\nimport Separator from '@material-ui/icons/ArrowRightOutlined';\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\n\n// NSE Options\nimport NSEoption from './json/HTTP.json'\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      margin: 0,\n      padding: theme.spacing(2),\n    },\n    closeButton: {\n      position: 'absolute',\n      right: theme.spacing(1),\n      top: theme.spacing(1),\n      color: theme.palette.grey[500],\n    },\n  });\n\nexport interface DialogTitleProps extends WithStyles<typeof styles> {\n  id: string;\n  children: React.ReactNode;\n  onClose: () => void;\n}\n\nconst DialogTitle = withStyles(styles)((props: DialogTitleProps) => {\n  const { children, classes, onClose, ...other } = props;\n  return (\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\n      <Typography variant=\"h6\">{children}</Typography>\n      {onClose ? (\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n    </MuiDialogTitle>\n  );\n});\n\nconst DialogContent = withStyles((theme: Theme) => ({\n  root: {\n    padding: theme.spacing(2),\n  },\n}))(MuiDialogContent);\n\nconst DialogActions = withStyles((theme: Theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(1),\n  },\n}))(MuiDialogActions);\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    nested: {\n      paddingLeft: theme.spacing(4),\n    },\n  }),\n);\n\nfunction handleClick(event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) {\n    event.preventDefault();\n    console.info('You clicked a breadcrumb.');\n  }\n  \n  function Breadcrumb() {\n    return (\n      <Breadcrumbs separator={<Separator />} >\n        <Typography color=\"textPrimary\">NSE</Typography>\n        <Typography color=\"textPrimary\">Discovery</Typography>\n        <Typography color=\"primary\" style={{fontWeight: \"bold\"}}>HTTP</Typography>\n      </Breadcrumbs>\n    );\n  }\n\nexport default function CustomizedDialogs() {\n  const [open, setOpen] = React.useState(false);\n  const classes = useStyles();\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div>\n      <ListItem button className={classes.nested} onClick={handleClickOpen}>\n        <ListItemIcon>\n            <ExtensionIcon />\n        </ListItemIcon>\n        <ListItemText>HTTP</ListItemText>\n    </ListItem>\n      <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n          <Breadcrumb />\n        </DialogTitle>\n        <DialogContent dividers>\n          <Grid container justify=\"center\" spacing={3}>\n              {NSEoption.map((option) => (\n                <Grid item xs={6}>\n                    <Tooltip arrow placement=\"top\" title={option.des}>\n                        <FormControlLabel\n                            value={option.id}\n                            control={<Checkbox color=\"primary\" />}\n                            label={option.id}\n                            labelPlacement=\"end\"\n                        />\n                    </Tooltip>\n                </Grid>\n              ))}\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button autoFocus onClick={handleClose} color=\"primary\">\n            Save changes\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Vulnerability/FTP.tsx",["577","578"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/HomeSettings/ScanRangeDisplay.tsx",["579","580","581"],"import React, {useState} from 'react';\nimport { createStyles, Theme, withStyles, WithStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Typography from '@material-ui/core/Typography';\n\n// Mobx\nimport homeSettingsStatus from '../../Mobx/Models/homeSettingsStatus'\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      margin: 0,\n      padding: theme.spacing(2),\n    },\n    closeButton: {\n      position: 'absolute',\n      right: theme.spacing(1),\n      top: theme.spacing(1),\n      color: theme.palette.grey[500],\n    },\n  });\n\nexport interface DialogTitleProps extends WithStyles<typeof styles> {\n  id: string;\n  children: React.ReactNode;\n  onClose: () => void;\n}\n\nconst DialogTitle = withStyles(styles)((props: DialogTitleProps) => {\n  const { children, classes, onClose, ...other } = props;\n  return (\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\n      <Typography variant=\"h6\">{children}</Typography>\n      {onClose ? (\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n    </MuiDialogTitle>\n  );\n});\n\nconst DialogContent = withStyles((theme: Theme) => ({\n  root: {\n    padding: theme.spacing(2),\n  },\n}))(MuiDialogContent);\n\nconst DialogActions = withStyles((theme: Theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(1),\n  },\n}))(MuiDialogActions);\n\nexport default () => {\n  const [open, setOpen] = useState(false);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const [setRange, setSetRange] = useState('')\n  const RangeCalc = () => {\n    var target = homeSettingsStatus.target;\n    var range  = homeSettingsStatus.range;\n    var subnet = target.split(\"/\").pop();\n    var s: number, e: number, xrange: number;\n\n    if(subnet === '24'){\n        s = 0; e = 256;\n    } else if(subnet === '25') {\n        s = 0; e = 128;\n    } else if(subnet === '26') {\n        s = 0; e = 64;\n    } else if(subnet === '27') {\n        s = 0; e = 32;\n    } else if(subnet === '28') {\n        s = 0; e = 16;\n    } else if(subnet === '29') {\n        s = 0; e = 8;\n    } else {\n        s = 0; e = 4;\n    }\n\n    s += 1;\n    e -= 2;\n    \n    range === 'every5hosts' ? xrange = 5 :\n    range === 'every10hosts' ? xrange = 10 :\n    range === 'every15hosts' ? xrange = 15 :\n    range === 'every20hosts' ? xrange = 20 : xrange = 404\n\n    // Calculation\n    var i;\n    var calced = target.substr(0, target.indexOf('.0')) + '.'; \n    if(range === 'evenOnly'){\n        for(i=s; i<=e; i++){\n            if(i % 2 === 0){// Get even number\n                calced += i + ',';\n            }\n        }\n    } else if(range === 'oddOnly') {\n        for(i=s; i<=e; i++){\n            if(i % 2 === 1){ // Get odd numbers\n                calced += i + ',';\n            }\n        }\n    } else if(range === 'every5hosts') {\n        for(i=s; i<=e; i++){\n            if(i % 5 === 1){ // Get every 5 hosts\n                calced += i + ',';\n            }\n        }\n    } else if(range === 'every10hosts') {\n        for(i=s; i<=e; i++){\n            if(i % 10 === 1){ // Get every 10 hosts\n                calced += i + ',';\n            }\n        }\n    } else if(range === 'every15hosts') {\n        for(i=s; i<=e; i++){\n            if(i % 15 === 1){ // Get every 15 hosts\n                calced += i + ',';\n            }\n        }\n    } else if(range === 'every20hosts') {\n        for(i=s; i<=e; i++){\n            if(i % 20 === 1){ // Get every 20 hosts\n                calced += i + ',';\n            }\n        }\n    }\n    \n    var output: any, exceeded: boolean = false;\n    var dotOneTarget: any = target.slice(0, -4) + '1' ;\n    if(s + e < xrange){\n        output = \"**For /\" + subnet + \", there's only \" + (s + e - 1) + ' hosts only.**'; \n        exceeded = true;\n        homeSettingsStatus.setRangeTarget(output)\n    } else {\n        output = calced.slice(0, -1);\n        exceeded = false;\n        homeSettingsStatus.setRangeTarget(output)\n    }\n\n    return(\n        <>\n            <Typography style={{whiteSpace: 'normal'}}>\n                {output}{exceeded === true ? <><br/><br/>{dotOneTarget}</> : null}\n            </Typography>\n        </>\n    )\n\n  }\n\n  return (\n    <div>\n        <Button \n            variant=\"outlined\" \n            style={{\n                width: \"100%\", \n                whiteSpace: \"nowrap\",\n            }}\n            onClick={handleClickOpen}\n            size=\"small\"\n            color=\"primary\"\n            disabled={homeSettingsStatus.range === '' || homeSettingsStatus.range === 'none' ? true : false}\n        >\n            Set Range:&nbsp;\n            {\n                homeSettingsStatus.range === 'none' ? 'none':\n                homeSettingsStatus.range === 'oddOnly' ?  'Odd Numbers Only' :\n                homeSettingsStatus.range === 'evenOnly' ?  'Even Numbers Only' :\n                homeSettingsStatus.range === 'every5hosts' ?  'Every 5 Hosts' :\n                homeSettingsStatus.range === 'every10hosts' ?  'Every 10 Hosts' :\n                homeSettingsStatus.range === 'every15hosts' ?  'Every 15 Hosts' : 'Every 20 Hosts'\n            }\n        </Button>\n      <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open} fullWidth maxWidth=\"sm\">\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n            Scan Range\n        </DialogTitle>\n        <DialogContent dividers>\n            <Grid container justify=\"center\" spacing={4}>\n                <Grid item xs={6} style={{textAlign: 'center'}}>\n                    <Paper style={{background: \"#f9f9f9\", padding: \"15px 15px\"}} elevation={0}>\n                        <Typography>\n                            {homeSettingsStatus.target}\n                        </Typography>\n                    </Paper>\n                </Grid>\n                <Grid item xs={6} style={{textAlign: 'center'}}>\n                    <Paper style={{background: \"#f9f9f9\", padding: \"15px 15px\"}} elevation={0}>\n                        <Typography>\n                            {\n                                homeSettingsStatus.range === '' ? 'none' :\n                                homeSettingsStatus.range === 'oddOnly' ?  'Odd Numbers Only' :\n                                homeSettingsStatus.range === 'evenOnly' ?  'Even Numbers Only' :\n                                homeSettingsStatus.range === 'every5hosts' ?  'Every 5 Hosts' :\n                                homeSettingsStatus.range === 'every10hosts' ?  'Every 10 Hosts' :\n                                homeSettingsStatus.range === 'every15hosts' ?  'Every 15 Hosts' : 'Every 20 Hosts'\n                            }\n                        </Typography>\n                    </Paper>\n                </Grid>\n                <Grid item xs={12} style={{textAlign: 'center'}}>\n                    <Paper style={{background: \"#f9f9f9\", padding: \"15px 15px\"}} elevation={0}>\n                        <RangeCalc />\n                    </Paper>\n                </Grid>\n            </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button autoFocus onClick={handleClose} color=\"primary\">\n            Save changes\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/ScanResults/HostsAndPorts.tsx",["582","583","584","585","586","587","588","589","590"],{"ruleId":"591","severity":1,"message":"592","line":5,"column":8,"nodeType":"593","messageId":"594","endLine":5,"endColumn":16},{"ruleId":"591","severity":1,"message":"595","line":11,"column":8,"nodeType":"593","messageId":"594","endLine":11,"endColumn":25},{"ruleId":"591","severity":1,"message":"596","line":22,"column":8,"nodeType":"593","messageId":"594","endLine":22,"endColumn":22},{"ruleId":"591","severity":1,"message":"597","line":23,"column":8,"nodeType":"593","messageId":"594","endLine":23,"endColumn":22},{"ruleId":"591","severity":1,"message":"598","line":36,"column":8,"nodeType":"593","messageId":"594","endLine":36,"endColumn":16},{"ruleId":"591","severity":1,"message":"599","line":37,"column":10,"nodeType":"593","messageId":"594","endLine":37,"endColumn":20},{"ruleId":"591","severity":1,"message":"600","line":37,"column":22,"nodeType":"593","messageId":"594","endLine":37,"endColumn":34},{"ruleId":"591","severity":1,"message":"601","line":38,"column":10,"nodeType":"593","messageId":"594","endLine":38,"endColumn":20},{"ruleId":"591","severity":1,"message":"602","line":39,"column":10,"nodeType":"593","messageId":"594","endLine":39,"endColumn":18},{"ruleId":"603","severity":1,"message":"604","line":56,"column":1,"nodeType":"605","endLine":490,"endColumn":2},{"ruleId":"591","severity":1,"message":"606","line":1,"column":26,"nodeType":"593","messageId":"594","endLine":1,"endColumn":35},{"ruleId":"591","severity":1,"message":"607","line":3,"column":10,"nodeType":"593","messageId":"594","endLine":3,"endColumn":16},{"ruleId":"591","severity":1,"message":"608","line":3,"column":18,"nodeType":"593","messageId":"594","endLine":3,"endColumn":23},{"ruleId":"591","severity":1,"message":"609","line":3,"column":25,"nodeType":"593","messageId":"594","endLine":3,"endColumn":29},{"ruleId":"591","severity":1,"message":"610","line":3,"column":31,"nodeType":"593","messageId":"594","endLine":3,"endColumn":44},{"ruleId":"591","severity":1,"message":"611","line":19,"column":8,"nodeType":"593","messageId":"594","endLine":19,"endColumn":15},{"ruleId":"591","severity":1,"message":"592","line":20,"column":8,"nodeType":"593","messageId":"594","endLine":20,"endColumn":16},{"ruleId":"591","severity":1,"message":"612","line":21,"column":8,"nodeType":"593","messageId":"594","endLine":21,"endColumn":15},{"ruleId":"591","severity":1,"message":"613","line":22,"column":8,"nodeType":"593","messageId":"594","endLine":22,"endColumn":28},{"ruleId":"591","severity":1,"message":"614","line":23,"column":8,"nodeType":"593","messageId":"594","endLine":23,"endColumn":12},{"ruleId":"591","severity":1,"message":"615","line":26,"column":8,"nodeType":"593","messageId":"594","endLine":26,"endColumn":22},{"ruleId":"591","severity":1,"message":"616","line":30,"column":10,"nodeType":"593","messageId":"594","endLine":30,"endColumn":29},{"ruleId":"591","severity":1,"message":"617","line":32,"column":10,"nodeType":"593","messageId":"594","endLine":32,"endColumn":20},{"ruleId":"591","severity":1,"message":"601","line":32,"column":22,"nodeType":"593","messageId":"594","endLine":32,"endColumn":32},{"ruleId":"591","severity":1,"message":"618","line":32,"column":34,"nodeType":"593","messageId":"594","endLine":32,"endColumn":44},{"ruleId":"591","severity":1,"message":"619","line":32,"column":46,"nodeType":"593","messageId":"594","endLine":32,"endColumn":56},{"ruleId":"591","severity":1,"message":"620","line":32,"column":58,"nodeType":"593","messageId":"594","endLine":32,"endColumn":66},{"ruleId":"591","severity":1,"message":"621","line":64,"column":7,"nodeType":"593","messageId":"594","endLine":64,"endColumn":21},{"ruleId":"591","severity":1,"message":"622","line":67,"column":9,"nodeType":"593","messageId":"594","endLine":67,"endColumn":20},{"ruleId":"591","severity":1,"message":"623","line":112,"column":10,"nodeType":"593","messageId":"594","endLine":112,"endColumn":17},{"ruleId":"591","severity":1,"message":"624","line":118,"column":10,"nodeType":"593","messageId":"594","endLine":118,"endColumn":16},{"ruleId":"591","severity":1,"message":"625","line":118,"column":18,"nodeType":"593","messageId":"594","endLine":118,"endColumn":27},{"ruleId":"626","severity":1,"message":"627","line":121,"column":54,"nodeType":"628","messageId":"629","endLine":121,"endColumn":56},{"ruleId":"591","severity":1,"message":"630","line":127,"column":10,"nodeType":"593","messageId":"594","endLine":127,"endColumn":15},{"ruleId":"591","severity":1,"message":"631","line":127,"column":17,"nodeType":"593","messageId":"594","endLine":127,"endColumn":25},{"ruleId":"591","severity":1,"message":"632","line":1,"column":16,"nodeType":"593","messageId":"594","endLine":1,"endColumn":24},{"ruleId":"591","severity":1,"message":"633","line":2,"column":43,"nodeType":"593","messageId":"594","endLine":2,"endColumn":50},{"ruleId":"591","severity":1,"message":"607","line":3,"column":10,"nodeType":"593","messageId":"594","endLine":3,"endColumn":16},{"ruleId":"591","severity":1,"message":"608","line":3,"column":18,"nodeType":"593","messageId":"594","endLine":3,"endColumn":23},{"ruleId":"591","severity":1,"message":"609","line":3,"column":25,"nodeType":"593","messageId":"594","endLine":3,"endColumn":29},{"ruleId":"591","severity":1,"message":"610","line":3,"column":31,"nodeType":"593","messageId":"594","endLine":3,"endColumn":44},{"ruleId":"591","severity":1,"message":"634","line":7,"column":8,"nodeType":"593","messageId":"594","endLine":7,"endColumn":17},{"ruleId":"591","severity":1,"message":"635","line":15,"column":8,"nodeType":"593","messageId":"594","endLine":15,"endColumn":19},{"ruleId":"591","severity":1,"message":"614","line":17,"column":8,"nodeType":"593","messageId":"594","endLine":17,"endColumn":12},{"ruleId":"591","severity":1,"message":"636","line":21,"column":10,"nodeType":"593","messageId":"594","endLine":21,"endColumn":14},{"ruleId":"591","severity":1,"message":"637","line":21,"column":16,"nodeType":"593","messageId":"594","endLine":21,"endColumn":20},{"ruleId":"591","severity":1,"message":"638","line":21,"column":22,"nodeType":"593","messageId":"594","endLine":21,"endColumn":26},{"ruleId":"591","severity":1,"message":"639","line":21,"column":28,"nodeType":"593","messageId":"594","endLine":21,"endColumn":36},{"ruleId":"591","severity":1,"message":"640","line":21,"column":38,"nodeType":"593","messageId":"594","endLine":21,"endColumn":48},{"ruleId":"591","severity":1,"message":"641","line":26,"column":10,"nodeType":"593","messageId":"594","endLine":26,"endColumn":20},{"ruleId":"591","severity":1,"message":"642","line":29,"column":10,"nodeType":"593","messageId":"594","endLine":29,"endColumn":14},{"ruleId":"591","severity":1,"message":"643","line":137,"column":9,"nodeType":"593","messageId":"594","endLine":137,"endColumn":22},{"ruleId":"591","severity":1,"message":"644","line":142,"column":10,"nodeType":"593","messageId":"594","endLine":142,"endColumn":17},{"ruleId":"591","severity":1,"message":"645","line":144,"column":9,"nodeType":"593","messageId":"594","endLine":144,"endColumn":20},{"ruleId":"591","severity":1,"message":"646","line":148,"column":9,"nodeType":"593","messageId":"594","endLine":148,"endColumn":21},{"ruleId":"591","severity":1,"message":"647","line":152,"column":12,"nodeType":"593","messageId":"594","endLine":152,"endColumn":23},{"ruleId":"648","replacedBy":"649"},{"ruleId":"650","replacedBy":"651"},{"ruleId":"591","severity":1,"message":"632","line":1,"column":16,"nodeType":"593","messageId":"594","endLine":1,"endColumn":24},{"ruleId":"591","severity":1,"message":"617","line":9,"column":10,"nodeType":"593","messageId":"594","endLine":9,"endColumn":20},{"ruleId":"591","severity":1,"message":"618","line":9,"column":34,"nodeType":"593","messageId":"594","endLine":9,"endColumn":44},{"ruleId":"591","severity":1,"message":"619","line":9,"column":46,"nodeType":"593","messageId":"594","endLine":9,"endColumn":56},{"ruleId":"591","severity":1,"message":"620","line":9,"column":58,"nodeType":"593","messageId":"594","endLine":9,"endColumn":66},{"ruleId":"591","severity":1,"message":"652","line":12,"column":10,"nodeType":"593","messageId":"594","endLine":12,"endColumn":20},{"ruleId":"591","severity":1,"message":"641","line":13,"column":10,"nodeType":"593","messageId":"594","endLine":13,"endColumn":20},{"ruleId":"591","severity":1,"message":"653","line":15,"column":8,"nodeType":"593","messageId":"594","endLine":15,"endColumn":21},{"ruleId":"591","severity":1,"message":"642","line":16,"column":10,"nodeType":"593","messageId":"594","endLine":16,"endColumn":14},{"ruleId":"603","severity":1,"message":"604","line":68,"column":1,"nodeType":"605","endLine":461,"endColumn":2},{"ruleId":"591","severity":1,"message":"622","line":71,"column":9,"nodeType":"593","messageId":"594","endLine":71,"endColumn":20},{"ruleId":"626","severity":1,"message":"654","line":78,"column":19,"nodeType":"628","messageId":"629","endLine":78,"endColumn":21},{"ruleId":"626","severity":1,"message":"627","line":133,"column":45,"nodeType":"628","messageId":"629","endLine":133,"endColumn":47},{"ruleId":"626","severity":1,"message":"627","line":186,"column":44,"nodeType":"628","messageId":"629","endLine":186,"endColumn":46},{"ruleId":"626","severity":1,"message":"627","line":204,"column":48,"nodeType":"628","messageId":"629","endLine":204,"endColumn":50},{"ruleId":"626","severity":1,"message":"627","line":220,"column":50,"nodeType":"628","messageId":"629","endLine":220,"endColumn":52},{"ruleId":"626","severity":1,"message":"627","line":259,"column":39,"nodeType":"628","messageId":"629","endLine":259,"endColumn":41},{"ruleId":"626","severity":1,"message":"627","line":277,"column":40,"nodeType":"628","messageId":"629","endLine":277,"endColumn":42},{"ruleId":"626","severity":1,"message":"627","line":298,"column":52,"nodeType":"628","messageId":"629","endLine":298,"endColumn":54},{"ruleId":"626","severity":1,"message":"627","line":315,"column":47,"nodeType":"628","messageId":"629","endLine":315,"endColumn":49},{"ruleId":"626","severity":1,"message":"627","line":333,"column":44,"nodeType":"628","messageId":"629","endLine":333,"endColumn":46},{"ruleId":"626","severity":1,"message":"627","line":352,"column":43,"nodeType":"628","messageId":"629","endLine":352,"endColumn":45},{"ruleId":"626","severity":1,"message":"627","line":367,"column":46,"nodeType":"628","messageId":"629","endLine":367,"endColumn":48},{"ruleId":"626","severity":1,"message":"627","line":382,"column":41,"nodeType":"628","messageId":"629","endLine":382,"endColumn":43},{"ruleId":"626","severity":1,"message":"627","line":431,"column":47,"nodeType":"628","messageId":"629","endLine":431,"endColumn":49},{"ruleId":"626","severity":1,"message":"627","line":446,"column":44,"nodeType":"628","messageId":"629","endLine":446,"endColumn":46},{"ruleId":"591","severity":1,"message":"632","line":1,"column":16,"nodeType":"593","messageId":"594","endLine":1,"endColumn":24},{"ruleId":"591","severity":1,"message":"655","line":9,"column":8,"nodeType":"593","messageId":"594","endLine":9,"endColumn":13},{"ruleId":"603","severity":1,"message":"604","line":11,"column":1,"nodeType":"605","endLine":25,"endColumn":2},{"ruleId":"648","replacedBy":"656"},{"ruleId":"650","replacedBy":"657"},{"ruleId":"591","severity":1,"message":"607","line":3,"column":10,"nodeType":"593","messageId":"594","endLine":3,"endColumn":16},{"ruleId":"591","severity":1,"message":"608","line":3,"column":18,"nodeType":"593","messageId":"594","endLine":3,"endColumn":23},{"ruleId":"591","severity":1,"message":"610","line":3,"column":31,"nodeType":"593","messageId":"594","endLine":3,"endColumn":44},{"ruleId":"591","severity":1,"message":"658","line":15,"column":8,"nodeType":"593","messageId":"594","endLine":15,"endColumn":17},{"ruleId":"591","severity":1,"message":"659","line":23,"column":8,"nodeType":"593","messageId":"594","endLine":23,"endColumn":20},{"ruleId":"591","severity":1,"message":"607","line":3,"column":10,"nodeType":"593","messageId":"594","endLine":3,"endColumn":16},{"ruleId":"591","severity":1,"message":"608","line":3,"column":18,"nodeType":"593","messageId":"594","endLine":3,"endColumn":23},{"ruleId":"591","severity":1,"message":"610","line":3,"column":31,"nodeType":"593","messageId":"594","endLine":3,"endColumn":44},{"ruleId":"591","severity":1,"message":"658","line":15,"column":8,"nodeType":"593","messageId":"594","endLine":15,"endColumn":17},{"ruleId":"591","severity":1,"message":"659","line":23,"column":8,"nodeType":"593","messageId":"594","endLine":23,"endColumn":20},{"ruleId":"591","severity":1,"message":"607","line":3,"column":10,"nodeType":"593","messageId":"594","endLine":3,"endColumn":16},{"ruleId":"591","severity":1,"message":"608","line":3,"column":18,"nodeType":"593","messageId":"594","endLine":3,"endColumn":23},{"ruleId":"591","severity":1,"message":"610","line":3,"column":31,"nodeType":"593","messageId":"594","endLine":3,"endColumn":44},{"ruleId":"591","severity":1,"message":"660","line":11,"column":8,"nodeType":"593","messageId":"594","endLine":11,"endColumn":13},{"ruleId":"591","severity":1,"message":"661","line":12,"column":8,"nodeType":"593","messageId":"594","endLine":12,"endColumn":18},{"ruleId":"591","severity":1,"message":"658","line":15,"column":8,"nodeType":"593","messageId":"594","endLine":15,"endColumn":17},{"ruleId":"591","severity":1,"message":"659","line":23,"column":8,"nodeType":"593","messageId":"594","endLine":23,"endColumn":20},{"ruleId":"591","severity":1,"message":"662","line":3,"column":8,"nodeType":"593","messageId":"594","endLine":3,"endColumn":21},{"ruleId":"591","severity":1,"message":"663","line":9,"column":8,"nodeType":"593","messageId":"594","endLine":9,"endColumn":17},{"ruleId":"591","severity":1,"message":"664","line":10,"column":8,"nodeType":"593","messageId":"594","endLine":10,"endColumn":18},{"ruleId":"591","severity":1,"message":"665","line":11,"column":8,"nodeType":"593","messageId":"594","endLine":11,"endColumn":16},{"ruleId":"591","severity":1,"message":"666","line":12,"column":8,"nodeType":"593","messageId":"594","endLine":12,"endColumn":23},{"ruleId":"591","severity":1,"message":"667","line":15,"column":8,"nodeType":"593","messageId":"594","endLine":15,"endColumn":18},{"ruleId":"591","severity":1,"message":"668","line":16,"column":8,"nodeType":"593","messageId":"594","endLine":16,"endColumn":21},{"ruleId":"626","severity":1,"message":"627","line":87,"column":17,"nodeType":"628","messageId":"629","endLine":87,"endColumn":19},{"ruleId":"626","severity":1,"message":"627","line":90,"column":23,"nodeType":"628","messageId":"629","endLine":90,"endColumn":25},{"ruleId":"626","severity":1,"message":"627","line":100,"column":19,"nodeType":"628","messageId":"629","endLine":100,"endColumn":21},{"ruleId":"626","severity":1,"message":"627","line":103,"column":23,"nodeType":"628","messageId":"629","endLine":103,"endColumn":25},{"ruleId":"626","severity":1,"message":"627","line":113,"column":19,"nodeType":"628","messageId":"629","endLine":113,"endColumn":21},{"ruleId":"626","severity":1,"message":"627","line":116,"column":17,"nodeType":"628","messageId":"629","endLine":116,"endColumn":19},{"ruleId":"626","severity":1,"message":"627","line":128,"column":23,"nodeType":"628","messageId":"629","endLine":128,"endColumn":25},{"ruleId":"626","severity":1,"message":"627","line":141,"column":40,"nodeType":"628","messageId":"629","endLine":141,"endColumn":42},{"ruleId":"626","severity":1,"message":"627","line":142,"column":44,"nodeType":"628","messageId":"629","endLine":142,"endColumn":46},{"ruleId":"626","severity":1,"message":"627","line":143,"column":48,"nodeType":"628","messageId":"629","endLine":143,"endColumn":50},{"ruleId":"626","severity":1,"message":"627","line":144,"column":52,"nodeType":"628","messageId":"629","endLine":144,"endColumn":54},{"ruleId":"626","severity":1,"message":"627","line":145,"column":56,"nodeType":"628","messageId":"629","endLine":145,"endColumn":58},{"ruleId":"626","severity":1,"message":"627","line":146,"column":56,"nodeType":"628","messageId":"629","endLine":146,"endColumn":58},{"ruleId":"626","severity":1,"message":"627","line":147,"column":52,"nodeType":"628","messageId":"629","endLine":147,"endColumn":54},{"ruleId":"626","severity":1,"message":"627","line":148,"column":48,"nodeType":"628","messageId":"629","endLine":148,"endColumn":50},{"ruleId":"626","severity":1,"message":"627","line":149,"column":44,"nodeType":"628","messageId":"629","endLine":149,"endColumn":46},{"ruleId":"626","severity":1,"message":"627","line":150,"column":40,"nodeType":"628","messageId":"629","endLine":150,"endColumn":42},{"ruleId":"626","severity":1,"message":"627","line":158,"column":22,"nodeType":"628","messageId":"629","endLine":158,"endColumn":24},{"ruleId":"626","severity":1,"message":"627","line":171,"column":40,"nodeType":"628","messageId":"629","endLine":171,"endColumn":42},{"ruleId":"626","severity":1,"message":"627","line":172,"column":44,"nodeType":"628","messageId":"629","endLine":172,"endColumn":46},{"ruleId":"626","severity":1,"message":"627","line":173,"column":48,"nodeType":"628","messageId":"629","endLine":173,"endColumn":50},{"ruleId":"626","severity":1,"message":"627","line":174,"column":52,"nodeType":"628","messageId":"629","endLine":174,"endColumn":54},{"ruleId":"626","severity":1,"message":"627","line":182,"column":22,"nodeType":"628","messageId":"629","endLine":182,"endColumn":24},{"ruleId":"626","severity":1,"message":"627","line":195,"column":40,"nodeType":"628","messageId":"629","endLine":195,"endColumn":42},{"ruleId":"626","severity":1,"message":"627","line":196,"column":44,"nodeType":"628","messageId":"629","endLine":196,"endColumn":46},{"ruleId":"626","severity":1,"message":"627","line":197,"column":48,"nodeType":"628","messageId":"629","endLine":197,"endColumn":50},{"ruleId":"626","severity":1,"message":"627","line":198,"column":44,"nodeType":"628","messageId":"629","endLine":198,"endColumn":46},{"ruleId":"626","severity":1,"message":"627","line":199,"column":40,"nodeType":"628","messageId":"629","endLine":199,"endColumn":42},{"ruleId":"648","replacedBy":"669"},{"ruleId":"650","replacedBy":"670"},{"ruleId":"591","severity":1,"message":"671","line":17,"column":20,"nodeType":"593","messageId":"594","endLine":17,"endColumn":33},{"ruleId":"591","severity":1,"message":"672","line":81,"column":10,"nodeType":"593","messageId":"594","endLine":81,"endColumn":21},{"ruleId":"591","severity":1,"message":"671","line":17,"column":20,"nodeType":"593","messageId":"594","endLine":17,"endColumn":33},{"ruleId":"591","severity":1,"message":"672","line":81,"column":10,"nodeType":"593","messageId":"594","endLine":81,"endColumn":21},{"ruleId":"591","severity":1,"message":"671","line":17,"column":20,"nodeType":"593","messageId":"594","endLine":17,"endColumn":33},{"ruleId":"591","severity":1,"message":"672","line":81,"column":10,"nodeType":"593","messageId":"594","endLine":81,"endColumn":21},{"ruleId":"591","severity":1,"message":"632","line":1,"column":16,"nodeType":"593","messageId":"594","endLine":1,"endColumn":24},{"ruleId":"591","severity":1,"message":"606","line":1,"column":26,"nodeType":"593","messageId":"594","endLine":1,"endColumn":35},{"ruleId":"591","severity":1,"message":"617","line":4,"column":10,"nodeType":"593","messageId":"594","endLine":4,"endColumn":20},{"ruleId":"591","severity":1,"message":"601","line":4,"column":22,"nodeType":"593","messageId":"594","endLine":4,"endColumn":32},{"ruleId":"591","severity":1,"message":"618","line":4,"column":34,"nodeType":"593","messageId":"594","endLine":4,"endColumn":44},{"ruleId":"591","severity":1,"message":"652","line":7,"column":10,"nodeType":"593","messageId":"594","endLine":7,"endColumn":20},{"ruleId":"591","severity":1,"message":"673","line":9,"column":8,"nodeType":"593","messageId":"594","endLine":9,"endColumn":17},{"ruleId":"591","severity":1,"message":"642","line":10,"column":10,"nodeType":"593","messageId":"594","endLine":10,"endColumn":14},{"ruleId":"603","severity":1,"message":"604","line":15,"column":1,"nodeType":"605","endLine":36,"endColumn":2},{"ruleId":"626","severity":1,"message":"627","line":22,"column":24,"nodeType":"628","messageId":"629","endLine":22,"endColumn":26},{"ruleId":"648","replacedBy":"674"},{"ruleId":"650","replacedBy":"675"},{"ruleId":"591","severity":1,"message":"676","line":3,"column":8,"nodeType":"593","messageId":"594","endLine":3,"endColumn":17},{"ruleId":"591","severity":1,"message":"658","line":6,"column":8,"nodeType":"593","messageId":"594","endLine":6,"endColumn":17},{"ruleId":"591","severity":1,"message":"611","line":7,"column":8,"nodeType":"593","messageId":"594","endLine":7,"endColumn":15},{"ruleId":"648","replacedBy":"677"},{"ruleId":"650","replacedBy":"678"},{"ruleId":"591","severity":1,"message":"671","line":17,"column":20,"nodeType":"593","messageId":"594","endLine":17,"endColumn":33},{"ruleId":"591","severity":1,"message":"672","line":81,"column":10,"nodeType":"593","messageId":"594","endLine":81,"endColumn":21},{"ruleId":"591","severity":1,"message":"671","line":17,"column":20,"nodeType":"593","messageId":"594","endLine":17,"endColumn":33},{"ruleId":"591","severity":1,"message":"672","line":81,"column":10,"nodeType":"593","messageId":"594","endLine":81,"endColumn":21},{"ruleId":"591","severity":1,"message":"671","line":17,"column":20,"nodeType":"593","messageId":"594","endLine":17,"endColumn":33},{"ruleId":"591","severity":1,"message":"672","line":81,"column":10,"nodeType":"593","messageId":"594","endLine":81,"endColumn":21},{"ruleId":"591","severity":1,"message":"679","line":2,"column":8,"nodeType":"593","messageId":"594","endLine":2,"endColumn":12},{"ruleId":"591","severity":1,"message":"676","line":3,"column":8,"nodeType":"593","messageId":"594","endLine":3,"endColumn":17},{"ruleId":"591","severity":1,"message":"658","line":6,"column":8,"nodeType":"593","messageId":"594","endLine":6,"endColumn":17},{"ruleId":"591","severity":1,"message":"680","line":10,"column":8,"nodeType":"593","messageId":"594","endLine":10,"endColumn":14},{"ruleId":"591","severity":1,"message":"681","line":11,"column":8,"nodeType":"593","messageId":"594","endLine":11,"endColumn":16},{"ruleId":"648","replacedBy":"682"},{"ruleId":"650","replacedBy":"683"},{"ruleId":"591","severity":1,"message":"676","line":3,"column":8,"nodeType":"593","messageId":"594","endLine":3,"endColumn":17},{"ruleId":"591","severity":1,"message":"658","line":6,"column":8,"nodeType":"593","messageId":"594","endLine":6,"endColumn":17},{"ruleId":"591","severity":1,"message":"671","line":17,"column":20,"nodeType":"593","messageId":"594","endLine":17,"endColumn":33},{"ruleId":"591","severity":1,"message":"672","line":81,"column":10,"nodeType":"593","messageId":"594","endLine":81,"endColumn":21},{"ruleId":"648","replacedBy":"684"},{"ruleId":"650","replacedBy":"685"},{"ruleId":"591","severity":1,"message":"671","line":17,"column":20,"nodeType":"593","messageId":"594","endLine":17,"endColumn":33},{"ruleId":"591","severity":1,"message":"672","line":81,"column":10,"nodeType":"593","messageId":"594","endLine":81,"endColumn":21},{"ruleId":"591","severity":1,"message":"671","line":17,"column":20,"nodeType":"593","messageId":"594","endLine":17,"endColumn":33},{"ruleId":"591","severity":1,"message":"672","line":81,"column":10,"nodeType":"593","messageId":"594","endLine":81,"endColumn":21},{"ruleId":"591","severity":1,"message":"671","line":17,"column":20,"nodeType":"593","messageId":"594","endLine":17,"endColumn":33},{"ruleId":"591","severity":1,"message":"672","line":81,"column":10,"nodeType":"593","messageId":"594","endLine":81,"endColumn":21},{"ruleId":"591","severity":1,"message":"671","line":17,"column":20,"nodeType":"593","messageId":"594","endLine":17,"endColumn":33},{"ruleId":"591","severity":1,"message":"672","line":81,"column":10,"nodeType":"593","messageId":"594","endLine":81,"endColumn":21},{"ruleId":"591","severity":1,"message":"686","line":16,"column":8,"nodeType":"593","messageId":"594","endLine":16,"endColumn":16},{"ruleId":"591","severity":1,"message":"687","line":19,"column":8,"nodeType":"593","messageId":"594","endLine":19,"endColumn":16},{"ruleId":"603","severity":1,"message":"604","line":82,"column":1,"nodeType":"605","endLine":278,"endColumn":2},{"ruleId":"591","severity":1,"message":"607","line":3,"column":10,"nodeType":"593","messageId":"594","endLine":3,"endColumn":16},{"ruleId":"591","severity":1,"message":"608","line":3,"column":18,"nodeType":"593","messageId":"594","endLine":3,"endColumn":23},{"ruleId":"591","severity":1,"message":"610","line":3,"column":31,"nodeType":"593","messageId":"594","endLine":3,"endColumn":44},{"ruleId":"591","severity":1,"message":"658","line":15,"column":8,"nodeType":"593","messageId":"594","endLine":15,"endColumn":17},{"ruleId":"591","severity":1,"message":"659","line":23,"column":8,"nodeType":"593","messageId":"594","endLine":23,"endColumn":20},{"ruleId":"591","severity":1,"message":"607","line":3,"column":10,"nodeType":"593","messageId":"594","endLine":3,"endColumn":16},{"ruleId":"591","severity":1,"message":"608","line":3,"column":18,"nodeType":"593","messageId":"594","endLine":3,"endColumn":23},{"ruleId":"591","severity":1,"message":"609","line":3,"column":25,"nodeType":"593","messageId":"594","endLine":3,"endColumn":29},{"ruleId":"591","severity":1,"message":"610","line":3,"column":31,"nodeType":"593","messageId":"594","endLine":3,"endColumn":44},{"ruleId":"591","severity":1,"message":"688","line":8,"column":8,"nodeType":"593","messageId":"594","endLine":8,"endColumn":12},{"ruleId":"591","severity":1,"message":"689","line":9,"column":8,"nodeType":"593","messageId":"594","endLine":9,"endColumn":16},{"ruleId":"591","severity":1,"message":"690","line":9,"column":20,"nodeType":"593","messageId":"594","endLine":9,"endColumn":33},{"ruleId":"591","severity":1,"message":"691","line":10,"column":8,"nodeType":"593","messageId":"594","endLine":10,"endColumn":20},{"ruleId":"591","severity":1,"message":"692","line":11,"column":8,"nodeType":"593","messageId":"594","endLine":11,"endColumn":20},{"ruleId":"591","severity":1,"message":"693","line":24,"column":8,"nodeType":"593","messageId":"594","endLine":24,"endColumn":16},{"ruleId":"591","severity":1,"message":"694","line":25,"column":8,"nodeType":"593","messageId":"594","endLine":25,"endColumn":18},{"ruleId":"603","severity":1,"message":"604","line":51,"column":1,"nodeType":"605","endLine":132,"endColumn":2},{"ruleId":"591","severity":1,"message":"695","line":54,"column":9,"nodeType":"593","messageId":"594","endLine":54,"endColumn":25},{"ruleId":"591","severity":1,"message":"696","line":59,"column":9,"nodeType":"593","messageId":"594","endLine":59,"endColumn":21},{"ruleId":"591","severity":1,"message":"607","line":3,"column":10,"nodeType":"593","messageId":"594","endLine":3,"endColumn":16},{"ruleId":"591","severity":1,"message":"608","line":3,"column":18,"nodeType":"593","messageId":"594","endLine":3,"endColumn":23},{"ruleId":"591","severity":1,"message":"609","line":3,"column":25,"nodeType":"593","messageId":"594","endLine":3,"endColumn":29},{"ruleId":"591","severity":1,"message":"610","line":3,"column":31,"nodeType":"593","messageId":"594","endLine":3,"endColumn":44},{"ruleId":"591","severity":1,"message":"634","line":7,"column":8,"nodeType":"593","messageId":"594","endLine":7,"endColumn":17},{"ruleId":"591","severity":1,"message":"697","line":13,"column":8,"nodeType":"593","messageId":"594","endLine":13,"endColumn":14},{"ruleId":"591","severity":1,"message":"635","line":14,"column":8,"nodeType":"593","messageId":"594","endLine":14,"endColumn":19},{"ruleId":"591","severity":1,"message":"614","line":21,"column":8,"nodeType":"593","messageId":"594","endLine":21,"endColumn":12},{"ruleId":"591","severity":1,"message":"617","line":29,"column":10,"nodeType":"593","messageId":"594","endLine":29,"endColumn":20},{"ruleId":"591","severity":1,"message":"601","line":29,"column":22,"nodeType":"593","messageId":"594","endLine":29,"endColumn":32},{"ruleId":"591","severity":1,"message":"618","line":29,"column":34,"nodeType":"593","messageId":"594","endLine":29,"endColumn":44},{"ruleId":"591","severity":1,"message":"641","line":33,"column":10,"nodeType":"593","messageId":"594","endLine":33,"endColumn":20},{"ruleId":"591","severity":1,"message":"642","line":35,"column":10,"nodeType":"593","messageId":"594","endLine":35,"endColumn":14},{"ruleId":"603","severity":1,"message":"604","line":114,"column":1,"nodeType":"605","endLine":393,"endColumn":2},{"ruleId":"626","severity":1,"message":"627","line":124,"column":21,"nodeType":"628","messageId":"629","endLine":124,"endColumn":23},{"ruleId":"626","severity":1,"message":"627","line":214,"column":60,"nodeType":"628","messageId":"629","endLine":214,"endColumn":62},{"ruleId":"626","severity":1,"message":"654","line":214,"column":93,"nodeType":"628","messageId":"629","endLine":214,"endColumn":95},{"ruleId":"626","severity":1,"message":"627","line":248,"column":60,"nodeType":"628","messageId":"629","endLine":248,"endColumn":62},{"ruleId":"626","severity":1,"message":"654","line":248,"column":93,"nodeType":"628","messageId":"629","endLine":248,"endColumn":95},{"ruleId":"626","severity":1,"message":"627","line":279,"column":46,"nodeType":"628","messageId":"629","endLine":279,"endColumn":48},{"ruleId":"626","severity":1,"message":"627","line":279,"column":68,"nodeType":"628","messageId":"629","endLine":279,"endColumn":70},{"ruleId":"626","severity":1,"message":"627","line":304,"column":84,"nodeType":"628","messageId":"629","endLine":304,"endColumn":86},{"ruleId":"626","severity":1,"message":"627","line":304,"column":118,"nodeType":"628","messageId":"629","endLine":304,"endColumn":120},{"ruleId":"626","severity":1,"message":"627","line":315,"column":84,"nodeType":"628","messageId":"629","endLine":315,"endColumn":86},{"ruleId":"626","severity":1,"message":"627","line":315,"column":118,"nodeType":"628","messageId":"629","endLine":315,"endColumn":120},{"ruleId":"626","severity":1,"message":"627","line":326,"column":84,"nodeType":"628","messageId":"629","endLine":326,"endColumn":86},{"ruleId":"626","severity":1,"message":"627","line":326,"column":118,"nodeType":"628","messageId":"629","endLine":326,"endColumn":120},{"ruleId":"626","severity":1,"message":"627","line":337,"column":84,"nodeType":"628","messageId":"629","endLine":337,"endColumn":86},{"ruleId":"626","severity":1,"message":"627","line":337,"column":118,"nodeType":"628","messageId":"629","endLine":337,"endColumn":120},{"ruleId":"626","severity":1,"message":"627","line":348,"column":84,"nodeType":"628","messageId":"629","endLine":348,"endColumn":86},{"ruleId":"626","severity":1,"message":"627","line":348,"column":118,"nodeType":"628","messageId":"629","endLine":348,"endColumn":120},{"ruleId":"626","severity":1,"message":"627","line":359,"column":84,"nodeType":"628","messageId":"629","endLine":359,"endColumn":86},{"ruleId":"626","severity":1,"message":"627","line":359,"column":118,"nodeType":"628","messageId":"629","endLine":359,"endColumn":120},{"ruleId":"626","severity":1,"message":"627","line":370,"column":84,"nodeType":"628","messageId":"629","endLine":370,"endColumn":86},{"ruleId":"626","severity":1,"message":"627","line":370,"column":118,"nodeType":"628","messageId":"629","endLine":370,"endColumn":120},{"ruleId":"591","severity":1,"message":"595","line":7,"column":8,"nodeType":"593","messageId":"594","endLine":7,"endColumn":25},{"ruleId":"603","severity":1,"message":"604","line":93,"column":1,"nodeType":"605","endLine":318,"endColumn":2},{"ruleId":"591","severity":1,"message":"698","line":136,"column":10,"nodeType":"593","messageId":"594","endLine":136,"endColumn":18},{"ruleId":"591","severity":1,"message":"699","line":136,"column":20,"nodeType":"593","messageId":"594","endLine":136,"endColumn":31},{"ruleId":"626","severity":1,"message":"627","line":141,"column":18,"nodeType":"628","messageId":"629","endLine":141,"endColumn":20},{"ruleId":"626","severity":1,"message":"627","line":204,"column":57,"nodeType":"628","messageId":"629","endLine":204,"endColumn":59},{"ruleId":"591","severity":1,"message":"632","line":1,"column":16,"nodeType":"593","messageId":"594","endLine":1,"endColumn":24},{"ruleId":"591","severity":1,"message":"655","line":9,"column":8,"nodeType":"593","messageId":"594","endLine":9,"endColumn":13},{"ruleId":"603","severity":1,"message":"604","line":11,"column":1,"nodeType":"605","endLine":25,"endColumn":2},{"ruleId":"591","severity":1,"message":"671","line":17,"column":20,"nodeType":"593","messageId":"594","endLine":17,"endColumn":33},{"ruleId":"591","severity":1,"message":"672","line":81,"column":10,"nodeType":"593","messageId":"594","endLine":81,"endColumn":21},{"ruleId":"591","severity":1,"message":"676","line":3,"column":8,"nodeType":"593","messageId":"594","endLine":3,"endColumn":17},{"ruleId":"591","severity":1,"message":"658","line":6,"column":8,"nodeType":"593","messageId":"594","endLine":6,"endColumn":17},{"ruleId":"648","replacedBy":"700"},{"ruleId":"650","replacedBy":"701"},{"ruleId":"591","severity":1,"message":"671","line":17,"column":20,"nodeType":"593","messageId":"594","endLine":17,"endColumn":33},{"ruleId":"591","severity":1,"message":"672","line":81,"column":10,"nodeType":"593","messageId":"594","endLine":81,"endColumn":21},{"ruleId":"591","severity":1,"message":"671","line":17,"column":20,"nodeType":"593","messageId":"594","endLine":17,"endColumn":33},{"ruleId":"591","severity":1,"message":"672","line":81,"column":10,"nodeType":"593","messageId":"594","endLine":81,"endColumn":21},{"ruleId":"591","severity":1,"message":"671","line":17,"column":20,"nodeType":"593","messageId":"594","endLine":17,"endColumn":33},{"ruleId":"591","severity":1,"message":"672","line":81,"column":10,"nodeType":"593","messageId":"594","endLine":81,"endColumn":21},{"ruleId":"591","severity":1,"message":"671","line":17,"column":20,"nodeType":"593","messageId":"594","endLine":17,"endColumn":33},{"ruleId":"591","severity":1,"message":"672","line":81,"column":10,"nodeType":"593","messageId":"594","endLine":81,"endColumn":21},{"ruleId":"591","severity":1,"message":"607","line":3,"column":10,"nodeType":"593","messageId":"594","endLine":3,"endColumn":16},{"ruleId":"591","severity":1,"message":"608","line":3,"column":18,"nodeType":"593","messageId":"594","endLine":3,"endColumn":23},{"ruleId":"591","severity":1,"message":"610","line":3,"column":31,"nodeType":"593","messageId":"594","endLine":3,"endColumn":44},{"ruleId":"591","severity":1,"message":"658","line":15,"column":8,"nodeType":"593","messageId":"594","endLine":15,"endColumn":17},{"ruleId":"591","severity":1,"message":"659","line":23,"column":8,"nodeType":"593","messageId":"594","endLine":23,"endColumn":20},{"ruleId":"591","severity":1,"message":"607","line":3,"column":10,"nodeType":"593","messageId":"594","endLine":3,"endColumn":16},{"ruleId":"591","severity":1,"message":"608","line":3,"column":18,"nodeType":"593","messageId":"594","endLine":3,"endColumn":23},{"ruleId":"591","severity":1,"message":"610","line":3,"column":31,"nodeType":"593","messageId":"594","endLine":3,"endColumn":44},{"ruleId":"591","severity":1,"message":"658","line":15,"column":8,"nodeType":"593","messageId":"594","endLine":15,"endColumn":17},{"ruleId":"591","severity":1,"message":"659","line":23,"column":8,"nodeType":"593","messageId":"594","endLine":23,"endColumn":20},{"ruleId":"591","severity":1,"message":"599","line":1,"column":10,"nodeType":"593","messageId":"594","endLine":1,"endColumn":20},{"ruleId":"591","severity":1,"message":"600","line":1,"column":22,"nodeType":"593","messageId":"594","endLine":1,"endColumn":34},{"ruleId":"591","severity":1,"message":"671","line":17,"column":20,"nodeType":"593","messageId":"594","endLine":17,"endColumn":33},{"ruleId":"591","severity":1,"message":"672","line":81,"column":10,"nodeType":"593","messageId":"594","endLine":81,"endColumn":21},{"ruleId":"591","severity":1,"message":"671","line":17,"column":20,"nodeType":"593","messageId":"594","endLine":17,"endColumn":33},{"ruleId":"591","severity":1,"message":"672","line":81,"column":10,"nodeType":"593","messageId":"594","endLine":81,"endColumn":21},{"ruleId":"591","severity":1,"message":"671","line":17,"column":20,"nodeType":"593","messageId":"594","endLine":17,"endColumn":33},{"ruleId":"591","severity":1,"message":"672","line":81,"column":10,"nodeType":"593","messageId":"594","endLine":81,"endColumn":21},{"ruleId":"603","severity":1,"message":"604","line":64,"column":1,"nodeType":"605","endLine":233,"endColumn":2},{"ruleId":"591","severity":1,"message":"702","line":74,"column":10,"nodeType":"593","messageId":"594","endLine":74,"endColumn":18},{"ruleId":"591","severity":1,"message":"703","line":74,"column":20,"nodeType":"593","messageId":"594","endLine":74,"endColumn":31},{"ruleId":"591","severity":1,"message":"632","line":1,"column":16,"nodeType":"593","messageId":"594","endLine":1,"endColumn":24},{"ruleId":"591","severity":1,"message":"633","line":2,"column":43,"nodeType":"593","messageId":"594","endLine":2,"endColumn":50},{"ruleId":"591","severity":1,"message":"704","line":20,"column":8,"nodeType":"593","messageId":"594","endLine":20,"endColumn":18},{"ruleId":"591","severity":1,"message":"705","line":23,"column":10,"nodeType":"593","messageId":"594","endLine":23,"endColumn":18},{"ruleId":"603","severity":1,"message":"604","line":73,"column":1,"nodeType":"605","endLine":123,"endColumn":2},{"ruleId":"591","severity":1,"message":"706","line":74,"column":7,"nodeType":"593","messageId":"594","endLine":74,"endColumn":14},{"ruleId":"626","severity":1,"message":"627","line":90,"column":30,"nodeType":"628","messageId":"629","endLine":90,"endColumn":32},{"ruleId":"626","severity":1,"message":"627","line":102,"column":49,"nodeType":"628","messageId":"629","endLine":102,"endColumn":51},{"ruleId":"626","severity":1,"message":"627","line":106,"column":42,"nodeType":"628","messageId":"629","endLine":106,"endColumn":44},"@typescript-eslint/no-unused-vars","'Collapse' is defined but never used.","Identifier","unusedVar","'DialogContentText' is defined but never used.","'ExpandMoreIcon' is defined but never used.","'ExpandLessIcon' is defined but never used.","'SetFlags' is defined but never used.","'automation' is defined but never used.","'cveDetection' is defined but never used.","'targetData' is defined but never used.","'settings' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'useEffect' is defined but never used.","'Switch' is defined but never used.","'Route' is defined but never used.","'Link' is defined but never used.","'BrowserRouter' is defined but never used.","'Divider' is defined but never used.","'Popover' is defined but never used.","'LiveHelpOutlinedIcon' is defined but never used.","'Chip' is defined but never used.","'AutomationIcon' is defined but never used.","'customisedScanModes' is defined but never used.","'scanTarget' is defined but never used.","'targetTime' is defined but never used.","'chosenMode' is defined but never used.","'scanDate' is defined but never used.","'ScanOnProgress' is assigned a value but never used.","'handleClick' is assigned a value but never used.","'isEmpty' is assigned a value but never used.","'target' is assigned a value but never used.","'setTarget' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'reset' is assigned a value but never used.","'setReset' is assigned a value but never used.","'useState' is defined but never used.","'lighten' is defined but never used.","'TextField' is defined but never used.","'ButtonGroup' is defined but never used.","'Page' is defined but never used.","'Text' is defined but never used.","'View' is defined but never used.","'Document' is defined but never used.","'StyleSheet' is defined but never used.","'pureOutput' is defined but never used.","'rows' is defined but never used.","'handleClickJO' is assigned a value but never used.","'checked' is assigned a value but never used.","'handleClose' is assigned a value but never used.","'handleToggle' is assigned a value but never used.","'FadeOutTime' is defined but never used.","no-native-reassign",["707"],"no-negated-in-lhs",["708"],"'isScanning' is defined but never used.","'scannedTarget' is defined but never used.","Expected '!==' and instead saw '!='.","'store' is defined but never used.",["707"],["708"],"'FormLabel' is defined but never used.","'ScanModeIcon' is defined but never used.","'Radio' is defined but never used.","'RadioGroup' is defined but never used.","'ListSubheader' is defined but never used.","'InboxIcon' is defined but never used.","'DraftsIcon' is defined but never used.","'SendIcon' is defined but never used.","'DynamicFeedIcon' is defined but never used.","'StarBorder' is defined but never used.","'ExtensionIcon' is defined but never used.",["707"],["708"],"'CheckboxProps' is defined but never used.","'handleClick' is defined but never used.","'scannedIn' is defined but never used.",["707"],["708"],"'FormGroup' is defined but never used.",["707"],["708"],"'logo' is defined but never used.","'Select' is defined but never used.","'MenuItem' is defined but never used.",["707"],["708"],["707"],["708"],"'MailIcon' is defined but never used.","'HomeIcon' is defined but never used.","'List' is defined but never used.","'ListItem' is defined but never used.","'ListItemProps' is defined but never used.","'ListItemIcon' is defined but never used.","'ListItemText' is defined but never used.","'modeData' is defined but never used.","'AddNewMode' is defined but never used.","'handleDeleteMode' is assigned a value but never used.","'handleChange' is assigned a value but never used.","'Button' is defined but never used.","'theArray' is assigned a value but never used.","'setTheArray' is assigned a value but never used.",["707"],["708"],"'setRange' is assigned a value but never used.","'setSetRange' is assigned a value but never used.","'NmapOutput' is defined but never used.","'observer' is defined but never used.","'classes' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]