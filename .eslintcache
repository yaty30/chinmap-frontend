[{"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Backend/frontendData/cveScanOutput.tsx":"1","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Backend/frontendData/isScanning.tsx":"2","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Backend/frontendData/getPortStatus.tsx":"3","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Backend/frontendData/Result.tsx":"4","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/HomeSettings/HomeSettings.tsx":"5","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/Home.tsx":"6","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/ScanResult.tsx":"7","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Mobx/Models/homeSettingsStatus.tsx":"8","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/ScanResults/ScanDetails.tsx":"9","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/ScanResults/WhoIs.tsx":"10","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Backend/frontendData/whoisScan.tsx":"11","/Users/yipjames/Desktop/INS/FYP/chinmap/src/index.tsx":"12","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Views/DefaultScanMode.tsx":"13","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Views/ScanComparison.tsx":"14","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/defaultScanModes/fullPortsScanMode.tsx":"15","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/defaultScanModes/intenseScanMode.tsx":"16","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/defaultScanModes/top100portsScanMode.tsx":"17","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Views/Home.tsx":"18","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Mobx/Models/defaultScanModeStatus.tsx":"19","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/NSE.tsx":"20","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Vulnerability/HTTP.tsx":"21","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Discovery/Targets.tsx":"22","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Discovery/Database.tsx":"23","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/ScanResults/NmapOutput.tsx":"24","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Views/CustomisedScanMode.tsx":"25","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/Target.tsx":"26","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/NewModeOptions.tsx":"27","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Exploit/HTTP.tsx":"28","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Discovery/ServerMessageBlock.tsx":"29","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Discovery/Network.tsx":"30","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/TCPoptions.tsx":"31","/Users/yipjames/Desktop/INS/FYP/chinmap/src/App.tsx":"32","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/Others.tsx":"33","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/Source.tsx":"34","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Vulnerability/Others.tsx":"35","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Discovery/SMTP.tsx":"36","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Discovery/Hadoop.tsx":"37","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Views/Drawer.tsx":"38","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Exploit/SMB.tsx":"39","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Discovery/Broadcast.tsx":"40","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/Drawer.tsx":"41","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Views/ScanHistory.tsx":"42","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Views/ScanResult.tsx":"43","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/defaultScanModes/pingScanMode.tsx":"44","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/CustomisedScanMode.tsx":"45","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/ScanComparison.tsx":"46","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanMode.tsx":"47","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/ScanResults/CVEResult.tsx":"48","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/nonTCPoptions.tsx":"49","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Exploit/Others.tsx":"50","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/Ping.tsx":"51","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Discovery/Server.tsx":"52","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Vulnerability/SMB.tsx":"53","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Exploit/FTP.tsx":"54","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Discovery/IP.tsx":"55","/Users/yipjames/Desktop/INS/FYP/chinmap/src/reportWebVitals.ts":"56","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/defaultScanModes/nonPingScanMode.tsx":"57","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/defaultScanModes/lightningScanMode.tsx":"58","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/target.tsx":"59","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Vulnerability/SSL.tsx":"60","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Discovery/HTTP.tsx":"61","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Vulnerability/FTP.tsx":"62"},{"size":846,"mtime":1614505544295,"results":"63","hashOfConfig":"64"},{"size":33,"mtime":1614505449218,"results":"65","hashOfConfig":"64"},{"size":4464,"mtime":1614505545548,"results":"66","hashOfConfig":"64"},{"size":5652,"mtime":1614505387977,"results":"67","hashOfConfig":"64"},{"size":18071,"mtime":1614246017933,"results":"68","hashOfConfig":"64"},{"size":16602,"mtime":1614504286190,"results":"69","hashOfConfig":"64"},{"size":10468,"mtime":1614179894501,"results":"70","hashOfConfig":"64"},{"size":1017,"mtime":1614182788594,"results":"71","hashOfConfig":"64"},{"size":18880,"mtime":1613844862323,"results":"72","hashOfConfig":"64"},{"size":703,"mtime":1614180203274,"results":"73","hashOfConfig":"64"},{"size":845,"mtime":1614505386656,"results":"74","hashOfConfig":"64"},{"size":500,"mtime":1612188541082,"results":"75","hashOfConfig":"64"},{"size":211,"mtime":1612328485908,"results":"76","hashOfConfig":"64"},{"size":207,"mtime":1612324657583,"results":"77","hashOfConfig":"64"},{"size":8996,"mtime":1613489966000,"results":"78","hashOfConfig":"64"},{"size":9062,"mtime":1613489966000,"results":"79","hashOfConfig":"64"},{"size":7700,"mtime":1613489966000,"results":"80","hashOfConfig":"64"},{"size":167,"mtime":1612256006489,"results":"81","hashOfConfig":"64"},{"size":3852,"mtime":1614006373442,"results":"82","hashOfConfig":"64"},{"size":7765,"mtime":1613489966000,"results":"83","hashOfConfig":"64"},{"size":4495,"mtime":1613489966000,"results":"84","hashOfConfig":"64"},{"size":4500,"mtime":1613489966000,"results":"85","hashOfConfig":"64"},{"size":4503,"mtime":1613489966000,"results":"86","hashOfConfig":"64"},{"size":990,"mtime":1614245542639,"results":"87","hashOfConfig":"64"},{"size":223,"mtime":1612346221802,"results":"88","hashOfConfig":"64"},{"size":1780,"mtime":1613489966000,"results":"89","hashOfConfig":"64"},{"size":10883,"mtime":1613489966000,"results":"90","hashOfConfig":"64"},{"size":4489,"mtime":1613489966000,"results":"91","hashOfConfig":"64"},{"size":4535,"mtime":1613489966000,"results":"92","hashOfConfig":"64"},{"size":4500,"mtime":1613489966000,"results":"93","hashOfConfig":"64"},{"size":606,"mtime":1613489966000,"results":"94","hashOfConfig":"64"},{"size":897,"mtime":1612255057253,"results":"95","hashOfConfig":"64"},{"size":1829,"mtime":1613489966000,"results":"96","hashOfConfig":"64"},{"size":1731,"mtime":1613489966000,"results":"97","hashOfConfig":"64"},{"size":4501,"mtime":1613489966000,"results":"98","hashOfConfig":"64"},{"size":4491,"mtime":1613489966000,"results":"99","hashOfConfig":"64"},{"size":4497,"mtime":1613489966000,"results":"100","hashOfConfig":"64"},{"size":175,"mtime":1612188434038,"results":"101","hashOfConfig":"64"},{"size":4486,"mtime":1613489966000,"results":"102","hashOfConfig":"64"},{"size":4506,"mtime":1613489966000,"results":"103","hashOfConfig":"64"},{"size":9482,"mtime":1614317280868,"results":"104","hashOfConfig":"64"},{"size":195,"mtime":1612327203632,"results":"105","hashOfConfig":"64"},{"size":191,"mtime":1612266398943,"results":"106","hashOfConfig":"64"},{"size":8951,"mtime":1613882659609,"results":"107","hashOfConfig":"64"},{"size":4977,"mtime":1614008998712,"results":"108","hashOfConfig":"64"},{"size":19442,"mtime":1614053519586,"results":"109","hashOfConfig":"64"},{"size":11741,"mtime":1613845963672,"results":"110","hashOfConfig":"64"},{"size":703,"mtime":1614144548617,"results":"111","hashOfConfig":"64"},{"size":487,"mtime":1613489966000,"results":"112","hashOfConfig":"64"},{"size":4495,"mtime":1613489966000,"results":"113","hashOfConfig":"64"},{"size":1727,"mtime":1613489966000,"results":"114","hashOfConfig":"64"},{"size":4497,"mtime":1613489966000,"results":"115","hashOfConfig":"64"},{"size":4492,"mtime":1613489966000,"results":"116","hashOfConfig":"64"},{"size":4486,"mtime":1613489966000,"results":"117","hashOfConfig":"64"},{"size":4485,"mtime":1613489966000,"results":"118","hashOfConfig":"64"},{"size":425,"mtime":1612188541084,"results":"119","hashOfConfig":"64"},{"size":8779,"mtime":1613489966000,"results":"120","hashOfConfig":"64"},{"size":10073,"mtime":1613489966000,"results":"121","hashOfConfig":"64"},{"size":456,"mtime":1613489966000,"results":"122","hashOfConfig":"64"},{"size":4492,"mtime":1613489966000,"results":"123","hashOfConfig":"64"},{"size":4491,"mtime":1613489966000,"results":"124","hashOfConfig":"64"},{"size":4492,"mtime":1613489966000,"results":"125","hashOfConfig":"64"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1122jn7",{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"134","messages":"135","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"137"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":33,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"140","messages":"141","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"137"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":28,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"148"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"156"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"166","messages":"167","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"137"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"173","messages":"174","errorCount":0,"warningCount":35,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"176"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"179","messages":"180","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"181","messages":"182","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"189"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"193"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"196","messages":"197","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"198","messages":"199","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"189"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"137"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"206","messages":"207","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"208","messages":"209","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"210","messages":"211","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"212","messages":"213","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214","usedDeprecatedRules":"215"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"218","messages":"219","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"224","usedDeprecatedRules":"137"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"227","messages":"228","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"235","messages":"236","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"237","messages":"238","errorCount":0,"warningCount":35,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"239","messages":"240","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"241","messages":"242","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"189"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"247","messages":"248","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"249","usedDeprecatedRules":"250"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"253","messages":"254","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"255","messages":"256","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"257","messages":"258","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"261","messages":"262","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"263","usedDeprecatedRules":"156"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"266","messages":"267","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"268","messages":"269","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"270","messages":"271","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"272","messages":"273","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Backend/frontendData/cveScanOutput.tsx",[],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Backend/frontendData/isScanning.tsx",[],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Backend/frontendData/getPortStatus.tsx",[],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Backend/frontendData/Result.tsx",[],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/HomeSettings/HomeSettings.tsx",["274","275","276","277","278","279","280","281","282","283"],"import React, {useState} from 'react';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Paper from '@material-ui/core/Paper';\nimport Collapse from '@material-ui/core/Collapse';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Divider from '@material-ui/core/Divider';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport ExpandLessIcon from '@material-ui/icons/ExpandLess';\n\n// Components\nimport scanTechniquesData from './json/ScanTechniques/data.json'\nimport hostDiscovery from './json/HostDiscovery/data.json'\nimport osDetection from './json/OSDetection/data.json'\nimport outputOpt from './json/Output/data.json'\nimport portSpecification from './json/PortSpecification/data.json'\nimport serviceAndVersionDetectiony from './json/ServiceAndVersionDetectiony/data.json'\n\n// Mobx\nimport settingsStatus from '../../Mobx/Models/homeSettingsStatus'\n\nimport SetFlags from './SetFlags'\nimport { automation, cveDetection } from './homeSettingsData'\nimport { targetData } from '../target'\nimport { settings } from 'cluster';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n    },\n    container: {\n      display: 'flex',\n    },\n    polygon: {\n      fill: theme.palette.common.white,\n      stroke: theme.palette.divider,\n      strokeWidth: 1,\n    },\n  }),\n);\n\nexport default () => {\n  const classes = useStyles();\n  const [open, setOpen] = useState(false);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleCancel = () => {\n    setOpen(false);\n    settingsStatus.setAuto(false)\n    settingsStatus.setCve(false)\n    setOthers({\n      automation: false,\n      cveDetect: false,\n      pn: false,\n      whoIs: false,\n    })\n  }\n\n  const [others, setOthers] = useState({\n    automation: false,\n    cveDetect: false,\n    pn: false,\n    whoIs: false,\n  });\n\n  const handleOthersChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setOthers({ ...others, [event.target.name]: event.target.checked });\n  };\n\n  const [setRange, setSetRange] = useState('none');\n\n  const handleSetRange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSetRange((event.target as HTMLInputElement).value);\n    settingsStatus.setRange((event.target as HTMLInputElement).value);\n    if (/.0\\/\\d\\d$/.test(settingsStatus.target) === false){\n      settingsStatus.setRange('none');\n      setSetRange('none')\n    }\n  };\n\n  return (\n    <div className={classes.root}>\n      <Button \n        onClick={handleClickOpen}\n        style={{\n          textTransform: \"none\"\n        }}\n        disabled={settingsStatus.target.length > 0 ? false : true}\n      >\n        Settings\n      </Button>\n      <Dialog\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle id=\"alert-dialog-title\">{\"Add-on Features\"}</DialogTitle>\n        <DialogContent>\n          <Divider variant=\"middle\" style={{marginBottom: 25}}/>\n          <Grid container spacing={6}>\n            <Grid item xs={12}>\n              <Paper style={{background: \"#f9f9f9\", padding: \"15px 15px\", textAlign: \"center\"}} elevation={0}>\n                  <Typography>Target:&nbsp;{settingsStatus.target}</Typography>\n              </Paper>\n            </Grid>\n            {/* Set Range */}\n            <Grid item xs={12}>\n              <Tooltip title=\"Scan range only for the target with range, e.g. 192.168.1.0/24\" arrow placement=\"top\" disableHoverListener={/.0\\/\\d\\d$/.test(settingsStatus.target) === true ? true : false}>\n                <Paper style={{background: \"#f9f9f9\", padding: \"15px 15px\"}} elevation={0}>\n                <FormControl component=\"fieldset\">\n                  <FormLabel component=\"legend\">Set Range</FormLabel>\n                  <RadioGroup aria-label=\"gender\" name=\"gender1\" value={setRange} onChange={handleSetRange} style={{marginLeft: 65,marginTop:15}}>\n                    <table>\n                      <tr>\n                      {/* disabled={'.0\\/\\d+$'.test(homeSettings.target) === true ? false : true} */}\n                        <td>\n                          <FormControlLabel value=\"oddOnly\" control={<Radio  disabled={/.0\\/\\d\\d$/.test(settingsStatus.target) === true ? false : true}/>} label=\"Odd Numbers Only\" />\n                        </td>\n                        <td>\n                          <FormControlLabel value=\"even\" control={<Radio  disabled={/.0\\/\\d\\d$/.test(settingsStatus.target) === true ? false : true}/>} label=\"Even Numbers Only\" />\n                        </td>\n                      </tr>\n                      <tr>\n                        <td>\n                          <FormControlLabel value=\"every5hosts\" control={<Radio  disabled={/.0\\/\\d\\d$/.test(settingsStatus.target) === true ? false : true}/>} label=\"Every 5 hosts\" />\n                        </td>\n                        <td>\n                          <FormControlLabel value=\"every10hosts\" control={<Radio  disabled={/.0\\/\\d\\d$/.test(settingsStatus.target) === true ? false : true}/>} label=\"Every 10 hosts\" />\n                        </td>\n                      </tr>\n                      <tr>\n                        <td>\n                          <FormControlLabel value=\"every15hosts\" control={<Radio  disabled={/.0\\/\\d\\d$/.test(settingsStatus.target) === true ? false : true}/>} label=\"Every 15 hosts\" />\n                        </td>\n                        <td>\n                          <FormControlLabel value=\"every20hosts\" control={<Radio  disabled={/.0\\/\\d\\d$/.test(settingsStatus.target) === true ? false : true}/>} label=\"Every 20 hosts\" />\n                        </td>\n                      </tr>\n                      <tr>\n                        <td>\n                          <FormControlLabel value=\"none\" control={<Radio  disabled={/.0\\/\\d\\d$/.test(settingsStatus.target) === true ? false : true}/>} label=\"None\" />\n\n                        </td>\n                      </tr>\n                    </table>\n                  </RadioGroup>\n                </FormControl>\n              </Paper>\n              </Tooltip>\n            </Grid>\n            {/* Set Flags */}\n            <Grid item xs={12} style={{textAlign: \"left\"}}>\n              <Paper style={{background: \"#f9f9f9\", padding: \"15px 15px\", textAlign: \"center\"}} elevation={0}>\n                <Typography style={{textAlign: \"left\",marginBottom: 12,}}>Scan Techniques</Typography>\n                {scanTechniquesData.map((data, index) => {\n                  const [opt, setOpt] = useState(false)\n\n                  return(\n                    <Tooltip title={data.tooltip} arrow placement=\"top\">\n                      <FormControlLabel\n                          value={opt}\n                          control={\n                              <Checkbox \n                                  color=\"primary\" \n                                  checked={opt}\n                                  onChange={(event: React.ChangeEvent<HTMLInputElement>)=> {\n                                    settingsStatus.setFlag(settingsStatus.flag + 1); \n                                    console.log(settingsStatus.flag);\n                                    setOpt(event.target.checked);\n                                  }}\n                              />\n                          }\n                          label={data.flag}\n                          labelPlacement=\"end\"\n                      />\n                    </Tooltip>\n                  )\n                })}\n                <Divider variant=\"middle\" style={{marginTop: 10, marginBottom: 20,}}/>\n                \n                <Typography style={{textAlign: \"left\",marginBottom: 12,}}>Host Discovery</Typography>\n                {hostDiscovery.map((data, index) => {\n                    const [opt, setOpt] = useState(false)\n\n                  return(\n                    <Tooltip title={data.tooltip} arrow placement=\"top\">\n                      <FormControlLabel\n                          value={opt}\n                          control={\n                              <Checkbox \n                                  color=\"primary\" \n                                  checked={opt}\n                                  onChange={(event: React.ChangeEvent<HTMLInputElement>)=> {\n                                    settingsStatus.setFlag(settingsStatus.flag + 1); \n                                    console.log(settingsStatus.flag);\n                                    setOpt(event.target.checked);\n                                  }}\n                              />\n                          }\n                          label={data.flag}\n                          labelPlacement=\"end\"\n                      />\n                    </Tooltip>\n                  )\n                })}\n                <Divider variant=\"middle\" style={{marginTop: 10, marginBottom: 20,}}/>\n\n                <Typography style={{textAlign: \"left\",marginBottom: 12,}}>OS Detection</Typography>\n                {osDetection.map((data, index) => {\n                    const [opt, setOpt] = useState(false)\n\n                  return(\n                    <Tooltip title={data.tooltip} arrow placement=\"top\">\n                      <FormControlLabel\n                          value={opt}\n                          control={\n                              <Checkbox \n                                  color=\"primary\" \n                                  checked={opt}\n                                  onChange={(event: React.ChangeEvent<HTMLInputElement>)=> {\n                                    settingsStatus.setFlag(settingsStatus.flag + 1); \n                                    console.log(settingsStatus.flag);\n                                    setOpt(event.target.checked);\n                                  }}\n                              />\n                          }\n                          label={data.flag}\n                          labelPlacement=\"end\"\n                      />\n                    </Tooltip>\n                  )\n                })}\n                <Divider variant=\"middle\" style={{marginTop: 10, marginBottom: 20,}}/>\n\n                <Typography style={{textAlign: \"left\",marginBottom: 12,}}>Output</Typography>\n                {outputOpt.map((data, index) => {\n                    const [opt, setOpt] = useState(false)\n\n                  return(\n                    <Tooltip title={data.tooltip} arrow placement=\"top\">\n                      <FormControlLabel\n                          value={opt}\n                          control={\n                              <Checkbox \n                                  color=\"primary\" \n                                  checked={opt}\n                                  onChange={(event: React.ChangeEvent<HTMLInputElement>)=> {\n                                    settingsStatus.setFlag(settingsStatus.flag + 1); \n                                    console.log(settingsStatus.flag);\n                                    setOpt(event.target.checked);\n                                  }}\n                              />\n                          }\n                          label={data.flag}\n                          labelPlacement=\"end\"\n                      />\n                    </Tooltip>\n                  )\n                })}\n                <Divider variant=\"middle\" style={{marginTop: 10, marginBottom: 20,}}/>\n\n                <Typography style={{textAlign: \"left\",marginBottom: 12,}}>Port Specification</Typography>\n                {portSpecification.map((data, index) => {\n                    const [opt, setOpt] = useState(false)\n\n                  return(\n                    <Tooltip title={data.tooltip} arrow placement=\"top\">\n                      <FormControlLabel\n                          value={opt}\n                          control={\n                              <Checkbox \n                                  color=\"primary\" \n                                  checked={opt}\n                                  onChange={(event: React.ChangeEvent<HTMLInputElement>)=> {\n                                    settingsStatus.setFlag(settingsStatus.flag + 1); \n                                    console.log(settingsStatus.flag);\n                                    setOpt(event.target.checked);\n                                  }}\n                              />\n                          }\n                          label={data.flag}\n                          labelPlacement=\"end\"\n                      />\n                    </Tooltip>\n                  )\n                })}\n                <Divider variant=\"middle\" style={{marginTop: 10, marginBottom: 20,}}/>\n\n                <Typography style={{textAlign: \"left\",marginBottom: 12,}}>Service And Version Detectiony</Typography>\n                {serviceAndVersionDetectiony.map((data, index) => {\n                    const [opt, setOpt] = useState(false)\n\n                  return(\n                    <Tooltip title={data.tooltip} arrow placement=\"top\">\n                      <FormControlLabel\n                          value={opt}\n                          control={\n                              <Checkbox \n                                  color=\"primary\" \n                                  checked={opt}\n                                  onChange={(event: React.ChangeEvent<HTMLInputElement>)=> {\n                                    settingsStatus.setFlag(settingsStatus.flag + 1); \n                                    console.log(settingsStatus.flag);\n                                    setOpt(event.target.checked);\n                                  }}\n                              />\n                          }\n                          label={data.flag}\n                          labelPlacement=\"end\"\n                      />\n                    </Tooltip>\n                  )\n                })}\n                <Divider variant=\"middle\" style={{marginTop: 10, marginBottom: 20,}}/>\n                \n              </Paper>\n            </Grid>\n            {/* Others */}\n            <Grid item xs={6}>\n              <Paper style={{background: \"#f9f9f9\", padding: \"15px 15px\"}} elevation={0}>\n                <Tooltip title=\"When the system scan find out the result output as no host is alive, automation will allow the scan run again until there is at least one host is alive or all the hosts in desinated range is scanned.\" arrow placement=\"top\">\n                  <FormControlLabel\n                    label=\"Automation\"\n                    control={\n                      <Switch\n                        checked={others.automation}\n                        onChange={handleOthersChange}\n                        onClick={() => settingsStatus.setAuto(!settingsStatus.automation)}\n                        name=\"automation\"\n                        inputProps={{ 'aria-label': 'Automation' }}\n                      />\n                    }\n                  />\n                </Tooltip>\n              </Paper>\n            </Grid>\n            <Grid item xs={6}>\n              <Paper style={{background: \"#f9f9f9\", padding: \"15px 15px\"}} elevation={0}>\n                <FormControlLabel\n                  label=\"CVE Detection\"\n                  control={\n                    <Switch\n                      checked={others.cveDetect}\n                      onChange={handleOthersChange}\n                      onClick={() => settingsStatus.setCve(!settingsStatus.cve)}\n                      name=\"cveDetect\"\n                      inputProps={{ 'aria-label': 'CVE Detection' }}\n                    />\n                  }\n                />\n              </Paper>\n            </Grid>\n            <Grid item xs={6}>\n              <Paper style={{background: \"#f9f9f9\", padding: \"15px 15px\"}} elevation={0}>\n                <FormControlLabel\n                  label=\"Ping Block Bypassing\"\n                  control={\n                    <Switch\n                      checked={others.pn}\n                      onChange={handleOthersChange}\n                      onClick={() => settingsStatus.setPn(!settingsStatus.pn)}\n                      name=\"pn\"\n                      inputProps={{ 'aria-label': 'Ping Block Bypassing' }}\n                    />\n                  }\n                />\n              </Paper>\n            </Grid>\n            <Grid item xs={6}>\n              <Paper style={{background: \"#f9f9f9\", padding: \"15px 15px\"}} elevation={0}>\n                <FormControlLabel\n                  label=\"WhoIs\"\n                  control={\n                    <Switch\n                      checked={others.whoIs}\n                      onChange={handleOthersChange}\n                      onClick={() => settingsStatus.setWhoIs(!settingsStatus.whoIs)}\n                      name=\"whoIs\"\n                      inputProps={{ 'aria-label': 'WhoIs' }}\n                    />\n                  }\n                />\n              </Paper>\n            </Grid>\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleCancel} color=\"secondary\">\n            Cancel\n          </Button>\n          <Button onClick={handleClose} color=\"primary\" autoFocus>\n            Save\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n\n\n",["284","285"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/Home.tsx",["286","287","288","289","290","291","292","293","294","295","296","297","298","299","300","301","302","303","304","305","306","307","308","309","310","311","312","313","314","315","316","317","318"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/ScanResult.tsx",["319","320","321","322","323","324","325","326","327","328","329","330","331","332","333","334","335","336","337","338","339"],"import React, {useState} from 'react';\nimport { makeStyles, createStyles, Theme, lighten } from '@material-ui/core/styles';\nimport { Switch, Route, Link, BrowserRouter } from \"react-router-dom\";\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography'\nimport TextField from '@material-ui/core/TextField';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Select from '@material-ui/core/Select';\nimport FormControl from '@material-ui/core/FormControl';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Divider from '@material-ui/core/Divider';\nimport Button from '@material-ui/core/Button';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport Tabs from '@material-ui/core/Tabs';\nimport Chip from '@material-ui/core/Chip';\nimport Tab from '@material-ui/core/Tab';\nimport Box from '@material-ui/core/Box';\nimport AppBar from '@material-ui/core/AppBar';\nimport { Page, Text, View, Document, StyleSheet } from '@react-pdf/renderer';\nimport LinearProgress from '@material-ui/core/LinearProgress';\n\n// Backend\nimport { isScanning } from '../Backend/frontendData/isScanning'\nimport { pureOutput } from '../Backend/frontendData/Result'\nimport scannedIn from '../Backend/frontendData/scannedIn.json'\nimport scannedTarget from '../Backend/frontendData/scannedTargetForSelect.json'\nimport { rows } from '../Backend/frontendData/getPortStatus'\n\n// Components\nimport NmapOutput from './ScanResults/NmapOutput'\nimport HostsAndPorts from './ScanResults/HostsAndPorts'\nimport ScanDetails from './ScanResults/ScanDetails'\nimport CVEResult from './ScanResults/CVEResult'\nimport WhoIs from './ScanResults/WhoIs'\nimport ExportResult from './ScanResults/ExportResult'\n\n// Mobx Global Status\nimport { observer } from 'mobx-react-lite'\nimport storeTarget from '../Mobx/Models/resultSelectStatus'\n\nconst mainStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    paper: {\n      padding: theme.spacing(2),\n      textAlign: 'left',\n      backgroundColor: \"#fefefe\",\n      color: \"#333333\",\n    },\n    centerGrid: {\n        textAlign: \"center\",\n        marginTop: 15,\n    },\n    btnTabs: {\n        textTransform: \"capitalize\",\n    },\n    cardRoot: {\n        marginTop: 25,\n    },\n    title: {\n        fontSize: 14,\n        whiteSpace: \"pre-line\",\n    },\n    pos: {\n        marginBottom: 12,\n    },\n    defaultShow: {\n\n    },\n    defaultHide: {\n        display: \"none\",\n    },\n    centering: {\n      textAlignLast: \"center\",\n      width: \"70%\",\n      userSelect: \"none\",\n    },\n    datepicker: {\n      marginLeft: theme.spacing(1),\n      marginRight: theme.spacing(1),\n      width: 200,\n    },\n  }),\n);\n\ninterface TabPanelProps {\n    children?: React.ReactNode;\n    index: any;\n    value: any;\n  }\n  \n  const TabPanel = (props: TabPanelProps) => {\n    const { children, value, index, ...other } = props;\n  \n    return (\n      <div\n        role=\"tabpanel\"\n        hidden={value !== index}\n        id={`simple-tabpanel-${index}`}\n        aria-labelledby={`simple-tab-${index}`}\n        {...other}\n      >\n        {value === index && (\n          <Box p={3}>\n            <Typography>{children}</Typography>\n          </Box>\n        )}\n      </div>\n    );\n  }\n  \nconst a11yProps = (index: any) => {\n  return {\n    id: `simple-tab-${index}`,\n    'aria-controls': `simple-tabpanel-${index}`,\n  };\n}\n\nexport default observer (() => {\n  const classes = mainStyles();\n\n  const handleChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n    // setTarget(event.target.value as any);\n    storeTarget.setTarget(event.target.value as any)\n  };\n\n  const [value, setValue] = React.useState(0);\n\n  const handleTabChange = (event: React.ChangeEvent<{}>, newValue: number) => {\n    setValue(newValue);\n  };\n\n  const handleClickJO = () => {\n    console.log(scannedIn)\n  }\n\n  const [open, setOpen] = React.useState(true);\n  const [checked, setChecked] = React.useState(true);\n\n  const handleClose = () => {\n    setOpen(false);\n    setChecked((prev) => !prev);\n  };\n  const handleToggle = () => {\n    setOpen(!open);\n  };\n\n  function FadeOutTime() {\n    var min = 1500;\n    var max = 4000;\n    \n    return Math.random() * (max - min) + min;\n  }\n\n  return (\n    <div className={classes.root}>\n       {isScanning.map((status) => (\n           status === true ?\n            <>\n              <div style={{textAlign: \"center\"}}>\n                <Tooltip title=\"Previous scan is progressing, please wait...\" arrow placement=\"top\">\n                  <LinearProgress style={{width: \"100%\",marginLeft:0, height: 5, color: \"#333\"}} />\n                </Tooltip>\n              </div>\n            </>\n            :\n            null\n        ))}\n      <Grid container spacing={5} justify=\"center\" alignItems=\"center\">\n        <Grid item xs={12}>\n          {/* <button onClick={handleClickJO}>click</button> */}\n                <Paper className={classes.paper}>\n                    <table style={{width: \"100%\"}}>\n                      <tr>\n                        <td style={{width: \"20%\"}}>\n                            <Typography variant=\"h6\">\n                              Scan Result\n                            </Typography>\n                        </td>\n                        <td style={{textAlign: \"right\"}}>\n                            <span style={{marginRight: 120, position: \"relative\", top: 5,}}>\n                              \n                            </span>\n                        </td>\n                      </tr>\n                    </table>\n\n                    \n                    <div style={{textAlign: \"center\",marginTop: 15,marginLeft: 120}}>\n                        <FormControl variant=\"outlined\" style={{width: \"100%\"}}>\n                            <InputLabel id=\"demo-simple-select-outlined-label\">\n                                Choose a target IP or Domain\n                            </InputLabel>\n                            <Select\n                                labelId=\"demo-simple-select-outlined-label\"\n                                id=\"demo-simple-select-outlined\"\n                                value={storeTarget.target}\n                                onChange={handleChange}\n                                label=\"Choose a target IP or Domain\"\n                                style={{\n                                    width: \"83%\",\n                                    textAlign: \"center\",\n                                }}\n                            >\n                              {scannedTarget.map((target) => (\n                                  <MenuItem \n                                    key={target.id}\n                                    value={target.id}\n                                  >\n                                    {target.target} - {target.runTime}\n                                  </MenuItem>\n                              ))}\n                            </Select>\n                        </FormControl>\n                    </div>\n                    { \n                        storeTarget.target === \"\" ?\n                        null\n                            :\n                        <>\n                            <br/><Divider variant=\"middle\" />\n                            <div id=\"scanResultTab\">\n                                <AppBar position=\"static\">\n                                    <Tabs \n                                        value={value} \n                                        onChange={handleTabChange} \n                                        indicatorColor=\"primary\"\n                                        textColor=\"primary\"\n                                        centered>\n                                      <Tab label=\"Nmap Output\" {...a11yProps(0)} style={{textTransform: \"capitalize\"}} />\n                                      <Tab label=\"Hosts and Ports\" {...a11yProps(1)} style={{textTransform: \"capitalize\"}} />\n                                      <Tab label=\"Scan Details\" {...a11yProps(2)} style={{textTransform: \"capitalize\"}} />\n                                      <Tab label=\"CVE\" {...a11yProps(3)} style={{textTransform: \"capitalize\"}} />\n                                      <Tab label=\"WhoIs\" {...a11yProps(4)} style={{textTransform: \"capitalize\"}} />\n                                      <Tab label=\"Export Results\" {...a11yProps(5)} style={{textTransform: \"capitalize\"}} />\n                                    </Tabs>\n                                </AppBar>\n                                <Paper className={classes.paper}>\n                                    <TabPanel value={value} index={0}>\n                                        <NmapOutput />\n                                    </TabPanel>\n                                    <TabPanel value={value} index={1}>\n                                      <div style={{whiteSpace: \"normal\"}}>\n                                        <HostsAndPorts />\n                                      </div>\n                                    </TabPanel>\n                                    <TabPanel value={value} index={2}>\n                                        <ScanDetails />\n                                    </TabPanel>\n                                    <TabPanel value={value} index={3}>\n                                        <CVEResult />\n                                    </TabPanel>\n                                    <TabPanel value={value} index={4}>\n                                        <WhoIs />\n                                    </TabPanel>\n                                    <TabPanel value={value} index={5}>\n                                        <ExportResult />\n                                    </TabPanel>\n                                </Paper>\n                                <Button\n                                  style={{\n                                    width: \"100%\",\n                                    marginTop: 15,\n                                  }}\n                                  variant=\"outlined\"\n                                  color=\"secondary\"\n                                >\n                                  Delete Result\n                                </Button>\n                            </div>\n                        </>\n                    }\n                    \n                </Paper>\n            </Grid>\n\n      </Grid>\n      \n    </div>\n  );\n}\n)","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Mobx/Models/homeSettingsStatus.tsx",[],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/ScanResults/ScanDetails.tsx",["340","341","342","343","344","345","346","347","348","349","350","351","352","353","354","355","356","357","358","359","360","361","362","363","364","365","366","367"],"import React, {useState} from 'react';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport Divider from '@material-ui/core/Divider';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Tooltip from '@material-ui/core/Tooltip';\n\nimport { scanTarget, targetData, targetTime, chosenMode, scanDate } from '../target'\n\n// Backend\nimport { isScanning } from '../../Backend/frontendData/isScanning'\nimport { pureOutput } from '../../Backend/frontendData/Result'\nimport scannedIn from '../../Backend/frontendData/scannedIn.json'\nimport scannedTarget from '../../Backend/frontendData/scannedTargetForSelect.json'\nimport { rows } from '../../Backend/frontendData/getPortStatus'\n\n// Mobx Global Status\nimport storeTarget from '../../Mobx/Models/resultSelectStatus'\n\nconst mainStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    paper: {\n      padding: theme.spacing(2),\n      textAlign: 'left',\n      backgroundColor: \"#fefefe\",\n      color: \"#333333\",\n    },\n    centerGrid: {\n        textAlign: \"center\",\n        marginTop: 15,\n    },\n    btnTabs: {\n        textTransform: \"capitalize\",\n    },\n    cardRoot: {\n        marginTop: 25,\n    },\n    title: {\n        fontSize: 14,\n        whiteSpace: \"pre-line\",\n    },\n    pos: {\n        marginBottom: 12,\n    },\n    defaultShow: {\n\n    },\n    defaultHide: {\n        display: \"none\",\n    },\n    centering: {\n      textAlignLast: \"center\",\n      width: \"70%\",\n      userSelect: \"none\",\n    },\n    datepicker: {\n      marginLeft: theme.spacing(1),\n      marginRight: theme.spacing(1),\n      width: 200,\n    },\n  }),\n);\n\nexport default () => {\n  const classes = mainStyles();\n\n  const handleClick = () => {\n    console.log(targetData);\n  }\n\n  return (\n    <>\n        {scannedIn.map((data) => (\n          data.id !=  storeTarget.target ||  storeTarget.target === \"\" || data.target === \"\" ?\n              null\n                  :\n              <>\n              {/* <button onClick={handleClick}>click</button> */}\n              <form \n                  className={classes.root} \n                  noValidate \n                  autoComplete=\"off\"\n              >\n                  <br/>\n                  <Grid container justify=\"center\" spacing={2} style={{width: \"100%\", textAlign: \"center\"}}>\n                    <>\n                      <Grid item xs={12} style={{width: \"100%\", marginBottom: 15,}}>\n                        <div style={{textAlign: \"left\"}}><FormLabel component=\"legend\">Basic Details: </FormLabel></div>\n                      </Grid>\n\n                      <Grid item xs={12} style={{width: \"100%\", marginBottom: 55}}>\n                        <TextField\n                            className={classes.centering} \n                            id=\"outlined-basic\" \n                            label=\"Scan Target\" \n                            variant=\"outlined\" \n                            multiline\n                            style={{\n                              width: \"85%\",\n                            }}\n                            value={data.target}\n                            inputProps={{\n                                readOnly: true,\n                            }}\n                        />\n                      </Grid>\n                    \n\n                      <Grid item xs={6} style={{width: \"100%\", marginBottom: 55}}>\n                        <TextField\n                            className={classes.centering} \n                            id=\"outlined-basic\" \n                            label=\"Scan Time\" \n                            variant=\"outlined\" \n                            value={data.time}\n                            inputProps={{\n                                readOnly: true,\n                            }}\n                        />\n                      </Grid>\n\n                      <Grid item xs={6} style={{width: \"100%\"}}>\n                        <TextField\n                            className={classes.centering} \n                            id=\"outlined-basic\" \n                            label=\"Chosen Scan Mode\" \n                            variant=\"outlined\" \n                            value={\n                              data.scanMode == \"\" ? \"Regular Scan\" : data.scanMode\n                            }\n                            inputProps={{\n                                readOnly: true,\n                            }}\n                          />\n                      </Grid>\n                      \n                      <Grid item xs={6} style={{width: \"100%\", marginBottom: 55}}>\n                        <Tooltip \n                          arrow \n                          placement=\"top\"\n                          title={\n                            (parseInt(data.runTime)/60).toFixed(3) + \" min; \" + (parseInt(data.runTime)/60/60).toFixed(3) + \" hr\"\n                          } \n                        >\n                          <TextField\n                              className={classes.centering} \n                              id=\"outlined-basic\" \n                              label=\"Target Scanned In\" \n                              variant=\"outlined\" \n                              value={data.runTime}\n                              inputProps={{\n                                  readOnly: true,\n                              }}\n                            />\n                          </Tooltip>\n                      </Grid>\n                  \n                  \n                      <Grid item xs={6} style={{width: \"100%\"}}>\n                        <TextField\n                          className={classes.centering} \n                          id=\"outlined-basic\" \n                          label='Scan Date [Y-M-D]' \n                          variant=\"outlined\" \n                          value={data.date}\n                          inputProps={{\n                              readOnly: true,\n                          }}\n                        />\n                      </Grid>\n                      \n                      <Grid item xs={6} style={{width: \"100%\", marginBottom: 55}}>\n                        <TextField\n                            className={classes.centering} \n                            id=\"outlined-basic\" \n                            label=\"Scan Latency\" \n                            variant=\"outlined\" \n                            multiline={\n                              data.latency.length > 17 ? true : false\n                            }\n                            value={\n                              data.latency == '' ? \"Target host is down\" \n                              //   :\n                              // data.latency.length > 17 ? data.target + \": \" + data.latency\n                                 :\n                              data.latency\n                            }\n                            inputProps={{\n                                readOnly: true,\n                            }}\n                          />\n                      </Grid>\n\n                      <Grid item xs={6} style={{width: \"100%\", marginBottom: 55}}>\n                        <TextField\n                            className={classes.centering} \n                            id=\"outlined-basic\" \n                            label=\"Up Host\" \n                            variant=\"outlined\" \n                            value={data.upHost == '' ? \"Target host is down\" : data.upHost}\n                            inputProps={{\n                                readOnly: true,\n                            }}\n                          />\n                      </Grid>\n                      \n                      <Grid item xs={6} style={{width: \"100%\", marginBottom: 55}}>\n                        <TextField\n                            className={classes.centering} \n                            id=\"outlined-basic\" \n                            label=\"Closed Port Qty.\" \n                            variant=\"outlined\" \n                            multiline={\n                              data.notShown.length > 15 ? true : false\n                            }\n                            value={data.notShown == '' ? \"Target host is down\" : data.notShown}\n                            inputProps={{\n                                readOnly: true,\n                            }}\n                          />\n                      </Grid>\n\n                      <Grid item xs={6} style={{width: \"100%\", marginBottom: 55}}>\n                        <TextField\n                            className={classes.centering} \n                            id=\"outlined-basic\" \n                            label=\"Nmap Version\" \n                            variant=\"outlined\" \n                            multiline\n                            value={data.nmapVer}\n                            inputProps={{\n                                readOnly: true,\n                            }}\n                          />\n                      </Grid>\n\n                    <Grid item xs={12} style={{width: \"100%\", marginBottom: 15, marginTop: 25,}}>\n                      <Divider /><br/>\n                      <div style={{textAlign: \"left\"}}><FormLabel component=\"legend\">Advanced Details: </FormLabel></div>\n                    </Grid>\n                      \n                      <Grid item xs={12} style={{width: \"100%\", marginBottom: 55}}>\n                        <TextField\n                            className={classes.centering} \n                            id=\"outlined-basic\" \n                            label=\"Target OS\" \n                            variant=\"outlined\" \n                            style={{\n                              width: \"85%\",\n                            }}\n                            multiline={\n                              data.os.length > 5 ? true : false\n                            }\n                            value={\n                              data.os == \"\" ? \"No OS found or target is currently down\" : data.os\n                            }\n                            inputProps={{\n                                readOnly: true,\n                            }}\n                          />\n                      </Grid>\n\n                      <Grid item xs={6} style={{width: \"100%\", marginBottom: 55}}>\n                        <TextField\n                            className={classes.centering} \n                            id=\"outlined-basic\" \n                            label=\"Network Distance\" \n                            variant=\"outlined\" \n                            multiline={\n                              data.hop.length > 5 ? true : false\n                            }\n                            value={\n                              data.hop == \"\" ? \n                                \"Enable -v to discover\" \n                                : \n                              data.hop\n\n                            }\n                            inputProps={{\n                                readOnly: true,\n                            }}\n                          />\n                      </Grid>\n                      \n                      <Grid item xs={6} style={{width: \"100%\", marginBottom: 55}}>\n                        <TextField\n                            className={classes.centering} \n                            id=\"outlined-basic\" \n                            label=\"TCP Sequence Prediction\" \n                            variant=\"outlined\" \n                            multiline={\n                              data.notShown.length > 15 ? true : false\n                            }\n                            value={data.difficulty == '' ? \"Target host is down\" : data.difficulty}\n                            inputProps={{\n                                readOnly: true,\n                            }}\n                          />\n                      </Grid>\n                      \n                      <Grid item xs={6} style={{width: \"100%\", marginBottom: 55}}>\n                        <TextField\n                            className={classes.centering} \n                            id=\"outlined-basic\" \n                            label=\"Device Type\" \n                            variant=\"outlined\" \n                            multiline={\n                              data.macAddr.length > 17 ? true : false\n                            }\n                            value={\n                              data.deviceType == \"\" ? \"Enable -v to discover\" : data.deviceType\n                            }\n                            inputProps={{\n                                readOnly: true,\n                            }}\n                          />\n                      </Grid>\n\n                      <Grid item xs={6} style={{width: \"100%\", marginBottom: 55}}>\n                        <TextField\n                            className={classes.centering} \n                            id=\"outlined-basic\" \n                            label=\"MAC Address\" \n                            variant=\"outlined\" \n                            multiline={\n                              data.macAddr.length > 28 ? true : false\n                            }\n                            value={\n                              data.macAddr == \"\" ? \"MAC Address not found\" : data.macAddr\n                            }\n                            inputProps={{\n                                readOnly: true,\n                            }}\n                          />\n                      </Grid>\n\n                      <Grid item xs={12} style={{width: \"100%\", marginBottom: 55}}>\n                        <TextField\n                            className={classes.centering} \n                            id=\"outlined-basic\" \n                            label=\"Up Time\" \n                            variant=\"outlined\" \n                            multiline\n                            style={{\n                              width: \"85%\",\n                            }}\n                            value={\n                              data.uptime == \"\" ? \"Enable -v to discover\" : data.uptime\n                            }\n                            inputProps={{\n                                readOnly: true,\n                            }}\n                          />\n                      </Grid>\n\n                      <Grid item xs={6} style={{width: \"100%\", marginBottom: 55}}>\n                        <TextField\n                            className={classes.centering} \n                            id=\"outlined-basic\" \n                            label=\"Raw Packets Sent\" \n                            variant=\"outlined\" \n                            value={\n                              data.rawPacket == \"\" ? \"Enable -v to discover\" : data.rawPacket\n                            }\n                            inputProps={{\n                                readOnly: true,\n                            }}\n                          />\n                      </Grid>\n\n                      <Grid item xs={6} style={{width: \"100%\", marginBottom: 55}}>\n                        <TextField\n                            className={classes.centering} \n                            id=\"outlined-basic\" \n                            label=\"Raw Packets Received\" \n                            variant=\"outlined\" \n                            value={\n                              data.rcvd == \"\" ? \"Enable -v to discover\" : data.rcvd\n                            }\n                            inputProps={{\n                                readOnly: true,\n                            }}\n                          />\n                      </Grid>\n\n\n                    <Grid item xs={12} style={{width: \"100%\", marginBottom: 15, marginTop: 25,}}>\n                      <Divider /><br/>\n                      <div style={{textAlign: \"left\"}}><FormLabel component=\"legend\">Scan Settings</FormLabel></div>\n                    </Grid>\n\n                        <Grid item xs={6} style={{width: \"100%\", marginBottom: 55}}>\n                          <TextField\n                              className={classes.centering} \n                              id=\"outlined-basic\" \n                              label=\"Automation\" \n                              variant=\"outlined\" \n                              value={\n                                data.auto == \"True\" ? \"Enabled\" : \"Disabled\"\n                              }\n                              inputProps={{\n                                  readOnly: true,\n                              }}\n                            />\n                        </Grid>\n                        <Grid item xs={6} style={{width: \"100%\", marginBottom: 55}}>\n                          <TextField\n                              className={classes.centering} \n                              id=\"outlined-basic\" \n                              label=\"CVE Detection\" \n                              variant=\"outlined\" \n                              value={\n                                data.cveDetect == \"True\" ? \"Enabled\" : \"Disabled\"\n                              }\n                              inputProps={{\n                                  readOnly: true,\n                              }}\n                            />\n                        </Grid>\n                        <Grid item xs={6} style={{width: \"100%\", marginBottom: 55}}>\n                          <TextField\n                              className={classes.centering} \n                              id=\"outlined-basic\" \n                              label=\"Scan Range\" \n                              variant=\"outlined\" \n                              value={\n                                data.setRange == \" \" ? \"Not Specify\" : data.setRange\n                              }\n                              inputProps={{\n                                  readOnly: true,\n                              }}\n                            />\n                        </Grid>\n                        <Grid item xs={6} style={{width: \"100%\", marginBottom: 55}}>\n                          <TextField\n                              className={classes.centering} \n                              id=\"outlined-basic\" \n                              label=\"Set Flags\" \n                              variant=\"outlined\" \n                              multiline\n                              value={\n                                data.flags == \" \" ? \"Null\" : data.flags\n                              }\n                              inputProps={{\n                                  readOnly: true,\n                              }}\n                            />\n                        </Grid>\n                      </>\n                    \n                  </Grid>\n              </form>\n              </>\n        ))}\n    </>\n  );\n}\n",["368","369"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/ScanResults/WhoIs.tsx",["370","371","372"],"import React, {useState} from 'react'\nimport Typography from '@material-ui/core/Typography'\n\n// Mobx\nimport storeTarget from '../../Mobx/Models/resultSelectStatus'\n\n// Backend\nimport { whoisScanOutput } from '../../Backend/frontendData/whoisScan'\nimport store from '../../Mobx/Models/homeSettingsStatus'\n\nexport default () => {\n    return(\n        <>\n            {whoisScanOutput.map((data, index) => \n            \n               storeTarget.target === data.scanId ?\n                <>\n                    <Typography key={data.scanId} style={{whiteSpace: \"pre-line\"}}>\n                        {data.output}\n                    </Typography>\n                </> : null\n            )}\n        </>\n    )\n}","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Backend/frontendData/whoisScan.tsx",[],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/index.tsx",[],["373","374"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Views/DefaultScanMode.tsx",[],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Views/ScanComparison.tsx",[],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/defaultScanModes/fullPortsScanMode.tsx",["375","376","377","378","379"],"import React from 'react';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport { Switch, Route, Link, BrowserRouter } from \"react-router-dom\";\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography'\nimport TextField from '@material-ui/core/TextField';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Slider from '@material-ui/core/Slider';\n\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Switcher from '@material-ui/core/Switch';\nimport Button from '@material-ui/core/Button';\n\nimport IconButton from '@material-ui/core/IconButton';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport CloseIcon from '@material-ui/icons/Close';\n\nimport ScanModeIcon from '@material-ui/icons/Settings';\n\nimport '../../Styles/DefaultScanMode.css'\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    paper: {\n      padding: theme.spacing(2),\n      textAlign: 'left',\n      backgroundColor: \"#fefefe\",\n      color: \"#333333\",\n    },\n    centerGrid: {\n        textAlign: \"center\",\n        marginTop: 15,\n    },\n    avatarText: {\n        background: \"#4A92FF\",\n        borderRadius: 6,\n        color: \"#fff\",\n        padding: \"2px 6px\",\n    },  \n    switch: {\n        disaply: \"inline-block\",\n    },\n  }),\n);\n\nexport default function CenteredGrid() {\n  const classes = useStyles();\n  const [value, setValue] = React.useState<number>(4);\n\n  const handleChange = (event: any, newValue: number | number[]) => {\n    setValue(newValue as number);\n  };\n\n  const [state, setState] = React.useState({\n    p: true,\n  });\n\n  const handleSwitchChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setState({ ...state, [event.target.name]: event.target.checked });\n  };\n\n  const [open, setOpen] = React.useState(false);\n\n  const handleClick = () => {\n    setOpen(true);\n  };\n\n  const handleClose = (event: React.SyntheticEvent | React.MouseEvent, reason?: string) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    setOpen(false);\n  };\n\n  return (\n    <div className={classes.root}>\n      <Grid container spacing={5} justify=\"center\" alignItems=\"center\">\n       \n        <Grid item xs={10}>\n            <Paper className={classes.paper}>\n                <Typography variant=\"h6\">\n                    Full Ports Scan Modes\n                </Typography>\n                    <br/>\n                <div>\n                    <TextField \n                        id=\"outlined-basic\" \n                        label=\"Current Command\" \n                        defaultValue=\"nmap -T4 -p- -v -v + [ Target IP / Domain ] \"\n                        variant=\"outlined\" \n                        size=\"small\"\n                        style={{\n                            width: \"80%\",\n                            marginLeft: 85,\n                            textAlignLast: \"center\",\n                        }}\n                        inputProps={{ \n                            readOnly: true, \n                        }}\n                    />\n                </div>\n                    <br/>\n                <div className={classes.root}>\n                    \n                </div>\n            </Paper>\n        </Grid>\n\n        <Grid item xs={10}>\n            <Paper className={classes.paper}>\n                <Typography variant=\"h6\">\n                    Scan Frequency\n                </Typography>\n                    <br/>\n                <div>\n                     <Slider \n                        value={value} \n                        onChange={handleChange} \n                        max={5}\n                        min={0}\n                        step={1}\n                        valueLabelDisplay=\"on\"\n                        style={{\n                            width: \"70%\",\n                            marginLeft: 145,\n                        }}    \n                    />\n                </div>\n                    <br/>\n                <Typography style={{textAlign: \"right\",marginRight: 35}}>\n                    -T&nbsp;\n                    <Tooltip \n                        title=\"[ -T ] --- Specifies the timing (Timing) used in the scanning process, there are always 6 levels (0-5), the level increases, the faster the scanning speed.\" \n                        placement=\"top\" \n                        arrow\n                    >\n                        <span className={classes.avatarText}>{value}</span>\n                    </Tooltip>\n                </Typography>\n            </Paper>\n        </Grid>\n\n        <Grid item xs={10}>\n           <Paper className={classes.paper}>\n                <Typography variant=\"h6\">\n                    Flags\n                </Typography>\n                    <br/>\n                <div style={{textAlign: \"center\"}}>\n                    <FormControl component=\"fieldset\">\n                        <table className=\"scanModeSettingFlagTable\">\n                            <tr>\n                                <td>\n                                    <RadioGroup row aria-label=\"position\" name=\"position\" defaultValue=\"top\">\n                                        <Tooltip title=\"Increase the verbosity level\" placement=\"top\" arrow>\n                                            <FormControlLabel\n                                                value=\"-v\"\n                                                control={<Radio color=\"primary\" />}\n                                                label=\"-v\"\n                                                labelPlacement=\"end\"\n                                            />\n                                        </Tooltip>\n                                        <Tooltip title=\"Use more v for greater effect\" placement=\"top\" arrow>\n                                            <FormControlLabel\n                                                value=\"-vv\"\n                                                control={<Radio color=\"primary\" />}\n                                                label=\"-vv\"\n                                                labelPlacement=\"end\"\n                                            />\n                                        </Tooltip>\n                                    </RadioGroup>\n                                </td>\n                                <td>\n                                    <Tooltip title=\"Port scan all ports. THIS MUST BE CHOSEN.\" placement=\"top\" arrow>\n                                        <FormControlLabel\n                                            control={\n                                                <Switcher\n                                                    checked={state.p}\n                                                    onChange={handleSwitchChange}\n                                                    name=\"p\"\n                                                    color=\"primary\"\n                                                    disabled={true}\n                                                />\n                                            }\n                                            label=\"-p-\"\n                                            className={classes.switch}\n                                        />\n                                    </Tooltip>\n                                </td>\n                            </tr>\n                        </table>\n                    </FormControl>\n                </div>\n            </Paper>\n        </Grid>\n\n        <Grid item xs={10} style={{position: \"absolute\", width: 902, bottom: 0}}>\n            <Paper className={classes.paper}>\n                <Link to=\"/defaultScanMode\">\n                    <Button variant=\"contained\">Back</Button>\n                </Link>                \n                <Button variant=\"contained\" style={{float: 'right'}} onClick={handleClick}>Save</Button>\n                <Snackbar\n                    anchorOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'left',\n                    }}\n                    open={open}\n                    autoHideDuration={6000}\n                    onClose={handleClose}\n                    message=\"Settings Save Successfully\"\n                    action={\n                    <React.Fragment>\n                         <Link to=\"/defaultScanMode\">\n                            <IconButton size=\"small\" aria-label=\"close\" color=\"inherit\" onClick={handleClose}>\n                                <CloseIcon fontSize=\"small\" style={{color: \"#fff\"}}/>\n                            </IconButton>\n                        </Link>\n                    </React.Fragment>\n                    }\n                />\n            </Paper>\n        </Grid>\n\n      </Grid>\n      \n    </div>\n  );\n}\n","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/defaultScanModes/intenseScanMode.tsx",["380","381","382","383","384"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/defaultScanModes/top100portsScanMode.tsx",["385","386","387","388","389","390","391"],"import React from 'react';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport { Switch, Route, Link, BrowserRouter } from \"react-router-dom\";\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography'\nimport TextField from '@material-ui/core/TextField';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Slider from '@material-ui/core/Slider';\n\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Switcher from '@material-ui/core/Switch';\nimport Button from '@material-ui/core/Button';\n\nimport IconButton from '@material-ui/core/IconButton';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport CloseIcon from '@material-ui/icons/Close';\n\nimport ScanModeIcon from '@material-ui/icons/Settings';\n\nimport '../../Styles/DefaultScanMode.css'\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    paper: {\n      padding: theme.spacing(2),\n      textAlign: 'left',\n      backgroundColor: \"#fefefe\",\n      color: \"#333333\",\n    },\n    centerGrid: {\n        textAlign: \"center\",\n        marginTop: 15,\n    },\n    avatarText: {\n        background: \"#4A92FF\",\n        borderRadius: 6,\n        color: \"#fff\",\n        padding: \"2px 6px\",\n    },  \n    switch: {\n        disaply: \"inline-block\",\n    },\n  }),\n);\n\nexport default function CenteredGrid() {\n  const classes = useStyles();\n  const [value, setValue] = React.useState<number>(4);\n\n  const handleChange = (event: any, newValue: number | number[]) => {\n    setValue(newValue as number);\n  };\n\n  const [state, setState] = React.useState({\n    F: true,\n  });\n\n  const handleSwitchChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setState({ ...state, [event.target.name]: event.target.checked });\n  };\n\n  const [open, setOpen] = React.useState(false);\n\n  const handleClick = () => {\n    setOpen(true);\n  };\n\n  const handleClose = (event: React.SyntheticEvent | React.MouseEvent, reason?: string) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    setOpen(false);\n  };\n\n  return (\n    <div className={classes.root}>\n      <Grid container spacing={5} justify=\"center\" alignItems=\"center\">\n       \n        <Grid item xs={10}>\n            <Paper className={classes.paper}>\n                <Typography variant=\"h6\">\n                    Top 100 Ports Scan Modes\n                </Typography>\n                    <br/>\n                <div>\n                    <TextField \n                        id=\"outlined-basic\" \n                        label=\"Current Command\" \n                        defaultValue=\"nmap -T4 -F + [ Target IP / Domain ] \"\n                        variant=\"outlined\" \n                        size=\"small\"\n                        style={{\n                            width: \"80%\",\n                            marginLeft: 85,\n                            textAlignLast: \"center\",\n                        }}\n                        inputProps={{ \n                            readOnly: true, \n                        }}\n                    />\n                </div>\n                    <br/>\n                <div className={classes.root}>\n                    \n                </div>\n            </Paper>\n        </Grid>\n\n        <Grid item xs={10}>\n            <Paper className={classes.paper}>\n                <Typography variant=\"h6\">\n                    Scan Frequency\n                </Typography>\n                    <br/>\n                <div>\n                     <Slider \n                        value={value} \n                        onChange={handleChange} \n                        max={5}\n                        min={0}\n                        step={1}\n                        valueLabelDisplay=\"on\"\n                        style={{\n                            width: \"70%\",\n                            marginLeft: 145,\n                        }}    \n                    />\n                </div>\n                    <br/>\n                <Typography style={{textAlign: \"right\",marginRight: 35}}>\n                    -T&nbsp;\n                    <Tooltip \n                        title=\"[ -T ] --- Specifies the timing (Timing) used in the scanning process, there are always 6 levels (0-5), the level increases, the faster the scanning speed.\" \n                        placement=\"top\" \n                        arrow\n                    >\n                        <span className={classes.avatarText}>{value}</span>\n                    </Tooltip>\n                </Typography>\n            </Paper>\n        </Grid>\n\n        <Grid item xs={10}>\n           <Paper className={classes.paper}>\n                <Typography variant=\"h6\">\n                    Flags\n                </Typography>\n                    <br/>\n                \n                    <div style={{textAlign: \"center\"}}>\n                    <FormControl component=\"fieldset\">\n                        <table className=\"scanModeSettingFlagTable\">\n                            <tr>\n                                <td>\n                                    <Tooltip title=\"Fast port scan (100 ports). THIS MUST BE CHOSEN.\" placement=\"top\" arrow>\n                                        <FormControlLabel\n                                            control={\n                                                <Switcher\n                                                    checked={state.F}\n                                                    onChange={handleSwitchChange}\n                                                    name=\"F\"\n                                                    color=\"primary\"\n                                                    disabled={true}\n                                                />\n                                            }\n                                            label=\"-F\"\n                                            className={classes.switch}\n                                        />\n                                    </Tooltip>\n                                </td>\n                            </tr>\n                        </table>\n                    </FormControl>\n                </div>\n           </Paper>\n        </Grid>\n\n        <Grid item xs={10} style={{position: \"absolute\", width: 902, bottom: 0}}>\n            <Paper className={classes.paper}>\n                <Link to=\"/defaultScanMode\">\n                    <Button variant=\"contained\">Back</Button>\n                </Link>                \n                <Button variant=\"contained\" style={{float: 'right'}} onClick={handleClick}>Save</Button>\n                <Snackbar\n                    anchorOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'left',\n                    }}\n                    open={open}\n                    autoHideDuration={6000}\n                    onClose={handleClose}\n                    message=\"Settings Save Successfully\"\n                    action={\n                    <React.Fragment>\n                         <Link to=\"/defaultScanMode\">\n                            <IconButton size=\"small\" aria-label=\"close\" color=\"inherit\" onClick={handleClose}>\n                                <CloseIcon fontSize=\"small\" style={{color: \"#fff\"}}/>\n                            </IconButton>\n                        </Link>\n                    </React.Fragment>\n                    }\n                />\n            </Paper>\n        </Grid>\n\n      </Grid>\n      \n    </div>\n  );\n}\n","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Views/Home.tsx",[],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Mobx/Models/defaultScanModeStatus.tsx",[],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/NSE.tsx",["392","393","394","395","396","397","398","399","400","401","402","403","404","405","406","407","408","409","410","411","412","413","414","415","416","417","418","419","420","421","422","423","424","425","426"],"import React from 'react';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Collapse from '@material-ui/core/Collapse';\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\nimport DraftsIcon from '@material-ui/icons/Drafts';\nimport SendIcon from '@material-ui/icons/Send';\nimport DynamicFeedIcon from '@material-ui/icons/DynamicFeed';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport StarBorder from '@material-ui/icons/StarBorder';\nimport ExtensionIcon from '@material-ui/icons/ExtensionOutlined';\nimport AccountTreeOutlinedIcon from '@material-ui/icons/AccountTreeOutlined';\n\nimport DiscoveryBroadcast from './nseData/Discovery/Broadcast'\nimport DiscoveryDatabase from './nseData/Discovery/Database'\nimport DiscoveryHTTP from './nseData/Discovery/HTTP'\nimport DiscoveryIP from './nseData/Discovery/IP'\nimport DiscoveryHadoop from './nseData/Discovery/Hadoop'\nimport DiscoveryNetwork from './nseData/Discovery/Network'\nimport DiscoveryServerMessageBlock from './nseData/Discovery/ServerMessageBlock'\nimport DiscoveryServer from './nseData/Discovery/Server'\nimport DiscoverySMTP from './nseData/Discovery/SMTP'\nimport DiscoveryTargets from './nseData/Discovery/Targets'\n\nimport ExploitFTP from './nseData/Exploit/FTP'\nimport ExploitHTTP from './nseData/Exploit/HTTP'\nimport ExploitOthers from './nseData/Exploit/Others'\nimport ExploitSMB from './nseData/Exploit/SMB'\n\nimport VulnFTP from './nseData/Vulnerability/FTP'\nimport VulnHTTP from './nseData/Vulnerability/HTTP'\nimport VulnOthers from './nseData/Vulnerability/Others'\nimport VulnSMB from './nseData/Vulnerability/SMB'\nimport VulnSSL from './nseData/Vulnerability/SSL'\n\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      width: '100%',\n      backgroundColor: theme.palette.background.paper,\n    },\n    nested: {\n      paddingLeft: theme.spacing(4),\n    },\n  }),\n);\n\nconst menuItem = [\n    {\n        cateName: \"Discovery\",\n        handle: \"handleDiscovery\",\n        subItem: [\n            \"Broadcast\", \"Database\", \"Hadoop\", \"HTTP\", \"IP\", \n            \"Network\", \"Server Message Block\", \"Server\", \"SMTP\", \"Others\", \n        ],        \n    },\n    {\n        cateName: \"Exploit\",\n        handle: \"handleExploit\",\n        subItem: [\n            \"FTP\", \"HTTP\", \"SMB\", \"Others\", \n        ],        \n    },\n    {\n        cateName: \"Vulnerability\",\n        handle: \"handleVulnerability\",\n        subItem: [\n            \"FTP\", \"HTTP\", \"SMB\", \"SSL\", \"Others\",\n        ],        \n    },\n]\n\nexport default function NestedList() {\n  const classes = useStyles();\n  const [Discovery, setDiscovery] = React.useState(false);\n\n  const handleDiscovery = () => {\n    setDiscovery(!Discovery);\n\n    if( Exploit == true ){\n        setExploit(false)\n    }\n    if( Vulnerability == true ){\n        setVulnerability(false)\n    }\n  };\n\n  const [Exploit, setExploit] = React.useState(false);\n\n  const handleExploit = () => {\n    setExploit(!Exploit);\n    \n    if( Discovery == true ){\n        setDiscovery(false)\n    }\n    if( Vulnerability == true ){\n        setVulnerability(false)\n    }\n  };\n\n  const [Vulnerability, setVulnerability] = React.useState(false);\n\n  const handleVulnerability = () => {\n    setVulnerability(!Vulnerability);\n     \n    if( Discovery == true ){\n        setDiscovery(false)\n    }\n    if( Exploit == true ){\n        setExploit(false)\n    }\n  };\n\n  return (\n    <List\n      component=\"nav\"\n      aria-labelledby=\"nested-list-subheader\"\n      className={classes.root}\n    >\n      {menuItem.map((obj) => (\n         obj.cateName == \"Discovery\" ?\n            <>\n                <ListItem button onClick={handleDiscovery}>\n                    <ListItemIcon>\n                        <AccountTreeOutlinedIcon />\n                    </ListItemIcon>\n                    <ListItemText primary={obj.cateName} />\n                    {Discovery ? <ExpandLess /> : <ExpandMore />}\n                </ListItem>\n                <Collapse in={Discovery} timeout=\"auto\" unmountOnExit>\n                    {obj.subItem.map((subObj) => (\n                        <List component=\"div\" disablePadding>\n                            {\n                                subObj == \"Broadcast\" ? <DiscoveryBroadcast /> : \n                                    subObj == \"Database\" ? <DiscoveryDatabase /> : \n                                        subObj == \"Hadoop\" ? <DiscoveryHadoop /> : \n                                            subObj == \"HTTP\" ? <DiscoveryHTTP /> : \n                                                subObj == \"IP\" ? <DiscoveryIP /> : \n                                                subObj == \"Network\" ? <DiscoveryNetwork /> : \n                                            subObj == \"Server Message Block\" ? <DiscoveryServerMessageBlock /> : \n                                        subObj == \"Server\" ? <DiscoveryServer /> : \n                                    subObj == \"SMTP\" ? <DiscoverySMTP /> : \n                                subObj == \"Targets\" ? <DiscoveryTargets /> : null\n                            }\n                        </List>\n                    ))}\n                    \n                </Collapse>\n            </>\n            :\n        obj.cateName == \"Exploit\" ?\n            <>\n                <ListItem button onClick={handleExploit}>\n                    <ListItemIcon>\n                        <AccountTreeOutlinedIcon />\n                    </ListItemIcon>\n                    <ListItemText primary={obj.cateName} />\n                    {Exploit ? <ExpandLess /> : <ExpandMore />}\n                </ListItem>\n                <Collapse in={Exploit} timeout=\"auto\" unmountOnExit>\n                    {obj.subItem.map((subObj) => (\n                        <List component=\"div\" disablePadding>\n                            {\n                                subObj == \"FTP\" ? <ExploitFTP /> : \n                                    subObj == \"HTTP\" ? <ExploitHTTP /> :\n                                        subObj == \"Others\" ? <ExploitOthers /> :\n                                            subObj == \"SMB\" ? <ExploitSMB /> : null\n                            }\n                        </List>\n                    ))}\n                    \n                </Collapse>\n            </>\n            :\n        obj.cateName == \"Vulnerability\" ?\n            <>\n                <ListItem button onClick={handleVulnerability}>\n                    <ListItemIcon>\n                        <AccountTreeOutlinedIcon />\n                    </ListItemIcon>\n                    <ListItemText primary={obj.cateName} />\n                    {Vulnerability ? <ExpandLess /> : <ExpandMore />}\n                </ListItem>\n                <Collapse in={Vulnerability} timeout=\"auto\" unmountOnExit>\n                    {obj.subItem.map((subObj) => (\n                        <List component=\"div\" disablePadding>\n                            {\n                                subObj == \"FTP\" ? <VulnFTP /> : \n                                    subObj == \"HTTP\" ? <VulnHTTP /> :\n                                        subObj == \"Others\" ? <VulnOthers /> :\n                                    subObj == \"SMB\" ? <VulnSMB /> :\n                                subObj == \"SSL\" ? <VulnSSL /> : null\n                            }\n                        </List>\n                    ))}\n                    \n                </Collapse>\n            </>\n            :\n            null\n      ))}\n      \n    </List>\n  );\n}\n",["427","428"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Vulnerability/HTTP.tsx",["429","430"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Discovery/Targets.tsx",["431","432"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Discovery/Database.tsx",["433","434"],"import React from 'react';\nimport { createStyles, Theme, withStyles, WithStyles, makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ExtensionIcon from '@material-ui/icons/ExtensionOutlined';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Grid from '@material-ui/core/Grid';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox, { CheckboxProps } from '@material-ui/core/Checkbox';\n\nimport Typography from '@material-ui/core/Typography';\nimport Separator from '@material-ui/icons/ArrowRightOutlined';\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\n\n// NSE Options\nimport NSEoption from './json/Database.json'\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      margin: 0,\n      padding: theme.spacing(2),\n    },\n    closeButton: {\n      position: 'absolute',\n      right: theme.spacing(1),\n      top: theme.spacing(1),\n      color: theme.palette.grey[500],\n    },\n  });\n\nexport interface DialogTitleProps extends WithStyles<typeof styles> {\n  id: string;\n  children: React.ReactNode;\n  onClose: () => void;\n}\n\nconst DialogTitle = withStyles(styles)((props: DialogTitleProps) => {\n  const { children, classes, onClose, ...other } = props;\n  return (\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\n      <Typography variant=\"h6\">{children}</Typography>\n      {onClose ? (\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n    </MuiDialogTitle>\n  );\n});\n\nconst DialogContent = withStyles((theme: Theme) => ({\n  root: {\n    padding: theme.spacing(2),\n  },\n}))(MuiDialogContent);\n\nconst DialogActions = withStyles((theme: Theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(1),\n  },\n}))(MuiDialogActions);\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    nested: {\n      paddingLeft: theme.spacing(4),\n    },\n  }),\n);\n\nfunction handleClick(event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) {\n    event.preventDefault();\n    console.info('You clicked a breadcrumb.');\n  }\n  \n  function Breadcrumb() {\n    return (\n      <Breadcrumbs separator={<Separator />} >\n        <Typography color=\"textPrimary\">NSE</Typography>\n        <Typography color=\"textPrimary\">Discovery</Typography>\n        <Typography color=\"primary\" style={{fontWeight: \"bold\"}}>Database</Typography>\n      </Breadcrumbs>\n    );\n  }\n\nexport default function CustomizedDialogs() {\n  const [open, setOpen] = React.useState(false);\n  const classes = useStyles();\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div>\n      <ListItem button className={classes.nested} onClick={handleClickOpen}>\n        <ListItemIcon>\n            <ExtensionIcon />\n        </ListItemIcon>\n        <ListItemText>Database</ListItemText>\n    </ListItem>\n      <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n          <Breadcrumb />\n        </DialogTitle>\n        <DialogContent dividers>\n          <Grid container justify=\"center\" spacing={3}>\n              {NSEoption.map((option) => (\n                <Grid item xs={6}>\n                    <Tooltip arrow placement=\"top\" title={option.des}>\n                        <FormControlLabel\n                            value={option.id}\n                            control={<Checkbox color=\"primary\" />}\n                            label={option.id}\n                            labelPlacement=\"end\"\n                        />\n                    </Tooltip>\n                </Grid>\n              ))}\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button autoFocus onClick={handleClose} color=\"primary\">\n            Save changes\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/ScanResults/NmapOutput.tsx",["435","436","437","438","439","440","441","442","443","444"],"import React, {useState, useEffect} from 'react';\nimport Typography from '@material-ui/core/Typography'\n\nimport { scanTarget, targetData, targetTime } from '../target'\n\n// Backend\nimport { isScanning } from '../../Backend/frontendData/isScanning'\nimport { pureOutput } from '../../Backend/frontendData/Result'\nimport scannedIn from '../../Backend/frontendData/scannedIn.json'\nimport { rows } from '../../Backend/frontendData/getPortStatus'\n\n// Mobx Global Status\nimport selectResult from '../../Mobx/Models/resultSelectStatus'\n\nexport default () => {\n\n    return(\n      <>\n          {pureOutput.map((obj) => (\n            <>\n              {\n                obj.id == selectResult.target ?\n                  <>\n                     <Typography style={{whiteSpace: \"pre-line\"}}>\n                        {obj.output}\n                      </Typography>\n                  </>\n                    :\n                  null\n              }\n            </>\n          ))}\n        \n      </>\n    );\n}","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Views/CustomisedScanMode.tsx",[],["445","446"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/Target.tsx",["447","448","449"],"import React from 'react';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Divider from '@material-ui/core/Divider';\nimport Grid from '@material-ui/core/Grid';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport TextField from '@material-ui/core/TextField';\n\nimport { Target } from './NewModeOptions'\n\nexport default function FormControlLabelPosition() {\n  return (\n    <>\n      <Grid container spacing={3}>\n        {Target.map((option) => (\n          <Grid item xs={12}>\n            <Tooltip title={option.tooltip} arrow placement=\"right\">\n              <FormControl component=\"fieldset\" style={{width: 450}}>\n                <FormControlLabel\n                  value={option.value}\n                  control={<Checkbox color=\"primary\" />}\n                  label={option.des}\n                  labelPlacement=\"end\"\n                />\n                {\n                  option.input === true ?\n                    <>\n                      <TextField \n                          label={`Example Input: ${option.egInput}`} \n                          margin=\"dense\" \n                          size=\"small\"\n                          variant=\"outlined\"\n                          style={{\n                            width: \"100%\",\n                            textAlignLast: \"center\",\n                          }}\n                      />\n                    </>\n                      :\n                    null\n                }\n              </FormControl>\n            </Tooltip>\n          </Grid>\n        ))}\n      </Grid>\n    </>\n  );\n}\n",["450","451"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/NewModeOptions.tsx",[],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Exploit/HTTP.tsx",["452","453"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Discovery/ServerMessageBlock.tsx",["454","455"],"import React from 'react';\nimport { createStyles, Theme, withStyles, WithStyles, makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ExtensionIcon from '@material-ui/icons/ExtensionOutlined';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Grid from '@material-ui/core/Grid';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox, { CheckboxProps } from '@material-ui/core/Checkbox';\n\nimport Typography from '@material-ui/core/Typography';\nimport Separator from '@material-ui/icons/ArrowRightOutlined';\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\n\n// NSE Options\nimport NSEoption from './json/ServerMessageBlock.json'\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      margin: 0,\n      padding: theme.spacing(2),\n    },\n    closeButton: {\n      position: 'absolute',\n      right: theme.spacing(1),\n      top: theme.spacing(1),\n      color: theme.palette.grey[500],\n    },\n  });\n\nexport interface DialogTitleProps extends WithStyles<typeof styles> {\n  id: string;\n  children: React.ReactNode;\n  onClose: () => void;\n}\n\nconst DialogTitle = withStyles(styles)((props: DialogTitleProps) => {\n  const { children, classes, onClose, ...other } = props;\n  return (\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\n      <Typography variant=\"h6\">{children}</Typography>\n      {onClose ? (\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n    </MuiDialogTitle>\n  );\n});\n\nconst DialogContent = withStyles((theme: Theme) => ({\n  root: {\n    padding: theme.spacing(2),\n  },\n}))(MuiDialogContent);\n\nconst DialogActions = withStyles((theme: Theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(1),\n  },\n}))(MuiDialogActions);\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    nested: {\n      paddingLeft: theme.spacing(4),\n    },\n  }),\n);\n\nfunction handleClick(event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) {\n    event.preventDefault();\n    console.info('You clicked a breadcrumb.');\n  }\n  \n  function Breadcrumb() {\n    return (\n      <Breadcrumbs separator={<Separator />} >\n        <Typography color=\"textPrimary\">NSE</Typography>\n        <Typography color=\"textPrimary\">Discovery</Typography>\n        <Typography color=\"primary\" style={{fontWeight: \"bold\"}}>Server Message Block</Typography>\n      </Breadcrumbs>\n    );\n  }\n\nexport default function CustomizedDialogs() {\n  const [open, setOpen] = React.useState(false);\n  const classes = useStyles();\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div>\n      <ListItem button className={classes.nested} onClick={handleClickOpen}>\n        <ListItemIcon>\n            <ExtensionIcon />\n        </ListItemIcon>\n        <ListItemText>ServerMessageBlock</ListItemText>\n    </ListItem>\n      <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n          <Breadcrumb />\n        </DialogTitle>\n        <DialogContent dividers>\n          <Grid container justify=\"center\" spacing={3}>\n              {NSEoption.map((option) => (\n                <Grid item xs={6}>\n                    <Tooltip arrow placement=\"top\" title={option.des}>\n                        <FormControlLabel\n                            value={option.id}\n                            control={<Checkbox color=\"primary\" />}\n                            label={option.id}\n                            labelPlacement=\"end\"\n                        />\n                    </Tooltip>\n                </Grid>\n              ))}\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button autoFocus onClick={handleClose} color=\"primary\">\n            Save changes\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Discovery/Network.tsx",["456","457"],"import React from 'react';\nimport { createStyles, Theme, withStyles, WithStyles, makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ExtensionIcon from '@material-ui/icons/ExtensionOutlined';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Grid from '@material-ui/core/Grid';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox, { CheckboxProps } from '@material-ui/core/Checkbox';\n\nimport Typography from '@material-ui/core/Typography';\nimport Separator from '@material-ui/icons/ArrowRightOutlined';\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\n\n// NSE Options\nimport NSEoption from './json/Network.json'\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      margin: 0,\n      padding: theme.spacing(2),\n    },\n    closeButton: {\n      position: 'absolute',\n      right: theme.spacing(1),\n      top: theme.spacing(1),\n      color: theme.palette.grey[500],\n    },\n  });\n\nexport interface DialogTitleProps extends WithStyles<typeof styles> {\n  id: string;\n  children: React.ReactNode;\n  onClose: () => void;\n}\n\nconst DialogTitle = withStyles(styles)((props: DialogTitleProps) => {\n  const { children, classes, onClose, ...other } = props;\n  return (\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\n      <Typography variant=\"h6\">{children}</Typography>\n      {onClose ? (\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n    </MuiDialogTitle>\n  );\n});\n\nconst DialogContent = withStyles((theme: Theme) => ({\n  root: {\n    padding: theme.spacing(2),\n  },\n}))(MuiDialogContent);\n\nconst DialogActions = withStyles((theme: Theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(1),\n  },\n}))(MuiDialogActions);\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    nested: {\n      paddingLeft: theme.spacing(4),\n    },\n  }),\n);\n\nfunction handleClick(event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) {\n    event.preventDefault();\n    console.info('You clicked a breadcrumb.');\n  }\n  \n  function Breadcrumb() {\n    return (\n      <Breadcrumbs separator={<Separator />} >\n        <Typography color=\"textPrimary\">NSE</Typography>\n        <Typography color=\"textPrimary\">Discovery</Typography>\n        <Typography color=\"primary\" style={{fontWeight: \"bold\"}}>Network</Typography>\n      </Breadcrumbs>\n    );\n  }\n\nexport default function CustomizedDialogs() {\n  const [open, setOpen] = React.useState(false);\n  const classes = useStyles();\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div>\n      <ListItem button className={classes.nested} onClick={handleClickOpen}>\n        <ListItemIcon>\n            <ExtensionIcon />\n        </ListItemIcon>\n        <ListItemText>Network</ListItemText>\n    </ListItem>\n      <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n          <Breadcrumb />\n        </DialogTitle>\n        <DialogContent dividers>\n          <Grid container justify=\"center\" spacing={3}>\n              {NSEoption.map((option) => (\n                <Grid item xs={6}>\n                    <Tooltip arrow placement=\"top\" title={option.des}>\n                        <FormControlLabel\n                            value={option.id}\n                            control={<Checkbox color=\"primary\" />}\n                            label={option.id}\n                            labelPlacement=\"end\"\n                        />\n                    </Tooltip>\n                </Grid>\n              ))}\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button autoFocus onClick={handleClose} color=\"primary\">\n            Save changes\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/TCPoptions.tsx",[],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/App.tsx",["458"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/Others.tsx",["459","460","461","462"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/Source.tsx",["463","464"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Vulnerability/Others.tsx",["465","466"],"import React from 'react';\nimport { createStyles, Theme, withStyles, WithStyles, makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ExtensionIcon from '@material-ui/icons/ExtensionOutlined';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Grid from '@material-ui/core/Grid';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox, { CheckboxProps } from '@material-ui/core/Checkbox';\n\nimport Typography from '@material-ui/core/Typography';\nimport Separator from '@material-ui/icons/ArrowRightOutlined';\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\n\n// NSE Options\nimport NSEoption from './json/Others.json'\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      margin: 0,\n      padding: theme.spacing(2),\n    },\n    closeButton: {\n      position: 'absolute',\n      right: theme.spacing(1),\n      top: theme.spacing(1),\n      color: theme.palette.grey[500],\n    },\n  });\n\nexport interface DialogTitleProps extends WithStyles<typeof styles> {\n  id: string;\n  children: React.ReactNode;\n  onClose: () => void;\n}\n\nconst DialogTitle = withStyles(styles)((props: DialogTitleProps) => {\n  const { children, classes, onClose, ...other } = props;\n  return (\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\n      <Typography variant=\"h6\">{children}</Typography>\n      {onClose ? (\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n    </MuiDialogTitle>\n  );\n});\n\nconst DialogContent = withStyles((theme: Theme) => ({\n  root: {\n    padding: theme.spacing(2),\n  },\n}))(MuiDialogContent);\n\nconst DialogActions = withStyles((theme: Theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(1),\n  },\n}))(MuiDialogActions);\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    nested: {\n      paddingLeft: theme.spacing(4),\n    },\n  }),\n);\n\nfunction handleClick(event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) {\n    event.preventDefault();\n    console.info('You clicked a breadcrumb.');\n  }\n  \n  function Breadcrumb() {\n    return (\n      <Breadcrumbs separator={<Separator />} >\n        <Typography color=\"textPrimary\">NSE</Typography>\n        <Typography color=\"textPrimary\">Vulnerability</Typography>\n        <Typography color=\"primary\" style={{fontWeight: \"bold\"}}>Others</Typography>\n      </Breadcrumbs>\n    );\n  }\n\nexport default function CustomizedDialogs() {\n  const [open, setOpen] = React.useState(false);\n  const classes = useStyles();\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div>\n      <ListItem button className={classes.nested} onClick={handleClickOpen}>\n        <ListItemIcon>\n            <ExtensionIcon />\n        </ListItemIcon>\n        <ListItemText>Others</ListItemText>\n    </ListItem>\n      <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n          <Breadcrumb />\n        </DialogTitle>\n        <DialogContent dividers>\n          <Grid container justify=\"center\" spacing={3}>\n              {NSEoption.map((option) => (\n                <Grid item xs={6}>\n                    <Tooltip arrow placement=\"top\" title={option.des}>\n                        <FormControlLabel\n                            value={option.id}\n                            control={<Checkbox color=\"primary\" />}\n                            label={option.id}\n                            labelPlacement=\"end\"\n                        />\n                    </Tooltip>\n                </Grid>\n              ))}\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button autoFocus onClick={handleClose} color=\"primary\">\n            Save changes\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n",["467","468"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Discovery/SMTP.tsx",["469","470"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Discovery/Hadoop.tsx",["471","472"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Views/Drawer.tsx",[],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Exploit/SMB.tsx",["473","474"],"import React from 'react';\nimport { createStyles, Theme, withStyles, WithStyles, makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ExtensionIcon from '@material-ui/icons/ExtensionOutlined';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Grid from '@material-ui/core/Grid';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox, { CheckboxProps } from '@material-ui/core/Checkbox';\n\nimport Typography from '@material-ui/core/Typography';\nimport Separator from '@material-ui/icons/ArrowRightOutlined';\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\n\n// NSE Options\nimport NSEoption from './json/SMB.json'\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      margin: 0,\n      padding: theme.spacing(2),\n    },\n    closeButton: {\n      position: 'absolute',\n      right: theme.spacing(1),\n      top: theme.spacing(1),\n      color: theme.palette.grey[500],\n    },\n  });\n\nexport interface DialogTitleProps extends WithStyles<typeof styles> {\n  id: string;\n  children: React.ReactNode;\n  onClose: () => void;\n}\n\nconst DialogTitle = withStyles(styles)((props: DialogTitleProps) => {\n  const { children, classes, onClose, ...other } = props;\n  return (\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\n      <Typography variant=\"h6\">{children}</Typography>\n      {onClose ? (\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n    </MuiDialogTitle>\n  );\n});\n\nconst DialogContent = withStyles((theme: Theme) => ({\n  root: {\n    padding: theme.spacing(2),\n  },\n}))(MuiDialogContent);\n\nconst DialogActions = withStyles((theme: Theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(1),\n  },\n}))(MuiDialogActions);\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    nested: {\n      paddingLeft: theme.spacing(4),\n    },\n  }),\n);\n\nfunction handleClick(event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) {\n    event.preventDefault();\n    console.info('You clicked a breadcrumb.');\n  }\n  \n  function Breadcrumb() {\n    return (\n      <Breadcrumbs separator={<Separator />} >\n        <Typography color=\"textPrimary\">NSE</Typography>\n        <Typography color=\"textPrimary\">Exploit</Typography>\n        <Typography color=\"primary\" style={{fontWeight: \"bold\"}}>SMB</Typography>\n      </Breadcrumbs>\n    );\n  }\n\nexport default function CustomizedDialogs() {\n  const [open, setOpen] = React.useState(false);\n  const classes = useStyles();\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div>\n      <ListItem button className={classes.nested} onClick={handleClickOpen}>\n        <ListItemIcon>\n            <ExtensionIcon />\n        </ListItemIcon>\n        <ListItemText>SMB</ListItemText>\n    </ListItem>\n      <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n          <Breadcrumb />\n        </DialogTitle>\n        <DialogContent dividers>\n          <Grid container justify=\"center\" spacing={3}>\n              {NSEoption.map((option) => (\n                <Grid item xs={6}>\n                    <Tooltip arrow placement=\"top\" title={option.des}>\n                        <FormControlLabel\n                            value={option.id}\n                            control={<Checkbox color=\"primary\" />}\n                            label={option.id}\n                            labelPlacement=\"end\"\n                        />\n                    </Tooltip>\n                </Grid>\n              ))}\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button autoFocus onClick={handleClose} color=\"primary\">\n            Save changes\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Discovery/Broadcast.tsx",["475","476"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/Drawer.tsx",["477","478","479"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Views/ScanHistory.tsx",[],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Views/ScanResult.tsx",[],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/defaultScanModes/pingScanMode.tsx",["480","481","482","483","484"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/CustomisedScanMode.tsx",["485","486","487","488","489","490","491","492","493","494","495","496","497","498"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/ScanComparison.tsx",["499","500","501","502","503","504","505","506","507","508","509","510","511","512","513","514","515","516","517","518","519","520","521","522","523","524","525","526","527","528","529","530","531","532","533"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanMode.tsx",["534","535","536","537","538","539"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/ScanResults/CVEResult.tsx",["540","541","542"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/nonTCPoptions.tsx",[],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Exploit/Others.tsx",["543","544"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/Ping.tsx",["545","546"],"import React from 'react';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Grid from '@material-ui/core/Grid';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport TextField from '@material-ui/core/TextField';\n\nimport { Ping } from './NewModeOptions'\n\nexport default function FormControlLabelPosition() {\n  return (\n    <>\n      <Grid container spacing={3}>\n        {Ping.map((option) => (\n          <Grid item xs={12}>\n            <Tooltip title={option.tooltip} arrow placement=\"right\">\n              <FormControl component=\"fieldset\" style={{width: 450}}>\n                <FormControlLabel\n                  value={option.value}\n                  control={<Checkbox color=\"primary\" />}\n                  label={option.des}\n                  labelPlacement=\"end\"\n                />\n                {\n                  option.input === true ?\n                    <>\n                      <TextField \n                          label={`Example Input: ${option.egInput}`} \n                          margin=\"dense\" \n                          size=\"small\"\n                          variant=\"outlined\"\n                          style={{\n                            width: \"100%\",\n                            textAlignLast: \"center\",\n                          }}\n                      />\n                    </>\n                      :\n                    null\n                }\n              </FormControl>\n            </Tooltip>\n          </Grid>\n        ))}\n      </Grid>\n    </>\n  );\n}\n",["547","548"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Discovery/Server.tsx",["549","550"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Vulnerability/SMB.tsx",["551","552"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Exploit/FTP.tsx",["553","554"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Discovery/IP.tsx",["555","556"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/reportWebVitals.ts",[],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/defaultScanModes/nonPingScanMode.tsx",["557","558","559","560","561"],"import React from 'react';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport { Switch, Route, Link, BrowserRouter } from \"react-router-dom\";\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography'\nimport TextField from '@material-ui/core/TextField';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Slider from '@material-ui/core/Slider';\n\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Switcher from '@material-ui/core/Switch';\nimport Button from '@material-ui/core/Button';\n\nimport IconButton from '@material-ui/core/IconButton';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport CloseIcon from '@material-ui/icons/Close';\n\nimport ScanModeIcon from '@material-ui/icons/Settings';\n\nimport '../../Styles/DefaultScanMode.css'\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    paper: {\n      padding: theme.spacing(2),\n      textAlign: 'left',\n      backgroundColor: \"#fefefe\",\n      color: \"#333333\",\n    },\n    centerGrid: {\n        textAlign: \"center\",\n        marginTop: 15,\n    },\n    avatarText: {\n        background: \"#4A92FF\",\n        borderRadius: 6,\n        color: \"#fff\",\n        padding: \"2px 6px\",\n    },  \n    switch: {\n        disaply: \"inline-block\",\n    },\n  }),\n);\n\nexport default function CenteredGrid() {\n  const classes = useStyles();\n  const [value, setValue] = React.useState<number>(4);\n\n  const handleChange = (event: any, newValue: number | number[]) => {\n    setValue(newValue as number);\n  };\n\n  const [state, setState] = React.useState({\n    Pn: true,\n  });\n\n  const handleSwitchChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setState({ ...state, [event.target.name]: event.target.checked });\n  };\n\n  const [open, setOpen] = React.useState(false);\n\n  const handleClick = () => {\n    setOpen(true);\n  };\n\n  const handleClose = (event: React.SyntheticEvent | React.MouseEvent, reason?: string) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    setOpen(false);\n  };\n\n  return (\n    <div className={classes.root}>\n      <Grid container spacing={5} justify=\"center\" alignItems=\"center\">\n       \n        <Grid item xs={10}>\n            <Paper className={classes.paper}>\n                <Typography variant=\"h6\">\n                    Non-Ping Scan Modes\n                </Typography>\n                    <br/>\n                <div>\n                    <TextField \n                        id=\"outlined-basic\" \n                        label=\"Current Command\" \n                        defaultValue=\"nmap -v -sU -sT -p -U:161, T:80 -T0 + [ Target IP / Domain ]\"\n                        variant=\"outlined\" \n                        size=\"small\"\n                        style={{\n                            width: \"80%\",\n                            marginLeft: 85,\n                            textAlignLast: \"center\",\n                        }}\n                        inputProps={{ \n                            readOnly: true, \n                        }}\n                    />\n                </div>\n                    <br/>\n                <div className={classes.root}>\n                    \n                </div>\n            </Paper>\n        </Grid>\n\n        <Grid item xs={10}>\n            <Paper className={classes.paper}>\n                <Typography variant=\"h6\">\n                    Scan Frequency\n                </Typography>\n                    <br/>\n                <div>\n                     <Slider \n                        value={value} \n                        onChange={handleChange} \n                        max={5}\n                        min={0}\n                        step={1}\n                        valueLabelDisplay=\"on\"\n                        style={{\n                            width: \"70%\",\n                            marginLeft: 145,\n                        }}    \n                    />\n                </div>\n                    <br/>\n                <Typography style={{textAlign: \"right\",marginRight: 35}}>\n                    -T&nbsp;\n                    <Tooltip \n                        title=\"[ -T ] --- Specifies the timing (Timing) used in the scanning process, there are always 6 levels (0-5), the level increases, the faster the scanning speed.\" \n                        placement=\"top\" \n                        arrow\n                    >\n                        <span className={classes.avatarText}>{value}</span>\n                    </Tooltip>\n                </Typography>\n            </Paper>\n        </Grid>\n\n        <Grid item xs={10}>\n           <Paper className={classes.paper}>\n                <Typography variant=\"h6\">\n                    Flags\n                </Typography>\n                    <br/>\n                <div style={{textAlign: \"center\"}}>\n                    <FormControl component=\"fieldset\">\n                    <table className=\"scanModeSettingFlagTable\">\n                        <tr>\n                            <td>\n                                <RadioGroup row aria-label=\"position\" name=\"position\" defaultValue=\"top\">\n                                    <Tooltip title=\"Increase the verbosity level\" placement=\"top\" arrow>\n                                        <FormControlLabel\n                                            value=\"-v\"\n                                            control={<Radio color=\"primary\" />}\n                                            label=\"-v\"\n                                            labelPlacement=\"end\"\n                                        />\n                                    </Tooltip>\n                                    <Tooltip title=\"Use more v for greater effect\" placement=\"top\" arrow>\n                                        <FormControlLabel\n                                            value=\"-vv\"\n                                            control={<Radio color=\"primary\" />}\n                                            label=\"-vv\"\n                                            labelPlacement=\"end\"\n                                        />\n                                    </Tooltip>\n                                </RadioGroup>\n                            </td>\n                            <td>\n                                <Tooltip title=\"Disable host discovery. Port scan only.\" placement=\"top\" arrow>\n                                    <FormControlLabel\n                                        control={\n                                            <Switcher\n                                                checked={state.Pn}\n                                                onChange={handleSwitchChange}\n                                                name=\"Pn\"\n                                                color=\"primary\"\n                                            />\n                                        }\n                                        label=\"-Pn\"\n                                        className={classes.switch}\n                                    />\n                                </Tooltip>\n                            </td>\n                        </tr>\n                    </table>\n                </FormControl>\n                </div>\n            </Paper>\n        </Grid>\n\n        <Grid item xs={10} style={{position: \"absolute\", width: 902, bottom: 0}}>\n            <Paper className={classes.paper}>\n                <Link to=\"/defaultScanMode\">\n                    <Button variant=\"contained\">Back</Button>\n                </Link>                \n                <Button variant=\"contained\" style={{float: 'right'}} onClick={handleClick}>Save</Button>\n                <Snackbar\n                    anchorOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'left',\n                    }}\n                    open={open}\n                    autoHideDuration={6000}\n                    onClose={handleClose}\n                    message=\"Settings Save Successfully\"\n                    action={\n                    <React.Fragment>\n                         <Link to=\"/defaultScanMode\">\n                            <IconButton size=\"small\" aria-label=\"close\" color=\"inherit\" onClick={handleClose}>\n                                <CloseIcon fontSize=\"small\" style={{color: \"#fff\"}}/>\n                            </IconButton>\n                        </Link>\n                    </React.Fragment>\n                    }\n                />\n            </Paper>\n        </Grid>\n\n      </Grid>\n      \n    </div>\n  );\n}\n","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/defaultScanModes/lightningScanMode.tsx",["562","563","564","565","566"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/target.tsx",["567","568"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Vulnerability/SSL.tsx",["569","570"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Discovery/HTTP.tsx",["571","572"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Vulnerability/FTP.tsx",["573","574"],{"ruleId":"575","severity":1,"message":"576","line":5,"column":8,"nodeType":"577","messageId":"578","endLine":5,"endColumn":16},{"ruleId":"575","severity":1,"message":"579","line":11,"column":8,"nodeType":"577","messageId":"578","endLine":11,"endColumn":25},{"ruleId":"575","severity":1,"message":"580","line":22,"column":8,"nodeType":"577","messageId":"578","endLine":22,"endColumn":22},{"ruleId":"575","severity":1,"message":"581","line":23,"column":8,"nodeType":"577","messageId":"578","endLine":23,"endColumn":22},{"ruleId":"575","severity":1,"message":"582","line":36,"column":8,"nodeType":"577","messageId":"578","endLine":36,"endColumn":16},{"ruleId":"575","severity":1,"message":"583","line":37,"column":10,"nodeType":"577","messageId":"578","endLine":37,"endColumn":20},{"ruleId":"575","severity":1,"message":"584","line":37,"column":22,"nodeType":"577","messageId":"578","endLine":37,"endColumn":34},{"ruleId":"575","severity":1,"message":"585","line":38,"column":10,"nodeType":"577","messageId":"578","endLine":38,"endColumn":20},{"ruleId":"575","severity":1,"message":"586","line":39,"column":10,"nodeType":"577","messageId":"578","endLine":39,"endColumn":18},{"ruleId":"587","severity":1,"message":"588","line":56,"column":1,"nodeType":"589","endLine":420,"endColumn":2},{"ruleId":"590","replacedBy":"591"},{"ruleId":"592","replacedBy":"593"},{"ruleId":"575","severity":1,"message":"594","line":1,"column":26,"nodeType":"577","messageId":"578","endLine":1,"endColumn":35},{"ruleId":"575","severity":1,"message":"595","line":3,"column":10,"nodeType":"577","messageId":"578","endLine":3,"endColumn":16},{"ruleId":"575","severity":1,"message":"596","line":3,"column":18,"nodeType":"577","messageId":"578","endLine":3,"endColumn":23},{"ruleId":"575","severity":1,"message":"597","line":3,"column":25,"nodeType":"577","messageId":"578","endLine":3,"endColumn":29},{"ruleId":"575","severity":1,"message":"598","line":3,"column":31,"nodeType":"577","messageId":"578","endLine":3,"endColumn":44},{"ruleId":"575","severity":1,"message":"599","line":19,"column":8,"nodeType":"577","messageId":"578","endLine":19,"endColumn":15},{"ruleId":"575","severity":1,"message":"576","line":20,"column":8,"nodeType":"577","messageId":"578","endLine":20,"endColumn":16},{"ruleId":"575","severity":1,"message":"600","line":21,"column":8,"nodeType":"577","messageId":"578","endLine":21,"endColumn":15},{"ruleId":"575","severity":1,"message":"601","line":22,"column":8,"nodeType":"577","messageId":"578","endLine":22,"endColumn":28},{"ruleId":"575","severity":1,"message":"602","line":23,"column":8,"nodeType":"577","messageId":"578","endLine":23,"endColumn":12},{"ruleId":"575","severity":1,"message":"603","line":26,"column":8,"nodeType":"577","messageId":"578","endLine":26,"endColumn":22},{"ruleId":"575","severity":1,"message":"604","line":29,"column":10,"nodeType":"577","messageId":"578","endLine":29,"endColumn":29},{"ruleId":"575","severity":1,"message":"605","line":31,"column":10,"nodeType":"577","messageId":"578","endLine":31,"endColumn":20},{"ruleId":"575","severity":1,"message":"585","line":31,"column":22,"nodeType":"577","messageId":"578","endLine":31,"endColumn":32},{"ruleId":"575","severity":1,"message":"606","line":31,"column":34,"nodeType":"577","messageId":"578","endLine":31,"endColumn":44},{"ruleId":"575","severity":1,"message":"607","line":31,"column":46,"nodeType":"577","messageId":"578","endLine":31,"endColumn":56},{"ruleId":"575","severity":1,"message":"608","line":31,"column":58,"nodeType":"577","messageId":"578","endLine":31,"endColumn":66},{"ruleId":"575","severity":1,"message":"609","line":63,"column":7,"nodeType":"577","messageId":"578","endLine":63,"endColumn":21},{"ruleId":"575","severity":1,"message":"610","line":66,"column":9,"nodeType":"577","messageId":"578","endLine":66,"endColumn":20},{"ruleId":"575","severity":1,"message":"611","line":111,"column":10,"nodeType":"577","messageId":"578","endLine":111,"endColumn":17},{"ruleId":"575","severity":1,"message":"612","line":117,"column":10,"nodeType":"577","messageId":"578","endLine":117,"endColumn":16},{"ruleId":"575","severity":1,"message":"613","line":117,"column":18,"nodeType":"577","messageId":"578","endLine":117,"endColumn":27},{"ruleId":"614","severity":1,"message":"615","line":120,"column":54,"nodeType":"616","messageId":"617","endLine":120,"endColumn":56},{"ruleId":"575","severity":1,"message":"618","line":124,"column":10,"nodeType":"577","messageId":"578","endLine":124,"endColumn":15},{"ruleId":"575","severity":1,"message":"619","line":124,"column":17,"nodeType":"577","messageId":"578","endLine":124,"endColumn":25},{"ruleId":"614","severity":1,"message":"615","line":244,"column":66,"nodeType":"616","messageId":"617","endLine":244,"endColumn":68},{"ruleId":"614","severity":1,"message":"615","line":244,"column":100,"nodeType":"616","messageId":"617","endLine":244,"endColumn":102},{"ruleId":"614","severity":1,"message":"615","line":248,"column":60,"nodeType":"616","messageId":"617","endLine":248,"endColumn":62},{"ruleId":"614","severity":1,"message":"615","line":249,"column":60,"nodeType":"616","messageId":"617","endLine":249,"endColumn":62},{"ruleId":"614","severity":1,"message":"615","line":250,"column":60,"nodeType":"616","messageId":"617","endLine":250,"endColumn":62},{"ruleId":"614","severity":1,"message":"615","line":251,"column":60,"nodeType":"616","messageId":"617","endLine":251,"endColumn":62},{"ruleId":"614","severity":1,"message":"615","line":252,"column":60,"nodeType":"616","messageId":"617","endLine":252,"endColumn":62},{"ruleId":"614","severity":1,"message":"615","line":253,"column":60,"nodeType":"616","messageId":"617","endLine":253,"endColumn":62},{"ruleId":"575","severity":1,"message":"620","line":1,"column":16,"nodeType":"577","messageId":"578","endLine":1,"endColumn":24},{"ruleId":"575","severity":1,"message":"621","line":2,"column":43,"nodeType":"577","messageId":"578","endLine":2,"endColumn":50},{"ruleId":"575","severity":1,"message":"595","line":3,"column":10,"nodeType":"577","messageId":"578","endLine":3,"endColumn":16},{"ruleId":"575","severity":1,"message":"596","line":3,"column":18,"nodeType":"577","messageId":"578","endLine":3,"endColumn":23},{"ruleId":"575","severity":1,"message":"597","line":3,"column":25,"nodeType":"577","messageId":"578","endLine":3,"endColumn":29},{"ruleId":"575","severity":1,"message":"598","line":3,"column":31,"nodeType":"577","messageId":"578","endLine":3,"endColumn":44},{"ruleId":"575","severity":1,"message":"622","line":7,"column":8,"nodeType":"577","messageId":"578","endLine":7,"endColumn":17},{"ruleId":"575","severity":1,"message":"623","line":15,"column":8,"nodeType":"577","messageId":"578","endLine":15,"endColumn":19},{"ruleId":"575","severity":1,"message":"602","line":17,"column":8,"nodeType":"577","messageId":"578","endLine":17,"endColumn":12},{"ruleId":"575","severity":1,"message":"624","line":21,"column":10,"nodeType":"577","messageId":"578","endLine":21,"endColumn":14},{"ruleId":"575","severity":1,"message":"625","line":21,"column":16,"nodeType":"577","messageId":"578","endLine":21,"endColumn":20},{"ruleId":"575","severity":1,"message":"626","line":21,"column":22,"nodeType":"577","messageId":"578","endLine":21,"endColumn":26},{"ruleId":"575","severity":1,"message":"627","line":21,"column":28,"nodeType":"577","messageId":"578","endLine":21,"endColumn":36},{"ruleId":"575","severity":1,"message":"628","line":21,"column":38,"nodeType":"577","messageId":"578","endLine":21,"endColumn":48},{"ruleId":"575","severity":1,"message":"629","line":26,"column":10,"nodeType":"577","messageId":"578","endLine":26,"endColumn":20},{"ruleId":"575","severity":1,"message":"630","line":29,"column":10,"nodeType":"577","messageId":"578","endLine":29,"endColumn":14},{"ruleId":"575","severity":1,"message":"631","line":137,"column":9,"nodeType":"577","messageId":"578","endLine":137,"endColumn":22},{"ruleId":"575","severity":1,"message":"632","line":142,"column":10,"nodeType":"577","messageId":"578","endLine":142,"endColumn":17},{"ruleId":"575","severity":1,"message":"633","line":144,"column":9,"nodeType":"577","messageId":"578","endLine":144,"endColumn":20},{"ruleId":"575","severity":1,"message":"634","line":148,"column":9,"nodeType":"577","messageId":"578","endLine":148,"endColumn":21},{"ruleId":"575","severity":1,"message":"635","line":152,"column":12,"nodeType":"577","messageId":"578","endLine":152,"endColumn":23},{"ruleId":"575","severity":1,"message":"620","line":1,"column":16,"nodeType":"577","messageId":"578","endLine":1,"endColumn":24},{"ruleId":"575","severity":1,"message":"605","line":9,"column":10,"nodeType":"577","messageId":"578","endLine":9,"endColumn":20},{"ruleId":"575","severity":1,"message":"606","line":9,"column":34,"nodeType":"577","messageId":"578","endLine":9,"endColumn":44},{"ruleId":"575","severity":1,"message":"607","line":9,"column":46,"nodeType":"577","messageId":"578","endLine":9,"endColumn":56},{"ruleId":"575","severity":1,"message":"608","line":9,"column":58,"nodeType":"577","messageId":"578","endLine":9,"endColumn":66},{"ruleId":"575","severity":1,"message":"636","line":12,"column":10,"nodeType":"577","messageId":"578","endLine":12,"endColumn":20},{"ruleId":"575","severity":1,"message":"629","line":13,"column":10,"nodeType":"577","messageId":"578","endLine":13,"endColumn":20},{"ruleId":"575","severity":1,"message":"637","line":15,"column":8,"nodeType":"577","messageId":"578","endLine":15,"endColumn":21},{"ruleId":"575","severity":1,"message":"630","line":16,"column":10,"nodeType":"577","messageId":"578","endLine":16,"endColumn":14},{"ruleId":"587","severity":1,"message":"588","line":68,"column":1,"nodeType":"589","endLine":461,"endColumn":2},{"ruleId":"575","severity":1,"message":"610","line":71,"column":9,"nodeType":"577","messageId":"578","endLine":71,"endColumn":20},{"ruleId":"614","severity":1,"message":"638","line":78,"column":19,"nodeType":"616","messageId":"617","endLine":78,"endColumn":21},{"ruleId":"614","severity":1,"message":"615","line":133,"column":45,"nodeType":"616","messageId":"617","endLine":133,"endColumn":47},{"ruleId":"614","severity":1,"message":"615","line":186,"column":44,"nodeType":"616","messageId":"617","endLine":186,"endColumn":46},{"ruleId":"614","severity":1,"message":"615","line":204,"column":48,"nodeType":"616","messageId":"617","endLine":204,"endColumn":50},{"ruleId":"614","severity":1,"message":"615","line":220,"column":50,"nodeType":"616","messageId":"617","endLine":220,"endColumn":52},{"ruleId":"614","severity":1,"message":"615","line":259,"column":39,"nodeType":"616","messageId":"617","endLine":259,"endColumn":41},{"ruleId":"614","severity":1,"message":"615","line":277,"column":40,"nodeType":"616","messageId":"617","endLine":277,"endColumn":42},{"ruleId":"614","severity":1,"message":"615","line":298,"column":52,"nodeType":"616","messageId":"617","endLine":298,"endColumn":54},{"ruleId":"614","severity":1,"message":"615","line":315,"column":47,"nodeType":"616","messageId":"617","endLine":315,"endColumn":49},{"ruleId":"614","severity":1,"message":"615","line":333,"column":44,"nodeType":"616","messageId":"617","endLine":333,"endColumn":46},{"ruleId":"614","severity":1,"message":"615","line":352,"column":43,"nodeType":"616","messageId":"617","endLine":352,"endColumn":45},{"ruleId":"614","severity":1,"message":"615","line":367,"column":46,"nodeType":"616","messageId":"617","endLine":367,"endColumn":48},{"ruleId":"614","severity":1,"message":"615","line":382,"column":41,"nodeType":"616","messageId":"617","endLine":382,"endColumn":43},{"ruleId":"614","severity":1,"message":"615","line":403,"column":43,"nodeType":"616","messageId":"617","endLine":403,"endColumn":45},{"ruleId":"614","severity":1,"message":"615","line":417,"column":48,"nodeType":"616","messageId":"617","endLine":417,"endColumn":50},{"ruleId":"614","severity":1,"message":"615","line":431,"column":47,"nodeType":"616","messageId":"617","endLine":431,"endColumn":49},{"ruleId":"614","severity":1,"message":"615","line":446,"column":44,"nodeType":"616","messageId":"617","endLine":446,"endColumn":46},{"ruleId":"590","replacedBy":"639"},{"ruleId":"592","replacedBy":"640"},{"ruleId":"575","severity":1,"message":"620","line":1,"column":16,"nodeType":"577","messageId":"578","endLine":1,"endColumn":24},{"ruleId":"575","severity":1,"message":"641","line":9,"column":8,"nodeType":"577","messageId":"578","endLine":9,"endColumn":13},{"ruleId":"587","severity":1,"message":"588","line":11,"column":1,"nodeType":"589","endLine":25,"endColumn":2},{"ruleId":"590","replacedBy":"642"},{"ruleId":"592","replacedBy":"643"},{"ruleId":"575","severity":1,"message":"595","line":3,"column":10,"nodeType":"577","messageId":"578","endLine":3,"endColumn":16},{"ruleId":"575","severity":1,"message":"596","line":3,"column":18,"nodeType":"577","messageId":"578","endLine":3,"endColumn":23},{"ruleId":"575","severity":1,"message":"598","line":3,"column":31,"nodeType":"577","messageId":"578","endLine":3,"endColumn":44},{"ruleId":"575","severity":1,"message":"644","line":15,"column":8,"nodeType":"577","messageId":"578","endLine":15,"endColumn":17},{"ruleId":"575","severity":1,"message":"645","line":23,"column":8,"nodeType":"577","messageId":"578","endLine":23,"endColumn":20},{"ruleId":"575","severity":1,"message":"595","line":3,"column":10,"nodeType":"577","messageId":"578","endLine":3,"endColumn":16},{"ruleId":"575","severity":1,"message":"596","line":3,"column":18,"nodeType":"577","messageId":"578","endLine":3,"endColumn":23},{"ruleId":"575","severity":1,"message":"598","line":3,"column":31,"nodeType":"577","messageId":"578","endLine":3,"endColumn":44},{"ruleId":"575","severity":1,"message":"644","line":15,"column":8,"nodeType":"577","messageId":"578","endLine":15,"endColumn":17},{"ruleId":"575","severity":1,"message":"645","line":23,"column":8,"nodeType":"577","messageId":"578","endLine":23,"endColumn":20},{"ruleId":"575","severity":1,"message":"595","line":3,"column":10,"nodeType":"577","messageId":"578","endLine":3,"endColumn":16},{"ruleId":"575","severity":1,"message":"596","line":3,"column":18,"nodeType":"577","messageId":"578","endLine":3,"endColumn":23},{"ruleId":"575","severity":1,"message":"598","line":3,"column":31,"nodeType":"577","messageId":"578","endLine":3,"endColumn":44},{"ruleId":"575","severity":1,"message":"646","line":11,"column":8,"nodeType":"577","messageId":"578","endLine":11,"endColumn":13},{"ruleId":"575","severity":1,"message":"647","line":12,"column":8,"nodeType":"577","messageId":"578","endLine":12,"endColumn":18},{"ruleId":"575","severity":1,"message":"644","line":15,"column":8,"nodeType":"577","messageId":"578","endLine":15,"endColumn":17},{"ruleId":"575","severity":1,"message":"645","line":23,"column":8,"nodeType":"577","messageId":"578","endLine":23,"endColumn":20},{"ruleId":"575","severity":1,"message":"648","line":3,"column":8,"nodeType":"577","messageId":"578","endLine":3,"endColumn":21},{"ruleId":"575","severity":1,"message":"649","line":9,"column":8,"nodeType":"577","messageId":"578","endLine":9,"endColumn":17},{"ruleId":"575","severity":1,"message":"650","line":10,"column":8,"nodeType":"577","messageId":"578","endLine":10,"endColumn":18},{"ruleId":"575","severity":1,"message":"651","line":11,"column":8,"nodeType":"577","messageId":"578","endLine":11,"endColumn":16},{"ruleId":"575","severity":1,"message":"652","line":12,"column":8,"nodeType":"577","messageId":"578","endLine":12,"endColumn":23},{"ruleId":"575","severity":1,"message":"653","line":15,"column":8,"nodeType":"577","messageId":"578","endLine":15,"endColumn":18},{"ruleId":"575","severity":1,"message":"654","line":16,"column":8,"nodeType":"577","messageId":"578","endLine":16,"endColumn":21},{"ruleId":"614","severity":1,"message":"615","line":87,"column":17,"nodeType":"616","messageId":"617","endLine":87,"endColumn":19},{"ruleId":"614","severity":1,"message":"615","line":90,"column":23,"nodeType":"616","messageId":"617","endLine":90,"endColumn":25},{"ruleId":"614","severity":1,"message":"615","line":100,"column":19,"nodeType":"616","messageId":"617","endLine":100,"endColumn":21},{"ruleId":"614","severity":1,"message":"615","line":103,"column":23,"nodeType":"616","messageId":"617","endLine":103,"endColumn":25},{"ruleId":"614","severity":1,"message":"615","line":113,"column":19,"nodeType":"616","messageId":"617","endLine":113,"endColumn":21},{"ruleId":"614","severity":1,"message":"615","line":116,"column":17,"nodeType":"616","messageId":"617","endLine":116,"endColumn":19},{"ruleId":"614","severity":1,"message":"615","line":128,"column":23,"nodeType":"616","messageId":"617","endLine":128,"endColumn":25},{"ruleId":"614","severity":1,"message":"615","line":141,"column":40,"nodeType":"616","messageId":"617","endLine":141,"endColumn":42},{"ruleId":"614","severity":1,"message":"615","line":142,"column":44,"nodeType":"616","messageId":"617","endLine":142,"endColumn":46},{"ruleId":"614","severity":1,"message":"615","line":143,"column":48,"nodeType":"616","messageId":"617","endLine":143,"endColumn":50},{"ruleId":"614","severity":1,"message":"615","line":144,"column":52,"nodeType":"616","messageId":"617","endLine":144,"endColumn":54},{"ruleId":"614","severity":1,"message":"615","line":145,"column":56,"nodeType":"616","messageId":"617","endLine":145,"endColumn":58},{"ruleId":"614","severity":1,"message":"615","line":146,"column":56,"nodeType":"616","messageId":"617","endLine":146,"endColumn":58},{"ruleId":"614","severity":1,"message":"615","line":147,"column":52,"nodeType":"616","messageId":"617","endLine":147,"endColumn":54},{"ruleId":"614","severity":1,"message":"615","line":148,"column":48,"nodeType":"616","messageId":"617","endLine":148,"endColumn":50},{"ruleId":"614","severity":1,"message":"615","line":149,"column":44,"nodeType":"616","messageId":"617","endLine":149,"endColumn":46},{"ruleId":"614","severity":1,"message":"615","line":150,"column":40,"nodeType":"616","messageId":"617","endLine":150,"endColumn":42},{"ruleId":"614","severity":1,"message":"615","line":158,"column":22,"nodeType":"616","messageId":"617","endLine":158,"endColumn":24},{"ruleId":"614","severity":1,"message":"615","line":171,"column":40,"nodeType":"616","messageId":"617","endLine":171,"endColumn":42},{"ruleId":"614","severity":1,"message":"615","line":172,"column":44,"nodeType":"616","messageId":"617","endLine":172,"endColumn":46},{"ruleId":"614","severity":1,"message":"615","line":173,"column":48,"nodeType":"616","messageId":"617","endLine":173,"endColumn":50},{"ruleId":"614","severity":1,"message":"615","line":174,"column":52,"nodeType":"616","messageId":"617","endLine":174,"endColumn":54},{"ruleId":"614","severity":1,"message":"615","line":182,"column":22,"nodeType":"616","messageId":"617","endLine":182,"endColumn":24},{"ruleId":"614","severity":1,"message":"615","line":195,"column":40,"nodeType":"616","messageId":"617","endLine":195,"endColumn":42},{"ruleId":"614","severity":1,"message":"615","line":196,"column":44,"nodeType":"616","messageId":"617","endLine":196,"endColumn":46},{"ruleId":"614","severity":1,"message":"615","line":197,"column":48,"nodeType":"616","messageId":"617","endLine":197,"endColumn":50},{"ruleId":"614","severity":1,"message":"615","line":198,"column":44,"nodeType":"616","messageId":"617","endLine":198,"endColumn":46},{"ruleId":"614","severity":1,"message":"615","line":199,"column":40,"nodeType":"616","messageId":"617","endLine":199,"endColumn":42},{"ruleId":"590","replacedBy":"655"},{"ruleId":"592","replacedBy":"656"},{"ruleId":"575","severity":1,"message":"657","line":17,"column":20,"nodeType":"577","messageId":"578","endLine":17,"endColumn":33},{"ruleId":"575","severity":1,"message":"658","line":81,"column":10,"nodeType":"577","messageId":"578","endLine":81,"endColumn":21},{"ruleId":"575","severity":1,"message":"657","line":17,"column":20,"nodeType":"577","messageId":"578","endLine":17,"endColumn":33},{"ruleId":"575","severity":1,"message":"658","line":81,"column":10,"nodeType":"577","messageId":"578","endLine":81,"endColumn":21},{"ruleId":"575","severity":1,"message":"657","line":17,"column":20,"nodeType":"577","messageId":"578","endLine":17,"endColumn":33},{"ruleId":"575","severity":1,"message":"658","line":81,"column":10,"nodeType":"577","messageId":"578","endLine":81,"endColumn":21},{"ruleId":"575","severity":1,"message":"620","line":1,"column":16,"nodeType":"577","messageId":"578","endLine":1,"endColumn":24},{"ruleId":"575","severity":1,"message":"594","line":1,"column":26,"nodeType":"577","messageId":"578","endLine":1,"endColumn":35},{"ruleId":"575","severity":1,"message":"605","line":4,"column":10,"nodeType":"577","messageId":"578","endLine":4,"endColumn":20},{"ruleId":"575","severity":1,"message":"585","line":4,"column":22,"nodeType":"577","messageId":"578","endLine":4,"endColumn":32},{"ruleId":"575","severity":1,"message":"606","line":4,"column":34,"nodeType":"577","messageId":"578","endLine":4,"endColumn":44},{"ruleId":"575","severity":1,"message":"636","line":7,"column":10,"nodeType":"577","messageId":"578","endLine":7,"endColumn":20},{"ruleId":"575","severity":1,"message":"659","line":9,"column":8,"nodeType":"577","messageId":"578","endLine":9,"endColumn":17},{"ruleId":"575","severity":1,"message":"630","line":10,"column":10,"nodeType":"577","messageId":"578","endLine":10,"endColumn":14},{"ruleId":"587","severity":1,"message":"588","line":15,"column":1,"nodeType":"589","endLine":36,"endColumn":2},{"ruleId":"614","severity":1,"message":"615","line":22,"column":24,"nodeType":"616","messageId":"617","endLine":22,"endColumn":26},{"ruleId":"590","replacedBy":"660"},{"ruleId":"592","replacedBy":"661"},{"ruleId":"575","severity":1,"message":"662","line":3,"column":8,"nodeType":"577","messageId":"578","endLine":3,"endColumn":17},{"ruleId":"575","severity":1,"message":"644","line":6,"column":8,"nodeType":"577","messageId":"578","endLine":6,"endColumn":17},{"ruleId":"575","severity":1,"message":"599","line":7,"column":8,"nodeType":"577","messageId":"578","endLine":7,"endColumn":15},{"ruleId":"590","replacedBy":"663"},{"ruleId":"592","replacedBy":"664"},{"ruleId":"575","severity":1,"message":"657","line":17,"column":20,"nodeType":"577","messageId":"578","endLine":17,"endColumn":33},{"ruleId":"575","severity":1,"message":"658","line":81,"column":10,"nodeType":"577","messageId":"578","endLine":81,"endColumn":21},{"ruleId":"575","severity":1,"message":"657","line":17,"column":20,"nodeType":"577","messageId":"578","endLine":17,"endColumn":33},{"ruleId":"575","severity":1,"message":"658","line":81,"column":10,"nodeType":"577","messageId":"578","endLine":81,"endColumn":21},{"ruleId":"575","severity":1,"message":"657","line":17,"column":20,"nodeType":"577","messageId":"578","endLine":17,"endColumn":33},{"ruleId":"575","severity":1,"message":"658","line":81,"column":10,"nodeType":"577","messageId":"578","endLine":81,"endColumn":21},{"ruleId":"575","severity":1,"message":"665","line":2,"column":8,"nodeType":"577","messageId":"578","endLine":2,"endColumn":12},{"ruleId":"575","severity":1,"message":"662","line":3,"column":8,"nodeType":"577","messageId":"578","endLine":3,"endColumn":17},{"ruleId":"575","severity":1,"message":"644","line":6,"column":8,"nodeType":"577","messageId":"578","endLine":6,"endColumn":17},{"ruleId":"575","severity":1,"message":"666","line":10,"column":8,"nodeType":"577","messageId":"578","endLine":10,"endColumn":14},{"ruleId":"575","severity":1,"message":"667","line":11,"column":8,"nodeType":"577","messageId":"578","endLine":11,"endColumn":16},{"ruleId":"575","severity":1,"message":"662","line":3,"column":8,"nodeType":"577","messageId":"578","endLine":3,"endColumn":17},{"ruleId":"575","severity":1,"message":"644","line":6,"column":8,"nodeType":"577","messageId":"578","endLine":6,"endColumn":17},{"ruleId":"575","severity":1,"message":"657","line":17,"column":20,"nodeType":"577","messageId":"578","endLine":17,"endColumn":33},{"ruleId":"575","severity":1,"message":"658","line":81,"column":10,"nodeType":"577","messageId":"578","endLine":81,"endColumn":21},{"ruleId":"590","replacedBy":"668"},{"ruleId":"592","replacedBy":"669"},{"ruleId":"575","severity":1,"message":"657","line":17,"column":20,"nodeType":"577","messageId":"578","endLine":17,"endColumn":33},{"ruleId":"575","severity":1,"message":"658","line":81,"column":10,"nodeType":"577","messageId":"578","endLine":81,"endColumn":21},{"ruleId":"575","severity":1,"message":"657","line":17,"column":20,"nodeType":"577","messageId":"578","endLine":17,"endColumn":33},{"ruleId":"575","severity":1,"message":"658","line":81,"column":10,"nodeType":"577","messageId":"578","endLine":81,"endColumn":21},{"ruleId":"575","severity":1,"message":"657","line":17,"column":20,"nodeType":"577","messageId":"578","endLine":17,"endColumn":33},{"ruleId":"575","severity":1,"message":"658","line":81,"column":10,"nodeType":"577","messageId":"578","endLine":81,"endColumn":21},{"ruleId":"575","severity":1,"message":"657","line":17,"column":20,"nodeType":"577","messageId":"578","endLine":17,"endColumn":33},{"ruleId":"575","severity":1,"message":"658","line":81,"column":10,"nodeType":"577","messageId":"578","endLine":81,"endColumn":21},{"ruleId":"575","severity":1,"message":"670","line":16,"column":8,"nodeType":"577","messageId":"578","endLine":16,"endColumn":16},{"ruleId":"575","severity":1,"message":"671","line":19,"column":8,"nodeType":"577","messageId":"578","endLine":19,"endColumn":16},{"ruleId":"587","severity":1,"message":"588","line":82,"column":1,"nodeType":"589","endLine":278,"endColumn":2},{"ruleId":"575","severity":1,"message":"595","line":3,"column":10,"nodeType":"577","messageId":"578","endLine":3,"endColumn":16},{"ruleId":"575","severity":1,"message":"596","line":3,"column":18,"nodeType":"577","messageId":"578","endLine":3,"endColumn":23},{"ruleId":"575","severity":1,"message":"598","line":3,"column":31,"nodeType":"577","messageId":"578","endLine":3,"endColumn":44},{"ruleId":"575","severity":1,"message":"644","line":15,"column":8,"nodeType":"577","messageId":"578","endLine":15,"endColumn":17},{"ruleId":"575","severity":1,"message":"645","line":23,"column":8,"nodeType":"577","messageId":"578","endLine":23,"endColumn":20},{"ruleId":"575","severity":1,"message":"595","line":3,"column":10,"nodeType":"577","messageId":"578","endLine":3,"endColumn":16},{"ruleId":"575","severity":1,"message":"596","line":3,"column":18,"nodeType":"577","messageId":"578","endLine":3,"endColumn":23},{"ruleId":"575","severity":1,"message":"597","line":3,"column":25,"nodeType":"577","messageId":"578","endLine":3,"endColumn":29},{"ruleId":"575","severity":1,"message":"598","line":3,"column":31,"nodeType":"577","messageId":"578","endLine":3,"endColumn":44},{"ruleId":"575","severity":1,"message":"672","line":8,"column":8,"nodeType":"577","messageId":"578","endLine":8,"endColumn":12},{"ruleId":"575","severity":1,"message":"673","line":9,"column":8,"nodeType":"577","messageId":"578","endLine":9,"endColumn":16},{"ruleId":"575","severity":1,"message":"674","line":9,"column":20,"nodeType":"577","messageId":"578","endLine":9,"endColumn":33},{"ruleId":"575","severity":1,"message":"675","line":10,"column":8,"nodeType":"577","messageId":"578","endLine":10,"endColumn":20},{"ruleId":"575","severity":1,"message":"676","line":11,"column":8,"nodeType":"577","messageId":"578","endLine":11,"endColumn":20},{"ruleId":"575","severity":1,"message":"677","line":24,"column":8,"nodeType":"577","messageId":"578","endLine":24,"endColumn":16},{"ruleId":"575","severity":1,"message":"678","line":25,"column":8,"nodeType":"577","messageId":"578","endLine":25,"endColumn":18},{"ruleId":"587","severity":1,"message":"588","line":51,"column":1,"nodeType":"589","endLine":132,"endColumn":2},{"ruleId":"575","severity":1,"message":"679","line":54,"column":9,"nodeType":"577","messageId":"578","endLine":54,"endColumn":25},{"ruleId":"575","severity":1,"message":"680","line":59,"column":9,"nodeType":"577","messageId":"578","endLine":59,"endColumn":21},{"ruleId":"575","severity":1,"message":"595","line":3,"column":10,"nodeType":"577","messageId":"578","endLine":3,"endColumn":16},{"ruleId":"575","severity":1,"message":"596","line":3,"column":18,"nodeType":"577","messageId":"578","endLine":3,"endColumn":23},{"ruleId":"575","severity":1,"message":"597","line":3,"column":25,"nodeType":"577","messageId":"578","endLine":3,"endColumn":29},{"ruleId":"575","severity":1,"message":"598","line":3,"column":31,"nodeType":"577","messageId":"578","endLine":3,"endColumn":44},{"ruleId":"575","severity":1,"message":"622","line":7,"column":8,"nodeType":"577","messageId":"578","endLine":7,"endColumn":17},{"ruleId":"575","severity":1,"message":"681","line":13,"column":8,"nodeType":"577","messageId":"578","endLine":13,"endColumn":14},{"ruleId":"575","severity":1,"message":"623","line":14,"column":8,"nodeType":"577","messageId":"578","endLine":14,"endColumn":19},{"ruleId":"575","severity":1,"message":"602","line":21,"column":8,"nodeType":"577","messageId":"578","endLine":21,"endColumn":12},{"ruleId":"575","severity":1,"message":"605","line":29,"column":10,"nodeType":"577","messageId":"578","endLine":29,"endColumn":20},{"ruleId":"575","severity":1,"message":"585","line":29,"column":22,"nodeType":"577","messageId":"578","endLine":29,"endColumn":32},{"ruleId":"575","severity":1,"message":"606","line":29,"column":34,"nodeType":"577","messageId":"578","endLine":29,"endColumn":44},{"ruleId":"575","severity":1,"message":"629","line":33,"column":10,"nodeType":"577","messageId":"578","endLine":33,"endColumn":20},{"ruleId":"575","severity":1,"message":"630","line":35,"column":10,"nodeType":"577","messageId":"578","endLine":35,"endColumn":14},{"ruleId":"587","severity":1,"message":"588","line":114,"column":1,"nodeType":"589","endLine":393,"endColumn":2},{"ruleId":"614","severity":1,"message":"615","line":124,"column":21,"nodeType":"616","messageId":"617","endLine":124,"endColumn":23},{"ruleId":"614","severity":1,"message":"615","line":214,"column":60,"nodeType":"616","messageId":"617","endLine":214,"endColumn":62},{"ruleId":"614","severity":1,"message":"638","line":214,"column":93,"nodeType":"616","messageId":"617","endLine":214,"endColumn":95},{"ruleId":"614","severity":1,"message":"615","line":248,"column":60,"nodeType":"616","messageId":"617","endLine":248,"endColumn":62},{"ruleId":"614","severity":1,"message":"638","line":248,"column":93,"nodeType":"616","messageId":"617","endLine":248,"endColumn":95},{"ruleId":"614","severity":1,"message":"615","line":279,"column":46,"nodeType":"616","messageId":"617","endLine":279,"endColumn":48},{"ruleId":"614","severity":1,"message":"615","line":279,"column":68,"nodeType":"616","messageId":"617","endLine":279,"endColumn":70},{"ruleId":"614","severity":1,"message":"615","line":304,"column":84,"nodeType":"616","messageId":"617","endLine":304,"endColumn":86},{"ruleId":"614","severity":1,"message":"615","line":304,"column":118,"nodeType":"616","messageId":"617","endLine":304,"endColumn":120},{"ruleId":"614","severity":1,"message":"615","line":315,"column":84,"nodeType":"616","messageId":"617","endLine":315,"endColumn":86},{"ruleId":"614","severity":1,"message":"615","line":315,"column":118,"nodeType":"616","messageId":"617","endLine":315,"endColumn":120},{"ruleId":"614","severity":1,"message":"615","line":326,"column":84,"nodeType":"616","messageId":"617","endLine":326,"endColumn":86},{"ruleId":"614","severity":1,"message":"615","line":326,"column":118,"nodeType":"616","messageId":"617","endLine":326,"endColumn":120},{"ruleId":"614","severity":1,"message":"615","line":337,"column":84,"nodeType":"616","messageId":"617","endLine":337,"endColumn":86},{"ruleId":"614","severity":1,"message":"615","line":337,"column":118,"nodeType":"616","messageId":"617","endLine":337,"endColumn":120},{"ruleId":"614","severity":1,"message":"615","line":348,"column":84,"nodeType":"616","messageId":"617","endLine":348,"endColumn":86},{"ruleId":"614","severity":1,"message":"615","line":348,"column":118,"nodeType":"616","messageId":"617","endLine":348,"endColumn":120},{"ruleId":"614","severity":1,"message":"615","line":359,"column":84,"nodeType":"616","messageId":"617","endLine":359,"endColumn":86},{"ruleId":"614","severity":1,"message":"615","line":359,"column":118,"nodeType":"616","messageId":"617","endLine":359,"endColumn":120},{"ruleId":"614","severity":1,"message":"615","line":370,"column":84,"nodeType":"616","messageId":"617","endLine":370,"endColumn":86},{"ruleId":"614","severity":1,"message":"615","line":370,"column":118,"nodeType":"616","messageId":"617","endLine":370,"endColumn":120},{"ruleId":"575","severity":1,"message":"579","line":7,"column":8,"nodeType":"577","messageId":"578","endLine":7,"endColumn":25},{"ruleId":"587","severity":1,"message":"588","line":93,"column":1,"nodeType":"589","endLine":318,"endColumn":2},{"ruleId":"575","severity":1,"message":"682","line":136,"column":10,"nodeType":"577","messageId":"578","endLine":136,"endColumn":18},{"ruleId":"575","severity":1,"message":"683","line":136,"column":20,"nodeType":"577","messageId":"578","endLine":136,"endColumn":31},{"ruleId":"614","severity":1,"message":"615","line":141,"column":18,"nodeType":"616","messageId":"617","endLine":141,"endColumn":20},{"ruleId":"614","severity":1,"message":"615","line":204,"column":57,"nodeType":"616","messageId":"617","endLine":204,"endColumn":59},{"ruleId":"575","severity":1,"message":"620","line":1,"column":16,"nodeType":"577","messageId":"578","endLine":1,"endColumn":24},{"ruleId":"575","severity":1,"message":"641","line":9,"column":8,"nodeType":"577","messageId":"578","endLine":9,"endColumn":13},{"ruleId":"587","severity":1,"message":"588","line":11,"column":1,"nodeType":"589","endLine":25,"endColumn":2},{"ruleId":"575","severity":1,"message":"657","line":17,"column":20,"nodeType":"577","messageId":"578","endLine":17,"endColumn":33},{"ruleId":"575","severity":1,"message":"658","line":81,"column":10,"nodeType":"577","messageId":"578","endLine":81,"endColumn":21},{"ruleId":"575","severity":1,"message":"662","line":3,"column":8,"nodeType":"577","messageId":"578","endLine":3,"endColumn":17},{"ruleId":"575","severity":1,"message":"644","line":6,"column":8,"nodeType":"577","messageId":"578","endLine":6,"endColumn":17},{"ruleId":"590","replacedBy":"684"},{"ruleId":"592","replacedBy":"685"},{"ruleId":"575","severity":1,"message":"657","line":17,"column":20,"nodeType":"577","messageId":"578","endLine":17,"endColumn":33},{"ruleId":"575","severity":1,"message":"658","line":81,"column":10,"nodeType":"577","messageId":"578","endLine":81,"endColumn":21},{"ruleId":"575","severity":1,"message":"657","line":17,"column":20,"nodeType":"577","messageId":"578","endLine":17,"endColumn":33},{"ruleId":"575","severity":1,"message":"658","line":81,"column":10,"nodeType":"577","messageId":"578","endLine":81,"endColumn":21},{"ruleId":"575","severity":1,"message":"657","line":17,"column":20,"nodeType":"577","messageId":"578","endLine":17,"endColumn":33},{"ruleId":"575","severity":1,"message":"658","line":81,"column":10,"nodeType":"577","messageId":"578","endLine":81,"endColumn":21},{"ruleId":"575","severity":1,"message":"657","line":17,"column":20,"nodeType":"577","messageId":"578","endLine":17,"endColumn":33},{"ruleId":"575","severity":1,"message":"658","line":81,"column":10,"nodeType":"577","messageId":"578","endLine":81,"endColumn":21},{"ruleId":"575","severity":1,"message":"595","line":3,"column":10,"nodeType":"577","messageId":"578","endLine":3,"endColumn":16},{"ruleId":"575","severity":1,"message":"596","line":3,"column":18,"nodeType":"577","messageId":"578","endLine":3,"endColumn":23},{"ruleId":"575","severity":1,"message":"598","line":3,"column":31,"nodeType":"577","messageId":"578","endLine":3,"endColumn":44},{"ruleId":"575","severity":1,"message":"644","line":15,"column":8,"nodeType":"577","messageId":"578","endLine":15,"endColumn":17},{"ruleId":"575","severity":1,"message":"645","line":23,"column":8,"nodeType":"577","messageId":"578","endLine":23,"endColumn":20},{"ruleId":"575","severity":1,"message":"595","line":3,"column":10,"nodeType":"577","messageId":"578","endLine":3,"endColumn":16},{"ruleId":"575","severity":1,"message":"596","line":3,"column":18,"nodeType":"577","messageId":"578","endLine":3,"endColumn":23},{"ruleId":"575","severity":1,"message":"598","line":3,"column":31,"nodeType":"577","messageId":"578","endLine":3,"endColumn":44},{"ruleId":"575","severity":1,"message":"644","line":15,"column":8,"nodeType":"577","messageId":"578","endLine":15,"endColumn":17},{"ruleId":"575","severity":1,"message":"645","line":23,"column":8,"nodeType":"577","messageId":"578","endLine":23,"endColumn":20},{"ruleId":"575","severity":1,"message":"583","line":1,"column":10,"nodeType":"577","messageId":"578","endLine":1,"endColumn":20},{"ruleId":"575","severity":1,"message":"584","line":1,"column":22,"nodeType":"577","messageId":"578","endLine":1,"endColumn":34},{"ruleId":"575","severity":1,"message":"657","line":17,"column":20,"nodeType":"577","messageId":"578","endLine":17,"endColumn":33},{"ruleId":"575","severity":1,"message":"658","line":81,"column":10,"nodeType":"577","messageId":"578","endLine":81,"endColumn":21},{"ruleId":"575","severity":1,"message":"657","line":17,"column":20,"nodeType":"577","messageId":"578","endLine":17,"endColumn":33},{"ruleId":"575","severity":1,"message":"658","line":81,"column":10,"nodeType":"577","messageId":"578","endLine":81,"endColumn":21},{"ruleId":"575","severity":1,"message":"657","line":17,"column":20,"nodeType":"577","messageId":"578","endLine":17,"endColumn":33},{"ruleId":"575","severity":1,"message":"658","line":81,"column":10,"nodeType":"577","messageId":"578","endLine":81,"endColumn":21},"@typescript-eslint/no-unused-vars","'Collapse' is defined but never used.","Identifier","unusedVar","'DialogContentText' is defined but never used.","'ExpandMoreIcon' is defined but never used.","'ExpandLessIcon' is defined but never used.","'SetFlags' is defined but never used.","'automation' is defined but never used.","'cveDetection' is defined but never used.","'targetData' is defined but never used.","'settings' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-native-reassign",["686"],"no-negated-in-lhs",["687"],"'useEffect' is defined but never used.","'Switch' is defined but never used.","'Route' is defined but never used.","'Link' is defined but never used.","'BrowserRouter' is defined but never used.","'Divider' is defined but never used.","'Popover' is defined but never used.","'LiveHelpOutlinedIcon' is defined but never used.","'Chip' is defined but never used.","'AutomationIcon' is defined but never used.","'customisedScanModes' is defined but never used.","'scanTarget' is defined but never used.","'targetTime' is defined but never used.","'chosenMode' is defined but never used.","'scanDate' is defined but never used.","'ScanOnProgress' is assigned a value but never used.","'handleClick' is assigned a value but never used.","'isEmpty' is assigned a value but never used.","'target' is assigned a value but never used.","'setTarget' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'reset' is assigned a value but never used.","'setReset' is assigned a value but never used.","'useState' is defined but never used.","'lighten' is defined but never used.","'TextField' is defined but never used.","'ButtonGroup' is defined but never used.","'Page' is defined but never used.","'Text' is defined but never used.","'View' is defined but never used.","'Document' is defined but never used.","'StyleSheet' is defined but never used.","'pureOutput' is defined but never used.","'rows' is defined but never used.","'handleClickJO' is assigned a value but never used.","'checked' is assigned a value but never used.","'handleClose' is assigned a value but never used.","'handleToggle' is assigned a value but never used.","'FadeOutTime' is defined but never used.","'isScanning' is defined but never used.","'scannedTarget' is defined but never used.","Expected '!==' and instead saw '!='.",["686"],["687"],"'store' is defined but never used.",["686"],["687"],"'FormLabel' is defined but never used.","'ScanModeIcon' is defined but never used.","'Radio' is defined but never used.","'RadioGroup' is defined but never used.","'ListSubheader' is defined but never used.","'InboxIcon' is defined but never used.","'DraftsIcon' is defined but never used.","'SendIcon' is defined but never used.","'DynamicFeedIcon' is defined but never used.","'StarBorder' is defined but never used.","'ExtensionIcon' is defined but never used.",["686"],["687"],"'CheckboxProps' is defined but never used.","'handleClick' is defined but never used.","'scannedIn' is defined but never used.",["686"],["687"],"'FormGroup' is defined but never used.",["686"],["687"],"'logo' is defined but never used.","'Select' is defined but never used.","'MenuItem' is defined but never used.",["686"],["687"],"'MailIcon' is defined but never used.","'HomeIcon' is defined but never used.","'List' is defined but never used.","'ListItem' is defined but never used.","'ListItemProps' is defined but never used.","'ListItemIcon' is defined but never used.","'ListItemText' is defined but never used.","'modeData' is defined but never used.","'AddNewMode' is defined but never used.","'handleDeleteMode' is assigned a value but never used.","'handleChange' is assigned a value but never used.","'Button' is defined but never used.","'theArray' is assigned a value but never used.","'setTheArray' is assigned a value but never used.",["686"],["687"],"no-global-assign","no-unsafe-negation"]