[{"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/ScanHistory.tsx":"1","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/ScanComparison.tsx":"2","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Backend/frontendData/isScanning.tsx":"3","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Backend/frontendData/getPortStatus.tsx":"4","/Users/yipjames/Desktop/INS/FYP/chinmap/src/index.tsx":"5","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Views/ScanResult.tsx":"6","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Views/Drawer.tsx":"7","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/target.tsx":"8","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/HomeSettings/SetFlags.tsx":"9","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Exploit/SMB.tsx":"10","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Discovery/IP.tsx":"11","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/HomeSettings/ScanTechinques.tsx":"12","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/ScanResult.tsx":"13","/Users/yipjames/Desktop/INS/FYP/chinmap/src/App.tsx":"14","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeArray.tsx":"15","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanMode.tsx":"16","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/Target.tsx":"17","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/HomeSettings/ServiceAndVersionDetectiony.tsx":"18","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Vulnerability/Others.tsx":"19","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Discovery/SMTP.tsx":"20","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Discovery/Database.tsx":"21","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Views/CustomisedScanMode.tsx":"22","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/Drawer.tsx":"23","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Vulnerability/SSL.tsx":"24","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Discovery/Broadcast.tsx":"25","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/HomeSettings/HomeSettings.tsx":"26","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Exploit/Others.tsx":"27","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Discovery/HTTP.tsx":"28","/Users/yipjames/Desktop/INS/FYP/chinmap/src/reportWebVitals.ts":"29","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/HomeSettings/homeSettingsData.tsx":"30","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/nonTCPoptions.tsx":"31","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Vulnerability/SMB.tsx":"32","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Vulnerability/HTTP.tsx":"33","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Discovery/Targets.tsx":"34","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Views/ScanComparison.tsx":"35","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/defaultScanModes/pingScanMode.tsx":"36","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/defaultScanModes/nonPingScanMode.tsx":"37","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/defaultScanModes/top100portsScanMode.tsx":"38","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/CustomisedScanMode.tsx":"39","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Mobx/Models/resultSelectStatus.tsx":"40","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/HomeSettings/TimingAndPerformance.tsx":"41","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/Timing.tsx":"42","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Discovery/Server.tsx":"43","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Discovery/Hadoop.tsx":"44","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NmapOutput.tsx":"45"},{"size":5741,"mtime":1613358396375,"results":"46","hashOfConfig":"47"},{"size":21181,"mtime":1613358715761,"results":"48","hashOfConfig":"47"},{"size":33,"mtime":1613478773652,"results":"49","hashOfConfig":"47"},{"size":6004,"mtime":1613478773649,"results":"50","hashOfConfig":"47"},{"size":500,"mtime":1612188541082,"results":"51","hashOfConfig":"47"},{"size":191,"mtime":1612266398943,"results":"52","hashOfConfig":"47"},{"size":175,"mtime":1612188434038,"results":"53","hashOfConfig":"47"},{"size":456,"mtime":1612967864564,"results":"54","hashOfConfig":"47"},{"size":1572,"mtime":1612623227941,"results":"55","hashOfConfig":"47"},{"size":4486,"mtime":1612516994364,"results":"56","hashOfConfig":"47"},{"size":4485,"mtime":1612516655737,"results":"57","hashOfConfig":"47"},{"size":2978,"mtime":1612622906910,"results":"58","hashOfConfig":"47"},{"size":36167,"mtime":1613489099451,"results":"59","hashOfConfig":"47"},{"size":897,"mtime":1612255057253,"results":"60","hashOfConfig":"47"},{"size":226,"mtime":1612370819122,"results":"61","hashOfConfig":"47"},{"size":11781,"mtime":1612533466554,"results":"62","hashOfConfig":"47"},{"size":1780,"mtime":1612499934577,"results":"63","hashOfConfig":"47"},{"size":3162,"mtime":1612665475497,"results":"64","hashOfConfig":"47"},{"size":4501,"mtime":1612517154062,"results":"65","hashOfConfig":"47"},{"size":4491,"mtime":1612516671041,"results":"66","hashOfConfig":"47"},{"size":4503,"mtime":1612516471374,"results":"67","hashOfConfig":"47"},{"size":223,"mtime":1612346221802,"results":"68","hashOfConfig":"47"},{"size":9504,"mtime":1612860639385,"results":"69","hashOfConfig":"47"},{"size":4492,"mtime":1612517097275,"results":"70","hashOfConfig":"47"},{"size":4506,"mtime":1612516493212,"results":"71","hashOfConfig":"47"},{"size":16719,"mtime":1612882826543,"results":"72","hashOfConfig":"47"},{"size":4495,"mtime":1612517045698,"results":"73","hashOfConfig":"47"},{"size":4491,"mtime":1612516649364,"results":"74","hashOfConfig":"47"},{"size":425,"mtime":1612188541084,"results":"75","hashOfConfig":"47"},{"size":86,"mtime":1612857258015,"results":"76","hashOfConfig":"47"},{"size":487,"mtime":1612365271132,"results":"77","hashOfConfig":"47"},{"size":4492,"mtime":1612517100792,"results":"78","hashOfConfig":"47"},{"size":4495,"mtime":1612517114425,"results":"79","hashOfConfig":"47"},{"size":4500,"mtime":1612516669180,"results":"80","hashOfConfig":"47"},{"size":207,"mtime":1612324657583,"results":"81","hashOfConfig":"47"},{"size":8951,"mtime":1612861770287,"results":"82","hashOfConfig":"47"},{"size":8779,"mtime":1612863918217,"results":"83","hashOfConfig":"47"},{"size":7700,"mtime":1612864392072,"results":"84","hashOfConfig":"47"},{"size":4544,"mtime":1612370716592,"results":"85","hashOfConfig":"47"},{"size":312,"mtime":1613487621896,"results":"86","hashOfConfig":"47"},{"size":5054,"mtime":1612666386272,"results":"87","hashOfConfig":"47"},{"size":1731,"mtime":1612433654825,"results":"88","hashOfConfig":"47"},{"size":4497,"mtime":1612516665777,"results":"89","hashOfConfig":"47"},{"size":4497,"mtime":1612516515547,"results":"90","hashOfConfig":"47"},{"size":2087,"mtime":1613482121150,"results":"91","hashOfConfig":"47"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1122jn7",{"filePath":"94","messages":"95","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"97"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"105"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"97"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"118","messages":"119","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"120","messages":"121","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"123"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":58,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"97"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"123"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"123"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"102"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"143","messages":"144","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"102"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"153"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"105"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"162","messages":"163","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"105"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"173","messages":"174","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"175","messages":"176","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"177","messages":"178","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"181","messages":"182","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"183","messages":"184","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"185","messages":"186","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"187","messages":"188","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"193","messages":"194","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"195","messages":"196","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"197","messages":"198","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"199","messages":"200","errorCount":0,"warningCount":35,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/ScanHistory.tsx",["201","202","203","204","205","206","207","208","209","210","211","212"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/ScanComparison.tsx",["213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229"],"import React from 'react';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport { Switch, Route, Link, BrowserRouter } from \"react-router-dom\";\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography'\nimport TextField from '@material-ui/core/TextField';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Select from '@material-ui/core/Select';\nimport FormControl from '@material-ui/core/FormControl';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Divider from '@material-ui/core/Divider';\nimport Button from '@material-ui/core/Button';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Box from '@material-ui/core/Box';\nimport AppBar from '@material-ui/core/AppBar';\nimport Chip from '@material-ui/core/Chip';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\n\nimport { scanTarget, targetData, targetTime } from './target'\n\n// Backend\nimport { isScanning } from '../Backend/frontendData/isScanning'\nimport { pureOutput } from '../Backend/frontendData/Result'\nimport scannedIn from '../Backend/frontendData/scannedIn.json'\nimport { rows } from '../Backend/frontendData/getPortStatus'\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    paper: {\n      padding: theme.spacing(2),\n      textAlign: 'left',\n      backgroundColor: \"#fefefe\",\n      color: \"#333333\",\n    },\n    centerGrid: {\n        textAlign: \"center\",\n        marginTop: 15,\n    },\n    btnTabs: {\n        textTransform: \"capitalize\",\n    },\n    cardRoot: {\n        marginTop: 25,\n    },\n    title: {\n        fontSize: 14,\n        whiteSpace: \"pre-line\",\n    },\n    pos: {\n        marginBottom: 12,\n    },\n    defaultShow: {\n\n    },\n    defaultHide: {\n        display: \"none\",\n    },\n    showBtn: {\n        marginTop: 15,\n        textTransform: \"capitalize\",\n    },\n    cardGrid: {\n        marginRight: 30,\n    },\n  }),\n);\n\ninterface TabPanelProps {\n    children?: React.ReactNode;\n    index: any;\n    value: any;\n  }\n  \n  function TabPanel(props: TabPanelProps) {\n    const { children, value, index, ...other } = props;\n  \n    return (\n      <div\n        role=\"tabpanel\"\n        hidden={value !== index}\n        id={`simple-tabpanel-${index}`}\n        aria-labelledby={`simple-tab-${index}`}\n        {...other}\n      >\n        {value === index && (\n          <Box p={3}>\n            <Typography>{children}</Typography>\n          </Box>\n        )}\n      </div>\n    );\n  }\n  \n  function a11yProps(index: any) {\n    return {\n      id: `simple-tab-${index}`,\n      'aria-controls': `simple-tabpanel-${index}`,\n    };\n  }\n\nexport default function CenteredGrid() {\n  const classes = useStyles();\n  const [targetToCompare, setTarget] = React.useState('');\n  const [timestampOne, setTimestampOne] = React.useState('');\n  const [timestampTwo, setTimestampTwo] = React.useState('');\n  const [isDisabled, setIsDisabled] = React.useState(true);\n  const [value, setValue] = React.useState(0);\n\n  const handleChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n    setTarget(event.target.value as string);\n    targetToCompare == \" \" ? setIsDisabled(true) : setIsDisabled(false) ;\n  };\n\n  const handleTimestampOneChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n    setTimestampOne(event.target.value as string);\n  };\n\n  const handleTimestampTwoChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n    setTimestampTwo(event.target.value as string);\n  };\n\n  const handleTabChange = (event: React.ChangeEvent<{}>, newValue: number) => {\n    setValue(newValue);\n  };\n\n  return (\n    <div className={classes.root}>\n        {isScanning.map((status) => (\n           status === true ?\n            <>\n              <div style={{textAlign: \"center\"}}>\n                <Tooltip title=\"Previous scan is progressing, please wait...\" arrow placement=\"top\">\n                  <LinearProgress style={{width: \"83%\",marginLeft:90, height: 4}} />\n                </Tooltip>\n              </div>\n            </>\n            :\n            null\n        ))}\n      <Grid container spacing={5} justify=\"center\" alignItems=\"center\">\n       \n        <Grid item xs={10}>\n            <Paper className={classes.paper}>\n                <Typography variant=\"h6\">\n                    Scan Comparison\n                </Typography>\n                <div style={{textAlign: \"center\",marginTop: 15,marginLeft: 120}}>\n                    <FormControl variant=\"outlined\" style={{width: \"100%\"}}>\n                        <InputLabel id=\"select-outlined-label\">\n                            Choose a target IP or Domain\n                        </InputLabel>\n                        <Select\n                            labelId=\"select-outlined-label\"\n                            id=\"select-outlined\"\n                            value={targetToCompare}\n                            onChange={handleChange}\n                            label=\"Choose a target IP or Domain\"\n                            style={{\n                                width: \"83%\",\n                                textAlign: \"center\",\n                            }}\n                        >\n                            {scannedIn.map((target) => (\n                                <MenuItem value={target.id} key={target.id}>\n                                    {target.targetForSelect} - {target.time}\n                                </MenuItem>\n                            ))}\n                        </Select>\n                    </FormControl>\n                </div>\n                    <br/><Divider variant=\"middle\" />\n                <Grid container justify=\"center\" alignItems=\"center\" className={classes.centerGrid}>\n                    <Grid item xs={5}>\n                        <Typography>Scan Result 1</Typography>\n                            <br/>\n                        <FormControl variant=\"outlined\" style={{width: \"100%\", marginLeft: 85}}>\n                            <InputLabel id=\"select-outlined-label\">\n                                Timestamp 1\n                            </InputLabel>\n                            <Select\n                                labelId=\"select-outlined-label\"\n                                id=\"select-outlined\"\n                                value={timestampOne}\n                                onChange={handleTimestampOneChange}\n                                label=\"Timestamp 1\"\n                                style={{\n                                    width: \"50%\",\n                                    textAlign: \"center\",\n                                }}\n                                disabled={isDisabled}\n                            >\n                                {scannedIn.map((target) => (\n                                    <MenuItem \n                                        value={target.runTime} \n                                        key={target.runTime}\n                                        className={\n                                            target.runTime == timestampTwo ? classes.defaultHide : classes.defaultShow\n                                        }\n                                    >\n                                        {target.runTime}\n                                    </MenuItem>\n                                ))}\n                            </Select>\n                        </FormControl>\n                    </Grid>\n\n                    <Grid item xs={5}>\n                        <Typography>Scan Result 2</Typography>\n                            <br/>\n                        <FormControl variant=\"outlined\" style={{width: \"100%\", marginLeft: 85}}>\n                            <InputLabel id=\"select-outlined-label\">\n                                Timestamp 2\n                            </InputLabel>\n                            <Select\n                                labelId=\"select-outlined-label\"\n                                id=\"select-outlined\"\n                                value={timestampTwo}\n                                onChange={handleTimestampTwoChange}\n                                label=\"Timestamp 2\"\n                                style={{\n                                    width: \"50%\",\n                                    textAlign: \"center\",\n                                }}\n                                disabled={isDisabled}\n                            >\n                                {scannedIn.map((target) => (\n                                    <MenuItem \n                                        value={target.runTime} \n                                        key={target.runTime}\n                                        className={\n                                            target.runTime == timestampOne ? classes.defaultHide : classes.defaultShow\n                                        }\n                                    >\n                                        {target.runTime}\n                                    </MenuItem>\n                                ))}\n                            </Select>\n                        </FormControl>\n                    </Grid>\n                </Grid>\n            </Paper>\n        </Grid>\n\n            <Grid item xs={10}>\n                <Paper className={classes.paper}>\n                    <Grid item xs={12}>\n                        <div id=\"scanComparisonTab\">\n                            <AppBar position=\"static\">\n                                <Tabs \n                                    value={value} \n                                    onChange={handleTabChange} \n                                    indicatorColor=\"primary\"\n                                    textColor=\"primary\"\n                                    centered>\n                                    <Tab label=\"Show Same\" {...a11yProps(0)} style={{textTransform: \"capitalize\"}} />\n                                    <Tab label=\"Show Different\" {...a11yProps(1)} style={{textTransform: \"capitalize\"}} />\n                                </Tabs>\n                            </AppBar>\n                                <Divider variant=\"middle\" />\n                                <br/>\n                            {\n                                timestampOne == \"\" || timestampTwo == \"\" ?\n                                    null\n                                        :\n                                    <>\n                                        <Typography style={{textAlign: \"center\"}} color=\"textSecondary\">Scan Result of [{targetToCompare}]</Typography>\n                                            {scannedIn.map((result) => (\n                                                <TabPanel value={value} index={0}>\n                                                    <Grid container justify=\"center\">\n                                                        <Grid item xs={5} className={classes.cardGrid}>\n                                                            <Card className={classes.root} variant=\"outlined\">\n                                                                <CardContent>\n                                                                    <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n                                                                        First Scan Time: [{timestampOne}]\n                                                                    </Typography>\n                                                                        <Divider style={{marginTop: 10, marginBottom: 10,}} />\n                                                                    <Typography variant=\"body2\" component=\"p\">\n                                                                        Command Used: {result.cm}\n                                                                    </Typography>\n                                                                    <Typography variant=\"body2\" component=\"p\">\n                                                                        Scan Mode: {result.scanMode}\n                                                                    </Typography>\n                                                                    <Typography variant=\"body2\" component=\"p\">\n                                                                        Closed Port: {result.notShown}\n                                                                    </Typography>\n                                                                    <Typography variant=\"body2\" component=\"p\">\n                                                                        Scan Run Time: {result.runTime}\n                                                                    </Typography>\n                                                                    <Typography variant=\"body2\" component=\"p\">\n                                                                        Target OS: {result.os}\n                                                                    </Typography>\n                                                                    <Typography variant=\"body2\" component=\"p\">\n                                                                        Network Distance: {result.hop}\n                                                                    </Typography>\n                                                                </CardContent>\n                                                            </Card>\n                                                        </Grid>\n\n                                                        <Grid item xs={5}>\n                                                            <Card className={classes.root} variant=\"outlined\">\n                                                                <CardContent>\n                                                                    <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n                                                                        Second Scan Time: [{timestampTwo}]\n                                                                    </Typography>\n                                                                        <Divider style={{marginTop: 10, marginBottom: 10,}} />\n                                                                    <Typography variant=\"body2\" component=\"p\">\n                                                                        Command Used: {result.cm}\n                                                                    </Typography>\n                                                                    <Typography variant=\"body2\" component=\"p\">\n                                                                        Scan Mode: {result.scanMode}\n                                                                    </Typography>\n                                                                    <Typography variant=\"body2\" component=\"p\">\n                                                                        Closed Port: {result.notShown}\n                                                                    </Typography>\n                                                                    <Typography variant=\"body2\" component=\"p\">\n                                                                        Scan Run Time: {result.runTime}\n                                                                    </Typography>\n                                                                    <Typography variant=\"body2\" component=\"p\">\n                                                                        Target OS: {result.os}\n                                                                    </Typography>\n                                                                    <Typography variant=\"body2\" component=\"p\">\n                                                                        Network Distance: {result.hop}\n                                                                    </Typography>\n                                                                </CardContent>\n                                                            </Card>\n                                                        </Grid>\n                                                    </Grid>\n                                                </TabPanel>\n                                            ))}\n                                            <TabPanel value={value} index={1}>\n                                                <Grid container justify=\"center\">\n                                                    <Grid item xs={5} className={classes.cardGrid}>\n                                                        <Card className={classes.root} variant=\"outlined\">\n                                                            <CardContent>\n                                                                <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n                                                                    First Scan Time: [{timestampOne}]\n                                                                </Typography>\n                                                                <Typography variant=\"h5\" component=\"h2\">\n                                                                2\n                                                                </Typography>\n                                                                <Typography className={classes.pos} color=\"textSecondary\">\n                                                                adjective\n                                                                </Typography>\n                                                                <Typography variant=\"body2\" component=\"p\">\n                                                                well meaning and kindly.\n                                                                <br />\n                                                                {'\"a benevolent smile\"'}\n                                                                </Typography>\n                                                            </CardContent>\n                                                            <CardActions>\n                                                                <Button size=\"small\">Learn More</Button>\n                                                            </CardActions>\n                                                        </Card>\n                                                    </Grid>\n\n                                                    <Grid item xs={5}>\n                                                        <Card className={classes.root} variant=\"outlined\">\n                                                            <CardContent>\n                                                                <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n                                                                    Second Scan Time: [{timestampTwo}]\n                                                                </Typography>\n                                                                <Typography variant=\"h5\" component=\"h2\">\n                                                                2\n                                                                </Typography>\n                                                                <Typography className={classes.pos} color=\"textSecondary\">\n                                                                adjective\n                                                                </Typography>\n                                                                <Typography variant=\"body2\" component=\"p\">\n                                                                well meaning and kindly.\n                                                                <br />\n                                                                {'\"a benevolent smile\"'}\n                                                                </Typography>\n                                                            </CardContent>\n                                                            <CardActions>\n                                                                <Button size=\"small\">Learn More</Button>\n                                                            </CardActions>\n                                                        </Card>\n                                                    </Grid>\n                                                </Grid>\n                                        </TabPanel>\n                                    </>\n                            }\n                        </div>\n                    </Grid>\n                </Paper>\n            </Grid>\n      </Grid>\n      <br/><br/>\n    </div>\n  );\n}\n",["230","231"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Backend/frontendData/isScanning.tsx",[],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Backend/frontendData/getPortStatus.tsx",[],["232","233"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/index.tsx",[],["234","235"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Views/ScanResult.tsx",[],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Views/Drawer.tsx",[],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/target.tsx",["236","237"],"import { automation, cveDetection } from './HomeSettings/homeSettingsData'\n\nexport const targetTime: string[] = [];\nexport const scanTarget: string[] = [];\nexport const targetData = [\n    {\n        target: \"\",\n        value: \"\",\n        time: \"\",\n        scanMode: \"\",\n        scanDate: \"\",\n        id: \"\",\n        setRange: \"\",\n        auto: false,\n        cve: false,\n    }\n];\n\nexport const chosenMode: string[] = [];\nexport const scanDate: any[] = [];\n\n","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/HomeSettings/SetFlags.tsx",["238"],"import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\n\n// Components\nimport ScanTechinques from './ScanTechinques'\nimport HostDiscovery from './HostDiscovery'\nimport PortSpecification from './PortSpecification'\nimport ServiceAndVersionDetectiony from './ServiceAndVersionDetectiony'\nimport OSDetection from './OSDetection'\nimport TimingAndPerformance from './TimingAndPerformance'\nimport Output from './Output'\n\n\nconst useStyles = makeStyles({\n  root: {\n    minWidth: 275,\n  },\n  bullet: {\n    display: 'inline-block',\n    margin: '0 2px',\n    transform: 'scale(0.8)',\n  },\n  title: {\n    fontSize: 14,\n  },\n  pos: {\n    marginBottom: 12,\n  },\n  mainGrid: {\n    padding: \"25px 75px\",\n  },\n});\n\nexport default function OutlinedCard() {\n  const classes = useStyles();\n  const bull = <span className={classes.bullet}>•</span>;\n\n  return (\n    <Grid container justify=\"center\" spacing={5} className={classes.mainGrid}>\n        <Grid item xs={6}>\n            <ScanTechinques />\n        </Grid>\n        <Grid item xs={6}>\n            <HostDiscovery />\n        </Grid>\n\n        <Grid item xs={6}>\n            <PortSpecification />\n        </Grid>\n        <Grid item xs={6}>\n            <ServiceAndVersionDetectiony />\n        </Grid>\n\n        <Grid item xs={6}>\n            <OSDetection />\n        </Grid>\n        <Grid item xs={6}>\n            <TimingAndPerformance />\n        </Grid>\n\n        <Grid item xs={6}>\n            <Output />\n        </Grid>\n        <Grid item xs={6} />\n    </Grid>\n    \n  );\n}\n","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Exploit/SMB.tsx",["239","240"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Discovery/IP.tsx",["241","242"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/HomeSettings/ScanTechinques.tsx",["243","244"],"import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Grid from '@material-ui/core/Grid';\n\n// json\nimport Data from './json/ScanTechniques/data.json'\n\nconst useStyles = makeStyles({\n  root: {\n    minWidth: 275,\n  },\n  bullet: {\n    display: 'inline-block',\n    margin: '0 2px',\n    transform: 'scale(0.8)',\n  },\n  title: {\n    fontSize: 20,\n  },\n  pos: {\n    marginBottom: 12,\n  },\n});\n\nexport default function OutlinedCard() {\n  const classes = useStyles();\n  const bull = <span className={classes.bullet}>•</span>;\n\n  const [state, setState] = React.useState({\n      checkbox: false,\n  });\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setState({ ...state, [event.target.name]: event.target.checked });\n  };\n\n\n  return (\n    \n    <Card className={classes.root} variant=\"outlined\">\n      <CardContent>\n        <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n          Scan Techinques\n        </Typography>\n            <Divider style={{marginTop: 15, marginBottom: 15,}}/>\n        <Typography variant=\"body2\" component=\"p\">\n             <FormControl component=\"fieldset\">\n                <FormGroup aria-label=\"position\" row>\n                    <Grid container spacing={3}>\n                        {Data.map((obj) => (\n                            <Grid item xs={3}>\n                                <Tooltip title={obj.tooltip} arrow placement=\"top\">\n                                    <FormControlLabel\n                                        value=\"end\"\n                                        control={\n                                            <Checkbox \n                                                color=\"primary\" \n                                            />\n                                        }\n                                        label={obj.flag}\n                                        labelPlacement=\"end\"\n                                    />\n                                </Tooltip>\n                            </Grid>\n                        ))}\n                    </Grid>\n                </FormGroup>\n            </FormControl>\n        </Typography>\n        <Divider style={{marginTop: 20,}}/>\n      </CardContent>\n      <CardActions>\n        <Button size=\"small\">Clear</Button>\n        <Button size=\"small\">Save</Button>\n      </CardActions>\n    </Card>\n  );\n}\n",["245","246"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/ScanResult.tsx",["247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267","268","269","270","271","272","273","274","275","276","277","278","279","280","281","282","283","284","285","286","287","288","289","290","291","292","293","294","295","296","297","298","299","300","301","302","303","304"],"import React from 'react';\nimport { makeStyles, createStyles, Theme, lighten } from '@material-ui/core/styles';\nimport { Switch, Route, Link, BrowserRouter } from \"react-router-dom\";\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography'\nimport TextField from '@material-ui/core/TextField';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Select from '@material-ui/core/Select';\nimport FormControl from '@material-ui/core/FormControl';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Divider from '@material-ui/core/Divider';\nimport Button from '@material-ui/core/Button';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport Tabs from '@material-ui/core/Tabs';\nimport Chip from '@material-ui/core/Chip';\nimport Tab from '@material-ui/core/Tab';\nimport Box from '@material-ui/core/Box';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Switcher from '@material-ui/core/Switch';\nimport AppBar from '@material-ui/core/AppBar';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport HelpIcon from '@material-ui/icons/Help';\nimport CsvDownloader from 'react-csv-downloader';\nimport CsvLink from 'react-csv-export';\nimport { Page, Text, View, Document, StyleSheet } from '@react-pdf/renderer';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport clsx from 'clsx';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport IconButton from '@material-ui/core/IconButton';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport DoneIcon from '@material-ui/icons/Done';\nimport PortOpened from '@material-ui/icons/Visibility';\nimport PortFiltered from '@material-ui/icons/VisibilityOff';\nimport { targetData, chosenMode, scanTarget } from './target'\n\n// Components\nimport NmapOutput from './NmapOutput'\n\n// Backend\nimport { isScanning } from '../Backend/frontendData/isScanning'\nimport { pureOutput } from '../Backend/frontendData/Result'\nimport scannedIn from '../Backend/frontendData/scannedIn.json'\nimport scannedTarget from '../Backend/frontendData/scannedTargetForSelect.json'\nimport { rows } from '../Backend/frontendData/getPortStatus'\n\n// Mobx Global Status\nimport selectResult from '../Mobx/Models/resultSelectStatus'\n\nconst mainStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    paper: {\n      padding: theme.spacing(2),\n      textAlign: 'left',\n      backgroundColor: \"#fefefe\",\n      color: \"#333333\",\n    },\n    centerGrid: {\n        textAlign: \"center\",\n        marginTop: 15,\n    },\n    btnTabs: {\n        textTransform: \"capitalize\",\n    },\n    cardRoot: {\n        marginTop: 25,\n    },\n    title: {\n        fontSize: 14,\n        whiteSpace: \"pre-line\",\n    },\n    pos: {\n        marginBottom: 12,\n    },\n    defaultShow: {\n\n    },\n    defaultHide: {\n        display: \"none\",\n    },\n    centering: {\n      textAlignLast: \"center\",\n      width: \"70%\",\n      userSelect: \"none\",\n    },\n    datepicker: {\n      marginLeft: theme.spacing(1),\n      marginRight: theme.spacing(1),\n      width: 200,\n    },\n  }),\n);\n\ninterface TabPanelProps {\n    children?: React.ReactNode;\n    index: any;\n    value: any;\n  }\n  \n  function TabPanel(props: TabPanelProps) {\n    const { children, value, index, ...other } = props;\n  \n    return (\n      <div\n        role=\"tabpanel\"\n        hidden={value !== index}\n        id={`simple-tabpanel-${index}`}\n        aria-labelledby={`simple-tab-${index}`}\n        {...other}\n      >\n        {value === index && (\n          <Box p={3}>\n            <Typography>{children}</Typography>\n          </Box>\n        )}\n      </div>\n    );\n  }\n  \nfunction a11yProps(index: any) {\n  return {\n    id: `simple-tab-${index}`,\n    'aria-controls': `simple-tabpanel-${index}`,\n  };\n}\n\nexport default () => {\n  const classes = mainStyles();\n  const [target, setTarget] = React.useState(\"\");\n\n  const handleChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n    setTarget(event.target.value as any);\n    // setTarget(selectResult.target)\n  };\n\n  const [value, setValue] = React.useState(0);\n\n  const handleTabChange = (event: React.ChangeEvent<{}>, newValue: number) => {\n    setValue(newValue);\n  };\n\n  const handleClickJO = () => {\n    console.log(scannedIn)\n    alert(target)\n  }\n\n  const [open, setOpen] = React.useState(true);\n  const [checked, setChecked] = React.useState(true);\n\n  const handleClose = () => {\n    setOpen(false);\n    setChecked((prev) => !prev);\n  };\n  const handleToggle = () => {\n    setOpen(!open);\n  };\n\n  function FadeOutTime() {\n    var min = 1500;\n    var max = 4000;\n    \n    return Math.random() * (max - min) + min;\n  }\n  \n  function HostsAndPorts() {\n  \n    return (\n      <TableContainer>\n        <Table aria-label=\"simple table\">\n          <TableHead>\n            <TableRow>\n              <TableCell align=\"center\">PORT</TableCell>\n              <TableCell align=\"center\">STATUS</TableCell>\n              <TableCell align=\"center\">SERVICE</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {rows.map((row) => (\n              <>\n                {\n                  row.scanId == target ?\n                    <>\n                      <TableRow key={row.scanId + \"_\" + row.portno}>\n                        <TableCell align=\"center\">\n                          {row.portno}/{row.port}\n                        </TableCell>\n                        <TableCell align=\"center\">\n                          <Chip\n                            label={row.status}\n                            style={{\n                              textTransform: \"uppercase\",\n                              // fontWeight: \"bold\",\n                              color: row.status == 'open' ? '#198BF7' : '#BA3B28',\n                              minWidth: 120,\n                            }}\n                            icon={\n                              row.status == 'open' ? <PortOpened style={{color: '#198BF7'}}/> : <PortFiltered style={{color: '#BA3B28'}}/>\n                            }\n                            clickable\n                            variant=\"outlined\"\n                          />\n                        </TableCell>\n                        <TableCell align=\"center\">{row.service}</TableCell>\n                      </TableRow>\n                    </>\n                      : null\n                }\n              </>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    );\n  }\n  \n  function ScanDetails() {\n    const classes = mainStyles();\n  \n    const handleClick = () => {\n      console.log(targetData);\n    }\n\n    return (\n      <>\n          {scannedIn.map((data) => (\n            data.id != target || target === \"\" || data.target === \"\" ?\n                null\n                    :\n                <>\n                {/* <button onClick={handleClick}>click</button> */}\n                <form \n                    className={classes.root} \n                    noValidate \n                    autoComplete=\"off\"\n                >\n                    <br/>\n                    <Grid container justify=\"center\" spacing={2} style={{width: \"100%\", textAlign: \"center\"}}>\n                      <>\n                        <Grid item xs={12} style={{width: \"100%\", marginBottom: 15,}}>\n                          <div style={{textAlign: \"left\"}}><FormLabel component=\"legend\">Basic Details: </FormLabel></div>\n                        </Grid>\n  \n                        <Grid item xs={12} style={{width: \"100%\", marginBottom: 55}}>\n                          <TextField\n                              className={classes.centering} \n                              id=\"outlined-basic\" \n                              label=\"Scan Target\" \n                              variant=\"outlined\" \n                              multiline\n                              style={{\n                                width: \"85%\",\n                              }}\n                              value={data.target}\n                              inputProps={{\n                                  readOnly: true,\n                              }}\n                          />\n                        </Grid>\n                      \n  \n                        <Grid item xs={6} style={{width: \"100%\", marginBottom: 55}}>\n                          <TextField\n                              className={classes.centering} \n                              id=\"outlined-basic\" \n                              label=\"Scan Time\" \n                              variant=\"outlined\" \n                              value={data.time}\n                              inputProps={{\n                                  readOnly: true,\n                              }}\n                          />\n                        </Grid>\n  \n                        <Grid item xs={6} style={{width: \"100%\"}}>\n                          <TextField\n                              className={classes.centering} \n                              id=\"outlined-basic\" \n                              label=\"Chosen Scan Mode\" \n                              variant=\"outlined\" \n                              value={\n                                data.scanMode == \"\" ? \"Regular Scan\" : data.scanMode\n                              }\n                              inputProps={{\n                                  readOnly: true,\n                              }}\n                            />\n                        </Grid>\n                        \n                        <Grid item xs={6} style={{width: \"100%\", marginBottom: 55}}>\n                          <Tooltip \n                            arrow \n                            placement=\"top\"\n                            title={\n                              (parseInt(data.runTime)/60).toFixed(3) + \" min; \" + (parseInt(data.runTime)/60/60).toFixed(3) + \" hr\"\n                            } \n                          >\n                            <TextField\n                                className={classes.centering} \n                                id=\"outlined-basic\" \n                                label=\"Target Scanned In\" \n                                variant=\"outlined\" \n                                value={data.runTime}\n                                inputProps={{\n                                    readOnly: true,\n                                }}\n                              />\n                            </Tooltip>\n                        </Grid>\n                    \n                    \n                        <Grid item xs={6} style={{width: \"100%\"}}>\n                          <TextField\n                            className={classes.centering} \n                            id=\"outlined-basic\" \n                            label='Scan Date [Y-M-D]' \n                            variant=\"outlined\" \n                            value={data.date}\n                            inputProps={{\n                                readOnly: true,\n                            }}\n                          />\n                        </Grid>\n                        \n                        <Grid item xs={6} style={{width: \"100%\", marginBottom: 55}}>\n                          <TextField\n                              className={classes.centering} \n                              id=\"outlined-basic\" \n                              label=\"Scan Latency\" \n                              variant=\"outlined\" \n                              multiline={\n                                data.latency.length > 17 ? true : false\n                              }\n                              value={\n                                data.latency == '' ? \"Target host is down\" \n                                //   :\n                                // data.latency.length > 17 ? data.target + \": \" + data.latency\n                                   :\n                                data.latency\n                              }\n                              inputProps={{\n                                  readOnly: true,\n                              }}\n                            />\n                        </Grid>\n  \n                        <Grid item xs={6} style={{width: \"100%\", marginBottom: 55}}>\n                          <TextField\n                              className={classes.centering} \n                              id=\"outlined-basic\" \n                              label=\"Up Host\" \n                              variant=\"outlined\" \n                              value={data.upHost == '' ? \"Target host is down\" : data.upHost}\n                              inputProps={{\n                                  readOnly: true,\n                              }}\n                            />\n                        </Grid>\n                        \n                        <Grid item xs={6} style={{width: \"100%\", marginBottom: 55}}>\n                          <TextField\n                              className={classes.centering} \n                              id=\"outlined-basic\" \n                              label=\"Closed Port Qty.\" \n                              variant=\"outlined\" \n                              multiline={\n                                data.notShown.length > 15 ? true : false\n                              }\n                              value={data.notShown == '' ? \"Target host is down\" : data.notShown}\n                              inputProps={{\n                                  readOnly: true,\n                              }}\n                            />\n                        </Grid>\n  \n                        <Grid item xs={6} style={{width: \"100%\", marginBottom: 55}}>\n                          <TextField\n                              className={classes.centering} \n                              id=\"outlined-basic\" \n                              label=\"Nmap Version\" \n                              variant=\"outlined\" \n                              multiline\n                              value={data.nmapVer}\n                              inputProps={{\n                                  readOnly: true,\n                              }}\n                            />\n                        </Grid>\n  \n                      <Grid item xs={12} style={{width: \"100%\", marginBottom: 15, marginTop: 25,}}>\n                        <Divider /><br/>\n                        <div style={{textAlign: \"left\"}}><FormLabel component=\"legend\">Advanced Details: </FormLabel></div>\n                      </Grid>\n                        \n                        <Grid item xs={12} style={{width: \"100%\", marginBottom: 55}}>\n                          <TextField\n                              className={classes.centering} \n                              id=\"outlined-basic\" \n                              label=\"Target OS\" \n                              variant=\"outlined\" \n                              style={{\n                                width: \"85%\",\n                              }}\n                              multiline={\n                                data.os.length > 5 ? true : false\n                              }\n                              value={\n                                data.os == \"\" ? \"No OS found or target is currently down\" : data.os\n                              }\n                              inputProps={{\n                                  readOnly: true,\n                              }}\n                            />\n                        </Grid>\n  \n                        <Grid item xs={6} style={{width: \"100%\", marginBottom: 55}}>\n                          <TextField\n                              className={classes.centering} \n                              id=\"outlined-basic\" \n                              label=\"Network Distance\" \n                              variant=\"outlined\" \n                              multiline={\n                                data.hop.length > 5 ? true : false\n                              }\n                              value={\n                                data.hop == \"\" ? \n                                  \"Enable -v to discover\" \n                                  : \n                                data.hop\n  \n                              }\n                              inputProps={{\n                                  readOnly: true,\n                              }}\n                            />\n                        </Grid>\n                        \n                        <Grid item xs={6} style={{width: \"100%\", marginBottom: 55}}>\n                          <TextField\n                              className={classes.centering} \n                              id=\"outlined-basic\" \n                              label=\"TCP Sequence Prediction\" \n                              variant=\"outlined\" \n                              multiline={\n                                data.notShown.length > 15 ? true : false\n                              }\n                              value={data.difficulty == '' ? \"Target host is down\" : data.difficulty}\n                              inputProps={{\n                                  readOnly: true,\n                              }}\n                            />\n                        </Grid>\n                        \n                        <Grid item xs={6} style={{width: \"100%\", marginBottom: 55}}>\n                          <TextField\n                              className={classes.centering} \n                              id=\"outlined-basic\" \n                              label=\"Device Type\" \n                              variant=\"outlined\" \n                              multiline={\n                                data.macAddr.length > 17 ? true : false\n                              }\n                              value={\n                                data.deviceType == \"\" ? \"Enable -v to discover\" : data.deviceType\n                              }\n                              inputProps={{\n                                  readOnly: true,\n                              }}\n                            />\n                        </Grid>\n  \n                        <Grid item xs={6} style={{width: \"100%\", marginBottom: 55}}>\n                          <TextField\n                              className={classes.centering} \n                              id=\"outlined-basic\" \n                              label=\"MAC Address\" \n                              variant=\"outlined\" \n                              multiline={\n                                data.macAddr.length > 28 ? true : false\n                              }\n                              value={\n                                data.macAddr == \"\" ? \"MAC Address not found\" : data.macAddr\n                              }\n                              inputProps={{\n                                  readOnly: true,\n                              }}\n                            />\n                        </Grid>\n  \n                        <Grid item xs={12} style={{width: \"100%\", marginBottom: 55}}>\n                          <TextField\n                              className={classes.centering} \n                              id=\"outlined-basic\" \n                              label=\"Up Time\" \n                              variant=\"outlined\" \n                              multiline\n                              style={{\n                                width: \"85%\",\n                              }}\n                              value={\n                                data.uptime == \"\" ? \"Enable -v to discover\" : data.uptime\n                              }\n                              inputProps={{\n                                  readOnly: true,\n                              }}\n                            />\n                        </Grid>\n  \n                        <Grid item xs={6} style={{width: \"100%\", marginBottom: 55}}>\n                          <TextField\n                              className={classes.centering} \n                              id=\"outlined-basic\" \n                              label=\"Raw Packets Sent\" \n                              variant=\"outlined\" \n                              value={\n                                data.rawPacket == \"\" ? \"Enable -v to discover\" : data.rawPacket\n                              }\n                              inputProps={{\n                                  readOnly: true,\n                              }}\n                            />\n                        </Grid>\n  \n                        <Grid item xs={6} style={{width: \"100%\", marginBottom: 55}}>\n                          <TextField\n                              className={classes.centering} \n                              id=\"outlined-basic\" \n                              label=\"Raw Packets Received\" \n                              variant=\"outlined\" \n                              value={\n                                data.rcvd == \"\" ? \"Enable -v to discover\" : data.rcvd\n                              }\n                              inputProps={{\n                                  readOnly: true,\n                              }}\n                            />\n                        </Grid>\n  \n  \n                      <Grid item xs={12} style={{width: \"100%\", marginBottom: 15, marginTop: 25,}}>\n                        <Divider /><br/>\n                        <div style={{textAlign: \"left\"}}><FormLabel component=\"legend\">Scan Settings</FormLabel></div>\n                      </Grid>\n  \n                          <Grid item xs={6} style={{width: \"100%\", marginBottom: 55}}>\n                            <TextField\n                                className={classes.centering} \n                                id=\"outlined-basic\" \n                                label=\"Automation\" \n                                variant=\"outlined\" \n                                value={\n                                  data.auto == \"True\" ? \"Enabled\" : \"Disabled\"\n                                }\n                                inputProps={{\n                                    readOnly: true,\n                                }}\n                              />\n                          </Grid>\n                          <Grid item xs={6} style={{width: \"100%\", marginBottom: 55}}>\n                            <TextField\n                                className={classes.centering} \n                                id=\"outlined-basic\" \n                                label=\"CVE Detection\" \n                                variant=\"outlined\" \n                                value={\n                                  data.cveDetect == \"True\" ? \"Enabled\" : \"Disabled\"\n                                }\n                                inputProps={{\n                                    readOnly: true,\n                                }}\n                              />\n                          </Grid>\n                          <Grid item xs={6} style={{width: \"100%\", marginBottom: 55}}>\n                            <TextField\n                                className={classes.centering} \n                                id=\"outlined-basic\" \n                                label=\"Scan Range\" \n                                variant=\"outlined\" \n                                value={\n                                  data.setRange == \" \" ? \"Not Specify\" : data.setRange\n                                }\n                                inputProps={{\n                                    readOnly: true,\n                                }}\n                              />\n                          </Grid>\n                          <Grid item xs={6} style={{width: \"100%\", marginBottom: 55}}>\n                            <TextField\n                                className={classes.centering} \n                                id=\"outlined-basic\" \n                                label=\"Set Flags\" \n                                variant=\"outlined\" \n                                multiline\n                                value={\n                                  data.flags == \" \" ? \"Null\" : data.flags\n                                }\n                                inputProps={{\n                                    readOnly: true,\n                                }}\n                              />\n                          </Grid>\n                        </>\n                      \n                    </Grid>\n                </form>\n                </>\n          ))}\n      </>\n    );\n  }\n\n  function ExportResult() {\n    const datas = [{\n      first: 'foo',\n      second: 'bar'\n    }, {\n      first: 'foobar',\n      second: 'foobar'\n    }];\n\n    return (\n      <>\n          {scannedIn.map((obj) => (\n              obj.id != target || target === \"\" || obj.target === \"\" ?\n                  null\n                      :\n                  <>\n                      <Grid container justify=\"center\" spacing={4}>\n                          <Grid item xs={12} style={{textAlign: \"center\"}}>\n                              <form \n                                  noValidate \n                                  autoComplete=\"off\"\n                              >\n                                  <TextField \n                                      id=\"outlined-basic\" \n                                      label=\"Current Target\" \n                                      variant=\"outlined\" \n                                      value={obj.targetForSelect}\n                                      inputProps={{\n                                          readOnly: true,\n                                      }}\n                                      style={{\n                                          textAlignLast: \"center\",\n                                          width: \"60%\",\n                                      }}\n                                  />\n                                  \n                              </form>\n                          </Grid>\n                          <Grid item xs={6} style={{textAlign: \"center\"}}>\n                              <form \n                                  noValidate \n                                  autoComplete=\"off\"\n                              >\n                                  <TextField \n                                      id=\"outlined-basic\" \n                                      label=\"Target Scan Date [D/M/Y]\" \n                                      variant=\"outlined\" \n                                      value={obj.date}\n                                      inputProps={{\n                                          readOnly: true,\n                                      }}\n                                      style={{\n                                          textAlignLast: \"center\",\n                                          width: \"60%\",\n                                      }}\n                                  />\n                                  \n                              </form>\n                          </Grid>\n                          <Grid item xs={6} style={{textAlign: \"center\"}}>\n                          <Tooltip title=\"\" arrow placement=\"top\">\n                              <form \n                                  noValidate \n                                  autoComplete=\"off\"\n                              >\n                                  \n                                    <TextField \n                                        id=\"outlined-basic\" \n                                        label=\"Target Scan Time\" \n                                        variant=\"outlined\" \n                                        value={obj.time}\n                                        inputProps={{\n                                            readOnly: true,\n                                        }}\n                                        style={{\n                                            textAlignLast: \"center\",\n                                            width: \"60%\",\n                                        }}\n                                    />\n                              </form>\n                              </Tooltip>\n                          </Grid>\n  \n                            <Grid item xs={12} style={{textAlign: \"center\", position: \"relative\", left: 12,}}>\n                                <ButtonGroup \n                                    size=\"large\" \n                                    color=\"primary\" \n                                >\n                                    <Button \n                                      style={{width: \"50%\"}}\n                                    >\n                                        CSV\n                                    </Button>\n                                    \n                                    <Button style={{width: \"50%\"}}>\n                                        PDF\n                                    </Button>\n                                </ButtonGroup>\n                                <Tooltip title=\"By clicking the button, the scan result will be exported to a file in the format of CSV or Excel.\" arrow placement=\"top\">\n                                    <span style={{position:\"relative\", top: 5, left: 15, color: \"lightgrey\", cursor: \"pointer\"}}>\n                                        <HelpIcon style={{fontSize: 20}}/>\n                                    </span>\n                                </Tooltip>\n                            </Grid>\n                      </Grid>\n                      \n                  </>\n          ))}\n      </>\n    );\n  }\n  \n  \n  return (\n    <div className={classes.root}>\n      <button onClick={()=>console.log(selectResult.target)}>click</button>\n       {isScanning.map((status) => (\n           status === true ?\n            <>\n              <div style={{textAlign: \"center\"}}>\n                <Tooltip title=\"Previous scan is progressing, please wait...\" arrow placement=\"top\">\n                  <LinearProgress style={{width: \"83%\",marginLeft:90, height: 4}} />\n                </Tooltip>\n              </div>\n            </>\n            :\n            null\n        ))}\n      <Grid container spacing={5} justify=\"center\" alignItems=\"center\">\n        <Grid item xs={10}>\n          {/* <button onClick={handleClickJO}>click</button> */}\n                <Paper className={classes.paper}>\n                    <table style={{width: \"100%\"}}>\n                      <tr>\n                        <td style={{width: \"20%\"}}>\n                            <Typography variant=\"h6\">\n                              Scan Result\n                            </Typography>\n                        </td>\n                        <td style={{textAlign: \"right\"}}>\n                            <span style={{marginRight: 120, position: \"relative\", top: 5,}}>\n                              \n                            </span>\n                        </td>\n                      </tr>\n                    </table>\n\n                    \n                    <div style={{textAlign: \"center\",marginTop: 15,marginLeft: 120}}>\n                        <FormControl variant=\"outlined\" style={{width: \"100%\"}}>\n                            <InputLabel id=\"demo-simple-select-outlined-label\">\n                                Choose a target IP or Domain\n                            </InputLabel>\n                            <Select\n                                labelId=\"demo-simple-select-outlined-label\"\n                                id=\"demo-simple-select-outlined\"\n                                value={selectResult.target}\n                                onChange={handleChange}\n                                label=\"Choose a target IP or Domain\"\n                                style={{\n                                    width: \"83%\",\n                                    textAlign: \"center\",\n                                }}\n                            >\n                              {scannedTarget.map((target) => (\n                                  <MenuItem \n                                    key={target.id}\n                                    value={target.id}\n                                  >\n                                    {target.target} - {target.runTime}\n                                  </MenuItem>\n                              ))}\n                            </Select>\n                        </FormControl>\n                    </div>\n                    { \n                        target === \"\" ?\n                        null\n                            :\n                        <>\n                            <br/><Divider variant=\"middle\" />\n                            <div id=\"scanResultTab\">\n                                <AppBar position=\"static\">\n                                    <Tabs \n                                        value={value} \n                                        onChange={handleTabChange} \n                                        indicatorColor=\"primary\"\n                                        textColor=\"primary\"\n                                        centered>\n                                      <Tab label=\"Nmap Output\" {...a11yProps(0)} style={{textTransform: \"capitalize\"}} />\n                                      <Tab label=\"Hosts and Ports\" {...a11yProps(1)} style={{textTransform: \"capitalize\"}} />\n                                      <Tab label=\"CVE\" {...a11yProps(2)} style={{textTransform: \"capitalize\"}} />\n                                      <Tab label=\"Scan Details\" {...a11yProps(3)} style={{textTransform: \"capitalize\"}} />\n                                      <Tab label=\"Export Results\" {...a11yProps(4)} style={{textTransform: \"capitalize\"}} />\n                                    </Tabs>\n                                </AppBar>\n                                <Paper className={classes.paper}>\n                                    <TabPanel value={value} index={0}>\n                                        <NmapOutput />\n                                    </TabPanel>\n                                    <TabPanel value={value} index={1}>\n                                      <div style={{whiteSpace: \"normal\"}}>\n                                        <HostsAndPorts />\n                                      </div>\n                                    </TabPanel>\n                                    <TabPanel value={value} index={2}>\n                                        CVE\n                                    </TabPanel>\n                                    <TabPanel value={value} index={3}>\n                                        <ScanDetails />\n                                    </TabPanel>\n                                    <TabPanel value={value} index={4}>\n                                        <ExportResult />\n                                    </TabPanel>\n                                </Paper>\n                                <Button\n                                  style={{\n                                    width: \"100%\",\n                                    marginTop: 15,\n                                  }}\n                                  variant=\"outlined\"\n                                  color=\"secondary\"\n                                >\n                                  Delete Result\n                                </Button>\n                            </div>\n                        </>\n                    }\n                    \n                </Paper>\n            </Grid>\n\n      </Grid>\n      \n    </div>\n  );\n}\n","/Users/yipjames/Desktop/INS/FYP/chinmap/src/App.tsx",["305"],"import React, { Suspense} from 'react'\nimport logo from './logo.svg';\nimport './App.css';\nimport Drawer from './Views/Drawer'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\n\nfunction App() {\n  return (\n    <Router>\n      <Suspense fallback={<div>Loading...</div>}>\n        <Switch>\n          \n          <Route path=\"/\">\n            <Drawer />\n          </Route>\n          \n          <Route path=\"/defaultScanModes\">\n            <Drawer />\n          </Route>\n\n          <Route path=\"/customisedScanModes\">\n            <Drawer />\n          </Route>\n\n          <Route path=\"/scanResult\">\n            <Drawer />\n          </Route>\n\n          <Route path=\"/scanComparison\">\n            <Drawer />\n          </Route>\n\n          <Route path=\"/scanHistory\">\n            <Drawer />\n          </Route>\n\n        </Switch>\n      </Suspense>\n    </Router>\n  )\n}\n\nexport default App;\n","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeArray.tsx",[],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanMode.tsx",["306","307","308","309","310"],"import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Divider from '@material-ui/core/Divider';\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles, Theme } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport Slider from '@material-ui/core/Slider';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\n\nimport { customisedScanModes } from './NewScanModeArray'\n\nimport { TCPoptions } from './TCPoptions'\nimport { nonTCPoptions } from './nonTCPoptions'\n\n// Options \nimport Ping from './NewScanModeTab/Ping'\nimport NSE from './NewScanModeTab/NSE'\nimport Target from './NewScanModeTab/Target'\nimport Source from './NewScanModeTab/Source'\nimport Timing from './NewScanModeTab/Timing'\nimport Others from './NewScanModeTab/Others'\n\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  index: any;\n  value: any;\n}\n\nfunction TabPanel(props: TabPanelProps) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`simple-tabpanel-${index}`}\n      aria-labelledby={`simple-tab-${index}`}\n      {...other}\n    >\n      {value === index && (\n        <Box p={3}>\n          <Typography>{children}</Typography>\n        </Box>\n      )}\n    </div>\n  );\n}\n\nfunction a11yProps(index: any) {\n  return {\n    id: `simple-tab-${index}`,\n    'aria-controls': `simple-tabpanel-${index}`,\n  };\n}\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    flexGrow: 1,\n    backgroundColor: theme.palette.background.paper,\n  },\n  avatarText: {\n    background: \"#4A92FF\",\n    borderRadius: 6,\n    color: \"#fff\",\n    padding: \"2px 6px\",\n  },  \n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  },\n  fullDes: {\n    color: \"red\",\n  },\n  des: {\n\n  },\n}));\n\nexport default function FormDialog() {\n  const classes = useStyles();\n  const [open, setOpen] = React.useState(false);\n  const [modeName, setModeName] = React.useState(\"\");\n  const [modeDes, setModeDes] = React.useState(\"\");\n  const [value, setValue] = React.useState(0);\n  const [frequency, setFrequency] = React.useState<number>(4);\n  const [TCP, setTCP] = React.useState('');\n  const [nonTCP, setNonTCP] = React.useState('');\n\n  const handleTCP = (event: React.ChangeEvent<{ value: unknown }>) => {\n    setTCP(event.target.value as string);\n  };\n\n  const handleNonTCP = (event: React.ChangeEvent<{ value: unknown }>) => {\n    setNonTCP(event.target.value as string);\n  };\n\n  const handleScanFrequency = (event: any, newValue: number | number[]) => {\n    setFrequency(newValue as number);\n  };\n\n  const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\n    setValue(newValue);\n  };\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleModeName = (event: React.ChangeEvent<{ value: unknown }>) => {\n    setModeName(event.target.value as string)\n  }\n\n  const handleModeDes = (event: React.ChangeEvent<{ value: unknown }>) => {\n    setModeDes(event.target.value as string)\n  }\n\n  // Push to array\n  const [theArray, setTheArray] = React.useState(customisedScanModes);\n  const handleCreate = () => {\n    //setTheArray(theArray => [ ...theArray, {name: modeName, link: \"!@3\", value: \"dsad\", des: modeDes} ]);\n    //console.log(theArray);\n    \n    if( modeName == \"\" ) {\n      alert(\"Please Enter the Mode Name.\")\n    } else {\n      customisedScanModes.push({name: modeName, link: modeName, value: modeName, des: modeDes});\n      setOpen(false);\n    }\n  };\n\n  return (\n    <div>\n      <Button variant=\"contained\" onClick={handleClickOpen} style={{width: \"100%\", backgroundColor: \"#ffffff\", color: \"#333333\"}}>\n        Add New Scan Mode\n      </Button>\n      <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\" fullWidth maxWidth=\"sm\">\n        <DialogTitle id=\"form-dialog-title\">Add New Scan Mode</DialogTitle>\n        <DialogContent>\n            <Divider /><br/>\n            <AppBar position=\"static\">\n              <Tabs value={value} onChange={handleChange} aria-label=\"simple tabs example\" variant=\"scrollable\">\n                <Tab label=\"Profile\" {...a11yProps(0)} />\n                <Tab label=\"Ping\" {...a11yProps(1)} />\n                <Tab label=\"NSE\" {...a11yProps(2)} />\n                <Tab label=\"Target\" {...a11yProps(3)} />\n                <Tab label=\"Source\" {...a11yProps(4)} />\n                <Tab label=\"Timing\" {...a11yProps(5)} />\n                <Tab label=\"Others\" {...a11yProps(6)} />\n              </Tabs>\n            </AppBar>\n            <TabPanel value={value} index={0}>\n              <Grid container spacing={3} justify=\"center\">\n                  <div style={{textAlign: \"center\", width: \"100%\"}}>\n                    <Grid item xs={12}>\n                        <TextField \n                          value={modeName} \n                          onChange={handleModeName} \n                          label=\"Mode Name\" \n                          margin=\"dense\" \n                          size=\"small\"\n                          variant=\"outlined\"\n                          style={{\n                            width: \"80%\",\n                          }}\n                        />\n                    </Grid>\n                    <Grid item xs={12}>\n                      <TextField \n                          value={modeDes}\n                          onChange={handleModeDes}\n                          label=\"Mode Description (Optional)\" \n                          margin=\"dense\" \n                          multiline\n                          rows={3}\n                          size=\"small\"\n                          variant=\"outlined\"\n                          inputProps={{ \n                            maxLength: 100\n                          }}\n                          style={{\n                            width: \"80%\",\n                            textAlignLast: \"left\",\n                          }}\n                      />\n                      <Typography style={{textAlign: \"right\", color: \"lightgrey\", fontSize: 10, marginRight: 55}}>\n                        <span className={modeDes.length == 100 ? classes.fullDes : classes.des}>{modeDes.length}</span> / 100\n                      </Typography>\n                    </Grid>\n                    <br/><Divider variant=\"middle\" /><br/>\n                    <Grid item xs={12}>\n                        <Typography style={{textAlign: \"left\"}}>Scan Frequency</Typography>\n                        <Slider \n                          value={frequency} \n                          onChange={handleScanFrequency}  \n                          min={0}\n                          max={5}\n                          step={1}\n                          valueLabelDisplay=\"auto\"\n                          aria-labelledby=\"continuous-slider\" \n                          style={{\n                            width: \"50%\",\n                          }}\n                        />\n\n                        <Tooltip \n                            title=\"[ -T ] --- Specifies the timing (Timing) used in the scanning process, there are always 6 levels (0-5), the level increases, the faster the scanning speed.\" \n                            placement=\"top\" \n                            arrow\n                        >\n                          <Typography style={{textAlign: \"center\"}}>-T <span className={classes.avatarText}>{frequency}</span></Typography>\n                        </Tooltip>\n                    </Grid>\n                    <br/><Divider variant=\"middle\" /><br/>\n                    <Grid item xs={12}>\n                      <Tooltip \n                        arrow \n                        placement=\"left\"\n                        title=\"TCP connect scan is the default TCP scan type when SYN scan is not an option.\"\n                      >\n                        <FormControl className={classes.formControl}>\n                          <InputLabel id=\"demo-simple-select-label\">TCP Scans</InputLabel>\n                          <Select\n                            labelId=\"demo-simple-select-label\"\n                            id=\"demo-simple-select\"\n                            value={TCP}\n                            onChange={handleTCP}\n                            style={{\n                              width: 250,\n                            }}\n                          >\n                            <MenuItem>None</MenuItem>\n                            {TCPoptions.map((option) => (\n                              <MenuItem value={option.value}>{option.flag}</MenuItem>\n                            ))}\n                          </Select>\n                        </FormControl>\n                      </Tooltip>\n                    </Grid>\n                    <br/><Divider variant=\"middle\" /><br/>\n                    <Grid item xs={12}>\n                        <Tooltip \n                          arrow \n                          placement=\"left\"\n                          title=\"Non-TCP connect scan is the default non-TCP scan type when SYN scan is not an option.\"\n                        >\n                          <FormControl className={classes.formControl}>\n                            <InputLabel id=\"demo-simple-select-label\">Non-TCP Scans</InputLabel>\n                            <Select\n                              labelId=\"demo-simple-select-label\"\n                              id=\"demo-simple-select\"\n                              value={nonTCP}\n                              onChange={handleNonTCP}\n                              style={{\n                                width: 250,\n                              }}\n                            >\n                              <MenuItem>None</MenuItem>\n                              {nonTCPoptions.map((option) => (\n                                <MenuItem value={option.value}>{option.flag}</MenuItem>\n                              ))}\n                            </Select>\n                          </FormControl>\n                        </Tooltip>\n                    </Grid>\n                  </div>\n              </Grid>\n            </TabPanel>\n            <TabPanel value={value} index={1}>\n              <Ping />\n            </TabPanel>\n            <TabPanel value={value} index={2}>\n              <NSE />\n            </TabPanel>\n            <TabPanel value={value} index={3}>\n              <Target />\n            </TabPanel>\n            <TabPanel value={value} index={4}>\n              <Source />\n            </TabPanel>\n            <TabPanel value={value} index={5}>\n              <Timing />\n            </TabPanel>\n            <TabPanel value={value} index={6}>\n              <Others />\n            </TabPanel>\n            \n        </DialogContent>\n            <Divider variant=\"middle\" />\n        <DialogActions>\n          <Button onClick={handleClose} color=\"primary\">\n            Cancel\n          </Button>\n          <Button onClick={handleCreate} color=\"primary\">\n            Create\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/Target.tsx",["311","312","313"],"import React from 'react';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Divider from '@material-ui/core/Divider';\nimport Grid from '@material-ui/core/Grid';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport TextField from '@material-ui/core/TextField';\n\nimport { Target } from './NewModeOptions'\n\nexport default function FormControlLabelPosition() {\n  return (\n    <>\n      <Grid container spacing={3}>\n        {Target.map((option) => (\n          <Grid item xs={12}>\n            <Tooltip title={option.tooltip} arrow placement=\"right\">\n              <FormControl component=\"fieldset\" style={{width: 450}}>\n                <FormControlLabel\n                  value={option.value}\n                  control={<Checkbox color=\"primary\" />}\n                  label={option.des}\n                  labelPlacement=\"end\"\n                />\n                {\n                  option.input === true ?\n                    <>\n                      <TextField \n                          label={`Example Input: ${option.egInput}`} \n                          margin=\"dense\" \n                          size=\"small\"\n                          variant=\"outlined\"\n                          style={{\n                            width: \"100%\",\n                            textAlignLast: \"center\",\n                          }}\n                      />\n                    </>\n                      :\n                    null\n                }\n              </FormControl>\n            </Tooltip>\n          </Grid>\n        ))}\n      </Grid>\n    </>\n  );\n}\n","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/HomeSettings/ServiceAndVersionDetectiony.tsx",["314","315"],"import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Grid from '@material-ui/core/Grid';\n\n// json\nimport Data from './json/ServiceAndVersionDetectiony/data.json'\n\nconst useStyles = makeStyles({\n  root: {\n    minWidth: 275,\n  },\n  bullet: {\n    display: 'inline-block',\n    margin: '0 2px',\n    transform: 'scale(0.8)',\n  },\n  title: {\n    fontSize: 20,\n  },\n  pos: {\n    marginBottom: 12,\n  },\n});\n\nexport default function OutlinedCard() {\n  const classes = useStyles();\n  const bull = <span className={classes.bullet}>•</span>;\n\n  const [state, setState] = React.useState({\n      checkbox: false,\n  });\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setState({ ...state, [event.target.name]: event.target.checked });\n  };\n\n\n  return (\n    \n    <Card className={classes.root} variant=\"outlined\">\n      <CardContent>\n        <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n          Service And Version Detectiony\n        </Typography>\n            <Divider style={{marginTop: 15, marginBottom: 15,}}/>\n        <Typography variant=\"body2\" component=\"p\">\n             <FormControl component=\"fieldset\">\n                <FormGroup aria-label=\"position\" row>\n                    <Grid container spacing={3}>\n                        {Data.map((obj) => (\n                            <Grid item xs={5}>\n                                <Tooltip title={obj.tooltip} arrow placement=\"top\">\n                                    <FormControlLabel\n                                        value=\"end\"\n                                        control={\n                                            <Checkbox \n                                                color=\"primary\" \n                                            />\n                                        }\n                                        label={obj.flag}\n                                        labelPlacement=\"end\"\n                                        style={{\n                                          whiteSpace: \"nowrap\",\n                                        }}\n                                    />\n                                </Tooltip>\n                            </Grid>\n                        ))}\n                    </Grid>\n                </FormGroup>\n            </FormControl>\n        </Typography>\n        <Divider style={{marginTop: 20,}}/>\n      </CardContent>\n      <CardActions>\n        <Button size=\"small\">Clear</Button>\n        <Button size=\"small\">Save</Button>\n      </CardActions>\n    </Card>\n  );\n}\n","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Vulnerability/Others.tsx",["316","317"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Discovery/SMTP.tsx",["318","319"],"import React from 'react';\nimport { createStyles, Theme, withStyles, WithStyles, makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ExtensionIcon from '@material-ui/icons/ExtensionOutlined';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Grid from '@material-ui/core/Grid';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox, { CheckboxProps } from '@material-ui/core/Checkbox';\n\nimport Typography from '@material-ui/core/Typography';\nimport Separator from '@material-ui/icons/ArrowRightOutlined';\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\n\n// NSE Options\nimport NSEoption from './json/SMTP.json'\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      margin: 0,\n      padding: theme.spacing(2),\n    },\n    closeButton: {\n      position: 'absolute',\n      right: theme.spacing(1),\n      top: theme.spacing(1),\n      color: theme.palette.grey[500],\n    },\n  });\n\nexport interface DialogTitleProps extends WithStyles<typeof styles> {\n  id: string;\n  children: React.ReactNode;\n  onClose: () => void;\n}\n\nconst DialogTitle = withStyles(styles)((props: DialogTitleProps) => {\n  const { children, classes, onClose, ...other } = props;\n  return (\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\n      <Typography variant=\"h6\">{children}</Typography>\n      {onClose ? (\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n    </MuiDialogTitle>\n  );\n});\n\nconst DialogContent = withStyles((theme: Theme) => ({\n  root: {\n    padding: theme.spacing(2),\n  },\n}))(MuiDialogContent);\n\nconst DialogActions = withStyles((theme: Theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(1),\n  },\n}))(MuiDialogActions);\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    nested: {\n      paddingLeft: theme.spacing(4),\n    },\n  }),\n);\n\nfunction handleClick(event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) {\n    event.preventDefault();\n    console.info('You clicked a breadcrumb.');\n  }\n  \n  function Breadcrumb() {\n    return (\n      <Breadcrumbs separator={<Separator />} >\n        <Typography color=\"textPrimary\">NSE</Typography>\n        <Typography color=\"textPrimary\">Discovery</Typography>\n        <Typography color=\"primary\" style={{fontWeight: \"bold\"}}>SMTP</Typography>\n      </Breadcrumbs>\n    );\n  }\n\nexport default function CustomizedDialogs() {\n  const [open, setOpen] = React.useState(false);\n  const classes = useStyles();\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div>\n      <ListItem button className={classes.nested} onClick={handleClickOpen}>\n        <ListItemIcon>\n            <ExtensionIcon />\n        </ListItemIcon>\n        <ListItemText>SMTP</ListItemText>\n    </ListItem>\n      <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n          <Breadcrumb />\n        </DialogTitle>\n        <DialogContent dividers>\n          <Grid container justify=\"center\" spacing={3}>\n              {NSEoption.map((option) => (\n                <Grid item xs={6}>\n                    <Tooltip arrow placement=\"top\" title={option.des}>\n                        <FormControlLabel\n                            value={option.id}\n                            control={<Checkbox color=\"primary\" />}\n                            label={option.id}\n                            labelPlacement=\"end\"\n                        />\n                    </Tooltip>\n                </Grid>\n              ))}\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button autoFocus onClick={handleClose} color=\"primary\">\n            Save changes\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Discovery/Database.tsx",["320","321"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Views/CustomisedScanMode.tsx",[],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/Drawer.tsx",["322","323"],"import React, { Suspense } from 'react';\nimport { Switch, Route, Link, BrowserRouter } from \"react-router-dom\";\nimport clsx from 'clsx';\nimport { createStyles, Theme, makeStyles } from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport Button from '@material-ui/core/Button';\nimport List from '@material-ui/core/List';\nimport Divider from '@material-ui/core/Divider';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\nimport MailIcon from '@material-ui/icons/Mail';\nimport MenuIcon from '@material-ui/icons/Menu';\n\nimport HomeIcon from '@material-ui/icons/Home';\nimport DefaultScanModeIcon from '@material-ui/icons/GpsNotFixed';\nimport CustomisedScanModeIcon from '@material-ui/icons/People';\nimport ScanResultIcon from '@material-ui/icons/Storage';\nimport ResultComparisonIcon from '@material-ui/icons/CompareArrows';\nimport ScanHistoryIcon from '@material-ui/icons/History';\n\n// Components\nimport Home from '../Views/Home'\nimport DefaultScanMode from '../Views/DefaultScanMode'\nimport CustomisedScanMode from '../Views/CustomisedScanMode'\nimport ScanResult from '../Views/ScanResult'\nimport ScanComparison from '../Views/ScanComparison'\nimport ScanHistory from '../Views/ScanHistory'\n\n// Default Scan Modes\nimport PingScanMode from '../Components/defaultScanModes/pingScanMode'\nimport FullPortsScanMode from '../Components/defaultScanModes/fullPortsScanMode'\nimport InenseScanMode from '../Components/defaultScanModes/intenseScanMode'\nimport NonPingScanMode from '../Components/defaultScanModes/nonPingScanMode'\nimport LightningScanMode from '../Components/defaultScanModes/lightningScanMode'\nimport Top100PortsScanMode from '../Components/defaultScanModes/top100portsScanMode'\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        list: {\n            width: 250,\n            },\n            fullList: {\n            width: 'auto',\n            },\n            content: {\n            flexGrow: 1,\n            padding: theme.spacing(3),\n            marginTop: 65,\n        },\n        root: {\n            display: 'flex',\n          },\n          appBar: {\n            zIndex: theme.zIndex.drawer + 1,\n            backgroundColor: \"#333333\",\n          },\n          drawer: {\n            width: drawerWidth,\n            flexShrink: 0,\n          },\n          drawerPaper: {\n            width: drawerWidth,\n          },\n          drawerContainer: {\n            overflow: 'auto',\n          },\n        itemIcon: {\n          color: \"#0E397C\",\n        }\n    }),\n);\n\n\ntype Anchor = 'left';\n\nexport default function TemporaryDrawer() {\n  const classes = useStyles();\n  const [state, setState] = React.useState({\n    top: false,\n    left: false,\n    bottom: false,\n    right: false,\n  });\n\n  const toggleDrawer = (anchor: Anchor, open: boolean) => (\n    event: React.KeyboardEvent | React.MouseEvent,\n  ) => {\n    if (\n      event.type === 'keydown' &&\n      ((event as React.KeyboardEvent).key === 'Tab' ||\n        (event as React.KeyboardEvent).key === 'Shift')\n    ) {\n      return;\n    }\n\n    setState({ ...state, [anchor]: open });\n  };\n\n  const list = (anchor: Anchor) => (\n    <div\n      className={clsx(classes.list, {\n        [classes.fullList]: anchor === 'left'\n      })}\n      role=\"presentation\"\n      onClick={toggleDrawer(anchor, false)}\n      onKeyDown={toggleDrawer(anchor, false)}\n    > \n      <List id=\"menuList\">\n        <Typography variant=\"h4\" id=\"menuAppTitle\">ChiNmap</Typography>\n            \n            <br /><Divider />\n\n        <Link to='/'>\n            <ListItem button key=\"home\">\n                <ListItemIcon><InboxIcon className={classes.itemIcon}/></ListItemIcon>\n                <ListItemText primary=\"Home\" />\n            </ListItem>\n        </Link>\n\n        <Link to='/defaultScanMode'>\n            <ListItem button key=\"defaultScanMode\">\n                <ListItemIcon><DefaultScanModeIcon className={classes.itemIcon}/></ListItemIcon>\n                <ListItemText primary=\"Default Scan Modes\" />\n            </ListItem>\n        </Link>\n        \n        <Link to='/customisedScanMode'>\n            <ListItem button key=\"customisedScanMode\">\n                <ListItemIcon><CustomisedScanModeIcon className={classes.itemIcon}/></ListItemIcon>\n                <ListItemText primary=\"Customised Scan Modes\" />\n            </ListItem>\n        </Link>\n\n        <Link to='/scanResult'>\n            <ListItem button key=\"scanResult\">\n                <ListItemIcon><ScanResultIcon className={classes.itemIcon}/></ListItemIcon>\n                <ListItemText primary=\"Scan Result\" />\n            </ListItem>\n        </Link>\n\n        <Link to='/scanComparison'>\n             <ListItem button key=\"scanComparison\">\n                <ListItemIcon><ResultComparisonIcon className={classes.itemIcon}/></ListItemIcon>\n                <ListItemText primary=\"Scan Comparison\" />\n            </ListItem>\n        </Link>\n\n        <Link to='/scanHistory'>\n            <ListItem button key=\"scanHistory\">\n                <ListItemIcon><ScanHistoryIcon className={classes.itemIcon}/></ListItemIcon>\n                <ListItemText primary=\"Scan History\" />\n            </ListItem>\n        </Link>\n        \n      </List>\n    </div>\n  );\n\n  return (\n    <div>\n      {(['left'] as Anchor[]).map((anchor) => (\n        <React.Fragment key={anchor}>\n            <AppBar position=\"fixed\" className={classes.appBar}>\n                <Toolbar>\n                    <Button onClick={toggleDrawer(anchor, true)} id=\"menuBtn\">\n                        <MenuIcon style={{fontSize: 35}}/>\n                    </Button>\n                </Toolbar>\n            </AppBar>\n        <BrowserRouter>\n            <Drawer anchor={anchor} open={state[anchor]} onClose={toggleDrawer(anchor, false)}>\n                {list(anchor)}\n            </Drawer>\n            <main className={classes.content}>\n                <Suspense fallback={<div>Loading...</div>}>\n                    <Switch>\n                        <Route \n                            exact \n                            path=\"/\" \n                            render={ \n                                () => <Home /> \n                            } \n                        />\n\n                        <Route \n                            exact \n                            path=\"/defaultScanMode\" \n                            render={ \n                                () => <DefaultScanMode /> \n                            } \n                        />\n                        \n                        <Route \n                            path=\"/customisedScanMode\" \n                            render={ \n                                () => <CustomisedScanMode />\n                            } \n                        />\n\n                        <Route \n                            path=\"/scanResult\" \n                            render={ \n                                () => <ScanResult />\n                            } \n                        />\n                        <Route \n                            path=\"/scanComparison\" \n                            render={ \n                                () => <ScanComparison />\n                            } \n                        />\n\n                        <Route \n                            path=\"/scanHistory\" \n                            render={ \n                                () => <ScanHistory />\n                            } \n                        />\n\n                        {/* Default Scan Mode Routes */ }\n                        <Route \n                            path=\"/pingScanMode\" \n                            render={ \n                                () => <PingScanMode />\n                            } \n                        />\n\n                        <Route \n                            path=\"/fullPortsScanMode\" \n                            render={ \n                                () => <FullPortsScanMode />\n                            } \n                        />\n\n                        <Route \n                            path=\"/intenseScanMode\" \n                            render={ \n                                () => <InenseScanMode />\n                            } \n                        />\n\n                        <Route \n                            path=\"/nonPingScanMode\" \n                            render={ \n                                () => <NonPingScanMode />\n                            } \n                        />\n\n                        <Route \n                            path=\"/lightningScanMode\" \n                            render={ \n                                () => <LightningScanMode />\n                            } \n                        />\n\n                        <Route \n                            path=\"/top100PortsScanMode\" \n                            render={ \n                                () => <Top100PortsScanMode />\n                            } \n                        />\n                        {/* Customised Scan Mode Routes */ }\n                        \n                    </Switch>\n                </Suspense>\n            </main>\n        </BrowserRouter>\n        </React.Fragment>\n      ))}\n    </div>\n  );\n}\n",["324","325"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Vulnerability/SSL.tsx",["326","327"],"import React from 'react';\nimport { createStyles, Theme, withStyles, WithStyles, makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ExtensionIcon from '@material-ui/icons/ExtensionOutlined';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Grid from '@material-ui/core/Grid';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox, { CheckboxProps } from '@material-ui/core/Checkbox';\n\nimport Typography from '@material-ui/core/Typography';\nimport Separator from '@material-ui/icons/ArrowRightOutlined';\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\n\n// NSE Options\nimport NSEoption from './json/SSL.json'\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      margin: 0,\n      padding: theme.spacing(2),\n    },\n    closeButton: {\n      position: 'absolute',\n      right: theme.spacing(1),\n      top: theme.spacing(1),\n      color: theme.palette.grey[500],\n    },\n  });\n\nexport interface DialogTitleProps extends WithStyles<typeof styles> {\n  id: string;\n  children: React.ReactNode;\n  onClose: () => void;\n}\n\nconst DialogTitle = withStyles(styles)((props: DialogTitleProps) => {\n  const { children, classes, onClose, ...other } = props;\n  return (\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\n      <Typography variant=\"h6\">{children}</Typography>\n      {onClose ? (\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n    </MuiDialogTitle>\n  );\n});\n\nconst DialogContent = withStyles((theme: Theme) => ({\n  root: {\n    padding: theme.spacing(2),\n  },\n}))(MuiDialogContent);\n\nconst DialogActions = withStyles((theme: Theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(1),\n  },\n}))(MuiDialogActions);\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    nested: {\n      paddingLeft: theme.spacing(4),\n    },\n  }),\n);\n\nfunction handleClick(event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) {\n    event.preventDefault();\n    console.info('You clicked a breadcrumb.');\n  }\n  \n  function Breadcrumb() {\n    return (\n      <Breadcrumbs separator={<Separator />} >\n        <Typography color=\"textPrimary\">NSE</Typography>\n        <Typography color=\"textPrimary\">Vulnerability</Typography>\n        <Typography color=\"primary\" style={{fontWeight: \"bold\"}}>SSL</Typography>\n      </Breadcrumbs>\n    );\n  }\n\nexport default function CustomizedDialogs() {\n  const [open, setOpen] = React.useState(false);\n  const classes = useStyles();\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div>\n      <ListItem button className={classes.nested} onClick={handleClickOpen}>\n        <ListItemIcon>\n            <ExtensionIcon />\n        </ListItemIcon>\n        <ListItemText>SSL</ListItemText>\n    </ListItem>\n      <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n          <Breadcrumb />\n        </DialogTitle>\n        <DialogContent dividers>\n          <Grid container justify=\"center\" spacing={3}>\n              {NSEoption.map((option) => (\n                <Grid item xs={6}>\n                    <Tooltip arrow placement=\"top\" title={option.des}>\n                        <FormControlLabel\n                            value={option.id}\n                            control={<Checkbox color=\"primary\" />}\n                            label={option.id}\n                            labelPlacement=\"end\"\n                        />\n                    </Tooltip>\n                </Grid>\n              ))}\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button autoFocus onClick={handleClose} color=\"primary\">\n            Save changes\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Discovery/Broadcast.tsx",["328","329"],"import React from 'react';\nimport { createStyles, Theme, withStyles, WithStyles, makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ExtensionIcon from '@material-ui/icons/ExtensionOutlined';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Grid from '@material-ui/core/Grid';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox, { CheckboxProps } from '@material-ui/core/Checkbox';\n\nimport Typography from '@material-ui/core/Typography';\nimport Separator from '@material-ui/icons/ArrowRightOutlined';\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\n\n// NSE Options\nimport NSEoption from './json/Broadcast.json'\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      margin: 0,\n      padding: theme.spacing(2),\n    },\n    closeButton: {\n      position: 'absolute',\n      right: theme.spacing(1),\n      top: theme.spacing(1),\n      color: theme.palette.grey[500],\n    },\n  });\n\nexport interface DialogTitleProps extends WithStyles<typeof styles> {\n  id: string;\n  children: React.ReactNode;\n  onClose: () => void;\n}\n\nconst DialogTitle = withStyles(styles)((props: DialogTitleProps) => {\n  const { children, classes, onClose, ...other } = props;\n  return (\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\n      <Typography variant=\"h6\">{children}</Typography>\n      {onClose ? (\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n    </MuiDialogTitle>\n  );\n});\n\nconst DialogContent = withStyles((theme: Theme) => ({\n  root: {\n    padding: theme.spacing(2),\n  },\n}))(MuiDialogContent);\n\nconst DialogActions = withStyles((theme: Theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(1),\n  },\n}))(MuiDialogActions);\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    nested: {\n      paddingLeft: theme.spacing(4),\n    },\n  }),\n);\n\nfunction handleClick(event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) {\n    event.preventDefault();\n    console.info('You clicked a breadcrumb.');\n  }\n  \n  function Breadcrumb() {\n    return (\n      <Breadcrumbs separator={<Separator />} >\n        <Typography color=\"textPrimary\">NSE</Typography>\n        <Typography color=\"textPrimary\">Discovery</Typography>\n        <Typography color=\"primary\" style={{fontWeight: \"bold\"}}>Broadcast</Typography>\n      </Breadcrumbs>\n    );\n  }\n\nexport default function CustomizedDialogs() {\n  const [open, setOpen] = React.useState(false);\n  const classes = useStyles();\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div>\n      <ListItem button className={classes.nested} onClick={handleClickOpen}>\n        <ListItemIcon>\n            <ExtensionIcon />\n        </ListItemIcon>\n        <ListItemText>Broadcast</ListItemText>\n    </ListItem>\n      <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n          <Breadcrumb />\n        </DialogTitle>\n        <DialogContent dividers>\n          <Grid container justify=\"center\" spacing={3}>\n              {NSEoption.map((option) => (\n                <Grid item xs={6}>\n                    <Tooltip arrow placement=\"top\" title={option.des}>\n                        <FormControlLabel\n                            value={option.id}\n                            control={<Checkbox color=\"primary\" />}\n                            label={option.id}\n                            labelPlacement=\"end\"\n                        />\n                    </Tooltip>\n                </Grid>\n              ))}\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button autoFocus onClick={handleClose} color=\"primary\">\n            Save changes\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/HomeSettings/HomeSettings.tsx",["330","331","332","333","334","335","336","337","338","339"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Exploit/Others.tsx",["340","341"],"import React from 'react';\nimport { createStyles, Theme, withStyles, WithStyles, makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ExtensionIcon from '@material-ui/icons/ExtensionOutlined';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Grid from '@material-ui/core/Grid';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox, { CheckboxProps } from '@material-ui/core/Checkbox';\n\nimport Typography from '@material-ui/core/Typography';\nimport Separator from '@material-ui/icons/ArrowRightOutlined';\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\n\n// NSE Options\nimport NSEoption from './json/Others.json'\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      margin: 0,\n      padding: theme.spacing(2),\n    },\n    closeButton: {\n      position: 'absolute',\n      right: theme.spacing(1),\n      top: theme.spacing(1),\n      color: theme.palette.grey[500],\n    },\n  });\n\nexport interface DialogTitleProps extends WithStyles<typeof styles> {\n  id: string;\n  children: React.ReactNode;\n  onClose: () => void;\n}\n\nconst DialogTitle = withStyles(styles)((props: DialogTitleProps) => {\n  const { children, classes, onClose, ...other } = props;\n  return (\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\n      <Typography variant=\"h6\">{children}</Typography>\n      {onClose ? (\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n    </MuiDialogTitle>\n  );\n});\n\nconst DialogContent = withStyles((theme: Theme) => ({\n  root: {\n    padding: theme.spacing(2),\n  },\n}))(MuiDialogContent);\n\nconst DialogActions = withStyles((theme: Theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(1),\n  },\n}))(MuiDialogActions);\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    nested: {\n      paddingLeft: theme.spacing(4),\n    },\n  }),\n);\n\nfunction handleClick(event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) {\n    event.preventDefault();\n    console.info('You clicked a breadcrumb.');\n  }\n  \n  function Breadcrumb() {\n    return (\n      <Breadcrumbs separator={<Separator />} >\n        <Typography color=\"textPrimary\">NSE</Typography>\n        <Typography color=\"textPrimary\">Exploit</Typography>\n        <Typography color=\"primary\" style={{fontWeight: \"bold\"}}>Others</Typography>\n      </Breadcrumbs>\n    );\n  }\n\nexport default function CustomizedDialogs() {\n  const [open, setOpen] = React.useState(false);\n  const classes = useStyles();\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div>\n      <ListItem button className={classes.nested} onClick={handleClickOpen}>\n        <ListItemIcon>\n            <ExtensionIcon />\n        </ListItemIcon>\n        <ListItemText>Others</ListItemText>\n    </ListItem>\n      <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n          <Breadcrumb />\n        </DialogTitle>\n        <DialogContent dividers>\n          <Grid container justify=\"center\" spacing={3}>\n              {NSEoption.map((option) => (\n                <Grid item xs={6}>\n                    <Tooltip arrow placement=\"top\" title={option.des}>\n                        <FormControlLabel\n                            value={option.id}\n                            control={<Checkbox color=\"primary\" />}\n                            label={option.id}\n                            labelPlacement=\"end\"\n                        />\n                    </Tooltip>\n                </Grid>\n              ))}\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button autoFocus onClick={handleClose} color=\"primary\">\n            Save changes\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Discovery/HTTP.tsx",["342","343"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/reportWebVitals.ts",[],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/HomeSettings/homeSettingsData.tsx",[],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/nonTCPoptions.tsx",[],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Vulnerability/SMB.tsx",["344","345"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Vulnerability/HTTP.tsx",["346","347"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Discovery/Targets.tsx",["348","349"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Views/ScanComparison.tsx",[],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/defaultScanModes/pingScanMode.tsx",["350","351","352","353","354"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/defaultScanModes/nonPingScanMode.tsx",["355","356","357","358","359"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/defaultScanModes/top100portsScanMode.tsx",["360","361","362","363","364","365","366"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/CustomisedScanMode.tsx",["367","368","369","370","371","372","373","374"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Mobx/Models/resultSelectStatus.tsx",[],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/HomeSettings/TimingAndPerformance.tsx",[],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/Timing.tsx",["375","376"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Discovery/Server.tsx",["377","378"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Discovery/Hadoop.tsx",["379","380"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NmapOutput.tsx",["381","382","383","384","385","386","387","388","389","390","391","392","393","394","395","396","397","398","399","400","401","402","403","404","405","406","407","408","409","410","411","412","413","414","415"],{"ruleId":"416","severity":1,"message":"417","line":3,"column":10,"nodeType":"418","messageId":"419","endLine":3,"endColumn":16},{"ruleId":"416","severity":1,"message":"420","line":3,"column":18,"nodeType":"418","messageId":"419","endLine":3,"endColumn":23},{"ruleId":"416","severity":1,"message":"421","line":3,"column":31,"nodeType":"418","messageId":"419","endLine":3,"endColumn":44},{"ruleId":"416","severity":1,"message":"422","line":18,"column":8,"nodeType":"418","messageId":"419","endLine":18,"endColumn":16},{"ruleId":"416","severity":1,"message":"423","line":18,"column":20,"nodeType":"418","messageId":"419","endLine":18,"endColumn":30},{"ruleId":"416","severity":1,"message":"424","line":19,"column":8,"nodeType":"418","messageId":"419","endLine":19,"endColumn":14},{"ruleId":"416","severity":1,"message":"425","line":23,"column":10,"nodeType":"418","messageId":"419","endLine":23,"endColumn":20},{"ruleId":"416","severity":1,"message":"426","line":23,"column":22,"nodeType":"418","messageId":"419","endLine":23,"endColumn":32},{"ruleId":"416","severity":1,"message":"427","line":23,"column":34,"nodeType":"418","messageId":"419","endLine":23,"endColumn":44},{"ruleId":"416","severity":1,"message":"428","line":54,"column":10,"nodeType":"418","messageId":"419","endLine":54,"endColumn":22},{"ruleId":"416","severity":1,"message":"429","line":57,"column":11,"nodeType":"418","messageId":"419","endLine":57,"endColumn":22},{"ruleId":"430","severity":1,"message":"431","line":135,"column":47,"nodeType":"432","messageId":"433","endLine":135,"endColumn":49},{"ruleId":"416","severity":1,"message":"417","line":3,"column":10,"nodeType":"418","messageId":"419","endLine":3,"endColumn":16},{"ruleId":"416","severity":1,"message":"420","line":3,"column":18,"nodeType":"418","messageId":"419","endLine":3,"endColumn":23},{"ruleId":"416","severity":1,"message":"434","line":3,"column":25,"nodeType":"418","messageId":"419","endLine":3,"endColumn":29},{"ruleId":"416","severity":1,"message":"421","line":3,"column":31,"nodeType":"418","messageId":"419","endLine":3,"endColumn":44},{"ruleId":"416","severity":1,"message":"435","line":7,"column":8,"nodeType":"418","messageId":"419","endLine":7,"endColumn":17},{"ruleId":"416","severity":1,"message":"436","line":14,"column":8,"nodeType":"418","messageId":"419","endLine":14,"endColumn":19},{"ruleId":"416","severity":1,"message":"437","line":21,"column":8,"nodeType":"418","messageId":"419","endLine":21,"endColumn":12},{"ruleId":"416","severity":1,"message":"425","line":26,"column":10,"nodeType":"418","messageId":"419","endLine":26,"endColumn":20},{"ruleId":"416","severity":1,"message":"426","line":26,"column":22,"nodeType":"418","messageId":"419","endLine":26,"endColumn":32},{"ruleId":"416","severity":1,"message":"427","line":26,"column":34,"nodeType":"418","messageId":"419","endLine":26,"endColumn":44},{"ruleId":"416","severity":1,"message":"438","line":30,"column":10,"nodeType":"418","messageId":"419","endLine":30,"endColumn":20},{"ruleId":"416","severity":1,"message":"439","line":32,"column":10,"nodeType":"418","messageId":"419","endLine":32,"endColumn":14},{"ruleId":"430","severity":1,"message":"431","line":121,"column":21,"nodeType":"432","messageId":"433","endLine":121,"endColumn":23},{"ruleId":"430","severity":1,"message":"431","line":207,"column":60,"nodeType":"432","messageId":"433","endLine":207,"endColumn":62},{"ruleId":"430","severity":1,"message":"431","line":241,"column":60,"nodeType":"432","messageId":"433","endLine":241,"endColumn":62},{"ruleId":"430","severity":1,"message":"431","line":272,"column":46,"nodeType":"432","messageId":"433","endLine":272,"endColumn":48},{"ruleId":"430","severity":1,"message":"431","line":272,"column":68,"nodeType":"432","messageId":"433","endLine":272,"endColumn":70},{"ruleId":"440","replacedBy":"441"},{"ruleId":"442","replacedBy":"443"},{"ruleId":"440","replacedBy":"444"},{"ruleId":"442","replacedBy":"445"},{"ruleId":"440","replacedBy":"446"},{"ruleId":"442","replacedBy":"447"},{"ruleId":"416","severity":1,"message":"448","line":1,"column":10,"nodeType":"418","messageId":"419","endLine":1,"endColumn":20},{"ruleId":"416","severity":1,"message":"449","line":1,"column":22,"nodeType":"418","messageId":"419","endLine":1,"endColumn":34},{"ruleId":"416","severity":1,"message":"450","line":37,"column":9,"nodeType":"418","messageId":"419","endLine":37,"endColumn":13},{"ruleId":"416","severity":1,"message":"451","line":17,"column":20,"nodeType":"418","messageId":"419","endLine":17,"endColumn":33},{"ruleId":"416","severity":1,"message":"452","line":81,"column":10,"nodeType":"418","messageId":"419","endLine":81,"endColumn":21},{"ruleId":"416","severity":1,"message":"451","line":17,"column":20,"nodeType":"418","messageId":"419","endLine":17,"endColumn":33},{"ruleId":"416","severity":1,"message":"452","line":81,"column":10,"nodeType":"418","messageId":"419","endLine":81,"endColumn":21},{"ruleId":"416","severity":1,"message":"450","line":38,"column":9,"nodeType":"418","messageId":"419","endLine":38,"endColumn":13},{"ruleId":"416","severity":1,"message":"453","line":44,"column":9,"nodeType":"418","messageId":"419","endLine":44,"endColumn":21},{"ruleId":"440","replacedBy":"454"},{"ruleId":"442","replacedBy":"455"},{"ruleId":"416","severity":1,"message":"456","line":2,"column":43,"nodeType":"418","messageId":"419","endLine":2,"endColumn":50},{"ruleId":"416","severity":1,"message":"417","line":3,"column":10,"nodeType":"418","messageId":"419","endLine":3,"endColumn":16},{"ruleId":"416","severity":1,"message":"420","line":3,"column":18,"nodeType":"418","messageId":"419","endLine":3,"endColumn":23},{"ruleId":"416","severity":1,"message":"434","line":3,"column":25,"nodeType":"418","messageId":"419","endLine":3,"endColumn":29},{"ruleId":"416","severity":1,"message":"421","line":3,"column":31,"nodeType":"418","messageId":"419","endLine":3,"endColumn":44},{"ruleId":"416","severity":1,"message":"457","line":20,"column":8,"nodeType":"418","messageId":"419","endLine":20,"endColumn":14},{"ruleId":"416","severity":1,"message":"458","line":21,"column":8,"nodeType":"418","messageId":"419","endLine":21,"endColumn":21},{"ruleId":"416","severity":1,"message":"459","line":22,"column":8,"nodeType":"418","messageId":"419","endLine":22,"endColumn":21},{"ruleId":"416","severity":1,"message":"460","line":23,"column":8,"nodeType":"418","messageId":"419","endLine":23,"endColumn":25},{"ruleId":"416","severity":1,"message":"461","line":24,"column":8,"nodeType":"418","messageId":"419","endLine":24,"endColumn":19},{"ruleId":"416","severity":1,"message":"462","line":25,"column":8,"nodeType":"418","messageId":"419","endLine":25,"endColumn":16},{"ruleId":"416","severity":1,"message":"463","line":29,"column":8,"nodeType":"418","messageId":"419","endLine":29,"endColumn":21},{"ruleId":"416","severity":1,"message":"464","line":30,"column":8,"nodeType":"418","messageId":"419","endLine":30,"endColumn":15},{"ruleId":"416","severity":1,"message":"465","line":31,"column":10,"nodeType":"418","messageId":"419","endLine":31,"endColumn":14},{"ruleId":"416","severity":1,"message":"466","line":31,"column":16,"nodeType":"418","messageId":"419","endLine":31,"endColumn":20},{"ruleId":"416","severity":1,"message":"467","line":31,"column":22,"nodeType":"418","messageId":"419","endLine":31,"endColumn":26},{"ruleId":"416","severity":1,"message":"468","line":31,"column":28,"nodeType":"418","messageId":"419","endLine":31,"endColumn":36},{"ruleId":"416","severity":1,"message":"469","line":31,"column":38,"nodeType":"418","messageId":"419","endLine":31,"endColumn":48},{"ruleId":"416","severity":1,"message":"470","line":33,"column":8,"nodeType":"418","messageId":"419","endLine":33,"endColumn":12},{"ruleId":"416","severity":1,"message":"471","line":40,"column":8,"nodeType":"418","messageId":"419","endLine":40,"endColumn":22},{"ruleId":"416","severity":1,"message":"472","line":41,"column":8,"nodeType":"418","messageId":"419","endLine":41,"endColumn":15},{"ruleId":"416","severity":1,"message":"473","line":42,"column":8,"nodeType":"418","messageId":"419","endLine":42,"endColumn":16},{"ruleId":"416","severity":1,"message":"474","line":43,"column":8,"nodeType":"418","messageId":"419","endLine":43,"endColumn":18},{"ruleId":"416","severity":1,"message":"475","line":44,"column":8,"nodeType":"418","messageId":"419","endLine":44,"endColumn":24},{"ruleId":"416","severity":1,"message":"476","line":45,"column":8,"nodeType":"418","messageId":"419","endLine":45,"endColumn":18},{"ruleId":"416","severity":1,"message":"477","line":46,"column":8,"nodeType":"418","messageId":"419","endLine":46,"endColumn":16},{"ruleId":"416","severity":1,"message":"478","line":49,"column":22,"nodeType":"418","messageId":"419","endLine":49,"endColumn":32},{"ruleId":"416","severity":1,"message":"425","line":49,"column":34,"nodeType":"418","messageId":"419","endLine":49,"endColumn":44},{"ruleId":"416","severity":1,"message":"438","line":56,"column":10,"nodeType":"418","messageId":"419","endLine":56,"endColumn":20},{"ruleId":"479","severity":1,"message":"480","line":144,"column":1,"nodeType":"481","endLine":864,"endColumn":2},{"ruleId":"416","severity":1,"message":"482","line":159,"column":9,"nodeType":"418","messageId":"419","endLine":159,"endColumn":22},{"ruleId":"416","severity":1,"message":"483","line":165,"column":10,"nodeType":"418","messageId":"419","endLine":165,"endColumn":17},{"ruleId":"416","severity":1,"message":"484","line":167,"column":9,"nodeType":"418","messageId":"419","endLine":167,"endColumn":20},{"ruleId":"416","severity":1,"message":"485","line":171,"column":9,"nodeType":"418","messageId":"419","endLine":171,"endColumn":21},{"ruleId":"416","severity":1,"message":"486","line":175,"column":12,"nodeType":"418","messageId":"419","endLine":175,"endColumn":23},{"ruleId":"430","severity":1,"message":"431","line":198,"column":30,"nodeType":"432","messageId":"433","endLine":198,"endColumn":32},{"ruleId":"430","severity":1,"message":"431","line":210,"column":49,"nodeType":"432","messageId":"433","endLine":210,"endColumn":51},{"ruleId":"430","severity":1,"message":"431","line":214,"column":42,"nodeType":"432","messageId":"433","endLine":214,"endColumn":44},{"ruleId":"416","severity":1,"message":"429","line":236,"column":11,"nodeType":"418","messageId":"419","endLine":236,"endColumn":22},{"ruleId":"430","severity":1,"message":"487","line":243,"column":21,"nodeType":"432","messageId":"433","endLine":243,"endColumn":23},{"ruleId":"430","severity":1,"message":"431","line":298,"column":47,"nodeType":"432","messageId":"433","endLine":298,"endColumn":49},{"ruleId":"430","severity":1,"message":"431","line":351,"column":46,"nodeType":"432","messageId":"433","endLine":351,"endColumn":48},{"ruleId":"430","severity":1,"message":"431","line":369,"column":50,"nodeType":"432","messageId":"433","endLine":369,"endColumn":52},{"ruleId":"430","severity":1,"message":"431","line":385,"column":52,"nodeType":"432","messageId":"433","endLine":385,"endColumn":54},{"ruleId":"430","severity":1,"message":"431","line":424,"column":41,"nodeType":"432","messageId":"433","endLine":424,"endColumn":43},{"ruleId":"430","severity":1,"message":"431","line":442,"column":42,"nodeType":"432","messageId":"433","endLine":442,"endColumn":44},{"ruleId":"430","severity":1,"message":"431","line":463,"column":54,"nodeType":"432","messageId":"433","endLine":463,"endColumn":56},{"ruleId":"430","severity":1,"message":"431","line":480,"column":49,"nodeType":"432","messageId":"433","endLine":480,"endColumn":51},{"ruleId":"430","severity":1,"message":"431","line":498,"column":46,"nodeType":"432","messageId":"433","endLine":498,"endColumn":48},{"ruleId":"430","severity":1,"message":"431","line":517,"column":45,"nodeType":"432","messageId":"433","endLine":517,"endColumn":47},{"ruleId":"430","severity":1,"message":"431","line":532,"column":48,"nodeType":"432","messageId":"433","endLine":532,"endColumn":50},{"ruleId":"430","severity":1,"message":"431","line":547,"column":43,"nodeType":"432","messageId":"433","endLine":547,"endColumn":45},{"ruleId":"430","severity":1,"message":"431","line":568,"column":45,"nodeType":"432","messageId":"433","endLine":568,"endColumn":47},{"ruleId":"430","severity":1,"message":"431","line":582,"column":50,"nodeType":"432","messageId":"433","endLine":582,"endColumn":52},{"ruleId":"430","severity":1,"message":"431","line":596,"column":49,"nodeType":"432","messageId":"433","endLine":596,"endColumn":51},{"ruleId":"430","severity":1,"message":"431","line":611,"column":46,"nodeType":"432","messageId":"433","endLine":611,"endColumn":48},{"ruleId":"416","severity":1,"message":"488","line":629,"column":11,"nodeType":"418","messageId":"419","endLine":629,"endColumn":16},{"ruleId":"430","severity":1,"message":"487","line":640,"column":22,"nodeType":"432","messageId":"433","endLine":640,"endColumn":24},{"ruleId":"416","severity":1,"message":"489","line":2,"column":8,"nodeType":"418","messageId":"419","endLine":2,"endColumn":12},{"ruleId":"416","severity":1,"message":"460","line":7,"column":8,"nodeType":"418","messageId":"419","endLine":7,"endColumn":25},{"ruleId":"416","severity":1,"message":"490","line":136,"column":10,"nodeType":"418","messageId":"419","endLine":136,"endColumn":18},{"ruleId":"416","severity":1,"message":"491","line":136,"column":20,"nodeType":"418","messageId":"419","endLine":136,"endColumn":31},{"ruleId":"430","severity":1,"message":"431","line":141,"column":18,"nodeType":"432","messageId":"433","endLine":141,"endColumn":20},{"ruleId":"430","severity":1,"message":"431","line":204,"column":57,"nodeType":"432","messageId":"433","endLine":204,"endColumn":59},{"ruleId":"416","severity":1,"message":"492","line":3,"column":8,"nodeType":"418","messageId":"419","endLine":3,"endColumn":17},{"ruleId":"416","severity":1,"message":"493","line":6,"column":8,"nodeType":"418","messageId":"419","endLine":6,"endColumn":17},{"ruleId":"416","severity":1,"message":"494","line":7,"column":8,"nodeType":"418","messageId":"419","endLine":7,"endColumn":15},{"ruleId":"416","severity":1,"message":"450","line":38,"column":9,"nodeType":"418","messageId":"419","endLine":38,"endColumn":13},{"ruleId":"416","severity":1,"message":"453","line":44,"column":9,"nodeType":"418","messageId":"419","endLine":44,"endColumn":21},{"ruleId":"416","severity":1,"message":"451","line":17,"column":20,"nodeType":"418","messageId":"419","endLine":17,"endColumn":33},{"ruleId":"416","severity":1,"message":"452","line":81,"column":10,"nodeType":"418","messageId":"419","endLine":81,"endColumn":21},{"ruleId":"416","severity":1,"message":"451","line":17,"column":20,"nodeType":"418","messageId":"419","endLine":17,"endColumn":33},{"ruleId":"416","severity":1,"message":"452","line":81,"column":10,"nodeType":"418","messageId":"419","endLine":81,"endColumn":21},{"ruleId":"416","severity":1,"message":"451","line":17,"column":20,"nodeType":"418","messageId":"419","endLine":17,"endColumn":33},{"ruleId":"416","severity":1,"message":"452","line":81,"column":10,"nodeType":"418","messageId":"419","endLine":81,"endColumn":21},{"ruleId":"416","severity":1,"message":"495","line":16,"column":8,"nodeType":"418","messageId":"419","endLine":16,"endColumn":16},{"ruleId":"416","severity":1,"message":"496","line":19,"column":8,"nodeType":"418","messageId":"419","endLine":19,"endColumn":16},{"ruleId":"440","replacedBy":"497"},{"ruleId":"442","replacedBy":"498"},{"ruleId":"416","severity":1,"message":"451","line":17,"column":20,"nodeType":"418","messageId":"419","endLine":17,"endColumn":33},{"ruleId":"416","severity":1,"message":"452","line":81,"column":10,"nodeType":"418","messageId":"419","endLine":81,"endColumn":21},{"ruleId":"416","severity":1,"message":"451","line":17,"column":20,"nodeType":"418","messageId":"419","endLine":17,"endColumn":33},{"ruleId":"416","severity":1,"message":"452","line":81,"column":10,"nodeType":"418","messageId":"419","endLine":81,"endColumn":21},{"ruleId":"416","severity":1,"message":"473","line":24,"column":8,"nodeType":"418","messageId":"419","endLine":24,"endColumn":16},{"ruleId":"416","severity":1,"message":"449","line":32,"column":22,"nodeType":"418","messageId":"419","endLine":32,"endColumn":34},{"ruleId":"416","severity":1,"message":"426","line":33,"column":10,"nodeType":"418","messageId":"419","endLine":33,"endColumn":20},{"ruleId":"416","severity":1,"message":"499","line":136,"column":10,"nodeType":"418","messageId":"419","endLine":136,"endColumn":26},{"ruleId":"416","severity":1,"message":"500","line":136,"column":28,"nodeType":"418","messageId":"419","endLine":136,"endColumn":47},{"ruleId":"416","severity":1,"message":"501","line":143,"column":9,"nodeType":"418","messageId":"419","endLine":143,"endColumn":19},{"ruleId":"416","severity":1,"message":"502","line":147,"column":9,"nodeType":"418","messageId":"419","endLine":147,"endColumn":18},{"ruleId":"416","severity":1,"message":"503","line":322,"column":11,"nodeType":"418","messageId":"419","endLine":322,"endColumn":18},{"ruleId":"416","severity":1,"message":"453","line":355,"column":11,"nodeType":"418","messageId":"419","endLine":355,"endColumn":23},{"ruleId":"416","severity":1,"message":"504","line":359,"column":11,"nodeType":"418","messageId":"419","endLine":359,"endColumn":20},{"ruleId":"416","severity":1,"message":"451","line":17,"column":20,"nodeType":"418","messageId":"419","endLine":17,"endColumn":33},{"ruleId":"416","severity":1,"message":"452","line":81,"column":10,"nodeType":"418","messageId":"419","endLine":81,"endColumn":21},{"ruleId":"416","severity":1,"message":"451","line":17,"column":20,"nodeType":"418","messageId":"419","endLine":17,"endColumn":33},{"ruleId":"416","severity":1,"message":"452","line":81,"column":10,"nodeType":"418","messageId":"419","endLine":81,"endColumn":21},{"ruleId":"416","severity":1,"message":"451","line":17,"column":20,"nodeType":"418","messageId":"419","endLine":17,"endColumn":33},{"ruleId":"416","severity":1,"message":"452","line":81,"column":10,"nodeType":"418","messageId":"419","endLine":81,"endColumn":21},{"ruleId":"416","severity":1,"message":"451","line":17,"column":20,"nodeType":"418","messageId":"419","endLine":17,"endColumn":33},{"ruleId":"416","severity":1,"message":"452","line":81,"column":10,"nodeType":"418","messageId":"419","endLine":81,"endColumn":21},{"ruleId":"416","severity":1,"message":"451","line":17,"column":20,"nodeType":"418","messageId":"419","endLine":17,"endColumn":33},{"ruleId":"416","severity":1,"message":"452","line":81,"column":10,"nodeType":"418","messageId":"419","endLine":81,"endColumn":21},{"ruleId":"416","severity":1,"message":"417","line":3,"column":10,"nodeType":"418","messageId":"419","endLine":3,"endColumn":16},{"ruleId":"416","severity":1,"message":"420","line":3,"column":18,"nodeType":"418","messageId":"419","endLine":3,"endColumn":23},{"ruleId":"416","severity":1,"message":"421","line":3,"column":31,"nodeType":"418","messageId":"419","endLine":3,"endColumn":44},{"ruleId":"416","severity":1,"message":"493","line":15,"column":8,"nodeType":"418","messageId":"419","endLine":15,"endColumn":17},{"ruleId":"416","severity":1,"message":"505","line":23,"column":8,"nodeType":"418","messageId":"419","endLine":23,"endColumn":20},{"ruleId":"416","severity":1,"message":"417","line":3,"column":10,"nodeType":"418","messageId":"419","endLine":3,"endColumn":16},{"ruleId":"416","severity":1,"message":"420","line":3,"column":18,"nodeType":"418","messageId":"419","endLine":3,"endColumn":23},{"ruleId":"416","severity":1,"message":"421","line":3,"column":31,"nodeType":"418","messageId":"419","endLine":3,"endColumn":44},{"ruleId":"416","severity":1,"message":"493","line":15,"column":8,"nodeType":"418","messageId":"419","endLine":15,"endColumn":17},{"ruleId":"416","severity":1,"message":"505","line":23,"column":8,"nodeType":"418","messageId":"419","endLine":23,"endColumn":20},{"ruleId":"416","severity":1,"message":"417","line":3,"column":10,"nodeType":"418","messageId":"419","endLine":3,"endColumn":16},{"ruleId":"416","severity":1,"message":"420","line":3,"column":18,"nodeType":"418","messageId":"419","endLine":3,"endColumn":23},{"ruleId":"416","severity":1,"message":"421","line":3,"column":31,"nodeType":"418","messageId":"419","endLine":3,"endColumn":44},{"ruleId":"416","severity":1,"message":"506","line":11,"column":8,"nodeType":"418","messageId":"419","endLine":11,"endColumn":13},{"ruleId":"416","severity":1,"message":"507","line":12,"column":8,"nodeType":"418","messageId":"419","endLine":12,"endColumn":18},{"ruleId":"416","severity":1,"message":"493","line":15,"column":8,"nodeType":"418","messageId":"419","endLine":15,"endColumn":17},{"ruleId":"416","severity":1,"message":"505","line":23,"column":8,"nodeType":"418","messageId":"419","endLine":23,"endColumn":20},{"ruleId":"416","severity":1,"message":"417","line":3,"column":10,"nodeType":"418","messageId":"419","endLine":3,"endColumn":16},{"ruleId":"416","severity":1,"message":"420","line":3,"column":18,"nodeType":"418","messageId":"419","endLine":3,"endColumn":23},{"ruleId":"416","severity":1,"message":"421","line":3,"column":31,"nodeType":"418","messageId":"419","endLine":3,"endColumn":44},{"ruleId":"416","severity":1,"message":"508","line":8,"column":8,"nodeType":"418","messageId":"419","endLine":8,"endColumn":12},{"ruleId":"416","severity":1,"message":"509","line":9,"column":8,"nodeType":"418","messageId":"419","endLine":9,"endColumn":16},{"ruleId":"416","severity":1,"message":"510","line":9,"column":20,"nodeType":"418","messageId":"419","endLine":9,"endColumn":33},{"ruleId":"416","severity":1,"message":"511","line":10,"column":8,"nodeType":"418","messageId":"419","endLine":10,"endColumn":20},{"ruleId":"416","severity":1,"message":"512","line":11,"column":8,"nodeType":"418","messageId":"419","endLine":11,"endColumn":20},{"ruleId":"416","severity":1,"message":"492","line":3,"column":8,"nodeType":"418","messageId":"419","endLine":3,"endColumn":17},{"ruleId":"416","severity":1,"message":"493","line":6,"column":8,"nodeType":"418","messageId":"419","endLine":6,"endColumn":17},{"ruleId":"416","severity":1,"message":"451","line":17,"column":20,"nodeType":"418","messageId":"419","endLine":17,"endColumn":33},{"ruleId":"416","severity":1,"message":"452","line":81,"column":10,"nodeType":"418","messageId":"419","endLine":81,"endColumn":21},{"ruleId":"416","severity":1,"message":"451","line":17,"column":20,"nodeType":"418","messageId":"419","endLine":17,"endColumn":33},{"ruleId":"416","severity":1,"message":"452","line":81,"column":10,"nodeType":"418","messageId":"419","endLine":81,"endColumn":21},{"ruleId":"416","severity":1,"message":"513","line":2,"column":10,"nodeType":"418","messageId":"419","endLine":2,"endColumn":20},{"ruleId":"416","severity":1,"message":"514","line":2,"column":22,"nodeType":"418","messageId":"419","endLine":2,"endColumn":34},{"ruleId":"416","severity":1,"message":"515","line":2,"column":36,"nodeType":"418","messageId":"419","endLine":2,"endColumn":41},{"ruleId":"416","severity":1,"message":"417","line":3,"column":10,"nodeType":"418","messageId":"419","endLine":3,"endColumn":16},{"ruleId":"416","severity":1,"message":"420","line":3,"column":18,"nodeType":"418","messageId":"419","endLine":3,"endColumn":23},{"ruleId":"416","severity":1,"message":"434","line":3,"column":25,"nodeType":"418","messageId":"419","endLine":3,"endColumn":29},{"ruleId":"416","severity":1,"message":"421","line":3,"column":31,"nodeType":"418","messageId":"419","endLine":3,"endColumn":44},{"ruleId":"416","severity":1,"message":"516","line":4,"column":8,"nodeType":"418","messageId":"419","endLine":4,"endColumn":13},{"ruleId":"416","severity":1,"message":"517","line":5,"column":8,"nodeType":"418","messageId":"419","endLine":5,"endColumn":12},{"ruleId":"416","severity":1,"message":"435","line":7,"column":8,"nodeType":"418","messageId":"419","endLine":7,"endColumn":17},{"ruleId":"416","severity":1,"message":"518","line":8,"column":8,"nodeType":"418","messageId":"419","endLine":8,"endColumn":18},{"ruleId":"416","severity":1,"message":"519","line":9,"column":8,"nodeType":"418","messageId":"419","endLine":9,"endColumn":14},{"ruleId":"416","severity":1,"message":"520","line":10,"column":8,"nodeType":"418","messageId":"419","endLine":10,"endColumn":19},{"ruleId":"416","severity":1,"message":"521","line":11,"column":8,"nodeType":"418","messageId":"419","endLine":11,"endColumn":16},{"ruleId":"416","severity":1,"message":"494","line":12,"column":8,"nodeType":"418","messageId":"419","endLine":12,"endColumn":15},{"ruleId":"416","severity":1,"message":"424","line":13,"column":8,"nodeType":"418","messageId":"419","endLine":13,"endColumn":14},{"ruleId":"416","severity":1,"message":"436","line":14,"column":8,"nodeType":"418","messageId":"419","endLine":14,"endColumn":19},{"ruleId":"416","severity":1,"message":"522","line":15,"column":8,"nodeType":"418","messageId":"419","endLine":15,"endColumn":12},{"ruleId":"416","severity":1,"message":"523","line":16,"column":8,"nodeType":"418","messageId":"419","endLine":16,"endColumn":11},{"ruleId":"416","severity":1,"message":"524","line":17,"column":8,"nodeType":"418","messageId":"419","endLine":17,"endColumn":22},{"ruleId":"416","severity":1,"message":"525","line":18,"column":8,"nodeType":"418","messageId":"419","endLine":18,"endColumn":15},{"ruleId":"416","severity":1,"message":"526","line":19,"column":8,"nodeType":"418","messageId":"419","endLine":19,"endColumn":11},{"ruleId":"416","severity":1,"message":"527","line":20,"column":8,"nodeType":"418","messageId":"419","endLine":20,"endColumn":14},{"ruleId":"416","severity":1,"message":"437","line":21,"column":8,"nodeType":"418","messageId":"419","endLine":21,"endColumn":12},{"ruleId":"416","severity":1,"message":"528","line":22,"column":8,"nodeType":"418","messageId":"419","endLine":22,"endColumn":12},{"ruleId":"416","severity":1,"message":"529","line":23,"column":8,"nodeType":"418","messageId":"419","endLine":23,"endColumn":19},{"ruleId":"416","severity":1,"message":"530","line":24,"column":8,"nodeType":"418","messageId":"419","endLine":24,"endColumn":19},{"ruleId":"416","severity":1,"message":"425","line":26,"column":10,"nodeType":"418","messageId":"419","endLine":26,"endColumn":20},{"ruleId":"416","severity":1,"message":"426","line":26,"column":22,"nodeType":"418","messageId":"419","endLine":26,"endColumn":32},{"ruleId":"416","severity":1,"message":"427","line":26,"column":34,"nodeType":"418","messageId":"419","endLine":26,"endColumn":44},{"ruleId":"416","severity":1,"message":"531","line":29,"column":10,"nodeType":"418","messageId":"419","endLine":29,"endColumn":20},{"ruleId":"416","severity":1,"message":"532","line":31,"column":8,"nodeType":"418","messageId":"419","endLine":31,"endColumn":17},{"ruleId":"416","severity":1,"message":"439","line":32,"column":10,"nodeType":"418","messageId":"419","endLine":32,"endColumn":14},{"ruleId":"479","severity":1,"message":"480","line":37,"column":1,"nodeType":"481","endLine":57,"endColumn":4},{"ruleId":"430","severity":1,"message":"431","line":43,"column":24,"nodeType":"432","messageId":"433","endLine":43,"endColumn":26},"@typescript-eslint/no-unused-vars","'Switch' is defined but never used.","Identifier","unusedVar","'Route' is defined but never used.","'BrowserRouter' is defined but never used.","'MuiAlert' is defined but never used.","'AlertProps' is defined but never used.","'Button' is defined but never used.","'scanTarget' is defined but never used.","'targetData' is defined but never used.","'targetTime' is defined but never used.","'DoneScanning' is defined but never used.","'handleClick' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Link' is defined but never used.","'TextField' is defined but never used.","'ButtonGroup' is defined but never used.","'Chip' is defined but never used.","'pureOutput' is defined but never used.","'rows' is defined but never used.","no-native-reassign",["533"],"no-negated-in-lhs",["534"],["533"],["534"],["533"],["534"],"'automation' is defined but never used.","'cveDetection' is defined but never used.","'bull' is assigned a value but never used.","'CheckboxProps' is defined but never used.","'handleClick' is defined but never used.","'handleChange' is assigned a value but never used.",["533"],["534"],"'lighten' is defined but never used.","'Dialog' is defined but never used.","'DialogActions' is defined but never used.","'DialogContent' is defined but never used.","'DialogContentText' is defined but never used.","'DialogTitle' is defined but never used.","'Switcher' is defined but never used.","'CsvDownloader' is defined but never used.","'CsvLink' is defined but never used.","'Page' is defined but never used.","'Text' is defined but never used.","'View' is defined but never used.","'Document' is defined but never used.","'StyleSheet' is defined but never used.","'clsx' is defined but never used.","'TableSortLabel' is defined but never used.","'Toolbar' is defined but never used.","'Checkbox' is defined but never used.","'IconButton' is defined but never used.","'FormControlLabel' is defined but never used.","'DeleteIcon' is defined but never used.","'DoneIcon' is defined but never used.","'chosenMode' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'handleClickJO' is assigned a value but never used.","'checked' is assigned a value but never used.","'handleClose' is assigned a value but never used.","'handleToggle' is assigned a value but never used.","'FadeOutTime' is defined but never used.","Expected '!==' and instead saw '!='.","'datas' is assigned a value but never used.","'logo' is defined but never used.","'theArray' is assigned a value but never used.","'setTheArray' is assigned a value but never used.","'FormGroup' is defined but never used.","'FormLabel' is defined but never used.","'Divider' is defined but never used.","'MailIcon' is defined but never used.","'HomeIcon' is defined but never used.",["533"],["534"],"'setRangeBtnState' is assigned a value but never used.","'setSetRangeBtnState' is assigned a value but never used.","'handleAuto' is assigned a value but never used.","'handleCve' is assigned a value but never used.","'classes' is assigned a value but never used.","'autoArray' is assigned a value but never used.","'ScanModeIcon' is defined but never used.","'Radio' is defined but never used.","'RadioGroup' is defined but never used.","'List' is defined but never used.","'ListItem' is defined but never used.","'ListItemProps' is defined but never used.","'ListItemIcon' is defined but never used.","'ListItemText' is defined but never used.","'makeStyles' is defined but never used.","'createStyles' is defined but never used.","'Theme' is defined but never used.","'Paper' is defined but never used.","'Grid' is defined but never used.","'InputLabel' is defined but never used.","'Select' is defined but never used.","'FormControl' is defined but never used.","'MenuItem' is defined but never used.","'Tabs' is defined but never used.","'Tab' is defined but never used.","'LinearProgress' is defined but never used.","'Tooltip' is defined but never used.","'Box' is defined but never used.","'AppBar' is defined but never used.","'Card' is defined but never used.","'CardActions' is defined but never used.","'CardContent' is defined but never used.","'isScanning' is defined but never used.","'scannedIn' is defined but never used.","no-global-assign","no-unsafe-negation"]