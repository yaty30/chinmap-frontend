[{"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/Home.tsx":"1","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/CustomisedScanMode.tsx":"2","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/Target.tsx":"3","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Exploit/SMB.tsx":"4","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Discovery/ServerMessageBlock.tsx":"5","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Vulnerability/HTTP.tsx":"6","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Discovery/Broadcast.tsx":"7","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Discovery/Server.tsx":"8","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Vulnerability/Others.tsx":"9","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/Timing.tsx":"10","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Discovery/Hadoop.tsx":"11","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Vulnerability/SMB.tsx":"12","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/Others.tsx":"13","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Discovery/SMTP.tsx":"14","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Vulnerability/SSL.tsx":"15","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/NSE.tsx":"16","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Vulnerability/FTP.tsx":"17","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/Ping.tsx":"18","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Discovery/Targets.tsx":"19","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Exploit/Others.tsx":"20","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/DefaultScanMode.tsx":"21","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/HomeSettings/HomeSettings.tsx":"22","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/HomeSettings/ServiceAndVersionDetectiony.tsx":"23","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/HomeSettings/HostDiscovery.tsx":"24","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/HomeSettings/PortSpecification.tsx":"25","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/HomeSettings/ScanTechinques.tsx":"26","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/HomeSettings/TimingAndPerformance.tsx":"27","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/defaultScanModes/defaultModeDialog.tsx":"28","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/HomeSettings/OSDetection.tsx":"29","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/HomeSettings/SetFlags.tsx":"30","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/Drawer.tsx":"31","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/defaultScanModes/lightningScanMode.tsx":"32","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/ScanResults/NmapOutput.tsx":"33","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Mobx/Models/resultSelectStatus.tsx":"34","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/ScanResults/ExportResult.tsx":"35","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/NewModeOptions.tsx":"36","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Exploit/FTP.tsx":"37","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanMode.tsx":"38","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Exploit/HTTP.tsx":"39","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Discovery/Network.tsx":"40","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/Source.tsx":"41","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/ScanComparison.tsx":"42","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/ScanHistory.tsx":"43","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/ScanResult.tsx":"44","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/ScanResults/ScanDetails.tsx":"45","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/ScanResults/HostsAndPorts.tsx":"46","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Backend/frontendData/isScanning.tsx":"47","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Backend/frontendData/getPortStatus.tsx":"48","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/defaultScanModes/pingScanMode.tsx":"49","/Users/yipjames/Desktop/INS/FYP/chinmap/src/index.tsx":"50","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Views/DefaultScanMode.tsx":"51","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Views/ScanComparison.tsx":"52","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Views/ScanResult.tsx":"53","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/defaultScanModes/top100portsScanMode.tsx":"54","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/defaultScanModes/intenseScanMode.tsx":"55","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Views/Home.tsx":"56","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Discovery/HTTP.tsx":"57","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Mobx/Models/defaultScanModeStatus.tsx":"58","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Discovery/IP.tsx":"59","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Discovery/Database.tsx":"60","/Users/yipjames/Desktop/INS/FYP/chinmap/src/App.tsx":"61","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeArray.tsx":"62","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/HomeSettings/homeSettingsData.tsx":"63","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Backend/frontendData/Result.tsx":"64"},{"size":16042,"mtime":1613845931367,"results":"65","hashOfConfig":"66"},{"size":4977,"mtime":1614008998712,"results":"67","hashOfConfig":"66"},{"size":1780,"mtime":1613489966000,"results":"68","hashOfConfig":"66"},{"size":4486,"mtime":1613489966000,"results":"69","hashOfConfig":"66"},{"size":4535,"mtime":1613489966000,"results":"70","hashOfConfig":"66"},{"size":4495,"mtime":1613489966000,"results":"71","hashOfConfig":"66"},{"size":4506,"mtime":1613489966000,"results":"72","hashOfConfig":"66"},{"size":4497,"mtime":1613489966000,"results":"73","hashOfConfig":"66"},{"size":4501,"mtime":1613489966000,"results":"74","hashOfConfig":"66"},{"size":1731,"mtime":1613489966000,"results":"75","hashOfConfig":"66"},{"size":4497,"mtime":1613489966000,"results":"76","hashOfConfig":"66"},{"size":4492,"mtime":1613489966000,"results":"77","hashOfConfig":"66"},{"size":1829,"mtime":1613489966000,"results":"78","hashOfConfig":"66"},{"size":4491,"mtime":1613489966000,"results":"79","hashOfConfig":"66"},{"size":4492,"mtime":1613489966000,"results":"80","hashOfConfig":"66"},{"size":7765,"mtime":1613489966000,"results":"81","hashOfConfig":"66"},{"size":4492,"mtime":1613489966000,"results":"82","hashOfConfig":"66"},{"size":1727,"mtime":1613489966000,"results":"83","hashOfConfig":"66"},{"size":4500,"mtime":1613489966000,"results":"84","hashOfConfig":"66"},{"size":4495,"mtime":1613489966000,"results":"85","hashOfConfig":"66"},{"size":3884,"mtime":1614000155336,"results":"86","hashOfConfig":"66"},{"size":16719,"mtime":1613489966000,"results":"87","hashOfConfig":"66"},{"size":3162,"mtime":1613489966000,"results":"88","hashOfConfig":"66"},{"size":2976,"mtime":1613489966000,"results":"89","hashOfConfig":"66"},{"size":2984,"mtime":1613489966000,"results":"90","hashOfConfig":"66"},{"size":2978,"mtime":1613489966000,"results":"91","hashOfConfig":"66"},{"size":5054,"mtime":1613489966000,"results":"92","hashOfConfig":"66"},{"size":11830,"mtime":1614006526958,"results":"93","hashOfConfig":"66"},{"size":3128,"mtime":1613489966000,"results":"94","hashOfConfig":"66"},{"size":1572,"mtime":1613489966000,"results":"95","hashOfConfig":"66"},{"size":9482,"mtime":1613844556564,"results":"96","hashOfConfig":"66"},{"size":10073,"mtime":1613489966000,"results":"97","hashOfConfig":"66"},{"size":2113,"mtime":1613844832650,"results":"98","hashOfConfig":"66"},{"size":309,"mtime":1613565916715,"results":"99","hashOfConfig":"66"},{"size":6199,"mtime":1613844797976,"results":"100","hashOfConfig":"66"},{"size":10883,"mtime":1613489966000,"results":"101","hashOfConfig":"66"},{"size":4486,"mtime":1613489966000,"results":"102","hashOfConfig":"66"},{"size":11741,"mtime":1613845963672,"results":"103","hashOfConfig":"66"},{"size":4489,"mtime":1613489966000,"results":"104","hashOfConfig":"66"},{"size":4500,"mtime":1613489966000,"results":"105","hashOfConfig":"66"},{"size":1731,"mtime":1613489966000,"results":"106","hashOfConfig":"66"},{"size":19442,"mtime":1614053519586,"results":"107","hashOfConfig":"66"},{"size":5607,"mtime":1613845877866,"results":"108","hashOfConfig":"66"},{"size":11509,"mtime":1613844762048,"results":"109","hashOfConfig":"66"},{"size":18880,"mtime":1613844862323,"results":"110","hashOfConfig":"66"},{"size":3626,"mtime":1613844819990,"results":"111","hashOfConfig":"66"},{"size":33,"mtime":1614053351211,"results":"112","hashOfConfig":"66"},{"size":4578,"mtime":1614053310387,"results":"113","hashOfConfig":"66"},{"size":8951,"mtime":1613882659609,"results":"114","hashOfConfig":"66"},{"size":500,"mtime":1612188541082,"results":"115","hashOfConfig":"66"},{"size":211,"mtime":1612328485908,"results":"116","hashOfConfig":"66"},{"size":207,"mtime":1612324657583,"results":"117","hashOfConfig":"66"},{"size":191,"mtime":1612266398943,"results":"118","hashOfConfig":"66"},{"size":7700,"mtime":1613489966000,"results":"119","hashOfConfig":"66"},{"size":9062,"mtime":1613489966000,"results":"120","hashOfConfig":"66"},{"size":167,"mtime":1612256006489,"results":"121","hashOfConfig":"66"},{"size":4491,"mtime":1613489966000,"results":"122","hashOfConfig":"66"},{"size":3852,"mtime":1614006373442,"results":"123","hashOfConfig":"66"},{"size":4485,"mtime":1613489966000,"results":"124","hashOfConfig":"66"},{"size":4503,"mtime":1613489966000,"results":"125","hashOfConfig":"66"},{"size":897,"mtime":1612255057253,"results":"126","hashOfConfig":"66"},{"size":226,"mtime":1613489966000,"results":"127","hashOfConfig":"66"},{"size":86,"mtime":1613489966000,"results":"128","hashOfConfig":"66"},{"size":9885,"mtime":1614053453764,"results":"129","hashOfConfig":"66"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1122jn7",{"filePath":"132","messages":"133","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"137","messages":"138","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"140"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"144"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"148"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"152"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"144"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"140"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"162"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"144"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"168","messages":"169","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"171"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"162"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"177","messages":"178","errorCount":0,"warningCount":35,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"180"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"183","messages":"184","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"148"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"148"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"191","messages":"192","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"193","messages":"194","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"196"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"199","messages":"200","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"148"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215","usedDeprecatedRules":"216"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"219","messages":"220","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221","usedDeprecatedRules":"216"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"224","usedDeprecatedRules":"225"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":36,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"230","messages":"231","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"232","usedDeprecatedRules":"148"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"180"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"237","messages":"238","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"239","usedDeprecatedRules":"148"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"242","messages":"243","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"244","messages":"245","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"246","usedDeprecatedRules":"152"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":35,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"249","messages":"250","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"251","messages":"252","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"253","messages":"254","errorCount":0,"warningCount":28,"fixableErrorCount":0,"fixableWarningCount":0,"source":"255"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"258","messages":"259","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"262","messages":"263","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"264","usedDeprecatedRules":"225"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"267","messages":"268","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"269","messages":"270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"273","messages":"274","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"275","messages":"276","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"277","messages":"278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"279","messages":"280","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"281","usedDeprecatedRules":"152"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"284","messages":"285","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"286","messages":"287","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"288"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"291","messages":"292","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"293","messages":"294","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"295","messages":"296","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/Home.tsx",["297","298","299","300","301","302","303","304","305","306","307","308","309","310","311","312","313","314","315","316","317","318","319","320"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/CustomisedScanMode.tsx",["321","322","323","324","325","326","327","328","329","330","331","332","333","334"],"import React, {useState} from 'react';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport { Switch, Route, Link, BrowserRouter } from \"react-router-dom\";\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography'\n\nimport List from '@material-ui/core/List';\nimport ListItem, { ListItemProps } from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Divider from '@material-ui/core/Divider';\n\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\n\nimport ScanModeIcon from '@material-ui/icons/Settings';\nimport DeleteMode from '@material-ui/icons/DeleteForever';\nimport NewScanMode from './NewScanMode'\n\nimport { customisedScanModes } from './NewScanModeArray'\nimport modeData from '../Backend/frontendData/scanModes/customised.json'\nimport AddNewMode from '../Mobx/Models/addCustomisedScanModeStatus'\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    paper: {\n      padding: theme.spacing(2),\n      textAlign: 'left',\n      backgroundColor: \"#fefefe\",\n      color: \"#333333\",\n    },\n    centerGrid: {\n        textAlign: \"center\",\n        marginTop: 15,\n    },\n    listGrid: {\n        width: '100%',\n        maxWidth: 360,\n        backgroundColor: theme.palette.background.paper,\n    },\n  }),\n);\n\nexport default () => {\n  const classes = useStyles();\n\n  const handleDeleteMode = () => {\n    customisedScanModes.splice(0, 1); \n  }\n\n  const [type, setType] = useState('');\n  const handleChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n      setType(event.target.value as string)\n  }\n\n  interface customisedMode{\n      type: string\n  }\n\n  const [mode, setMode] = useState<customisedMode[]>([]);\n\n  return (\n    <div className={classes.root}>\n      <Grid container spacing={5} justify=\"center\" alignItems=\"center\">\n       \n        <Grid item xs={10}>\n            <Paper className={classes.paper}>\n                <Typography variant=\"h6\">\n                    Customised Scan Modes<Button onClick={()=>{setMode([...mode, {type}])}}>ADD NEW</Button>\n                </Typography>\n                    <br/><br/>\n                <Grid container justify=\"center\" spacing={5}>\n                    {mode.map((item, index) => \n                        <Grid item xs={6} id=\"1\">\n                            <Card>\n                                <CardContent style={{whiteSpace: \"nowrap\"}}>\n                                    <Typography color=\"textSecondary\" style={{fontWeight: \"bold\", fontSize: 18}} gutterBottom>\n                                        w\n                                    </Typography>\n                                    <Divider /><br/>\n                                    <Typography color=\"textSecondary\" gutterBottom style={{whiteSpace: \"normal\"}}>\n                                        1\n                                    </Typography>\n                                </CardContent>\n                                        <Divider variant=\"middle\" />\n                                    <CardActions style={{textAlign: \"center\"}}>\n                                    <Button \n                                        color=\"primary\" \n                                        style={{\n                                            textTransform: \"capitalize\",\n                                        }}>\n                                        Setting<ScanModeIcon style={{fontSize: 20}}/>\n                                    </Button>\n                                    <Button\n                                        color=\"primary\" \n                                        style={{\n                                            textTransform: \"capitalize\",\n                                            marginLeft: 65,\n                                            color: \"red\",\n                                        }}\n                                        onClick={ () => {\n                                            setMode([\n                                                ...mode.slice(0, index),\n                                                ...mode.slice(index + 1)\n                                            ])\n                                        }}\n                                    >\n                                        Delete<DeleteMode/>\n                                    </Button>\n                                </CardActions>\n                            </Card>\n                        </Grid>\n                    )}\n                </Grid>\n            </Paper>\n        </Grid>\n        <Grid item xs={10}>\n            <NewScanMode />\n        </Grid>\n\n      </Grid>\n      \n    </div>\n  );\n}\n","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/Target.tsx",["335","336","337"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Exploit/SMB.tsx",["338","339"],"import React from 'react';\nimport { createStyles, Theme, withStyles, WithStyles, makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ExtensionIcon from '@material-ui/icons/ExtensionOutlined';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Grid from '@material-ui/core/Grid';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox, { CheckboxProps } from '@material-ui/core/Checkbox';\n\nimport Typography from '@material-ui/core/Typography';\nimport Separator from '@material-ui/icons/ArrowRightOutlined';\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\n\n// NSE Options\nimport NSEoption from './json/SMB.json'\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      margin: 0,\n      padding: theme.spacing(2),\n    },\n    closeButton: {\n      position: 'absolute',\n      right: theme.spacing(1),\n      top: theme.spacing(1),\n      color: theme.palette.grey[500],\n    },\n  });\n\nexport interface DialogTitleProps extends WithStyles<typeof styles> {\n  id: string;\n  children: React.ReactNode;\n  onClose: () => void;\n}\n\nconst DialogTitle = withStyles(styles)((props: DialogTitleProps) => {\n  const { children, classes, onClose, ...other } = props;\n  return (\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\n      <Typography variant=\"h6\">{children}</Typography>\n      {onClose ? (\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n    </MuiDialogTitle>\n  );\n});\n\nconst DialogContent = withStyles((theme: Theme) => ({\n  root: {\n    padding: theme.spacing(2),\n  },\n}))(MuiDialogContent);\n\nconst DialogActions = withStyles((theme: Theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(1),\n  },\n}))(MuiDialogActions);\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    nested: {\n      paddingLeft: theme.spacing(4),\n    },\n  }),\n);\n\nfunction handleClick(event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) {\n    event.preventDefault();\n    console.info('You clicked a breadcrumb.');\n  }\n  \n  function Breadcrumb() {\n    return (\n      <Breadcrumbs separator={<Separator />} >\n        <Typography color=\"textPrimary\">NSE</Typography>\n        <Typography color=\"textPrimary\">Exploit</Typography>\n        <Typography color=\"primary\" style={{fontWeight: \"bold\"}}>SMB</Typography>\n      </Breadcrumbs>\n    );\n  }\n\nexport default function CustomizedDialogs() {\n  const [open, setOpen] = React.useState(false);\n  const classes = useStyles();\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div>\n      <ListItem button className={classes.nested} onClick={handleClickOpen}>\n        <ListItemIcon>\n            <ExtensionIcon />\n        </ListItemIcon>\n        <ListItemText>SMB</ListItemText>\n    </ListItem>\n      <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n          <Breadcrumb />\n        </DialogTitle>\n        <DialogContent dividers>\n          <Grid container justify=\"center\" spacing={3}>\n              {NSEoption.map((option) => (\n                <Grid item xs={6}>\n                    <Tooltip arrow placement=\"top\" title={option.des}>\n                        <FormControlLabel\n                            value={option.id}\n                            control={<Checkbox color=\"primary\" />}\n                            label={option.id}\n                            labelPlacement=\"end\"\n                        />\n                    </Tooltip>\n                </Grid>\n              ))}\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button autoFocus onClick={handleClose} color=\"primary\">\n            Save changes\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n",["340","341"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Discovery/ServerMessageBlock.tsx",["342","343"],"import React from 'react';\nimport { createStyles, Theme, withStyles, WithStyles, makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ExtensionIcon from '@material-ui/icons/ExtensionOutlined';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Grid from '@material-ui/core/Grid';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox, { CheckboxProps } from '@material-ui/core/Checkbox';\n\nimport Typography from '@material-ui/core/Typography';\nimport Separator from '@material-ui/icons/ArrowRightOutlined';\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\n\n// NSE Options\nimport NSEoption from './json/ServerMessageBlock.json'\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      margin: 0,\n      padding: theme.spacing(2),\n    },\n    closeButton: {\n      position: 'absolute',\n      right: theme.spacing(1),\n      top: theme.spacing(1),\n      color: theme.palette.grey[500],\n    },\n  });\n\nexport interface DialogTitleProps extends WithStyles<typeof styles> {\n  id: string;\n  children: React.ReactNode;\n  onClose: () => void;\n}\n\nconst DialogTitle = withStyles(styles)((props: DialogTitleProps) => {\n  const { children, classes, onClose, ...other } = props;\n  return (\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\n      <Typography variant=\"h6\">{children}</Typography>\n      {onClose ? (\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n    </MuiDialogTitle>\n  );\n});\n\nconst DialogContent = withStyles((theme: Theme) => ({\n  root: {\n    padding: theme.spacing(2),\n  },\n}))(MuiDialogContent);\n\nconst DialogActions = withStyles((theme: Theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(1),\n  },\n}))(MuiDialogActions);\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    nested: {\n      paddingLeft: theme.spacing(4),\n    },\n  }),\n);\n\nfunction handleClick(event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) {\n    event.preventDefault();\n    console.info('You clicked a breadcrumb.');\n  }\n  \n  function Breadcrumb() {\n    return (\n      <Breadcrumbs separator={<Separator />} >\n        <Typography color=\"textPrimary\">NSE</Typography>\n        <Typography color=\"textPrimary\">Discovery</Typography>\n        <Typography color=\"primary\" style={{fontWeight: \"bold\"}}>Server Message Block</Typography>\n      </Breadcrumbs>\n    );\n  }\n\nexport default function CustomizedDialogs() {\n  const [open, setOpen] = React.useState(false);\n  const classes = useStyles();\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div>\n      <ListItem button className={classes.nested} onClick={handleClickOpen}>\n        <ListItemIcon>\n            <ExtensionIcon />\n        </ListItemIcon>\n        <ListItemText>ServerMessageBlock</ListItemText>\n    </ListItem>\n      <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n          <Breadcrumb />\n        </DialogTitle>\n        <DialogContent dividers>\n          <Grid container justify=\"center\" spacing={3}>\n              {NSEoption.map((option) => (\n                <Grid item xs={6}>\n                    <Tooltip arrow placement=\"top\" title={option.des}>\n                        <FormControlLabel\n                            value={option.id}\n                            control={<Checkbox color=\"primary\" />}\n                            label={option.id}\n                            labelPlacement=\"end\"\n                        />\n                    </Tooltip>\n                </Grid>\n              ))}\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button autoFocus onClick={handleClose} color=\"primary\">\n            Save changes\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n",["344","345"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Vulnerability/HTTP.tsx",["346","347"],"import React from 'react';\nimport { createStyles, Theme, withStyles, WithStyles, makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ExtensionIcon from '@material-ui/icons/ExtensionOutlined';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Grid from '@material-ui/core/Grid';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox, { CheckboxProps } from '@material-ui/core/Checkbox';\n\nimport Typography from '@material-ui/core/Typography';\nimport Separator from '@material-ui/icons/ArrowRightOutlined';\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\n\n// NSE Options\nimport NSEoption from './json/HTTP.json'\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      margin: 0,\n      padding: theme.spacing(2),\n    },\n    closeButton: {\n      position: 'absolute',\n      right: theme.spacing(1),\n      top: theme.spacing(1),\n      color: theme.palette.grey[500],\n    },\n  });\n\nexport interface DialogTitleProps extends WithStyles<typeof styles> {\n  id: string;\n  children: React.ReactNode;\n  onClose: () => void;\n}\n\nconst DialogTitle = withStyles(styles)((props: DialogTitleProps) => {\n  const { children, classes, onClose, ...other } = props;\n  return (\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\n      <Typography variant=\"h6\">{children}</Typography>\n      {onClose ? (\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n    </MuiDialogTitle>\n  );\n});\n\nconst DialogContent = withStyles((theme: Theme) => ({\n  root: {\n    padding: theme.spacing(2),\n  },\n}))(MuiDialogContent);\n\nconst DialogActions = withStyles((theme: Theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(1),\n  },\n}))(MuiDialogActions);\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    nested: {\n      paddingLeft: theme.spacing(4),\n    },\n  }),\n);\n\nfunction handleClick(event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) {\n    event.preventDefault();\n    console.info('You clicked a breadcrumb.');\n  }\n  \n  function Breadcrumb() {\n    return (\n      <Breadcrumbs separator={<Separator />} >\n        <Typography color=\"textPrimary\">NSE</Typography>\n        <Typography color=\"textPrimary\">Vulnerability</Typography>\n        <Typography color=\"primary\" style={{fontWeight: \"bold\"}}>HTTP</Typography>\n      </Breadcrumbs>\n    );\n  }\n\nexport default function CustomizedDialogs() {\n  const [open, setOpen] = React.useState(false);\n  const classes = useStyles();\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div>\n      <ListItem button className={classes.nested} onClick={handleClickOpen}>\n        <ListItemIcon>\n            <ExtensionIcon />\n        </ListItemIcon>\n        <ListItemText>HTTP</ListItemText>\n    </ListItem>\n      <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n          <Breadcrumb />\n        </DialogTitle>\n        <DialogContent dividers>\n          <Grid container justify=\"center\" spacing={3}>\n              {NSEoption.map((option) => (\n                <Grid item xs={6}>\n                    <Tooltip arrow placement=\"top\" title={option.des}>\n                        <FormControlLabel\n                            value={option.id}\n                            control={<Checkbox color=\"primary\" />}\n                            label={option.id}\n                            labelPlacement=\"end\"\n                        />\n                    </Tooltip>\n                </Grid>\n              ))}\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button autoFocus onClick={handleClose} color=\"primary\">\n            Save changes\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n",["348","349"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Discovery/Broadcast.tsx",["350","351"],"import React from 'react';\nimport { createStyles, Theme, withStyles, WithStyles, makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ExtensionIcon from '@material-ui/icons/ExtensionOutlined';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Grid from '@material-ui/core/Grid';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox, { CheckboxProps } from '@material-ui/core/Checkbox';\n\nimport Typography from '@material-ui/core/Typography';\nimport Separator from '@material-ui/icons/ArrowRightOutlined';\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\n\n// NSE Options\nimport NSEoption from './json/Broadcast.json'\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      margin: 0,\n      padding: theme.spacing(2),\n    },\n    closeButton: {\n      position: 'absolute',\n      right: theme.spacing(1),\n      top: theme.spacing(1),\n      color: theme.palette.grey[500],\n    },\n  });\n\nexport interface DialogTitleProps extends WithStyles<typeof styles> {\n  id: string;\n  children: React.ReactNode;\n  onClose: () => void;\n}\n\nconst DialogTitle = withStyles(styles)((props: DialogTitleProps) => {\n  const { children, classes, onClose, ...other } = props;\n  return (\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\n      <Typography variant=\"h6\">{children}</Typography>\n      {onClose ? (\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n    </MuiDialogTitle>\n  );\n});\n\nconst DialogContent = withStyles((theme: Theme) => ({\n  root: {\n    padding: theme.spacing(2),\n  },\n}))(MuiDialogContent);\n\nconst DialogActions = withStyles((theme: Theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(1),\n  },\n}))(MuiDialogActions);\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    nested: {\n      paddingLeft: theme.spacing(4),\n    },\n  }),\n);\n\nfunction handleClick(event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) {\n    event.preventDefault();\n    console.info('You clicked a breadcrumb.');\n  }\n  \n  function Breadcrumb() {\n    return (\n      <Breadcrumbs separator={<Separator />} >\n        <Typography color=\"textPrimary\">NSE</Typography>\n        <Typography color=\"textPrimary\">Discovery</Typography>\n        <Typography color=\"primary\" style={{fontWeight: \"bold\"}}>Broadcast</Typography>\n      </Breadcrumbs>\n    );\n  }\n\nexport default function CustomizedDialogs() {\n  const [open, setOpen] = React.useState(false);\n  const classes = useStyles();\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div>\n      <ListItem button className={classes.nested} onClick={handleClickOpen}>\n        <ListItemIcon>\n            <ExtensionIcon />\n        </ListItemIcon>\n        <ListItemText>Broadcast</ListItemText>\n    </ListItem>\n      <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n          <Breadcrumb />\n        </DialogTitle>\n        <DialogContent dividers>\n          <Grid container justify=\"center\" spacing={3}>\n              {NSEoption.map((option) => (\n                <Grid item xs={6}>\n                    <Tooltip arrow placement=\"top\" title={option.des}>\n                        <FormControlLabel\n                            value={option.id}\n                            control={<Checkbox color=\"primary\" />}\n                            label={option.id}\n                            labelPlacement=\"end\"\n                        />\n                    </Tooltip>\n                </Grid>\n              ))}\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button autoFocus onClick={handleClose} color=\"primary\">\n            Save changes\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n",["352","353"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Discovery/Server.tsx",["354","355"],"import React from 'react';\nimport { createStyles, Theme, withStyles, WithStyles, makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ExtensionIcon from '@material-ui/icons/ExtensionOutlined';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Grid from '@material-ui/core/Grid';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox, { CheckboxProps } from '@material-ui/core/Checkbox';\n\nimport Typography from '@material-ui/core/Typography';\nimport Separator from '@material-ui/icons/ArrowRightOutlined';\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\n\n// NSE Options\nimport NSEoption from './json/Server.json'\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      margin: 0,\n      padding: theme.spacing(2),\n    },\n    closeButton: {\n      position: 'absolute',\n      right: theme.spacing(1),\n      top: theme.spacing(1),\n      color: theme.palette.grey[500],\n    },\n  });\n\nexport interface DialogTitleProps extends WithStyles<typeof styles> {\n  id: string;\n  children: React.ReactNode;\n  onClose: () => void;\n}\n\nconst DialogTitle = withStyles(styles)((props: DialogTitleProps) => {\n  const { children, classes, onClose, ...other } = props;\n  return (\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\n      <Typography variant=\"h6\">{children}</Typography>\n      {onClose ? (\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n    </MuiDialogTitle>\n  );\n});\n\nconst DialogContent = withStyles((theme: Theme) => ({\n  root: {\n    padding: theme.spacing(2),\n  },\n}))(MuiDialogContent);\n\nconst DialogActions = withStyles((theme: Theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(1),\n  },\n}))(MuiDialogActions);\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    nested: {\n      paddingLeft: theme.spacing(4),\n    },\n  }),\n);\n\nfunction handleClick(event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) {\n    event.preventDefault();\n    console.info('You clicked a breadcrumb.');\n  }\n  \n  function Breadcrumb() {\n    return (\n      <Breadcrumbs separator={<Separator />} >\n        <Typography color=\"textPrimary\">NSE</Typography>\n        <Typography color=\"textPrimary\">Discovery</Typography>\n        <Typography color=\"primary\" style={{fontWeight: \"bold\"}}>Server</Typography>\n      </Breadcrumbs>\n    );\n  }\n\nexport default function CustomizedDialogs() {\n  const [open, setOpen] = React.useState(false);\n  const classes = useStyles();\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div>\n      <ListItem button className={classes.nested} onClick={handleClickOpen}>\n        <ListItemIcon>\n            <ExtensionIcon />\n        </ListItemIcon>\n        <ListItemText>Server</ListItemText>\n    </ListItem>\n      <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n          <Breadcrumb />\n        </DialogTitle>\n        <DialogContent dividers>\n          <Grid container justify=\"center\" spacing={3}>\n              {NSEoption.map((option) => (\n                <Grid item xs={6}>\n                    <Tooltip arrow placement=\"top\" title={option.des}>\n                        <FormControlLabel\n                            value={option.id}\n                            control={<Checkbox color=\"primary\" />}\n                            label={option.id}\n                            labelPlacement=\"end\"\n                        />\n                    </Tooltip>\n                </Grid>\n              ))}\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button autoFocus onClick={handleClose} color=\"primary\">\n            Save changes\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Vulnerability/Others.tsx",["356","357"],"import React from 'react';\nimport { createStyles, Theme, withStyles, WithStyles, makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ExtensionIcon from '@material-ui/icons/ExtensionOutlined';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Grid from '@material-ui/core/Grid';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox, { CheckboxProps } from '@material-ui/core/Checkbox';\n\nimport Typography from '@material-ui/core/Typography';\nimport Separator from '@material-ui/icons/ArrowRightOutlined';\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\n\n// NSE Options\nimport NSEoption from './json/Others.json'\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      margin: 0,\n      padding: theme.spacing(2),\n    },\n    closeButton: {\n      position: 'absolute',\n      right: theme.spacing(1),\n      top: theme.spacing(1),\n      color: theme.palette.grey[500],\n    },\n  });\n\nexport interface DialogTitleProps extends WithStyles<typeof styles> {\n  id: string;\n  children: React.ReactNode;\n  onClose: () => void;\n}\n\nconst DialogTitle = withStyles(styles)((props: DialogTitleProps) => {\n  const { children, classes, onClose, ...other } = props;\n  return (\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\n      <Typography variant=\"h6\">{children}</Typography>\n      {onClose ? (\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n    </MuiDialogTitle>\n  );\n});\n\nconst DialogContent = withStyles((theme: Theme) => ({\n  root: {\n    padding: theme.spacing(2),\n  },\n}))(MuiDialogContent);\n\nconst DialogActions = withStyles((theme: Theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(1),\n  },\n}))(MuiDialogActions);\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    nested: {\n      paddingLeft: theme.spacing(4),\n    },\n  }),\n);\n\nfunction handleClick(event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) {\n    event.preventDefault();\n    console.info('You clicked a breadcrumb.');\n  }\n  \n  function Breadcrumb() {\n    return (\n      <Breadcrumbs separator={<Separator />} >\n        <Typography color=\"textPrimary\">NSE</Typography>\n        <Typography color=\"textPrimary\">Vulnerability</Typography>\n        <Typography color=\"primary\" style={{fontWeight: \"bold\"}}>Others</Typography>\n      </Breadcrumbs>\n    );\n  }\n\nexport default function CustomizedDialogs() {\n  const [open, setOpen] = React.useState(false);\n  const classes = useStyles();\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div>\n      <ListItem button className={classes.nested} onClick={handleClickOpen}>\n        <ListItemIcon>\n            <ExtensionIcon />\n        </ListItemIcon>\n        <ListItemText>Others</ListItemText>\n    </ListItem>\n      <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n          <Breadcrumb />\n        </DialogTitle>\n        <DialogContent dividers>\n          <Grid container justify=\"center\" spacing={3}>\n              {NSEoption.map((option) => (\n                <Grid item xs={6}>\n                    <Tooltip arrow placement=\"top\" title={option.des}>\n                        <FormControlLabel\n                            value={option.id}\n                            control={<Checkbox color=\"primary\" />}\n                            label={option.id}\n                            labelPlacement=\"end\"\n                        />\n                    </Tooltip>\n                </Grid>\n              ))}\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button autoFocus onClick={handleClose} color=\"primary\">\n            Save changes\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/Timing.tsx",["358","359"],"import React from 'react';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Grid from '@material-ui/core/Grid';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport TextField from '@material-ui/core/TextField';\n\nimport { Timing } from './NewModeOptions'\n\nexport default function FormControlLabelPosition() {\n  return (\n    <>\n      <Grid container spacing={3}>\n        {Timing.map((option) => (\n          <Grid item xs={12}>\n            <Tooltip title={option.tooltip} arrow placement=\"right\">\n              <FormControl component=\"fieldset\" style={{width: 450}}>\n                <FormControlLabel\n                  value={option.value}\n                  control={<Checkbox color=\"primary\" />}\n                  label={option.des}\n                  labelPlacement=\"end\"\n                />\n                {\n                  option.input === true ?\n                    <>\n                      <TextField \n                          label={`Example Input: ${option.egInput}`} \n                          margin=\"dense\" \n                          size=\"small\"\n                          variant=\"outlined\"\n                          style={{\n                            width: \"100%\",\n                            textAlignLast: \"center\",\n                          }}\n                      />\n                    </>\n                      :\n                    null\n                }\n              </FormControl>\n            </Tooltip>\n          </Grid>\n        ))}\n      </Grid>\n    </>\n  );\n}\n",["360","361"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Discovery/Hadoop.tsx",["362","363"],"import React from 'react';\nimport { createStyles, Theme, withStyles, WithStyles, makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ExtensionIcon from '@material-ui/icons/ExtensionOutlined';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Grid from '@material-ui/core/Grid';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox, { CheckboxProps } from '@material-ui/core/Checkbox';\n\nimport Typography from '@material-ui/core/Typography';\nimport Separator from '@material-ui/icons/ArrowRightOutlined';\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\n\n// NSE Options\nimport NSEoption from './json/Hadoop.json'\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      margin: 0,\n      padding: theme.spacing(2),\n    },\n    closeButton: {\n      position: 'absolute',\n      right: theme.spacing(1),\n      top: theme.spacing(1),\n      color: theme.palette.grey[500],\n    },\n  });\n\nexport interface DialogTitleProps extends WithStyles<typeof styles> {\n  id: string;\n  children: React.ReactNode;\n  onClose: () => void;\n}\n\nconst DialogTitle = withStyles(styles)((props: DialogTitleProps) => {\n  const { children, classes, onClose, ...other } = props;\n  return (\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\n      <Typography variant=\"h6\">{children}</Typography>\n      {onClose ? (\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n    </MuiDialogTitle>\n  );\n});\n\nconst DialogContent = withStyles((theme: Theme) => ({\n  root: {\n    padding: theme.spacing(2),\n  },\n}))(MuiDialogContent);\n\nconst DialogActions = withStyles((theme: Theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(1),\n  },\n}))(MuiDialogActions);\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    nested: {\n      paddingLeft: theme.spacing(4),\n    },\n  }),\n);\n\nfunction handleClick(event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) {\n    event.preventDefault();\n    console.info('You clicked a breadcrumb.');\n  }\n  \n  function Breadcrumb() {\n    return (\n      <Breadcrumbs separator={<Separator />} >\n        <Typography color=\"textPrimary\">NSE</Typography>\n        <Typography color=\"textPrimary\">Discovery</Typography>\n        <Typography color=\"primary\" style={{fontWeight: \"bold\"}}>Hadoop</Typography>\n      </Breadcrumbs>\n    );\n  }\n\nexport default function CustomizedDialogs() {\n  const [open, setOpen] = React.useState(false);\n  const classes = useStyles();\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div>\n      <ListItem button className={classes.nested} onClick={handleClickOpen}>\n        <ListItemIcon>\n            <ExtensionIcon />\n        </ListItemIcon>\n        <ListItemText>Hadoop</ListItemText>\n    </ListItem>\n      <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n          <Breadcrumb />\n        </DialogTitle>\n        <DialogContent dividers>\n          <Grid container justify=\"center\" spacing={3}>\n              {NSEoption.map((option) => (\n                <Grid item xs={6}>\n                    <Tooltip arrow placement=\"top\" title={option.des}>\n                        <FormControlLabel\n                            value={option.id}\n                            control={<Checkbox color=\"primary\" />}\n                            label={option.id}\n                            labelPlacement=\"end\"\n                        />\n                    </Tooltip>\n                </Grid>\n              ))}\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button autoFocus onClick={handleClose} color=\"primary\">\n            Save changes\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Vulnerability/SMB.tsx",["364","365"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/Others.tsx",["366","367","368","369"],"import React from 'react';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Grid from '@material-ui/core/Grid';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport TextField from '@material-ui/core/TextField';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\n\nimport { Others } from './NewModeOptions'\n\nexport default function FormControlLabelPosition() {\n  return (\n    <>\n      <Grid container spacing={3}>\n        {Others.map((option) => (\n          <Grid item xs={12}>\n            <Tooltip title={option.tooltip} arrow placement=\"right\">\n              <FormControl component=\"fieldset\" style={{width: 450}}>\n                <FormControlLabel\n                  value={option.value}\n                  control={<Checkbox color=\"primary\" />}\n                  label={option.des}\n                  labelPlacement=\"end\"\n                />\n                {\n                  option.input === true ?\n                    <>\n                      <TextField \n                          label={`Example Input: ${option.egInput}`} \n                          margin=\"dense\" \n                          size=\"small\"\n                          variant=\"outlined\"\n                          style={{\n                            width: \"100%\",\n                            textAlignLast: \"center\",\n                          }}\n                      />\n                    </>\n                      :\n                    null\n                }\n              </FormControl>\n            </Tooltip>\n          </Grid>\n        ))}\n      </Grid>\n    </>\n  );\n}\n",["370","371"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Discovery/SMTP.tsx",["372","373"],"import React from 'react';\nimport { createStyles, Theme, withStyles, WithStyles, makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ExtensionIcon from '@material-ui/icons/ExtensionOutlined';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Grid from '@material-ui/core/Grid';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox, { CheckboxProps } from '@material-ui/core/Checkbox';\n\nimport Typography from '@material-ui/core/Typography';\nimport Separator from '@material-ui/icons/ArrowRightOutlined';\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\n\n// NSE Options\nimport NSEoption from './json/SMTP.json'\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      margin: 0,\n      padding: theme.spacing(2),\n    },\n    closeButton: {\n      position: 'absolute',\n      right: theme.spacing(1),\n      top: theme.spacing(1),\n      color: theme.palette.grey[500],\n    },\n  });\n\nexport interface DialogTitleProps extends WithStyles<typeof styles> {\n  id: string;\n  children: React.ReactNode;\n  onClose: () => void;\n}\n\nconst DialogTitle = withStyles(styles)((props: DialogTitleProps) => {\n  const { children, classes, onClose, ...other } = props;\n  return (\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\n      <Typography variant=\"h6\">{children}</Typography>\n      {onClose ? (\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n    </MuiDialogTitle>\n  );\n});\n\nconst DialogContent = withStyles((theme: Theme) => ({\n  root: {\n    padding: theme.spacing(2),\n  },\n}))(MuiDialogContent);\n\nconst DialogActions = withStyles((theme: Theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(1),\n  },\n}))(MuiDialogActions);\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    nested: {\n      paddingLeft: theme.spacing(4),\n    },\n  }),\n);\n\nfunction handleClick(event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) {\n    event.preventDefault();\n    console.info('You clicked a breadcrumb.');\n  }\n  \n  function Breadcrumb() {\n    return (\n      <Breadcrumbs separator={<Separator />} >\n        <Typography color=\"textPrimary\">NSE</Typography>\n        <Typography color=\"textPrimary\">Discovery</Typography>\n        <Typography color=\"primary\" style={{fontWeight: \"bold\"}}>SMTP</Typography>\n      </Breadcrumbs>\n    );\n  }\n\nexport default function CustomizedDialogs() {\n  const [open, setOpen] = React.useState(false);\n  const classes = useStyles();\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div>\n      <ListItem button className={classes.nested} onClick={handleClickOpen}>\n        <ListItemIcon>\n            <ExtensionIcon />\n        </ListItemIcon>\n        <ListItemText>SMTP</ListItemText>\n    </ListItem>\n      <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n          <Breadcrumb />\n        </DialogTitle>\n        <DialogContent dividers>\n          <Grid container justify=\"center\" spacing={3}>\n              {NSEoption.map((option) => (\n                <Grid item xs={6}>\n                    <Tooltip arrow placement=\"top\" title={option.des}>\n                        <FormControlLabel\n                            value={option.id}\n                            control={<Checkbox color=\"primary\" />}\n                            label={option.id}\n                            labelPlacement=\"end\"\n                        />\n                    </Tooltip>\n                </Grid>\n              ))}\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button autoFocus onClick={handleClose} color=\"primary\">\n            Save changes\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Vulnerability/SSL.tsx",["374","375"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/NSE.tsx",["376","377","378","379","380","381","382","383","384","385","386","387","388","389","390","391","392","393","394","395","396","397","398","399","400","401","402","403","404","405","406","407","408","409","410"],"import React from 'react';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Collapse from '@material-ui/core/Collapse';\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\nimport DraftsIcon from '@material-ui/icons/Drafts';\nimport SendIcon from '@material-ui/icons/Send';\nimport DynamicFeedIcon from '@material-ui/icons/DynamicFeed';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport StarBorder from '@material-ui/icons/StarBorder';\nimport ExtensionIcon from '@material-ui/icons/ExtensionOutlined';\nimport AccountTreeOutlinedIcon from '@material-ui/icons/AccountTreeOutlined';\n\nimport DiscoveryBroadcast from './nseData/Discovery/Broadcast'\nimport DiscoveryDatabase from './nseData/Discovery/Database'\nimport DiscoveryHTTP from './nseData/Discovery/HTTP'\nimport DiscoveryIP from './nseData/Discovery/IP'\nimport DiscoveryHadoop from './nseData/Discovery/Hadoop'\nimport DiscoveryNetwork from './nseData/Discovery/Network'\nimport DiscoveryServerMessageBlock from './nseData/Discovery/ServerMessageBlock'\nimport DiscoveryServer from './nseData/Discovery/Server'\nimport DiscoverySMTP from './nseData/Discovery/SMTP'\nimport DiscoveryTargets from './nseData/Discovery/Targets'\n\nimport ExploitFTP from './nseData/Exploit/FTP'\nimport ExploitHTTP from './nseData/Exploit/HTTP'\nimport ExploitOthers from './nseData/Exploit/Others'\nimport ExploitSMB from './nseData/Exploit/SMB'\n\nimport VulnFTP from './nseData/Vulnerability/FTP'\nimport VulnHTTP from './nseData/Vulnerability/HTTP'\nimport VulnOthers from './nseData/Vulnerability/Others'\nimport VulnSMB from './nseData/Vulnerability/SMB'\nimport VulnSSL from './nseData/Vulnerability/SSL'\n\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      width: '100%',\n      backgroundColor: theme.palette.background.paper,\n    },\n    nested: {\n      paddingLeft: theme.spacing(4),\n    },\n  }),\n);\n\nconst menuItem = [\n    {\n        cateName: \"Discovery\",\n        handle: \"handleDiscovery\",\n        subItem: [\n            \"Broadcast\", \"Database\", \"Hadoop\", \"HTTP\", \"IP\", \n            \"Network\", \"Server Message Block\", \"Server\", \"SMTP\", \"Others\", \n        ],        \n    },\n    {\n        cateName: \"Exploit\",\n        handle: \"handleExploit\",\n        subItem: [\n            \"FTP\", \"HTTP\", \"SMB\", \"Others\", \n        ],        \n    },\n    {\n        cateName: \"Vulnerability\",\n        handle: \"handleVulnerability\",\n        subItem: [\n            \"FTP\", \"HTTP\", \"SMB\", \"SSL\", \"Others\",\n        ],        \n    },\n]\n\nexport default function NestedList() {\n  const classes = useStyles();\n  const [Discovery, setDiscovery] = React.useState(false);\n\n  const handleDiscovery = () => {\n    setDiscovery(!Discovery);\n\n    if( Exploit == true ){\n        setExploit(false)\n    }\n    if( Vulnerability == true ){\n        setVulnerability(false)\n    }\n  };\n\n  const [Exploit, setExploit] = React.useState(false);\n\n  const handleExploit = () => {\n    setExploit(!Exploit);\n    \n    if( Discovery == true ){\n        setDiscovery(false)\n    }\n    if( Vulnerability == true ){\n        setVulnerability(false)\n    }\n  };\n\n  const [Vulnerability, setVulnerability] = React.useState(false);\n\n  const handleVulnerability = () => {\n    setVulnerability(!Vulnerability);\n     \n    if( Discovery == true ){\n        setDiscovery(false)\n    }\n    if( Exploit == true ){\n        setExploit(false)\n    }\n  };\n\n  return (\n    <List\n      component=\"nav\"\n      aria-labelledby=\"nested-list-subheader\"\n      className={classes.root}\n    >\n      {menuItem.map((obj) => (\n         obj.cateName == \"Discovery\" ?\n            <>\n                <ListItem button onClick={handleDiscovery}>\n                    <ListItemIcon>\n                        <AccountTreeOutlinedIcon />\n                    </ListItemIcon>\n                    <ListItemText primary={obj.cateName} />\n                    {Discovery ? <ExpandLess /> : <ExpandMore />}\n                </ListItem>\n                <Collapse in={Discovery} timeout=\"auto\" unmountOnExit>\n                    {obj.subItem.map((subObj) => (\n                        <List component=\"div\" disablePadding>\n                            {\n                                subObj == \"Broadcast\" ? <DiscoveryBroadcast /> : \n                                    subObj == \"Database\" ? <DiscoveryDatabase /> : \n                                        subObj == \"Hadoop\" ? <DiscoveryHadoop /> : \n                                            subObj == \"HTTP\" ? <DiscoveryHTTP /> : \n                                                subObj == \"IP\" ? <DiscoveryIP /> : \n                                                subObj == \"Network\" ? <DiscoveryNetwork /> : \n                                            subObj == \"Server Message Block\" ? <DiscoveryServerMessageBlock /> : \n                                        subObj == \"Server\" ? <DiscoveryServer /> : \n                                    subObj == \"SMTP\" ? <DiscoverySMTP /> : \n                                subObj == \"Targets\" ? <DiscoveryTargets /> : null\n                            }\n                        </List>\n                    ))}\n                    \n                </Collapse>\n            </>\n            :\n        obj.cateName == \"Exploit\" ?\n            <>\n                <ListItem button onClick={handleExploit}>\n                    <ListItemIcon>\n                        <AccountTreeOutlinedIcon />\n                    </ListItemIcon>\n                    <ListItemText primary={obj.cateName} />\n                    {Exploit ? <ExpandLess /> : <ExpandMore />}\n                </ListItem>\n                <Collapse in={Exploit} timeout=\"auto\" unmountOnExit>\n                    {obj.subItem.map((subObj) => (\n                        <List component=\"div\" disablePadding>\n                            {\n                                subObj == \"FTP\" ? <ExploitFTP /> : \n                                    subObj == \"HTTP\" ? <ExploitHTTP /> :\n                                        subObj == \"Others\" ? <ExploitOthers /> :\n                                            subObj == \"SMB\" ? <ExploitSMB /> : null\n                            }\n                        </List>\n                    ))}\n                    \n                </Collapse>\n            </>\n            :\n        obj.cateName == \"Vulnerability\" ?\n            <>\n                <ListItem button onClick={handleVulnerability}>\n                    <ListItemIcon>\n                        <AccountTreeOutlinedIcon />\n                    </ListItemIcon>\n                    <ListItemText primary={obj.cateName} />\n                    {Vulnerability ? <ExpandLess /> : <ExpandMore />}\n                </ListItem>\n                <Collapse in={Vulnerability} timeout=\"auto\" unmountOnExit>\n                    {obj.subItem.map((subObj) => (\n                        <List component=\"div\" disablePadding>\n                            {\n                                subObj == \"FTP\" ? <VulnFTP /> : \n                                    subObj == \"HTTP\" ? <VulnHTTP /> :\n                                        subObj == \"Others\" ? <VulnOthers /> :\n                                    subObj == \"SMB\" ? <VulnSMB /> :\n                                subObj == \"SSL\" ? <VulnSSL /> : null\n                            }\n                        </List>\n                    ))}\n                    \n                </Collapse>\n            </>\n            :\n            null\n      ))}\n      \n    </List>\n  );\n}\n",["411","412"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Vulnerability/FTP.tsx",["413","414"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/Ping.tsx",["415","416"],"import React from 'react';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Grid from '@material-ui/core/Grid';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport TextField from '@material-ui/core/TextField';\n\nimport { Ping } from './NewModeOptions'\n\nexport default function FormControlLabelPosition() {\n  return (\n    <>\n      <Grid container spacing={3}>\n        {Ping.map((option) => (\n          <Grid item xs={12}>\n            <Tooltip title={option.tooltip} arrow placement=\"right\">\n              <FormControl component=\"fieldset\" style={{width: 450}}>\n                <FormControlLabel\n                  value={option.value}\n                  control={<Checkbox color=\"primary\" />}\n                  label={option.des}\n                  labelPlacement=\"end\"\n                />\n                {\n                  option.input === true ?\n                    <>\n                      <TextField \n                          label={`Example Input: ${option.egInput}`} \n                          margin=\"dense\" \n                          size=\"small\"\n                          variant=\"outlined\"\n                          style={{\n                            width: \"100%\",\n                            textAlignLast: \"center\",\n                          }}\n                      />\n                    </>\n                      :\n                    null\n                }\n              </FormControl>\n            </Tooltip>\n          </Grid>\n        ))}\n      </Grid>\n    </>\n  );\n}\n","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Discovery/Targets.tsx",["417","418"],"import React from 'react';\nimport { createStyles, Theme, withStyles, WithStyles, makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ExtensionIcon from '@material-ui/icons/ExtensionOutlined';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Grid from '@material-ui/core/Grid';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox, { CheckboxProps } from '@material-ui/core/Checkbox';\n\nimport Typography from '@material-ui/core/Typography';\nimport Separator from '@material-ui/icons/ArrowRightOutlined';\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\n\n// NSE Options\nimport NSEoption from './json/Targets.json'\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      margin: 0,\n      padding: theme.spacing(2),\n    },\n    closeButton: {\n      position: 'absolute',\n      right: theme.spacing(1),\n      top: theme.spacing(1),\n      color: theme.palette.grey[500],\n    },\n  });\n\nexport interface DialogTitleProps extends WithStyles<typeof styles> {\n  id: string;\n  children: React.ReactNode;\n  onClose: () => void;\n}\n\nconst DialogTitle = withStyles(styles)((props: DialogTitleProps) => {\n  const { children, classes, onClose, ...other } = props;\n  return (\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\n      <Typography variant=\"h6\">{children}</Typography>\n      {onClose ? (\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n    </MuiDialogTitle>\n  );\n});\n\nconst DialogContent = withStyles((theme: Theme) => ({\n  root: {\n    padding: theme.spacing(2),\n  },\n}))(MuiDialogContent);\n\nconst DialogActions = withStyles((theme: Theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(1),\n  },\n}))(MuiDialogActions);\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    nested: {\n      paddingLeft: theme.spacing(4),\n    },\n  }),\n);\n\nfunction handleClick(event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) {\n    event.preventDefault();\n    console.info('You clicked a breadcrumb.');\n  }\n  \n  function Breadcrumb() {\n    return (\n      <Breadcrumbs separator={<Separator />} >\n        <Typography color=\"textPrimary\">NSE</Typography>\n        <Typography color=\"textPrimary\">Discovery</Typography>\n        <Typography color=\"primary\" style={{fontWeight: \"bold\"}}>Targets</Typography>\n      </Breadcrumbs>\n    );\n  }\n\nexport default function CustomizedDialogs() {\n  const [open, setOpen] = React.useState(false);\n  const classes = useStyles();\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div>\n      <ListItem button className={classes.nested} onClick={handleClickOpen}>\n        <ListItemIcon>\n            <ExtensionIcon />\n        </ListItemIcon>\n        <ListItemText>Targets</ListItemText>\n    </ListItem>\n      <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n          <Breadcrumb />\n        </DialogTitle>\n        <DialogContent dividers>\n          <Grid container justify=\"center\" spacing={3}>\n              {NSEoption.map((option) => (\n                <Grid item xs={6}>\n                    <Tooltip arrow placement=\"top\" title={option.des}>\n                        <FormControlLabel\n                            value={option.id}\n                            control={<Checkbox color=\"primary\" />}\n                            label={option.id}\n                            labelPlacement=\"end\"\n                        />\n                    </Tooltip>\n                </Grid>\n              ))}\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button autoFocus onClick={handleClose} color=\"primary\">\n            Save changes\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Exploit/Others.tsx",["419","420"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/DefaultScanMode.tsx",["421","422","423","424","425","426","427","428"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/HomeSettings/HomeSettings.tsx",["429","430","431","432","433","434","435","436","437","438"],"import React from 'react';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Slide from '@material-ui/core/Slide';\nimport { TransitionProps } from '@material-ui/core/transitions';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Radio from '@material-ui/core/Radio';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControl from '@material-ui/core/FormControl';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Switch from '@material-ui/core/Switch';\nimport Divider from '@material-ui/core/Divider';\n\n// Components\n// import { others } from './homeSettingsData'\n\nimport SetFlags from './SetFlags'\nimport { automation, cveDetection } from './homeSettingsData'\nimport { targetData } from '../target'\n\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  index: any;\n  value: any;\n}\n\nfunction TabPanel(props: TabPanelProps) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`simple-tabpanel-${index}`}\n      aria-labelledby={`simple-tab-${index}`}\n      {...other}\n    >\n      {value === index && (\n        <Box p={3}>\n          <Typography>{children}</Typography>\n        </Box>\n      )}\n    </div>\n  );\n}\n\nfunction a11yProps(index: any) {\n  return {\n    id: `simple-tab-${index}`,\n    'aria-controls': `simple-tabpanel-${index}`,\n  };\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    appBar: {\n      position: 'relative',\n    },\n    title: {\n      marginLeft: theme.spacing(2),\n      color: \"#fff\",\n      flex: 1,\n    },\n    root: {\n      flexGrow: 1,\n      backgroundColor: theme.palette.background.paper,\n    },\n    tabs: {\n      textTransform: \"capitalize\",\n    },\n    paper: {\n      padding: theme.spacing(2),\n      textAlign: 'center',\n      color: theme.palette.text.secondary,\n    },\n  }),\n);\n\nconst cardStyles = makeStyles({\n  bullet: {\n    display: 'inline-block',\n    margin: '0 2px',\n    transform: 'scale(0.8)',\n  },\n  title: {\n    fontSize: 14,\n  },\n  pos: {\n    marginBottom: 12,\n  },\n  on: {\n    borderColor: \"red\",\n    minWidth: 275,\n    minHeight: 270,\n  },\n  off: {\n    minWidth: 275,\n    minHeight: 270,\n  },\n  centeredGrid: {\n    textAlign: \"center\",\n    marginTop: 25,\n  },\n  radioBtn: {\n    minWidth: 200,\n  },  \n});\n\nexport var scanRange = \"\";\n\nexport var autoVal = false;\nexport var cveVal = false;\n\nfunction SettingsTab() {\n  const classes = useStyles();\n  const [value, setValue] = React.useState(1);\n  \n  const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\n      setValue(newValue);\n  };\n\n  const [setRangeBtnState, setSetRangeBtnState] = React.useState({\n    option: false,\n  })\n\n  const [auto, setAuto] = React.useState(autoVal);\n  const [cveDetect, setCveDetect] = React.useState(cveVal);\n\n  const handleAuto = () => {\n    setAuto(!auto);\n  };\n\n  const handleCve = () => {\n    setCveDetect(!cveDetect);\n  };\n\n\n  function SetRange(): JSX.Element {\n    const classes = useStyles();\n    const cardStyling = cardStyles();\n\n    const [setRangeBtnState, setSetRangeBtnState] = React.useState({\n      option: false,\n    })\n\n    const handleSetRangeBtnStateChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n      setSetRangeBtnState({ ...setRangeBtnState, [event.target.name]: event.target.checked });\n    };\n\n    const [setRangeBtnOpt, setSetRangeBtnOpt] = React.useState(\"\");\n\n    const handleOddNo = () => {\n      setSetRangeBtnOpt(\"Odd Number\")\n      scanRange = \"Odd Number\";\n    }\n\n    const handleEvenNo = () => {\n      setSetRangeBtnOpt(\"Even Number\")\n      scanRange = \"Even Number\";\n    }\n\n    const handleEveryFive = () => {\n      setSetRangeBtnOpt(\"Every 5 hosts\")\n      scanRange = \"Every 5 hosts\";\n    }\n\n    const handleEveryTen = () => {\n      setSetRangeBtnOpt(\"Every 10 hosts\")\n      scanRange = \"Every 10 hosts\";\n    }\n\n    const handleEveryFifteen = () => {\n      setSetRangeBtnOpt(\"Every 15 hosts\")\n      scanRange = \"Every 15 hosts\";\n    }\n\n    const handleEveryTwenty = () => {\n      setSetRangeBtnOpt(\"Every 20 hosts\")\n      scanRange = \"Every 20 hosts\";\n    }\n\n    /*const count = useSelector((state: storeTypes) => state.countReducer)*/\n    /*const [count, setCount] = React.useState(0);*/\n\n    return (\n      <div className={classes.root}>\n          {/*<h1>{`Click: ${count} times`}</h1>\n          <button type=\"button\" onClick={(): void => setCount( count + 1 )}>Click</button>*/}\n          <Grid container justify=\"center\" spacing={3} style={{padding: \"25px 55px\"}}>\n            <FormControl component=\"fieldset\">\n              <FormLabel component=\"legend\">\n                Scan host with: <span>{setRangeBtnOpt}</span>\n              </FormLabel>\n                <RadioGroup row aria-label=\"position\" name=\"position\" defaultValue=\"top\">\n                  <Grid item xs={6} className={cardStyling.centeredGrid}>\n                    <FormControlLabel\n                      value=\"oddNum\"\n                      control={\n                        <Radio \n                          color=\"primary\"\n                          name=\"oddNo\" \n                          checked={setRangeBtnState.option}\n                          onClick={handleOddNo} \n                          onChange={handleSetRangeBtnStateChange}\n                        />\n                      }\n                      label=\"Odd Numbers Only\"\n                      labelPlacement=\"end\"\n                      className={cardStyling.radioBtn}\n                    />\n                  </Grid>\n                  <Grid item xs={6} className={cardStyling.centeredGrid}>\n                    <FormControlLabel\n                      value=\"evenNum\"\n                      control={\n                        <Radio \n                          color=\"primary\"\n                          name=\"evenNo\" \n                          checked={setRangeBtnState.option}\n                          onClick={handleEvenNo} \n                          onChange={handleSetRangeBtnStateChange}\n                        />\n                      }\n                      label=\"Even Numbers Only\"\n                      labelPlacement=\"end\"\n                      className={cardStyling.radioBtn}\n                    />\n                  </Grid>\n                      \n                  <Grid item xs={6} className={cardStyling.centeredGrid}>\n                    <FormControlLabel\n                      value=\"everyFive\"\n                      control={\n                        <Radio \n                          color=\"primary\"\n                          name=\"everyFive\" \n                          checked={setRangeBtnState.option}\n                          onClick={handleEveryFive} \n                          onChange={handleSetRangeBtnStateChange}\n                        />\n                      }\n                      label=\"Every 5 hosts\"\n                      labelPlacement=\"end\"\n                      className={cardStyling.radioBtn}\n                    />\n                  </Grid>\n                  <Grid item xs={6} className={cardStyling.centeredGrid}>\n                    <FormControlLabel\n                      value=\"everyTen\"\n                      control={\n                        <Radio \n                          color=\"primary\"\n                          name=\"everyTen\" \n                          checked={setRangeBtnState.option}\n                          onClick={handleEveryTen} \n                          onChange={handleSetRangeBtnStateChange}\n                        />\n                      }\n                      label=\"Every 10 hosts\"\n                      labelPlacement=\"end\"\n                      className={cardStyling.radioBtn}\n                    />\n                  </Grid>\n\n                  <Grid item xs={6} className={cardStyling.centeredGrid}>\n                    <FormControlLabel\n                      value=\"everyFifteen\"\n                      control={\n                        <Radio \n                          color=\"primary\"\n                          name=\"everyFifteen\" \n                          checked={setRangeBtnState.option}\n                          onClick={handleEveryFifteen} \n                          onChange={handleSetRangeBtnStateChange}\n                        />\n                      }\n                      label=\"Every 15 hosts\"\n                      labelPlacement=\"end\"\n                      className={cardStyling.radioBtn}\n                    />\n                  </Grid>\n                  <Grid item xs={6} className={cardStyling.centeredGrid}>\n                    <FormControlLabel\n                      value=\"everyTwenty\"\n                      control={\n                        <Radio \n                          color=\"primary\"\n                          name=\"everyTwenty\"\n                          checked={setRangeBtnState.option}\n                          onClick={handleEveryTwenty} \n                          onChange={handleSetRangeBtnStateChange}\n                        />\n                      }\n                      label=\"Every 20 hosts\"\n                      labelPlacement=\"end\"\n                      className={cardStyling.radioBtn}\n                    />\n                  </Grid>\n                  \n                </RadioGroup>\n            </FormControl>\n          </Grid>\n      </div>\n    );\n  }\n\n  function Others() {\n    const classes = useStyles();\n    const cardStyling = cardStyles();\n    \n    const [auto, setAuto] = React.useState(false);\n    const [cveDetect, setCveDetect] = React.useState(false);\n\n    const handleAuto = () => {\n      setAuto(!auto);\n      if( auto === true ){\n        autoVal = false;\n        console.log(autoVal);\n      } else{\n        autoVal = true;\n        console.log(autoVal);\n      }\n    };\n\n    const handleCve = () => {\n      setCveDetect(!cveDetect);\n      if( cveDetect === true ){\n        cveVal = false;\n        console.log(cveVal);\n      } else{\n        cveVal = true;\n        console.log(cveVal);\n      }\n    };\n\n    const [state, setState] = React.useState({\n      autoState: false,\n      cveState: false,\n    });\n\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n      setState({ ...state, [event.target.name]: event.target.checked });\n    };\n\n    const autoArray = automation.length;\n\n    return (\n      <>\n        <Card className={auto === true ? cardStyling.on : cardStyling.off} variant=\"outlined\" >\n          <CardContent>\n            <Grid container spacing={3}>\n              <Grid item xs={6}>\n                  <Card className={auto === true ? cardStyling.on : cardStyling.off} variant=\"outlined\" >\n                      <CardContent>\n                      <Typography className={cardStyling.title} style={{fontSize: 25}} color=\"textSecondary\" gutterBottom>\n                          Automation\n                      </Typography>\n                      <Typography variant=\"h5\" component=\"h2\">\n                      </Typography>\n                          <Divider style={{marginTop: 15, marginBottom: 15,}}/>\n                      <Typography variant=\"body2\" component=\"p\">\n                          When the system scan find out the result output as no host is alive, automation will allow the scan run again until there is at least one host is alive or all the hosts in desinated range is scanned.\n                      </Typography>\n                      </CardContent>\n                      <CardActions>\n                      <div style={{position:\"relative\", top: 35, left: 10,}}>\n                        <FormControlLabel\n                          control={\n                            <Switch\n                              checked={auto}\n                              onChange={handleAuto}\n                              name=\"auto\"\n                              color=\"primary\"\n                            />\n                          }\n                          label=\"Primary\"\n                        />\n                      </div>\n                      </CardActions>\n                  </Card>\n              </Grid>\n\n              <Grid item xs={6}>\n                  <Card className={cveDetect === true ? cardStyling.on : cardStyling.off} variant=\"outlined\" >\n                      <CardContent>\n                      <Typography className={cardStyling.title} style={{fontSize: 25}} color=\"textSecondary\" gutterBottom>\n                          CVE Detect\n                      </Typography>\n                      <Typography variant=\"h5\" component=\"h2\">\n                      </Typography>\n                          <Divider style={{marginTop: 15, marginBottom: 15,}}/>\n                      <Typography variant=\"body2\" component=\"p\">\n                          When the system scan find out the result output as no host is alive, automation will allow the scan run again until there is at least one host is alive or all the hosts in desinated range is scanned.\n                      </Typography>\n                      </CardContent>\n                      <CardActions>\n                      <div style={{position:\"relative\", top: 35, left: 10,}}>\n                          <FormControlLabel\n                            control={\n                              <Switch\n                                checked={cveDetect}\n                                onChange={handleCve}\n                                name=\"cveDetect\"\n                                color=\"primary\"\n                              />\n                            }\n                            label=\"Primary\"\n                          />\n                      </div>\n                      </CardActions>\n                  </Card>\n              </Grid>\n            </Grid>\n          </CardContent>\n          <CardActions>\n              <Button style={{float: \"right\"}}>Save</Button>\n          </CardActions>\n        </Card>\n          </>\n    );\n  }\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\" style={{backgroundColor: \"#333\"}}>\n        <Tabs value={value} onChange={handleChange} aria-label=\"simple tabs example\" centered>\n          <Tab label=\"Set Range\" {...a11yProps(0)} className={classes.tabs} style={{display: \"none\"}}/>\n          <Tab label=\"Set Range Button\" {...a11yProps(1)} className={classes.tabs}/>\n          <Tab label=\"Set Flags\" {...a11yProps(2)} className={classes.tabs}/>\n          <Tab label=\"Others\" {...a11yProps(3)} className={classes.tabs}/>\n        </Tabs>\n      </AppBar>\n      <TabPanel value={value} index={0}>\n        \n      </TabPanel>\n      <TabPanel value={value} index={1}>\n        <SetRange />\n      </TabPanel>\n      <TabPanel value={value} index={2}>\n        <SetFlags /><span></span>\n      </TabPanel>\n      <TabPanel value={value} index={3}>\n        <Grid container justify=\"center\" spacing={8} style={{padding: \"25px 75px\"}}>\n          <br/><br/>\n          <Others />\n        </Grid>\n      </TabPanel>\n    </div>\n  );\n}\n\nconst Transition = React.forwardRef(function Transition(\n  props: TransitionProps & { children?: React.ReactElement },\n  ref: React.Ref<unknown>,\n) {\n  return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nexport default function FullScreenDialog() {\n  const classes = useStyles();\n  const [open, setOpen] = React.useState(false);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div>\n      <Button variant=\"outlined\" color=\"primary\" size=\"small\" style={{textTransform: \"capitalize\"}} onClick={handleClickOpen}>\n        Settings\n      </Button>\n      <Dialog fullScreen open={open} onClose={handleClose} TransitionComponent={Transition}>\n        <Toolbar style={{backgroundColor: \"#333\"}}>\n          <IconButton edge=\"start\" color=\"inherit\" onClick={handleClose} aria-label=\"close\">\n            <CloseIcon style={{color:\"#fff\"}} />\n          </IconButton>\n          <Typography variant=\"h6\" className={classes.title}>\n            Settings\n          </Typography>\n        </Toolbar>\n        <SettingsTab />\n      </Dialog>\n    </div>\n  );\n}\n",["439","440"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/HomeSettings/ServiceAndVersionDetectiony.tsx",["441","442"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/HomeSettings/HostDiscovery.tsx",["443","444"],"import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Grid from '@material-ui/core/Grid';\n\n// json\nimport Data from './json/HostDiscovery/data.json'\n\nconst useStyles = makeStyles({\n  root: {\n    minWidth: 275,\n  },\n  bullet: {\n    display: 'inline-block',\n    margin: '0 2px',\n    transform: 'scale(0.8)',\n  },\n  title: {\n    fontSize: 20,\n  },\n  pos: {\n    marginBottom: 12,\n  },\n});\n\nexport default function OutlinedCard() {\n  const classes = useStyles();\n  const bull = <span className={classes.bullet}>•</span>;\n\n  const [state, setState] = React.useState({\n      checkbox: false,\n  });\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setState({ ...state, [event.target.name]: event.target.checked });\n  };\n\n\n  return (\n    \n    <Card className={classes.root} variant=\"outlined\">\n      <CardContent>\n        <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n          Host Discovery\n        </Typography>\n            <Divider style={{marginTop: 15, marginBottom: 15,}}/>\n        <Typography variant=\"body2\" component=\"p\">\n             <FormControl component=\"fieldset\">\n                <FormGroup aria-label=\"position\" row>\n                    <Grid container spacing={3}>\n                        {Data.map((obj) => (\n                            <Grid item xs={3}>\n                                <Tooltip title={obj.tooltip} arrow placement=\"top\">\n                                    <FormControlLabel\n                                        value=\"end\"\n                                        control={\n                                            <Checkbox \n                                                color=\"primary\" \n                                            />\n                                        }\n                                        label={obj.flag}\n                                        labelPlacement=\"end\"\n                                    />\n                                </Tooltip>\n                            </Grid>\n                        ))}\n                    </Grid>\n                </FormGroup>\n            </FormControl>\n        </Typography>\n        <Divider style={{marginTop: 20,}}/>\n      </CardContent>\n      <CardActions>\n        <Button size=\"small\">Clear</Button>\n        <Button size=\"small\">Save</Button>\n      </CardActions>\n    </Card>\n  );\n}\n","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/HomeSettings/PortSpecification.tsx",["445","446"],"import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Grid from '@material-ui/core/Grid';\n\n// json\nimport Data from './json/PortSpecification/data.json'\n\nconst useStyles = makeStyles({\n  root: {\n    minWidth: 275,\n  },\n  bullet: {\n    display: 'inline-block',\n    margin: '0 2px',\n    transform: 'scale(0.8)',\n  },\n  title: {\n    fontSize: 20,\n  },\n  pos: {\n    marginBottom: 12,\n  },\n});\n\nexport default function OutlinedCard() {\n  const classes = useStyles();\n  const bull = <span className={classes.bullet}>•</span>;\n\n  const [state, setState] = React.useState({\n      checkbox: false,\n  });\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setState({ ...state, [event.target.name]: event.target.checked });\n  };\n\n\n  return (\n    \n    <Card className={classes.root} variant=\"outlined\">\n      <CardContent>\n        <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n          Port Specification\n        </Typography>\n            <Divider style={{marginTop: 15, marginBottom: 15,}}/>\n        <Typography variant=\"body2\" component=\"p\">\n             <FormControl component=\"fieldset\">\n                <FormGroup aria-label=\"position\" row>\n                    <Grid container spacing={3}>\n                        {Data.map((obj) => (\n                            <Grid item xs={5}>\n                                <Tooltip title={obj.tooltip} arrow placement=\"top\">\n                                    <FormControlLabel\n                                        value=\"end\"\n                                        control={\n                                            <Checkbox \n                                                color=\"primary\" \n                                            />\n                                        }\n                                        label={obj.flag}\n                                        labelPlacement=\"end\"\n                                    />\n                                </Tooltip>\n                            </Grid>\n                        ))}\n                    </Grid>\n                </FormGroup>\n            </FormControl>\n        </Typography>\n        <Divider style={{marginTop: 20,}}/>\n      </CardContent>\n      <CardActions>\n        <Button size=\"small\">Clear</Button>\n        <Button size=\"small\">Save</Button>\n      </CardActions>\n    </Card>\n  );\n}\n","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/HomeSettings/ScanTechinques.tsx",["447","448"],"import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Grid from '@material-ui/core/Grid';\n\n// json\nimport Data from './json/ScanTechniques/data.json'\n\nconst useStyles = makeStyles({\n  root: {\n    minWidth: 275,\n  },\n  bullet: {\n    display: 'inline-block',\n    margin: '0 2px',\n    transform: 'scale(0.8)',\n  },\n  title: {\n    fontSize: 20,\n  },\n  pos: {\n    marginBottom: 12,\n  },\n});\n\nexport default function OutlinedCard() {\n  const classes = useStyles();\n  const bull = <span className={classes.bullet}>•</span>;\n\n  const [state, setState] = React.useState({\n      checkbox: false,\n  });\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setState({ ...state, [event.target.name]: event.target.checked });\n  };\n\n\n  return (\n    \n    <Card className={classes.root} variant=\"outlined\">\n      <CardContent>\n        <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n          Scan Techinques\n        </Typography>\n            <Divider style={{marginTop: 15, marginBottom: 15,}}/>\n        <Typography variant=\"body2\" component=\"p\">\n             <FormControl component=\"fieldset\">\n                <FormGroup aria-label=\"position\" row>\n                    <Grid container spacing={3}>\n                        {Data.map((obj) => (\n                            <Grid item xs={3}>\n                                <Tooltip title={obj.tooltip} arrow placement=\"top\">\n                                    <FormControlLabel\n                                        value=\"end\"\n                                        control={\n                                            <Checkbox \n                                                color=\"primary\" \n                                            />\n                                        }\n                                        label={obj.flag}\n                                        labelPlacement=\"end\"\n                                    />\n                                </Tooltip>\n                            </Grid>\n                        ))}\n                    </Grid>\n                </FormGroup>\n            </FormControl>\n        </Typography>\n        <Divider style={{marginTop: 20,}}/>\n      </CardContent>\n      <CardActions>\n        <Button size=\"small\">Clear</Button>\n        <Button size=\"small\">Save</Button>\n      </CardActions>\n    </Card>\n  );\n}\n","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/HomeSettings/TimingAndPerformance.tsx",[],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/defaultScanModes/defaultModeDialog.tsx",["449","450","451","452","453","454"],"import React, {useState} from 'react';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItem from '@material-ui/core/ListItem';\nimport List from '@material-ui/core/List';\nimport Divider from '@material-ui/core/Divider';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport Slider from '@material-ui/core/Slider';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Slide from '@material-ui/core/Slide';\nimport { TransitionProps } from '@material-ui/core/transitions';\n\n// Mobx\nimport { observer } from 'mobx-react-lite'\nimport mode from '../../Mobx/Models/defaultScanModeStatus'\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    paper: {\n      padding: theme.spacing(2),\n      textAlign: 'left',\n      backgroundColor: \"#fefefe\",\n      color: \"#333333\",\n    },\n    centerGrid: {\n        textAlign: \"center\",\n        marginTop: 15,\n    },\n    listGrid: {\n        width: '100%',\n        maxWidth: 360,\n        backgroundColor: theme.palette.background.paper,\n    },\n    appBar: {\n        position: 'relative',\n      },\n      title: {\n        marginLeft: theme.spacing(2),\n        flex: 1,\n    },\n    avatarText: {\n        background: \"#4A92FF\",\n        borderRadius: 6,\n        color: \"#fff\",\n        padding: \"2px 6px\",\n    }, \n    sectionStyle: {\n        marginTop: 35, \n        border: \"1px solid #C4C4C4\", \n        padding: \"10px 10px\", \n        borderRadius: 5,\n    },\n    sectionTitleBg: {\n        position: \"relative\",\n        bottom: 22,\n        background: \"#fff\",\n        padding: \"0 5px\",\n        width: \"auto\",\n    },\n    sectionTitle: {\n        color: \"#757575\",\n        fontSize: 13,\n    },\n  }),\n);\n\nconst Transition = React.forwardRef(function Transition(\n  props: TransitionProps & { children?: React.ReactElement },\n  ref: React.Ref<unknown>,\n) {\n  return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\n\nexport default observer (({index}:{index: number}) => {\n  const classes = useStyles();\n  const [open, setOpen] = useState(false);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const [value, setValue] = useState<number>(mode.data[index].freq);\n\n  const handleFreqChange = (event: any, newValue: number | number[]) => {\n    setValue(newValue as number);\n  };\n\n  const [radio, setRadio] = useState(\"-v\");\n  const handleRadioChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setRadio((event.target as HTMLInputElement).value);\n  };\n\n\n  return (\n    <div>\n      <Button variant=\"outlined\" color=\"primary\" onClick={handleClickOpen}>\n        Settings\n      </Button>\n      <Dialog fullScreen open={open} onClose={handleClose} TransitionComponent={Transition}>\n        <AppBar className={classes.appBar}>\n          <Toolbar>\n            <IconButton edge=\"start\" color=\"inherit\" onClick={handleClose} aria-label=\"close\">\n              <CloseIcon />\n            </IconButton>\n            <Typography variant=\"h6\" className={classes.title}>\n              {mode.data[index].name}\n            </Typography>\n            <Button autoFocus color=\"inherit\" onClick={handleClose}>\n              save\n            </Button>\n          </Toolbar>\n        </AppBar>\n          <table style={{marginTop: 25, padding: \"45px 45px\"}}>\n            <tr>\n                <td>\n                    <TextField \n                        id=\"outlined-basic\" \n                        label=\"Current Command\" \n                        defaultValue={`${mode.data[index].command} [ Target or Domain ]`}\n                        variant=\"outlined\" \n                        size=\"small\"\n                        style={{\n                            width: \"100%\",\n                            textAlignLast: \"center\",\n                        }}\n                        inputProps={{ \n                            readOnly: true, \n                        }}\n                    />\n                </td>\n            </tr>\n                <tr>\n                    <td>\n                        <div className={classes.sectionStyle}>\n                            <span className={classes.sectionTitleBg}>\n                                <span className={classes.sectionTitle}>Scan Frequency</span>\n                            </span>\n                            <div>\n                                <Slider \n                                    value={value} \n                                    onChange={handleFreqChange} \n                                    max={5}\n                                    min={0}\n                                    step={1}\n                                    valueLabelDisplay=\"auto\"\n                                    style={{\n                                        width: \"70%\",\n                                        marginLeft: 145,\n                                    }}    \n                                />\n                            </div>\n                                <br/>\n                            <Typography style={{textAlign: \"right\",marginRight: 35}}>\n                                -T&nbsp;\n                                <Tooltip \n                                    title=\"[ -T ] --- Specifies the timing (Timing) used in the scanning process, there are always 6 levels (0-5), the level increases, the faster the scanning speed.\" \n                                    placement=\"top\" \n                                    arrow\n                                >\n                                    <span className={classes.avatarText}>{value}</span>\n                                </Tooltip>\n                            </Typography>\n                        </div>\n                    </td>\n                </tr>\n                <tr>\n                <td>\n                    <div className={classes.sectionStyle}>\n                        <span className={classes.sectionTitleBg}>\n                            <span className={classes.sectionTitle}>Flag</span>\n                        </span>\n                        <div style={{textAlign: \"center\"}}>\n                            <FormControl component=\"fieldset\">\n                                <table className=\"scanModeSettingFlagTable\">\n                                    <tr>\n                                        <td>\n                                            {\n                                              mode.data[index].value == \"topOneHundredScanMode\" ? \n                                                null \n                                                  :\n                                                <>\n                                                  <RadioGroup row aria-label=\"position\" name=\"position\" defaultValue=\"top\" value={radio} onChange={handleRadioChange}>\n                                                      <Tooltip title=\"Increase the verbosity level\" placement=\"top\" arrow>\n                                                          <FormControlLabel\n                                                              value=\"-v\"\n                                                              control={<Radio color=\"primary\"/>}\n                                                              label=\"-v\"\n                                                              labelPlacement=\"end\"\n                                                          />\n                                                      </Tooltip>\n                                                      <Tooltip title=\"Use more v for greater effect\" placement=\"top\" arrow>\n                                                          <FormControlLabel\n                                                              value=\"-vv\"\n                                                              control={<Radio color=\"primary\" />}\n                                                              label=\"-vv\"\n                                                              labelPlacement=\"end\"\n                                                          />\n                                                      </Tooltip>\n                                                  </RadioGroup>\n                                                </>\n                                            }\n                                        </td>\n                                        <td>\n                                            <Tooltip arrow placement=\"top\" title={mode.data[index].flagsDes}>\n                                              <FormControlLabel\n                                                  value={mode.data[index].flags}\n                                                  control={\n                                                    <Checkbox \n                                                      color=\"primary\" \n                                                      defaultChecked={mode.data[index].stMust === true ? true : false}\n                                                      disabled={mode.data[index].stMust === true ? true : false}\n                                                    />\n                                                  }\n                                                  label={mode.data[index].flags}\n                                                  labelPlacement=\"end\"\n                                                  \n                                              />\n                                            </Tooltip>\n                                            {\n                                              mode.data[index].secFlags == \"\" ? null :\n                                              <>\n                                                <Tooltip arrow placement=\"top\" title={mode.data[index].secFlagsDes}>\n                                                  <FormControlLabel\n                                                      value={mode.data[index].secFlags}\n                                                      control={\n                                                        <Checkbox \n                                                          color=\"primary\" \n                                                          defaultChecked={mode.data[index].secMust === true ? true : false}\n                                                          disabled={mode.data[index].secMust === true ? true : false}\n                                                        />\n                                                      }\n                                                      label={mode.data[index].secFlags}\n                                                      labelPlacement=\"end\"\n                                                  />\n                                                </Tooltip>\n                                              </>\n                                            }\n                                        </td>\n                                    </tr>\n                                </table>\n                            </FormControl>\n                        </div>\n                    </div>\n                </td>\n            </tr>\n        </table>\n    \n        </Dialog>\n    </div>\n  );\n})\n  ","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/HomeSettings/OSDetection.tsx",["455","456"],"import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Grid from '@material-ui/core/Grid';\n\n// json\nimport Data from './json/OSDetection/data.json'\n\nconst useStyles = makeStyles({\n  root: {\n    minWidth: 275,\n  },\n  bullet: {\n    display: 'inline-block',\n    margin: '0 2px',\n    transform: 'scale(0.8)',\n  },\n  title: {\n    fontSize: 20,\n  },\n  pos: {\n    marginBottom: 12,\n  },\n});\n\nexport default function OutlinedCard() {\n  const classes = useStyles();\n  const bull = <span className={classes.bullet}>•</span>;\n\n  const [state, setState] = React.useState({\n      checkbox: false,\n  });\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setState({ ...state, [event.target.name]: event.target.checked });\n  };\n\n\n  return (\n    \n    <Card className={classes.root} variant=\"outlined\">\n      <CardContent>\n        <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n          OS Detection\n        </Typography>\n            <Divider style={{marginTop: 15, marginBottom: 15,}}/>\n        <Typography variant=\"body2\" component=\"p\">\n             <FormControl component=\"fieldset\">\n                <FormGroup aria-label=\"position\" row>\n                    <Grid container spacing={3}>\n                        {Data.map((obj) => (\n                            <Grid item xs={5}>\n                                <Tooltip title={obj.tooltip} arrow placement=\"top\">\n                                    <FormControlLabel\n                                        value=\"end\"\n                                        control={\n                                            <Checkbox \n                                                color=\"primary\" \n                                            />\n                                        }\n                                        label={obj.flag}\n                                        labelPlacement=\"end\"\n                                        style={{\n                                          whiteSpace: \"nowrap\",\n                                        }}\n                                    />\n                                </Tooltip>\n                            </Grid>\n                        ))}\n                    </Grid>\n                </FormGroup>\n            </FormControl>\n        </Typography>\n        <Divider style={{marginTop: 20,}}/>\n      </CardContent>\n      <CardActions>\n        <Button size=\"small\">Clear</Button>\n        <Button size=\"small\">Save</Button>\n      </CardActions>\n    </Card>\n  );\n}\n",["457","458"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/HomeSettings/SetFlags.tsx",["459"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/Drawer.tsx",["460","461","462"],"import React, { Suspense } from 'react';\nimport { Switch, Route, Link, BrowserRouter } from \"react-router-dom\";\nimport clsx from 'clsx';\nimport { createStyles, Theme, makeStyles } from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport Button from '@material-ui/core/Button';\nimport List from '@material-ui/core/List';\nimport Divider from '@material-ui/core/Divider';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\nimport MailIcon from '@material-ui/icons/Mail';\nimport MenuIcon from '@material-ui/icons/Menu';\n\nimport HomeIcon from '@material-ui/icons/Home';\nimport DefaultScanModeIcon from '@material-ui/icons/GpsNotFixed';\nimport CustomisedScanModeIcon from '@material-ui/icons/People';\nimport ScanResultIcon from '@material-ui/icons/Storage';\nimport ResultComparisonIcon from '@material-ui/icons/CompareArrows';\nimport ScanHistoryIcon from '@material-ui/icons/History';\n\n// Components\nimport Home from '../Views/Home'\nimport DefaultScanMode from '../Views/DefaultScanMode'\nimport CustomisedScanMode from '../Views/CustomisedScanMode'\nimport ScanResult from '../Views/ScanResult'\nimport ScanComparison from '../Views/ScanComparison'\nimport ScanHistory from '../Views/ScanHistory'\n\n// Default Scan Modes\nimport PingScanMode from '../Components/defaultScanModes/pingScanMode'\nimport FullPortsScanMode from '../Components/defaultScanModes/fullPortsScanMode'\nimport InenseScanMode from '../Components/defaultScanModes/intenseScanMode'\nimport NonPingScanMode from '../Components/defaultScanModes/nonPingScanMode'\nimport LightningScanMode from '../Components/defaultScanModes/lightningScanMode'\nimport Top100PortsScanMode from '../Components/defaultScanModes/top100portsScanMode'\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        list: {\n            width: 250,\n            },\n            fullList: {\n            width: 'auto',\n            },\n            content: {\n            flexGrow: 1,\n            padding: theme.spacing(3),\n            marginTop: 65,\n        },\n        root: {\n            display: 'flex',\n          },\n          appBar: {\n            zIndex: theme.zIndex.drawer + 1,\n            backgroundColor: \"#333333\",\n          },\n          drawer: {\n            width: drawerWidth,\n            flexShrink: 0,\n          },\n          drawerPaper: {\n            width: drawerWidth,\n          },\n          drawerContainer: {\n            overflow: 'auto',\n          },\n        itemIcon: {\n          color: \"#0E397C\",\n        }\n    }),\n);\n\ntype Anchor = 'left';\n\nexport default () => {\n  const classes = useStyles();\n  const [state, setState] = React.useState({\n    top: false,\n    left: false,\n    bottom: false,\n    right: false,\n  });\n\n  const toggleDrawer = (anchor: Anchor, open: boolean) => (\n    event: React.KeyboardEvent | React.MouseEvent,\n  ) => {\n    if (\n      event.type === 'keydown' &&\n      ((event as React.KeyboardEvent).key === 'Tab' ||\n        (event as React.KeyboardEvent).key === 'Shift')\n    ) {\n      return;\n    }\n\n    setState({ ...state, [anchor]: open });\n  };\n\n  const list = (anchor: Anchor) => (\n    <div\n      className={clsx(classes.list, {\n        [classes.fullList]: anchor === 'left'\n      })}\n      role=\"presentation\"\n      onClick={toggleDrawer(anchor, false)}\n      onKeyDown={toggleDrawer(anchor, false)}\n    > \n      <List id=\"menuList\">\n        <Typography variant=\"h4\" id=\"menuAppTitle\">ChiNmap</Typography>\n            \n            <br /><Divider />\n\n        <Link to='/'>\n            <ListItem button key=\"home\">\n                <ListItemIcon><InboxIcon className={classes.itemIcon}/></ListItemIcon>\n                <ListItemText primary=\"Home\" />\n            </ListItem>\n        </Link>\n\n        <Link to='/defaultScanMode'>\n            <ListItem button key=\"defaultScanMode\">\n                <ListItemIcon><DefaultScanModeIcon className={classes.itemIcon}/></ListItemIcon>\n                <ListItemText primary=\"Default Scan Modes\" />\n            </ListItem>\n        </Link>\n        \n        <Link to='/customisedScanMode'>\n            <ListItem button key=\"customisedScanMode\">\n                <ListItemIcon><CustomisedScanModeIcon className={classes.itemIcon}/></ListItemIcon>\n                <ListItemText primary=\"Customised Scan Modes\" />\n            </ListItem>\n        </Link>\n\n        <Link to='/scanResult'>\n            <ListItem button key=\"scanResult\">\n                <ListItemIcon><ScanResultIcon className={classes.itemIcon}/></ListItemIcon>\n                <ListItemText primary=\"Scan Result\" />\n            </ListItem>\n        </Link>\n\n        <Link to='/scanComparison'>\n             <ListItem button key=\"scanComparison\">\n                <ListItemIcon><ResultComparisonIcon className={classes.itemIcon}/></ListItemIcon>\n                <ListItemText primary=\"Scan Comparison\" />\n            </ListItem>\n        </Link>\n\n        <Link to='/scanHistory'>\n            <ListItem button key=\"scanHistory\">\n                <ListItemIcon><ScanHistoryIcon className={classes.itemIcon}/></ListItemIcon>\n                <ListItemText primary=\"Scan History\" />\n            </ListItem>\n        </Link>\n        \n      </List>\n    </div>\n  );\n\n  return (\n    <div>\n      {(['left'] as Anchor[]).map((anchor) => (\n        <React.Fragment key={anchor}>\n            <AppBar position=\"fixed\" className={classes.appBar}>\n                <Toolbar>\n                    <Button onClick={toggleDrawer(anchor, true)} id=\"menuBtn\">\n                        <MenuIcon style={{fontSize: 35}}/>\n                    </Button>\n                </Toolbar>\n            </AppBar>\n        <BrowserRouter>\n            <Drawer anchor={anchor} open={state[anchor]} onClose={toggleDrawer(anchor, false)}>\n                {list(anchor)}\n            </Drawer>\n            <main className={classes.content}>\n                <Suspense fallback={<div>Loading...</div>}>\n                    <Switch>\n                        <Route \n                            exact \n                            path=\"/\" \n                            render={ \n                                () => <Home /> \n                            } \n                        />\n\n                        <Route \n                            exact \n                            path=\"/defaultScanMode\" \n                            render={ \n                                () => <DefaultScanMode /> \n                            } \n                        />\n                        \n                        <Route \n                            path=\"/customisedScanMode\" \n                            render={ \n                                () => <CustomisedScanMode />\n                            } \n                        />\n\n                        <Route \n                            path=\"/scanResult\" \n                            render={ \n                                () => <ScanResult />\n                            } \n                        />\n                        <Route \n                            path=\"/scanComparison\" \n                            render={ \n                                () => <ScanComparison />\n                            } \n                        />\n\n                        <Route \n                            path=\"/scanHistory\" \n                            render={ \n                                () => <ScanHistory />\n                            } \n                        />\n\n                        {/* Default Scan Mode Routes */ }\n                        <Route \n                            path=\"/pingScanMode\" \n                            render={ \n                                () => <PingScanMode />\n                            } \n                        />\n\n                        <Route \n                            path=\"/fullPortsScanMode\" \n                            render={ \n                                () => <FullPortsScanMode />\n                            } \n                        />\n\n                        <Route \n                            path=\"/intenseScanMode\" \n                            render={ \n                                () => <InenseScanMode />\n                            } \n                        />\n\n                        <Route \n                            path=\"/nonPingScanMode\" \n                            render={ \n                                () => <NonPingScanMode />\n                            } \n                        />\n\n                        <Route \n                            path=\"/lightningScanMode\" \n                            render={ \n                                () => <LightningScanMode />\n                            } \n                        />\n\n                        <Route \n                            path=\"/top100PortsScanMode\" \n                            render={ \n                                () => <Top100PortsScanMode />\n                            } \n                        />\n                        {/* Customised Scan Mode Routes */ }\n                        \n                    </Switch>\n                </Suspense>\n            </main>\n        </BrowserRouter>\n        </React.Fragment>\n      ))}\n    </div>\n  );\n}\n","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/defaultScanModes/lightningScanMode.tsx",["463","464","465","466","467"],"import React from 'react';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport { Switch, Route, Link, BrowserRouter } from \"react-router-dom\";\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography'\nimport TextField from '@material-ui/core/TextField';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Slider from '@material-ui/core/Slider';\n\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Switcher from '@material-ui/core/Switch';\nimport Button from '@material-ui/core/Button';\n\nimport IconButton from '@material-ui/core/IconButton';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport CloseIcon from '@material-ui/icons/Close';\n\nimport ScanModeIcon from '@material-ui/icons/Settings';\n\nimport '../../Styles/DefaultScanMode.css'\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    paper: {\n      padding: theme.spacing(2),\n      backgroundColor: \"#fefefe\",\n      color: \"#333333\",\n    },\n    centerGrid: {\n        textAlign: \"center\",\n        marginTop: 15,\n    },\n    avatarText: {\n        background: \"#4A92FF\",\n        borderRadius: 6,\n        color: \"#fff\",\n        padding: \"2px 6px\",\n    },  \n    switch: {\n        disaply: \"inline-block\",\n    },\n  }),\n);\n\nexport default function CenteredGrid() {\n  const classes = useStyles();\n  const [value, setValue] = React.useState<number>(0);\n\n  const handleChange = (event: any, newValue: number | number[]) => {\n    setValue(newValue as number);\n  };\n\n  const [state, setState] = React.useState({\n    Pn: true,\n    sT: true,\n    sU: true,\n  });\n\n  const handleSwitchChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setState({ ...state, [event.target.name]: event.target.checked });\n  };\n\n  const [open, setOpen] = React.useState(false);\n\n  const handleClick = () => {\n    setOpen(true);\n  };\n\n  const handleClose = (event: React.SyntheticEvent | React.MouseEvent, reason?: string) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    setOpen(false);\n  };\n\n  return (\n    <div className={classes.root}>\n      <Grid container spacing={5} justify=\"center\" alignItems=\"center\">\n       \n        <Grid item xs={10}>\n            <Paper className={classes.paper}>\n                <Typography variant=\"h6\">\n                    Lightning Scan Modes\n                </Typography>\n                    <br/>\n                <div>\n                    <TextField \n                        id=\"outlined-basic\" \n                        label=\"Current Command\" \n                        defaultValue=\"nmap -v -sU -sT -p -U:161, T:80 -T0 + [ Target IP / Domain ] \"\n                        variant=\"outlined\" \n                        size=\"small\"\n                        style={{\n                            width: \"80%\",\n                            marginLeft: 85,\n                            textAlignLast: \"center\",\n                        }}\n                        inputProps={{ \n                            readOnly: true, \n                        }}\n                    />\n                </div>\n                    <br/>\n                <div className={classes.root}>\n                    \n                </div>\n            </Paper>\n        </Grid>\n\n        <Grid item xs={10}>\n            <Paper className={classes.paper}>\n                <Typography variant=\"h6\">\n                    Scan Frequency\n                </Typography>\n                    <br/>\n                <div>\n                     <Slider \n                        value={value} \n                        onChange={handleChange} \n                        max={5}\n                        min={0}\n                        step={1}\n                        valueLabelDisplay=\"on\"\n                        style={{\n                            width: \"70%\",\n                            marginLeft: 145,\n                        }}    \n                    />\n                </div>\n                    <br/>\n                <Typography style={{textAlign: \"right\",marginRight: 35}}>\n                    -T&nbsp;\n                    <Tooltip \n                        title=\"[ -T ] --- Specifies the timing (Timing) used in the scanning process, there are always 6 levels (0-5), the level increases, the faster the scanning speed.\" \n                        placement=\"top\" \n                        arrow\n                    >\n                        <span className={classes.avatarText}>{value}</span>\n                    </Tooltip>\n                </Typography>\n            </Paper>\n        </Grid>\n\n        <Grid item xs={10}>\n           <Paper className={classes.paper}>\n                <Typography variant=\"h6\">\n                    Flags\n                </Typography>\n                    <br/>\n                <div style={{textAlign: \"center\"}}>\n                    <FormControl component=\"fieldset\">\n                        <table className=\"scanModeSettingFlagTable\">\n                            <tr>\n                                <td>\n                                    <RadioGroup row aria-label=\"position\" name=\"position\" defaultValue=\"top\">\n                                        <Tooltip title=\"Increase the verbosity level\" placement=\"top\" arrow>\n                                            <FormControlLabel\n                                                value=\"-v\"\n                                                control={<Radio color=\"primary\" />}\n                                                label=\"-v\"\n                                                labelPlacement=\"end\"\n                                            />\n                                        </Tooltip>\n                                        <Tooltip title=\"Use more v for greater effect\" placement=\"top\" arrow>\n                                            <FormControlLabel\n                                                value=\"-vv\"\n                                                control={<Radio color=\"primary\" />}\n                                                label=\"-vv\"\n                                                labelPlacement=\"end\"\n                                            />\n                                        </Tooltip>\n                                    </RadioGroup>\n                                </td>\n                                <td>\n                                    <Tooltip title=\"UDP port scan. THIS MUST BE CHOSEN.\" placement=\"top\" arrow>\n                                        <FormControlLabel\n                                            control={\n                                                <Switcher\n                                                    checked={state.sU}\n                                                    onChange={handleSwitchChange}\n                                                    name=\"sU\"\n                                                    color=\"primary\"\n                                                    disabled={true}\n                                                />\n                                            }\n                                            label=\"-sU\"\n                                            className={classes.switch}\n                                        />\n                                    </Tooltip>\n                                </td>\n                                <td>\n                                    <Tooltip title=\"TCP connect port scan (Default without root privilege). THIS MUST BE CHOSEN.\" placement=\"top\" arrow>\n                                        <FormControlLabel\n                                            control={\n                                                <Switcher\n                                                    checked={state.sT}\n                                                    onChange={handleSwitchChange}\n                                                    name=\"sT\"\n                                                    color=\"primary\"\n                                                    disabled={true}\n                                                />\n                                            }\n                                            label=\"-sT\"\n                                            className={classes.switch}\n                                        />\n                                    </Tooltip>\n                                </td>\n                            </tr>\n                        </table>\n                    </FormControl>\n                </div>\n          </Paper>\n        </Grid>\n\n        <Grid item xs={10} style={{position: \"absolute\", width: 902, bottom: 0}}>\n            <Paper className={classes.paper}>\n                <Link to=\"/defaultScanMode\">\n                    <Button variant=\"contained\">Back</Button>\n                </Link>                \n                <Button variant=\"contained\" style={{float: 'right'}} onClick={handleClick}>Save</Button>\n                <Snackbar\n                    anchorOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'left',\n                    }}\n                    open={open}\n                    autoHideDuration={6000}\n                    onClose={handleClose}\n                    message=\"Settings Save Successfully\"\n                    action={\n                    <React.Fragment>\n                         <Link to=\"/defaultScanMode\">\n                            <IconButton size=\"small\" aria-label=\"close\" color=\"inherit\" onClick={handleClose}>\n                                <CloseIcon fontSize=\"small\" style={{color: \"#fff\"}}/>\n                            </IconButton>\n                        </Link>\n                    </React.Fragment>\n                    }\n                />\n            </Paper>\n        </Grid>\n\n      </Grid>\n      \n    </div>\n  );\n}\n",["468","469"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/ScanResults/NmapOutput.tsx",["470","471","472","473","474","475","476","477","478","479","480","481","482","483","484","485","486","487","488","489","490","491","492","493","494","495","496","497","498","499","500","501","502","503","504","505"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Mobx/Models/resultSelectStatus.tsx",[],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/ScanResults/ExportResult.tsx",["506","507","508","509","510","511","512","513","514","515","516","517","518"],"import React, {useState} from 'react';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport Grid from '@material-ui/core/Grid'\nimport Tooltip from '@material-ui/core/Tooltip'\nimport { observer } from 'mobx-react-lite'\nimport HelpIcon from '@material-ui/icons/Help';\n\nimport { scanTarget, targetData, targetTime } from '../target'\n\n// Backend\nimport { isScanning } from '../../Backend/frontendData/isScanning'\nimport { pureOutput } from '../../Backend/frontendData/Result'\nimport scannedIn from '../../Backend/frontendData/scannedIn.json'\nimport scannedTarget from '../../Backend/frontendData/scannedTargetForSelect.json'\nimport { rows } from '../../Backend/frontendData/getPortStatus'\n\n// Mobx Global Status\nimport storeTarget from '../../Mobx/Models/resultSelectStatus'\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      '& > *': {\n        margin: theme.spacing(1),\n        width: '25ch',\n      },\n    },\n  }),\n);\n\nexport default () => {\n    const datas = [{\n      first: 'foo',\n      second: 'bar'\n    }, {\n      first: 'foobar',\n      second: 'foobar'\n    }];\n\n    return (\n      <>\n          {scannedIn.map((obj) => (\n              obj.id !=  storeTarget.target ||  storeTarget.target === \"\" || obj.target === \"\" ?\n                  null\n                      :\n                  <>\n                      <Grid container justify=\"center\" spacing={4}>\n                          <Grid item xs={12} style={{textAlign: \"center\"}}>\n                              <form \n                                  noValidate \n                                  autoComplete=\"off\"\n                              >\n                                  <TextField \n                                      id=\"outlined-basic\" \n                                      label=\"Current Target\" \n                                      variant=\"outlined\" \n                                      value={obj.targetForSelect}\n                                      inputProps={{\n                                          readOnly: true,\n                                      }}\n                                      style={{\n                                          textAlignLast: \"center\",\n                                          width: \"60%\",\n                                      }}\n                                  />\n                                  \n                              </form>\n                          </Grid>\n                          <Grid item xs={6} style={{textAlign: \"center\"}}>\n                              <form \n                                  noValidate \n                                  autoComplete=\"off\"\n                              >\n                                  <TextField \n                                      id=\"outlined-basic\" \n                                      label=\"Target Scan Date [D/M/Y]\" \n                                      variant=\"outlined\" \n                                      value={obj.date}\n                                      inputProps={{\n                                          readOnly: true,\n                                      }}\n                                      style={{\n                                          textAlignLast: \"center\",\n                                          width: \"60%\",\n                                      }}\n                                  />\n                                  \n                              </form>\n                          </Grid>\n                          <Grid item xs={6} style={{textAlign: \"center\"}}>\n                          <Tooltip title=\"\" arrow placement=\"top\">\n                              <form \n                                  noValidate \n                                  autoComplete=\"off\"\n                              >\n                                  \n                                    <TextField \n                                        id=\"outlined-basic\" \n                                        label=\"Target Scan Time\" \n                                        variant=\"outlined\" \n                                        value={obj.time}\n                                        inputProps={{\n                                            readOnly: true,\n                                        }}\n                                        style={{\n                                            textAlignLast: \"center\",\n                                            width: \"60%\",\n                                        }}\n                                    />\n                              </form>\n                              </Tooltip>\n                          </Grid>\n  \n                            <Grid item xs={12} style={{textAlign: \"center\", position: \"relative\", left: 12,}}>\n                                <ButtonGroup \n                                    size=\"large\" \n                                    color=\"primary\" \n                                >\n                                    <Button \n                                      style={{width: \"50%\"}}\n                                    >\n                                        CSV\n                                    </Button>\n                                    \n                                    <Button style={{width: \"50%\"}}>\n                                        PDF\n                                    </Button>\n                                </ButtonGroup>\n                                <Tooltip title=\"By clicking the button, the scan result will be exported to a file in the format of CSV or Excel.\" arrow placement=\"top\">\n                                    <span style={{position:\"relative\", top: 5, left: 15, color: \"lightgrey\", cursor: \"pointer\"}}>\n                                        <HelpIcon style={{fontSize: 20}}/>\n                                    </span>\n                                </Tooltip>\n                            </Grid>\n                      </Grid>\n                      \n                  </>\n          ))}\n      </>\n    );\n}\n","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/NewModeOptions.tsx",[],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Exploit/FTP.tsx",["519","520"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanMode.tsx",["521","522","523","524","525","526"],"import React, {useState} from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Divider from '@material-ui/core/Divider';\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles, Theme } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport Slider from '@material-ui/core/Slider';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\n\nimport { customisedScanModes } from './NewScanModeArray'\n\nimport { TCPoptions } from './TCPoptions'\nimport { nonTCPoptions } from './nonTCPoptions'\n\n// Options \nimport Ping from './NewScanModeTab/Ping'\nimport NSE from './NewScanModeTab/NSE'\nimport Target from './NewScanModeTab/Target'\nimport Source from './NewScanModeTab/Source'\nimport Timing from './NewScanModeTab/Timing'\nimport Others from './NewScanModeTab/Others'\n\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  index: any;\n  value: any;\n}\n\nconst TabPanel = (props: TabPanelProps) => {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`simple-tabpanel-${index}`}\n      aria-labelledby={`simple-tab-${index}`}\n      {...other}\n    >\n      {value === index && (\n        <Box p={3}>\n          <Typography>{children}</Typography>\n        </Box>\n      )}\n    </div>\n  );\n}\n\nconst a11yProps = (index: any) => {\n  return {\n    id: `simple-tab-${index}`,\n    'aria-controls': `simple-tabpanel-${index}`,\n  };\n}\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    flexGrow: 1,\n    backgroundColor: theme.palette.background.paper,\n  },\n  avatarText: {\n    background: \"#4A92FF\",\n    borderRadius: 6,\n    color: \"#fff\",\n    padding: \"2px 6px\",\n  },  \n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  },\n  fullDes: {\n    color: \"red\",\n  },\n  des: {\n\n  },\n}));\n\nexport default () => {\n  const classes = useStyles();\n  const [open, setOpen] = useState(false);\n  const [modeName, setModeName] = useState(\"\");\n  const [modeDes, setModeDes] = useState(\"\");\n  const [value, setValue] = useState(0);\n  const [frequency, setFrequency] = useState<number>(4);\n  const [TCP, setTCP] = useState('');\n  const [nonTCP, setNonTCP] = useState('');\n\n  const handleTCP = (event: React.ChangeEvent<{ value: unknown }>) => {\n    setTCP(event.target.value as string);\n  };\n\n  const handleNonTCP = (event: React.ChangeEvent<{ value: unknown }>) => {\n    setNonTCP(event.target.value as string);\n  };\n\n  const handleScanFrequency = (event: any, newValue: number | number[]) => {\n    setFrequency(newValue as number);\n  };\n\n  const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\n    setValue(newValue);\n  };\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleModeName = (event: React.ChangeEvent<{ value: unknown }>) => {\n    setModeName(event.target.value as string)\n  }\n\n  const handleModeDes = (event: React.ChangeEvent<{ value: unknown }>) => {\n    setModeDes(event.target.value as string)\n  }\n\n  // Push to array\n  const [theArray, setTheArray] = React.useState(customisedScanModes);\n  const handleCreate = () => {\n    //setTheArray(theArray => [ ...theArray, {name: modeName, link: \"!@3\", value: \"dsad\", des: modeDes} ]);\n    //console.log(theArray);\n    \n    if( modeName == \"\" ) {\n      alert(\"Please Enter the Mode Name.\")\n    } else {\n      customisedScanModes.push({name: modeName, link: modeName, value: modeName, des: modeDes});\n      setOpen(false);\n    }\n  };\n\n  return (\n    <div>\n      <Button variant=\"contained\" onClick={handleClickOpen} style={{width: \"100%\", backgroundColor: \"#ffffff\", color: \"#333333\"}}>\n        Add New Scan Mode\n      </Button>\n      <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\" fullWidth maxWidth=\"sm\">\n        <DialogTitle id=\"form-dialog-title\">Add New Scan Mode</DialogTitle>\n        <DialogContent>\n            <Divider /><br/>\n            <AppBar position=\"static\">\n              <Tabs value={value} onChange={handleChange} aria-label=\"simple tabs example\" variant=\"scrollable\">\n                <Tab label=\"Profile\" {...a11yProps(0)} />\n                <Tab label=\"Ping\" {...a11yProps(1)} />\n                <Tab label=\"NSE\" {...a11yProps(2)} />\n                <Tab label=\"Target\" {...a11yProps(3)} />\n                <Tab label=\"Source\" {...a11yProps(4)} />\n                <Tab label=\"Timing\" {...a11yProps(5)} />\n                <Tab label=\"Others\" {...a11yProps(6)} />\n              </Tabs>\n            </AppBar>\n            <TabPanel value={value} index={0}>\n              <Grid container spacing={3} justify=\"center\">\n                  <div style={{textAlign: \"center\", width: \"100%\"}}>\n                    <Grid item xs={12}>\n                        <TextField \n                          value={modeName} \n                          onChange={handleModeName} \n                          label=\"Mode Name\" \n                          margin=\"dense\" \n                          size=\"small\"\n                          variant=\"outlined\"\n                          style={{\n                            width: \"80%\",\n                          }}\n                        />\n                    </Grid>\n                    <Grid item xs={12}>\n                      <TextField \n                          value={modeDes}\n                          onChange={handleModeDes}\n                          label=\"Mode Description (Optional)\" \n                          margin=\"dense\" \n                          multiline\n                          rows={3}\n                          size=\"small\"\n                          variant=\"outlined\"\n                          inputProps={{ \n                            maxLength: 100\n                          }}\n                          style={{\n                            width: \"80%\",\n                            textAlignLast: \"left\",\n                          }}\n                      />\n                      <Typography style={{textAlign: \"right\", color: \"lightgrey\", fontSize: 10, marginRight: 55}}>\n                        <span className={modeDes.length == 100 ? classes.fullDes : classes.des}>{modeDes.length}</span> / 100\n                      </Typography>\n                    </Grid>\n                    <br/><Divider variant=\"middle\" /><br/>\n                    <Grid item xs={12}>\n                        <Typography style={{textAlign: \"left\"}}>Scan Frequency</Typography>\n                        <Slider \n                          value={frequency} \n                          onChange={handleScanFrequency}  \n                          min={0}\n                          max={5}\n                          step={1}\n                          valueLabelDisplay=\"auto\"\n                          aria-labelledby=\"continuous-slider\" \n                          style={{\n                            width: \"50%\",\n                          }}\n                        />\n\n                        <Tooltip \n                            title=\"[ -T ] --- Specifies the timing (Timing) used in the scanning process, there are always 6 levels (0-5), the level increases, the faster the scanning speed.\" \n                            placement=\"top\" \n                            arrow\n                        >\n                          <Typography style={{textAlign: \"center\"}}>-T <span className={classes.avatarText}>{frequency}</span></Typography>\n                        </Tooltip>\n                    </Grid>\n                    <br/><Divider variant=\"middle\" /><br/>\n                    <Grid item xs={12}>\n                      <Tooltip \n                        arrow \n                        placement=\"left\"\n                        title=\"TCP connect scan is the default TCP scan type when SYN scan is not an option.\"\n                      >\n                        <FormControl className={classes.formControl}>\n                          <InputLabel id=\"demo-simple-select-label\">TCP Scans</InputLabel>\n                          <Select\n                            labelId=\"demo-simple-select-label\"\n                            id=\"demo-simple-select\"\n                            value={TCP}\n                            onChange={handleTCP}\n                            style={{\n                              width: 250,\n                            }}\n                          >\n                            <MenuItem>None</MenuItem>\n                            {TCPoptions.map((option) => (\n                              <MenuItem value={option.value}>{option.flag}</MenuItem>\n                            ))}\n                          </Select>\n                        </FormControl>\n                      </Tooltip>\n                    </Grid>\n                    <br/><Divider variant=\"middle\" /><br/>\n                    <Grid item xs={12}>\n                        <Tooltip \n                          arrow \n                          placement=\"left\"\n                          title=\"Non-TCP connect scan is the default non-TCP scan type when SYN scan is not an option.\"\n                        >\n                          <FormControl className={classes.formControl}>\n                            <InputLabel id=\"demo-simple-select-label\">Non-TCP Scans</InputLabel>\n                            <Select\n                              labelId=\"demo-simple-select-label\"\n                              id=\"demo-simple-select\"\n                              value={nonTCP}\n                              onChange={handleNonTCP}\n                              style={{\n                                width: 250,\n                              }}\n                            >\n                              <MenuItem>None</MenuItem>\n                              {nonTCPoptions.map((option) => (\n                                <MenuItem value={option.value}>{option.flag}</MenuItem>\n                              ))}\n                            </Select>\n                          </FormControl>\n                        </Tooltip>\n                    </Grid>\n                  </div>\n              </Grid>\n            </TabPanel>\n            <TabPanel value={value} index={1}>\n              <Ping />\n            </TabPanel>\n            <TabPanel value={value} index={2}>\n              <NSE />\n            </TabPanel>\n            <TabPanel value={value} index={3}>\n              <Target />\n            </TabPanel>\n            <TabPanel value={value} index={4}>\n              <Source />\n            </TabPanel>\n            <TabPanel value={value} index={5}>\n              <Timing />\n            </TabPanel>\n            <TabPanel value={value} index={6}>\n              <Others />\n            </TabPanel>\n            \n        </DialogContent>\n            <Divider variant=\"middle\" />\n        <DialogActions>\n          <Button onClick={handleClose} color=\"primary\">\n            Cancel\n          </Button>\n          <Button onClick={handleCreate} color=\"primary\">\n            Create\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Exploit/HTTP.tsx",["527","528"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Discovery/Network.tsx",["529","530"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/Source.tsx",["531","532"],"import React from 'react';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Grid from '@material-ui/core/Grid';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport TextField from '@material-ui/core/TextField';\n\nimport { Source } from './NewModeOptions'\n\nexport default function FormControlLabelPosition() {\n  return (\n    <>\n      <Grid container spacing={3}>\n        {Source.map((option) => (\n          <Grid item xs={12}>\n            <Tooltip title={option.tooltip} arrow placement=\"right\">\n              <FormControl component=\"fieldset\" style={{width: 450}}>\n                <FormControlLabel\n                  value={option.value}\n                  control={<Checkbox color=\"primary\" />}\n                  label={option.des}\n                  labelPlacement=\"end\"\n                />\n                {\n                  option.input === true ?\n                    <>\n                      <TextField \n                          label={`Example Input: ${option.egInput}`} \n                          margin=\"dense\" \n                          size=\"small\"\n                          variant=\"outlined\"\n                          style={{\n                            width: \"100%\",\n                            textAlignLast: \"center\",\n                          }}\n                      />\n                    </>\n                      :\n                    null\n                }\n              </FormControl>\n            </Tooltip>\n          </Grid>\n        ))}\n      </Grid>\n    </>\n  );\n}\n","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/ScanComparison.tsx",["533","534","535","536","537","538","539","540","541","542","543","544","545","546","547","548","549","550","551","552","553","554","555","556","557","558","559","560","561","562","563","564","565","566","567"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/ScanHistory.tsx",["568","569","570","571","572","573","574","575","576","577","578"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/ScanResult.tsx",["579"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/ScanResults/ScanDetails.tsx",["580","581","582","583","584","585","586","587","588","589","590","591","592","593","594","595","596","597","598","599","600","601","602","603","604","605","606","607"],"import React, {useState} from 'react';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport Divider from '@material-ui/core/Divider';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Tooltip from '@material-ui/core/Tooltip';\n\nimport { scanTarget, targetData, targetTime, chosenMode, scanDate } from '../target'\n\n// Backend\nimport { isScanning } from '../../Backend/frontendData/isScanning'\nimport { pureOutput } from '../../Backend/frontendData/Result'\nimport scannedIn from '../../Backend/frontendData/scannedIn.json'\nimport scannedTarget from '../../Backend/frontendData/scannedTargetForSelect.json'\nimport { rows } from '../../Backend/frontendData/getPortStatus'\n\n// Mobx Global Status\nimport storeTarget from '../../Mobx/Models/resultSelectStatus'\n\nconst mainStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    paper: {\n      padding: theme.spacing(2),\n      textAlign: 'left',\n      backgroundColor: \"#fefefe\",\n      color: \"#333333\",\n    },\n    centerGrid: {\n        textAlign: \"center\",\n        marginTop: 15,\n    },\n    btnTabs: {\n        textTransform: \"capitalize\",\n    },\n    cardRoot: {\n        marginTop: 25,\n    },\n    title: {\n        fontSize: 14,\n        whiteSpace: \"pre-line\",\n    },\n    pos: {\n        marginBottom: 12,\n    },\n    defaultShow: {\n\n    },\n    defaultHide: {\n        display: \"none\",\n    },\n    centering: {\n      textAlignLast: \"center\",\n      width: \"70%\",\n      userSelect: \"none\",\n    },\n    datepicker: {\n      marginLeft: theme.spacing(1),\n      marginRight: theme.spacing(1),\n      width: 200,\n    },\n  }),\n);\n\nexport default () => {\n  const classes = mainStyles();\n\n  const handleClick = () => {\n    console.log(targetData);\n  }\n\n  return (\n    <>\n        {scannedIn.map((data) => (\n          data.id !=  storeTarget.target ||  storeTarget.target === \"\" || data.target === \"\" ?\n              null\n                  :\n              <>\n              {/* <button onClick={handleClick}>click</button> */}\n              <form \n                  className={classes.root} \n                  noValidate \n                  autoComplete=\"off\"\n              >\n                  <br/>\n                  <Grid container justify=\"center\" spacing={2} style={{width: \"100%\", textAlign: \"center\"}}>\n                    <>\n                      <Grid item xs={12} style={{width: \"100%\", marginBottom: 15,}}>\n                        <div style={{textAlign: \"left\"}}><FormLabel component=\"legend\">Basic Details: </FormLabel></div>\n                      </Grid>\n\n                      <Grid item xs={12} style={{width: \"100%\", marginBottom: 55}}>\n                        <TextField\n                            className={classes.centering} \n                            id=\"outlined-basic\" \n                            label=\"Scan Target\" \n                            variant=\"outlined\" \n                            multiline\n                            style={{\n                              width: \"85%\",\n                            }}\n                            value={data.target}\n                            inputProps={{\n                                readOnly: true,\n                            }}\n                        />\n                      </Grid>\n                    \n\n                      <Grid item xs={6} style={{width: \"100%\", marginBottom: 55}}>\n                        <TextField\n                            className={classes.centering} \n                            id=\"outlined-basic\" \n                            label=\"Scan Time\" \n                            variant=\"outlined\" \n                            value={data.time}\n                            inputProps={{\n                                readOnly: true,\n                            }}\n                        />\n                      </Grid>\n\n                      <Grid item xs={6} style={{width: \"100%\"}}>\n                        <TextField\n                            className={classes.centering} \n                            id=\"outlined-basic\" \n                            label=\"Chosen Scan Mode\" \n                            variant=\"outlined\" \n                            value={\n                              data.scanMode == \"\" ? \"Regular Scan\" : data.scanMode\n                            }\n                            inputProps={{\n                                readOnly: true,\n                            }}\n                          />\n                      </Grid>\n                      \n                      <Grid item xs={6} style={{width: \"100%\", marginBottom: 55}}>\n                        <Tooltip \n                          arrow \n                          placement=\"top\"\n                          title={\n                            (parseInt(data.runTime)/60).toFixed(3) + \" min; \" + (parseInt(data.runTime)/60/60).toFixed(3) + \" hr\"\n                          } \n                        >\n                          <TextField\n                              className={classes.centering} \n                              id=\"outlined-basic\" \n                              label=\"Target Scanned In\" \n                              variant=\"outlined\" \n                              value={data.runTime}\n                              inputProps={{\n                                  readOnly: true,\n                              }}\n                            />\n                          </Tooltip>\n                      </Grid>\n                  \n                  \n                      <Grid item xs={6} style={{width: \"100%\"}}>\n                        <TextField\n                          className={classes.centering} \n                          id=\"outlined-basic\" \n                          label='Scan Date [Y-M-D]' \n                          variant=\"outlined\" \n                          value={data.date}\n                          inputProps={{\n                              readOnly: true,\n                          }}\n                        />\n                      </Grid>\n                      \n                      <Grid item xs={6} style={{width: \"100%\", marginBottom: 55}}>\n                        <TextField\n                            className={classes.centering} \n                            id=\"outlined-basic\" \n                            label=\"Scan Latency\" \n                            variant=\"outlined\" \n                            multiline={\n                              data.latency.length > 17 ? true : false\n                            }\n                            value={\n                              data.latency == '' ? \"Target host is down\" \n                              //   :\n                              // data.latency.length > 17 ? data.target + \": \" + data.latency\n                                 :\n                              data.latency\n                            }\n                            inputProps={{\n                                readOnly: true,\n                            }}\n                          />\n                      </Grid>\n\n                      <Grid item xs={6} style={{width: \"100%\", marginBottom: 55}}>\n                        <TextField\n                            className={classes.centering} \n                            id=\"outlined-basic\" \n                            label=\"Up Host\" \n                            variant=\"outlined\" \n                            value={data.upHost == '' ? \"Target host is down\" : data.upHost}\n                            inputProps={{\n                                readOnly: true,\n                            }}\n                          />\n                      </Grid>\n                      \n                      <Grid item xs={6} style={{width: \"100%\", marginBottom: 55}}>\n                        <TextField\n                            className={classes.centering} \n                            id=\"outlined-basic\" \n                            label=\"Closed Port Qty.\" \n                            variant=\"outlined\" \n                            multiline={\n                              data.notShown.length > 15 ? true : false\n                            }\n                            value={data.notShown == '' ? \"Target host is down\" : data.notShown}\n                            inputProps={{\n                                readOnly: true,\n                            }}\n                          />\n                      </Grid>\n\n                      <Grid item xs={6} style={{width: \"100%\", marginBottom: 55}}>\n                        <TextField\n                            className={classes.centering} \n                            id=\"outlined-basic\" \n                            label=\"Nmap Version\" \n                            variant=\"outlined\" \n                            multiline\n                            value={data.nmapVer}\n                            inputProps={{\n                                readOnly: true,\n                            }}\n                          />\n                      </Grid>\n\n                    <Grid item xs={12} style={{width: \"100%\", marginBottom: 15, marginTop: 25,}}>\n                      <Divider /><br/>\n                      <div style={{textAlign: \"left\"}}><FormLabel component=\"legend\">Advanced Details: </FormLabel></div>\n                    </Grid>\n                      \n                      <Grid item xs={12} style={{width: \"100%\", marginBottom: 55}}>\n                        <TextField\n                            className={classes.centering} \n                            id=\"outlined-basic\" \n                            label=\"Target OS\" \n                            variant=\"outlined\" \n                            style={{\n                              width: \"85%\",\n                            }}\n                            multiline={\n                              data.os.length > 5 ? true : false\n                            }\n                            value={\n                              data.os == \"\" ? \"No OS found or target is currently down\" : data.os\n                            }\n                            inputProps={{\n                                readOnly: true,\n                            }}\n                          />\n                      </Grid>\n\n                      <Grid item xs={6} style={{width: \"100%\", marginBottom: 55}}>\n                        <TextField\n                            className={classes.centering} \n                            id=\"outlined-basic\" \n                            label=\"Network Distance\" \n                            variant=\"outlined\" \n                            multiline={\n                              data.hop.length > 5 ? true : false\n                            }\n                            value={\n                              data.hop == \"\" ? \n                                \"Enable -v to discover\" \n                                : \n                              data.hop\n\n                            }\n                            inputProps={{\n                                readOnly: true,\n                            }}\n                          />\n                      </Grid>\n                      \n                      <Grid item xs={6} style={{width: \"100%\", marginBottom: 55}}>\n                        <TextField\n                            className={classes.centering} \n                            id=\"outlined-basic\" \n                            label=\"TCP Sequence Prediction\" \n                            variant=\"outlined\" \n                            multiline={\n                              data.notShown.length > 15 ? true : false\n                            }\n                            value={data.difficulty == '' ? \"Target host is down\" : data.difficulty}\n                            inputProps={{\n                                readOnly: true,\n                            }}\n                          />\n                      </Grid>\n                      \n                      <Grid item xs={6} style={{width: \"100%\", marginBottom: 55}}>\n                        <TextField\n                            className={classes.centering} \n                            id=\"outlined-basic\" \n                            label=\"Device Type\" \n                            variant=\"outlined\" \n                            multiline={\n                              data.macAddr.length > 17 ? true : false\n                            }\n                            value={\n                              data.deviceType == \"\" ? \"Enable -v to discover\" : data.deviceType\n                            }\n                            inputProps={{\n                                readOnly: true,\n                            }}\n                          />\n                      </Grid>\n\n                      <Grid item xs={6} style={{width: \"100%\", marginBottom: 55}}>\n                        <TextField\n                            className={classes.centering} \n                            id=\"outlined-basic\" \n                            label=\"MAC Address\" \n                            variant=\"outlined\" \n                            multiline={\n                              data.macAddr.length > 28 ? true : false\n                            }\n                            value={\n                              data.macAddr == \"\" ? \"MAC Address not found\" : data.macAddr\n                            }\n                            inputProps={{\n                                readOnly: true,\n                            }}\n                          />\n                      </Grid>\n\n                      <Grid item xs={12} style={{width: \"100%\", marginBottom: 55}}>\n                        <TextField\n                            className={classes.centering} \n                            id=\"outlined-basic\" \n                            label=\"Up Time\" \n                            variant=\"outlined\" \n                            multiline\n                            style={{\n                              width: \"85%\",\n                            }}\n                            value={\n                              data.uptime == \"\" ? \"Enable -v to discover\" : data.uptime\n                            }\n                            inputProps={{\n                                readOnly: true,\n                            }}\n                          />\n                      </Grid>\n\n                      <Grid item xs={6} style={{width: \"100%\", marginBottom: 55}}>\n                        <TextField\n                            className={classes.centering} \n                            id=\"outlined-basic\" \n                            label=\"Raw Packets Sent\" \n                            variant=\"outlined\" \n                            value={\n                              data.rawPacket == \"\" ? \"Enable -v to discover\" : data.rawPacket\n                            }\n                            inputProps={{\n                                readOnly: true,\n                            }}\n                          />\n                      </Grid>\n\n                      <Grid item xs={6} style={{width: \"100%\", marginBottom: 55}}>\n                        <TextField\n                            className={classes.centering} \n                            id=\"outlined-basic\" \n                            label=\"Raw Packets Received\" \n                            variant=\"outlined\" \n                            value={\n                              data.rcvd == \"\" ? \"Enable -v to discover\" : data.rcvd\n                            }\n                            inputProps={{\n                                readOnly: true,\n                            }}\n                          />\n                      </Grid>\n\n\n                    <Grid item xs={12} style={{width: \"100%\", marginBottom: 15, marginTop: 25,}}>\n                      <Divider /><br/>\n                      <div style={{textAlign: \"left\"}}><FormLabel component=\"legend\">Scan Settings</FormLabel></div>\n                    </Grid>\n\n                        <Grid item xs={6} style={{width: \"100%\", marginBottom: 55}}>\n                          <TextField\n                              className={classes.centering} \n                              id=\"outlined-basic\" \n                              label=\"Automation\" \n                              variant=\"outlined\" \n                              value={\n                                data.auto == \"True\" ? \"Enabled\" : \"Disabled\"\n                              }\n                              inputProps={{\n                                  readOnly: true,\n                              }}\n                            />\n                        </Grid>\n                        <Grid item xs={6} style={{width: \"100%\", marginBottom: 55}}>\n                          <TextField\n                              className={classes.centering} \n                              id=\"outlined-basic\" \n                              label=\"CVE Detection\" \n                              variant=\"outlined\" \n                              value={\n                                data.cveDetect == \"True\" ? \"Enabled\" : \"Disabled\"\n                              }\n                              inputProps={{\n                                  readOnly: true,\n                              }}\n                            />\n                        </Grid>\n                        <Grid item xs={6} style={{width: \"100%\", marginBottom: 55}}>\n                          <TextField\n                              className={classes.centering} \n                              id=\"outlined-basic\" \n                              label=\"Scan Range\" \n                              variant=\"outlined\" \n                              value={\n                                data.setRange == \" \" ? \"Not Specify\" : data.setRange\n                              }\n                              inputProps={{\n                                  readOnly: true,\n                              }}\n                            />\n                        </Grid>\n                        <Grid item xs={6} style={{width: \"100%\", marginBottom: 55}}>\n                          <TextField\n                              className={classes.centering} \n                              id=\"outlined-basic\" \n                              label=\"Set Flags\" \n                              variant=\"outlined\" \n                              multiline\n                              value={\n                                data.flags == \" \" ? \"Null\" : data.flags\n                              }\n                              inputProps={{\n                                  readOnly: true,\n                              }}\n                            />\n                        </Grid>\n                      </>\n                    \n                  </Grid>\n              </form>\n              </>\n        ))}\n    </>\n  );\n}\n","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/ScanResults/HostsAndPorts.tsx",["608","609","610","611","612","613","614","615","616"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Backend/frontendData/isScanning.tsx",[],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Backend/frontendData/getPortStatus.tsx",[],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/defaultScanModes/pingScanMode.tsx",["617","618","619","620","621"],"import React from 'react';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport { Switch, Route, Link, BrowserRouter } from \"react-router-dom\";\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography'\nimport TextField from '@material-ui/core/TextField';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Slider from '@material-ui/core/Slider';\n\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Switcher from '@material-ui/core/Switch';\nimport Button from '@material-ui/core/Button';\n\nimport IconButton from '@material-ui/core/IconButton';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport CloseIcon from '@material-ui/icons/Close';\n\nimport ScanModeIcon from '@material-ui/icons/Settings';\n\nimport '../../Styles/DefaultScanMode.css'\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    paper: {\n      padding: theme.spacing(2),\n      textAlign: 'left',\n      backgroundColor: \"#fefefe\",\n      color: \"#333333\",\n    },\n    centerGrid: {\n        textAlign: \"center\",\n        marginTop: 15,\n    },\n    avatarText: {\n        background: \"#4A92FF\",\n        borderRadius: 6,\n        color: \"#fff\",\n        padding: \"2px 6px\",\n    },  \n    switch: {\n        disaply: \"inline-block\",\n    },\n  }),\n);\n\nexport default function CenteredGrid() {\n  const classes = useStyles();\n  const [value, setValue] = React.useState<number>(4);\n\n  const handleChange = (event: any, newValue: number | number[]) => {\n    setValue(newValue as number);\n  };\n\n  const [state, setState] = React.useState({\n    Pn: true,\n  });\n\n  const handleSwitchChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setState({ ...state, [event.target.name]: event.target.checked });\n  };\n\n  const [open, setOpen] = React.useState(false);\n\n  const handleClick = () => {\n    setOpen(true);\n  };\n\n  const handleClose = (event: React.SyntheticEvent | React.MouseEvent, reason?: string) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    setOpen(false);\n  };\n\n  return (\n    <div className={classes.root}>\n      <Grid container spacing={5} justify=\"center\" alignItems=\"center\">\n       \n        <Grid item xs={10}>\n            <Paper className={classes.paper}>\n                <Typography variant=\"h6\">\n                    Ping Scan Modes\n                </Typography>\n                    <br/>\n                <div>\n                    <TextField \n                        id=\"outlined-basic\" \n                        label=\"Current Command\" \n                        defaultValue=\"nmap -v -sU -sT -p -U:161, T:80 -T0 + [ Target IP / Domain ] \"\n                        variant=\"outlined\" \n                        size=\"small\"\n                        style={{\n                            width: \"80%\",\n                            marginLeft: 85,\n                            textAlignLast: \"center\",\n                        }}\n                        inputProps={{ \n                            readOnly: true, \n                        }}\n                    />\n                </div>\n                    <br/>\n                <div className={classes.root}>\n                    \n                </div>\n            </Paper>\n        </Grid>\n\n        <Grid item xs={10}>\n            <Paper className={classes.paper}>\n                <Typography variant=\"h6\">\n                    Scan Frequency\n                </Typography>\n                    <br/>\n                <div>\n                     <Slider \n                        value={value} \n                        onChange={handleChange} \n                        max={5}\n                        min={0}\n                        step={1}\n                        valueLabelDisplay=\"on\"\n                        style={{\n                            width: \"70%\",\n                            marginLeft: 145,\n                        }}    \n                    />\n                </div>\n                    <br/>\n                <Typography style={{textAlign: \"right\",marginRight: 35}}>\n                    -T&nbsp;\n                    <Tooltip \n                        title=\"[ -T ] --- Specifies the timing (Timing) used in the scanning process, there are always 6 levels (0-5), the level increases, the faster the scanning speed.\" \n                        placement=\"top\" \n                        arrow\n                    >\n                        <span className={classes.avatarText}>{value}</span>\n                    </Tooltip>\n                </Typography>\n            </Paper>\n        </Grid>\n\n        <Grid item xs={10}>\n           <Paper className={classes.paper}>\n                <Typography variant=\"h6\">\n                    Flags\n                </Typography>\n                    <br/>\n                <div style={{textAlign: \"center\"}}>\n                    <FormControl component=\"fieldset\">\n                        <table className=\"scanModeSettingFlagTable\">\n                            <tr>\n                                <td>\n                                    <RadioGroup row aria-label=\"position\" name=\"position\" defaultValue=\"top\">\n                                        <Tooltip title=\"Increase the verbosity level\" placement=\"top\" arrow>\n                                            <FormControlLabel\n                                                value=\"-v\"\n                                                control={<Radio color=\"primary\" />}\n                                                label=\"-v\"\n                                                labelPlacement=\"end\"\n                                            />\n                                        </Tooltip>\n                                        <Tooltip title=\"Use more v for greater effect\" placement=\"top\" arrow>\n                                            <FormControlLabel\n                                                value=\"-vv\"\n                                                control={<Radio color=\"primary\" />}\n                                                label=\"-vv\"\n                                                labelPlacement=\"end\"\n                                            />\n                                        </Tooltip>\n                                    </RadioGroup>\n                                </td>\n                                <td>\n                                    <Tooltip title=\"Disable host discovery. Port scan only.\" placement=\"top\" arrow>\n                                        <FormControlLabel\n                                            control={\n                                                <Switcher\n                                                    checked={state.Pn}\n                                                    onChange={handleSwitchChange}\n                                                    name=\"Pn\"\n                                                    color=\"primary\"\n                                                />\n                                            }\n                                            label=\"-Pn\"\n                                            className={classes.switch}\n                                        />\n                                    </Tooltip>\n                                </td>\n                            </tr>\n                        </table>\n                    </FormControl>\n            \n                </div>\n          </Paper>\n        </Grid>\n\n        <Grid item xs={10} style={{position: \"absolute\", width: 902, bottom: 0}}>\n            <Paper className={classes.paper}>\n                <Link to=\"/defaultScanMode\">\n                    <Button variant=\"contained\">Back</Button>\n                </Link>                \n                <Button variant=\"contained\" style={{float: 'right'}} onClick={handleClick}>Save</Button>\n                <Snackbar\n                    anchorOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'left',\n                    }}\n                    open={open}\n                    autoHideDuration={6000}\n                    onClose={handleClose}\n                    message=\"Settings Save Successfully\"\n                    action={\n                    <React.Fragment>\n                         <Link to=\"/defaultScanMode\">\n                            <IconButton size=\"small\" aria-label=\"close\" color=\"inherit\" onClick={handleClose}>\n                                <CloseIcon fontSize=\"small\" style={{color: \"#fff\"}}/>\n                            </IconButton>\n                        </Link>\n                    </React.Fragment>\n                    }\n                />\n            </Paper>\n        </Grid>\n\n      </Grid>\n      \n    </div>\n  );\n}\n","/Users/yipjames/Desktop/INS/FYP/chinmap/src/index.tsx",[],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Views/DefaultScanMode.tsx",[],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Views/ScanComparison.tsx",[],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Views/ScanResult.tsx",[],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/defaultScanModes/top100portsScanMode.tsx",["622","623","624","625","626","627","628"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/defaultScanModes/intenseScanMode.tsx",["629","630","631","632","633"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Views/Home.tsx",[],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Discovery/HTTP.tsx",["634","635"],"import React from 'react';\nimport { createStyles, Theme, withStyles, WithStyles, makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ExtensionIcon from '@material-ui/icons/ExtensionOutlined';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Grid from '@material-ui/core/Grid';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox, { CheckboxProps } from '@material-ui/core/Checkbox';\n\nimport Typography from '@material-ui/core/Typography';\nimport Separator from '@material-ui/icons/ArrowRightOutlined';\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\n\n// NSE Options\nimport NSEoption from './json/HTTP.json'\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      margin: 0,\n      padding: theme.spacing(2),\n    },\n    closeButton: {\n      position: 'absolute',\n      right: theme.spacing(1),\n      top: theme.spacing(1),\n      color: theme.palette.grey[500],\n    },\n  });\n\nexport interface DialogTitleProps extends WithStyles<typeof styles> {\n  id: string;\n  children: React.ReactNode;\n  onClose: () => void;\n}\n\nconst DialogTitle = withStyles(styles)((props: DialogTitleProps) => {\n  const { children, classes, onClose, ...other } = props;\n  return (\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\n      <Typography variant=\"h6\">{children}</Typography>\n      {onClose ? (\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n    </MuiDialogTitle>\n  );\n});\n\nconst DialogContent = withStyles((theme: Theme) => ({\n  root: {\n    padding: theme.spacing(2),\n  },\n}))(MuiDialogContent);\n\nconst DialogActions = withStyles((theme: Theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(1),\n  },\n}))(MuiDialogActions);\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    nested: {\n      paddingLeft: theme.spacing(4),\n    },\n  }),\n);\n\nfunction handleClick(event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) {\n    event.preventDefault();\n    console.info('You clicked a breadcrumb.');\n  }\n  \n  function Breadcrumb() {\n    return (\n      <Breadcrumbs separator={<Separator />} >\n        <Typography color=\"textPrimary\">NSE</Typography>\n        <Typography color=\"textPrimary\">Discovery</Typography>\n        <Typography color=\"primary\" style={{fontWeight: \"bold\"}}>HTTP</Typography>\n      </Breadcrumbs>\n    );\n  }\n\nexport default function CustomizedDialogs() {\n  const [open, setOpen] = React.useState(false);\n  const classes = useStyles();\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div>\n      <ListItem button className={classes.nested} onClick={handleClickOpen}>\n        <ListItemIcon>\n            <ExtensionIcon />\n        </ListItemIcon>\n        <ListItemText>HTTP</ListItemText>\n    </ListItem>\n      <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n          <Breadcrumb />\n        </DialogTitle>\n        <DialogContent dividers>\n          <Grid container justify=\"center\" spacing={3}>\n              {NSEoption.map((option) => (\n                <Grid item xs={6}>\n                    <Tooltip arrow placement=\"top\" title={option.des}>\n                        <FormControlLabel\n                            value={option.id}\n                            control={<Checkbox color=\"primary\" />}\n                            label={option.id}\n                            labelPlacement=\"end\"\n                        />\n                    </Tooltip>\n                </Grid>\n              ))}\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button autoFocus onClick={handleClose} color=\"primary\">\n            Save changes\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","/Users/yipjames/Desktop/INS/FYP/chinmap/src/Mobx/Models/defaultScanModeStatus.tsx",[],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Discovery/IP.tsx",["636","637"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeTab/nseData/Discovery/Database.tsx",["638","639"],"import React from 'react';\nimport { createStyles, Theme, withStyles, WithStyles, makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ExtensionIcon from '@material-ui/icons/ExtensionOutlined';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Grid from '@material-ui/core/Grid';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox, { CheckboxProps } from '@material-ui/core/Checkbox';\n\nimport Typography from '@material-ui/core/Typography';\nimport Separator from '@material-ui/icons/ArrowRightOutlined';\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\n\n// NSE Options\nimport NSEoption from './json/Database.json'\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      margin: 0,\n      padding: theme.spacing(2),\n    },\n    closeButton: {\n      position: 'absolute',\n      right: theme.spacing(1),\n      top: theme.spacing(1),\n      color: theme.palette.grey[500],\n    },\n  });\n\nexport interface DialogTitleProps extends WithStyles<typeof styles> {\n  id: string;\n  children: React.ReactNode;\n  onClose: () => void;\n}\n\nconst DialogTitle = withStyles(styles)((props: DialogTitleProps) => {\n  const { children, classes, onClose, ...other } = props;\n  return (\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\n      <Typography variant=\"h6\">{children}</Typography>\n      {onClose ? (\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n    </MuiDialogTitle>\n  );\n});\n\nconst DialogContent = withStyles((theme: Theme) => ({\n  root: {\n    padding: theme.spacing(2),\n  },\n}))(MuiDialogContent);\n\nconst DialogActions = withStyles((theme: Theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(1),\n  },\n}))(MuiDialogActions);\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    nested: {\n      paddingLeft: theme.spacing(4),\n    },\n  }),\n);\n\nfunction handleClick(event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) {\n    event.preventDefault();\n    console.info('You clicked a breadcrumb.');\n  }\n  \n  function Breadcrumb() {\n    return (\n      <Breadcrumbs separator={<Separator />} >\n        <Typography color=\"textPrimary\">NSE</Typography>\n        <Typography color=\"textPrimary\">Discovery</Typography>\n        <Typography color=\"primary\" style={{fontWeight: \"bold\"}}>Database</Typography>\n      </Breadcrumbs>\n    );\n  }\n\nexport default function CustomizedDialogs() {\n  const [open, setOpen] = React.useState(false);\n  const classes = useStyles();\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div>\n      <ListItem button className={classes.nested} onClick={handleClickOpen}>\n        <ListItemIcon>\n            <ExtensionIcon />\n        </ListItemIcon>\n        <ListItemText>Database</ListItemText>\n    </ListItem>\n      <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n          <Breadcrumb />\n        </DialogTitle>\n        <DialogContent dividers>\n          <Grid container justify=\"center\" spacing={3}>\n              {NSEoption.map((option) => (\n                <Grid item xs={6}>\n                    <Tooltip arrow placement=\"top\" title={option.des}>\n                        <FormControlLabel\n                            value={option.id}\n                            control={<Checkbox color=\"primary\" />}\n                            label={option.id}\n                            labelPlacement=\"end\"\n                        />\n                    </Tooltip>\n                </Grid>\n              ))}\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button autoFocus onClick={handleClose} color=\"primary\">\n            Save changes\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","/Users/yipjames/Desktop/INS/FYP/chinmap/src/App.tsx",["640"],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/NewScanModeArray.tsx",[],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Components/HomeSettings/homeSettingsData.tsx",[],"/Users/yipjames/Desktop/INS/FYP/chinmap/src/Backend/frontendData/Result.tsx",[],{"ruleId":"641","severity":1,"message":"642","line":1,"column":16,"nodeType":"643","messageId":"644","endLine":1,"endColumn":24},{"ruleId":"641","severity":1,"message":"645","line":3,"column":10,"nodeType":"643","messageId":"644","endLine":3,"endColumn":16},{"ruleId":"641","severity":1,"message":"646","line":3,"column":18,"nodeType":"643","messageId":"644","endLine":3,"endColumn":23},{"ruleId":"641","severity":1,"message":"647","line":3,"column":31,"nodeType":"643","messageId":"644","endLine":3,"endColumn":44},{"ruleId":"641","severity":1,"message":"648","line":19,"column":8,"nodeType":"643","messageId":"644","endLine":19,"endColumn":15},{"ruleId":"641","severity":1,"message":"649","line":20,"column":8,"nodeType":"643","messageId":"644","endLine":20,"endColumn":16},{"ruleId":"641","severity":1,"message":"650","line":39,"column":8,"nodeType":"643","messageId":"644","endLine":39,"endColumn":26},{"ruleId":"641","severity":1,"message":"651","line":64,"column":7,"nodeType":"643","messageId":"644","endLine":64,"endColumn":21},{"ruleId":"641","severity":1,"message":"652","line":67,"column":9,"nodeType":"643","messageId":"644","endLine":67,"endColumn":20},{"ruleId":"641","severity":1,"message":"653","line":112,"column":10,"nodeType":"643","messageId":"644","endLine":112,"endColumn":17},{"ruleId":"654","severity":1,"message":"655","line":121,"column":35,"nodeType":"656","messageId":"657","endLine":121,"endColumn":37},{"ruleId":"641","severity":1,"message":"658","line":134,"column":12,"nodeType":"643","messageId":"644","endLine":134,"endColumn":20},{"ruleId":"641","severity":1,"message":"659","line":147,"column":12,"nodeType":"643","messageId":"644","endLine":147,"endColumn":23},{"ruleId":"641","severity":1,"message":"660","line":202,"column":10,"nodeType":"643","messageId":"644","endLine":202,"endColumn":15},{"ruleId":"641","severity":1,"message":"661","line":202,"column":17,"nodeType":"643","messageId":"644","endLine":202,"endColumn":25},{"ruleId":"654","severity":1,"message":"655","line":228,"column":22,"nodeType":"656","messageId":"657","endLine":228,"endColumn":24},{"ruleId":"654","severity":1,"message":"655","line":248,"column":22,"nodeType":"656","messageId":"657","endLine":248,"endColumn":24},{"ruleId":"654","severity":1,"message":"655","line":255,"column":22,"nodeType":"656","messageId":"657","endLine":255,"endColumn":24},{"ruleId":"654","severity":1,"message":"655","line":262,"column":22,"nodeType":"656","messageId":"657","endLine":262,"endColumn":24},{"ruleId":"654","severity":1,"message":"655","line":269,"column":22,"nodeType":"656","messageId":"657","endLine":269,"endColumn":24},{"ruleId":"654","severity":1,"message":"655","line":276,"column":22,"nodeType":"656","messageId":"657","endLine":276,"endColumn":24},{"ruleId":"654","severity":1,"message":"655","line":283,"column":22,"nodeType":"656","messageId":"657","endLine":283,"endColumn":24},{"ruleId":"654","severity":1,"message":"655","line":290,"column":22,"nodeType":"656","messageId":"657","endLine":290,"endColumn":24},{"ruleId":"654","severity":1,"message":"655","line":422,"column":26,"nodeType":"656","messageId":"657","endLine":422,"endColumn":28},{"ruleId":"641","severity":1,"message":"645","line":3,"column":10,"nodeType":"643","messageId":"644","endLine":3,"endColumn":16},{"ruleId":"641","severity":1,"message":"646","line":3,"column":18,"nodeType":"643","messageId":"644","endLine":3,"endColumn":23},{"ruleId":"641","severity":1,"message":"662","line":3,"column":25,"nodeType":"643","messageId":"644","endLine":3,"endColumn":29},{"ruleId":"641","severity":1,"message":"647","line":3,"column":31,"nodeType":"643","messageId":"644","endLine":3,"endColumn":44},{"ruleId":"641","severity":1,"message":"663","line":8,"column":8,"nodeType":"643","messageId":"644","endLine":8,"endColumn":12},{"ruleId":"641","severity":1,"message":"664","line":9,"column":8,"nodeType":"643","messageId":"644","endLine":9,"endColumn":16},{"ruleId":"641","severity":1,"message":"665","line":9,"column":20,"nodeType":"643","messageId":"644","endLine":9,"endColumn":33},{"ruleId":"641","severity":1,"message":"666","line":10,"column":8,"nodeType":"643","messageId":"644","endLine":10,"endColumn":20},{"ruleId":"641","severity":1,"message":"667","line":11,"column":8,"nodeType":"643","messageId":"644","endLine":11,"endColumn":20},{"ruleId":"641","severity":1,"message":"668","line":24,"column":8,"nodeType":"643","messageId":"644","endLine":24,"endColumn":16},{"ruleId":"641","severity":1,"message":"669","line":25,"column":8,"nodeType":"643","messageId":"644","endLine":25,"endColumn":18},{"ruleId":"670","severity":1,"message":"671","line":51,"column":1,"nodeType":"672","endLine":132,"endColumn":2},{"ruleId":"641","severity":1,"message":"673","line":54,"column":9,"nodeType":"643","messageId":"644","endLine":54,"endColumn":25},{"ruleId":"641","severity":1,"message":"674","line":59,"column":9,"nodeType":"643","messageId":"644","endLine":59,"endColumn":21},{"ruleId":"641","severity":1,"message":"675","line":3,"column":8,"nodeType":"643","messageId":"644","endLine":3,"endColumn":17},{"ruleId":"641","severity":1,"message":"676","line":6,"column":8,"nodeType":"643","messageId":"644","endLine":6,"endColumn":17},{"ruleId":"641","severity":1,"message":"648","line":7,"column":8,"nodeType":"643","messageId":"644","endLine":7,"endColumn":15},{"ruleId":"641","severity":1,"message":"677","line":17,"column":20,"nodeType":"643","messageId":"644","endLine":17,"endColumn":33},{"ruleId":"641","severity":1,"message":"678","line":81,"column":10,"nodeType":"643","messageId":"644","endLine":81,"endColumn":21},{"ruleId":"679","replacedBy":"680"},{"ruleId":"681","replacedBy":"682"},{"ruleId":"641","severity":1,"message":"677","line":17,"column":20,"nodeType":"643","messageId":"644","endLine":17,"endColumn":33},{"ruleId":"641","severity":1,"message":"678","line":81,"column":10,"nodeType":"643","messageId":"644","endLine":81,"endColumn":21},{"ruleId":"679","replacedBy":"683"},{"ruleId":"681","replacedBy":"684"},{"ruleId":"641","severity":1,"message":"677","line":17,"column":20,"nodeType":"643","messageId":"644","endLine":17,"endColumn":33},{"ruleId":"641","severity":1,"message":"678","line":81,"column":10,"nodeType":"643","messageId":"644","endLine":81,"endColumn":21},{"ruleId":"679","replacedBy":"685"},{"ruleId":"681","replacedBy":"686"},{"ruleId":"641","severity":1,"message":"677","line":17,"column":20,"nodeType":"643","messageId":"644","endLine":17,"endColumn":33},{"ruleId":"641","severity":1,"message":"678","line":81,"column":10,"nodeType":"643","messageId":"644","endLine":81,"endColumn":21},{"ruleId":"679","replacedBy":"687"},{"ruleId":"681","replacedBy":"688"},{"ruleId":"641","severity":1,"message":"677","line":17,"column":20,"nodeType":"643","messageId":"644","endLine":17,"endColumn":33},{"ruleId":"641","severity":1,"message":"678","line":81,"column":10,"nodeType":"643","messageId":"644","endLine":81,"endColumn":21},{"ruleId":"641","severity":1,"message":"677","line":17,"column":20,"nodeType":"643","messageId":"644","endLine":17,"endColumn":33},{"ruleId":"641","severity":1,"message":"678","line":81,"column":10,"nodeType":"643","messageId":"644","endLine":81,"endColumn":21},{"ruleId":"641","severity":1,"message":"675","line":3,"column":8,"nodeType":"643","messageId":"644","endLine":3,"endColumn":17},{"ruleId":"641","severity":1,"message":"676","line":6,"column":8,"nodeType":"643","messageId":"644","endLine":6,"endColumn":17},{"ruleId":"679","replacedBy":"689"},{"ruleId":"681","replacedBy":"690"},{"ruleId":"641","severity":1,"message":"677","line":17,"column":20,"nodeType":"643","messageId":"644","endLine":17,"endColumn":33},{"ruleId":"641","severity":1,"message":"678","line":81,"column":10,"nodeType":"643","messageId":"644","endLine":81,"endColumn":21},{"ruleId":"641","severity":1,"message":"677","line":17,"column":20,"nodeType":"643","messageId":"644","endLine":17,"endColumn":33},{"ruleId":"641","severity":1,"message":"678","line":81,"column":10,"nodeType":"643","messageId":"644","endLine":81,"endColumn":21},{"ruleId":"641","severity":1,"message":"675","line":3,"column":8,"nodeType":"643","messageId":"644","endLine":3,"endColumn":17},{"ruleId":"641","severity":1,"message":"676","line":6,"column":8,"nodeType":"643","messageId":"644","endLine":6,"endColumn":17},{"ruleId":"641","severity":1,"message":"691","line":10,"column":8,"nodeType":"643","messageId":"644","endLine":10,"endColumn":14},{"ruleId":"641","severity":1,"message":"692","line":11,"column":8,"nodeType":"643","messageId":"644","endLine":11,"endColumn":16},{"ruleId":"679","replacedBy":"693"},{"ruleId":"681","replacedBy":"694"},{"ruleId":"641","severity":1,"message":"677","line":17,"column":20,"nodeType":"643","messageId":"644","endLine":17,"endColumn":33},{"ruleId":"641","severity":1,"message":"678","line":81,"column":10,"nodeType":"643","messageId":"644","endLine":81,"endColumn":21},{"ruleId":"641","severity":1,"message":"677","line":17,"column":20,"nodeType":"643","messageId":"644","endLine":17,"endColumn":33},{"ruleId":"641","severity":1,"message":"678","line":81,"column":10,"nodeType":"643","messageId":"644","endLine":81,"endColumn":21},{"ruleId":"641","severity":1,"message":"695","line":3,"column":8,"nodeType":"643","messageId":"644","endLine":3,"endColumn":21},{"ruleId":"641","severity":1,"message":"696","line":9,"column":8,"nodeType":"643","messageId":"644","endLine":9,"endColumn":17},{"ruleId":"641","severity":1,"message":"697","line":10,"column":8,"nodeType":"643","messageId":"644","endLine":10,"endColumn":18},{"ruleId":"641","severity":1,"message":"698","line":11,"column":8,"nodeType":"643","messageId":"644","endLine":11,"endColumn":16},{"ruleId":"641","severity":1,"message":"699","line":12,"column":8,"nodeType":"643","messageId":"644","endLine":12,"endColumn":23},{"ruleId":"641","severity":1,"message":"700","line":15,"column":8,"nodeType":"643","messageId":"644","endLine":15,"endColumn":18},{"ruleId":"641","severity":1,"message":"701","line":16,"column":8,"nodeType":"643","messageId":"644","endLine":16,"endColumn":21},{"ruleId":"654","severity":1,"message":"655","line":87,"column":17,"nodeType":"656","messageId":"657","endLine":87,"endColumn":19},{"ruleId":"654","severity":1,"message":"655","line":90,"column":23,"nodeType":"656","messageId":"657","endLine":90,"endColumn":25},{"ruleId":"654","severity":1,"message":"655","line":100,"column":19,"nodeType":"656","messageId":"657","endLine":100,"endColumn":21},{"ruleId":"654","severity":1,"message":"655","line":103,"column":23,"nodeType":"656","messageId":"657","endLine":103,"endColumn":25},{"ruleId":"654","severity":1,"message":"655","line":113,"column":19,"nodeType":"656","messageId":"657","endLine":113,"endColumn":21},{"ruleId":"654","severity":1,"message":"655","line":116,"column":17,"nodeType":"656","messageId":"657","endLine":116,"endColumn":19},{"ruleId":"654","severity":1,"message":"655","line":128,"column":23,"nodeType":"656","messageId":"657","endLine":128,"endColumn":25},{"ruleId":"654","severity":1,"message":"655","line":141,"column":40,"nodeType":"656","messageId":"657","endLine":141,"endColumn":42},{"ruleId":"654","severity":1,"message":"655","line":142,"column":44,"nodeType":"656","messageId":"657","endLine":142,"endColumn":46},{"ruleId":"654","severity":1,"message":"655","line":143,"column":48,"nodeType":"656","messageId":"657","endLine":143,"endColumn":50},{"ruleId":"654","severity":1,"message":"655","line":144,"column":52,"nodeType":"656","messageId":"657","endLine":144,"endColumn":54},{"ruleId":"654","severity":1,"message":"655","line":145,"column":56,"nodeType":"656","messageId":"657","endLine":145,"endColumn":58},{"ruleId":"654","severity":1,"message":"655","line":146,"column":56,"nodeType":"656","messageId":"657","endLine":146,"endColumn":58},{"ruleId":"654","severity":1,"message":"655","line":147,"column":52,"nodeType":"656","messageId":"657","endLine":147,"endColumn":54},{"ruleId":"654","severity":1,"message":"655","line":148,"column":48,"nodeType":"656","messageId":"657","endLine":148,"endColumn":50},{"ruleId":"654","severity":1,"message":"655","line":149,"column":44,"nodeType":"656","messageId":"657","endLine":149,"endColumn":46},{"ruleId":"654","severity":1,"message":"655","line":150,"column":40,"nodeType":"656","messageId":"657","endLine":150,"endColumn":42},{"ruleId":"654","severity":1,"message":"655","line":158,"column":22,"nodeType":"656","messageId":"657","endLine":158,"endColumn":24},{"ruleId":"654","severity":1,"message":"655","line":171,"column":40,"nodeType":"656","messageId":"657","endLine":171,"endColumn":42},{"ruleId":"654","severity":1,"message":"655","line":172,"column":44,"nodeType":"656","messageId":"657","endLine":172,"endColumn":46},{"ruleId":"654","severity":1,"message":"655","line":173,"column":48,"nodeType":"656","messageId":"657","endLine":173,"endColumn":50},{"ruleId":"654","severity":1,"message":"655","line":174,"column":52,"nodeType":"656","messageId":"657","endLine":174,"endColumn":54},{"ruleId":"654","severity":1,"message":"655","line":182,"column":22,"nodeType":"656","messageId":"657","endLine":182,"endColumn":24},{"ruleId":"654","severity":1,"message":"655","line":195,"column":40,"nodeType":"656","messageId":"657","endLine":195,"endColumn":42},{"ruleId":"654","severity":1,"message":"655","line":196,"column":44,"nodeType":"656","messageId":"657","endLine":196,"endColumn":46},{"ruleId":"654","severity":1,"message":"655","line":197,"column":48,"nodeType":"656","messageId":"657","endLine":197,"endColumn":50},{"ruleId":"654","severity":1,"message":"655","line":198,"column":44,"nodeType":"656","messageId":"657","endLine":198,"endColumn":46},{"ruleId":"654","severity":1,"message":"655","line":199,"column":40,"nodeType":"656","messageId":"657","endLine":199,"endColumn":42},{"ruleId":"679","replacedBy":"702"},{"ruleId":"681","replacedBy":"703"},{"ruleId":"641","severity":1,"message":"677","line":17,"column":20,"nodeType":"643","messageId":"644","endLine":17,"endColumn":33},{"ruleId":"641","severity":1,"message":"678","line":81,"column":10,"nodeType":"643","messageId":"644","endLine":81,"endColumn":21},{"ruleId":"641","severity":1,"message":"675","line":3,"column":8,"nodeType":"643","messageId":"644","endLine":3,"endColumn":17},{"ruleId":"641","severity":1,"message":"676","line":6,"column":8,"nodeType":"643","messageId":"644","endLine":6,"endColumn":17},{"ruleId":"641","severity":1,"message":"677","line":17,"column":20,"nodeType":"643","messageId":"644","endLine":17,"endColumn":33},{"ruleId":"641","severity":1,"message":"678","line":81,"column":10,"nodeType":"643","messageId":"644","endLine":81,"endColumn":21},{"ruleId":"641","severity":1,"message":"677","line":17,"column":20,"nodeType":"643","messageId":"644","endLine":17,"endColumn":33},{"ruleId":"641","severity":1,"message":"678","line":81,"column":10,"nodeType":"643","messageId":"644","endLine":81,"endColumn":21},{"ruleId":"641","severity":1,"message":"645","line":3,"column":10,"nodeType":"643","messageId":"644","endLine":3,"endColumn":16},{"ruleId":"641","severity":1,"message":"646","line":3,"column":18,"nodeType":"643","messageId":"644","endLine":3,"endColumn":23},{"ruleId":"641","severity":1,"message":"662","line":3,"column":25,"nodeType":"643","messageId":"644","endLine":3,"endColumn":29},{"ruleId":"641","severity":1,"message":"647","line":3,"column":31,"nodeType":"643","messageId":"644","endLine":3,"endColumn":44},{"ruleId":"641","severity":1,"message":"704","line":11,"column":10,"nodeType":"643","messageId":"644","endLine":11,"endColumn":18},{"ruleId":"641","severity":1,"message":"705","line":14,"column":8,"nodeType":"643","messageId":"644","endLine":14,"endColumn":14},{"ruleId":"641","severity":1,"message":"706","line":20,"column":8,"nodeType":"643","messageId":"644","endLine":20,"endColumn":16},{"ruleId":"670","severity":1,"message":"671","line":76,"column":1,"nodeType":"672","endLine":119,"endColumn":2},{"ruleId":"641","severity":1,"message":"707","line":24,"column":8,"nodeType":"643","messageId":"644","endLine":24,"endColumn":16},{"ruleId":"641","severity":1,"message":"708","line":32,"column":22,"nodeType":"643","messageId":"644","endLine":32,"endColumn":34},{"ruleId":"641","severity":1,"message":"709","line":33,"column":10,"nodeType":"643","messageId":"644","endLine":33,"endColumn":20},{"ruleId":"641","severity":1,"message":"710","line":136,"column":10,"nodeType":"643","messageId":"644","endLine":136,"endColumn":26},{"ruleId":"641","severity":1,"message":"711","line":136,"column":28,"nodeType":"643","messageId":"644","endLine":136,"endColumn":47},{"ruleId":"641","severity":1,"message":"712","line":143,"column":9,"nodeType":"643","messageId":"644","endLine":143,"endColumn":19},{"ruleId":"641","severity":1,"message":"713","line":147,"column":9,"nodeType":"643","messageId":"644","endLine":147,"endColumn":18},{"ruleId":"641","severity":1,"message":"714","line":322,"column":11,"nodeType":"643","messageId":"644","endLine":322,"endColumn":18},{"ruleId":"641","severity":1,"message":"674","line":355,"column":11,"nodeType":"643","messageId":"644","endLine":355,"endColumn":23},{"ruleId":"641","severity":1,"message":"715","line":359,"column":11,"nodeType":"643","messageId":"644","endLine":359,"endColumn":20},{"ruleId":"679","replacedBy":"716"},{"ruleId":"681","replacedBy":"717"},{"ruleId":"641","severity":1,"message":"718","line":38,"column":9,"nodeType":"643","messageId":"644","endLine":38,"endColumn":13},{"ruleId":"641","severity":1,"message":"674","line":44,"column":9,"nodeType":"643","messageId":"644","endLine":44,"endColumn":21},{"ruleId":"641","severity":1,"message":"718","line":38,"column":9,"nodeType":"643","messageId":"644","endLine":38,"endColumn":13},{"ruleId":"641","severity":1,"message":"674","line":44,"column":9,"nodeType":"643","messageId":"644","endLine":44,"endColumn":21},{"ruleId":"641","severity":1,"message":"718","line":38,"column":9,"nodeType":"643","messageId":"644","endLine":38,"endColumn":13},{"ruleId":"641","severity":1,"message":"674","line":44,"column":9,"nodeType":"643","messageId":"644","endLine":44,"endColumn":21},{"ruleId":"641","severity":1,"message":"718","line":38,"column":9,"nodeType":"643","messageId":"644","endLine":38,"endColumn":13},{"ruleId":"641","severity":1,"message":"674","line":44,"column":9,"nodeType":"643","messageId":"644","endLine":44,"endColumn":21},{"ruleId":"641","severity":1,"message":"667","line":5,"column":8,"nodeType":"643","messageId":"644","endLine":5,"endColumn":20},{"ruleId":"641","severity":1,"message":"664","line":6,"column":8,"nodeType":"643","messageId":"644","endLine":6,"endColumn":16},{"ruleId":"641","severity":1,"message":"663","line":7,"column":8,"nodeType":"643","messageId":"644","endLine":7,"endColumn":12},{"ruleId":"641","severity":1,"message":"648","line":8,"column":8,"nodeType":"643","messageId":"644","endLine":8,"endColumn":15},{"ruleId":"654","severity":1,"message":"655","line":198,"column":70,"nodeType":"656","messageId":"657","endLine":198,"endColumn":72},{"ruleId":"654","severity":1,"message":"655","line":240,"column":73,"nodeType":"656","messageId":"657","endLine":240,"endColumn":75},{"ruleId":"641","severity":1,"message":"718","line":38,"column":9,"nodeType":"643","messageId":"644","endLine":38,"endColumn":13},{"ruleId":"641","severity":1,"message":"674","line":44,"column":9,"nodeType":"643","messageId":"644","endLine":44,"endColumn":21},{"ruleId":"679","replacedBy":"719"},{"ruleId":"681","replacedBy":"720"},{"ruleId":"641","severity":1,"message":"718","line":37,"column":9,"nodeType":"643","messageId":"644","endLine":37,"endColumn":13},{"ruleId":"641","severity":1,"message":"721","line":16,"column":8,"nodeType":"643","messageId":"644","endLine":16,"endColumn":16},{"ruleId":"641","severity":1,"message":"722","line":19,"column":8,"nodeType":"643","messageId":"644","endLine":19,"endColumn":16},{"ruleId":"670","severity":1,"message":"671","line":82,"column":1,"nodeType":"672","endLine":278,"endColumn":2},{"ruleId":"641","severity":1,"message":"645","line":3,"column":10,"nodeType":"643","messageId":"644","endLine":3,"endColumn":16},{"ruleId":"641","severity":1,"message":"646","line":3,"column":18,"nodeType":"643","messageId":"644","endLine":3,"endColumn":23},{"ruleId":"641","severity":1,"message":"647","line":3,"column":31,"nodeType":"643","messageId":"644","endLine":3,"endColumn":44},{"ruleId":"641","severity":1,"message":"676","line":15,"column":8,"nodeType":"643","messageId":"644","endLine":15,"endColumn":17},{"ruleId":"641","severity":1,"message":"723","line":23,"column":8,"nodeType":"643","messageId":"644","endLine":23,"endColumn":20},{"ruleId":"679","replacedBy":"724"},{"ruleId":"681","replacedBy":"725"},{"ruleId":"641","severity":1,"message":"642","line":1,"column":16,"nodeType":"643","messageId":"644","endLine":1,"endColumn":24},{"ruleId":"641","severity":1,"message":"726","line":2,"column":10,"nodeType":"643","messageId":"644","endLine":2,"endColumn":20},{"ruleId":"641","severity":1,"message":"727","line":2,"column":22,"nodeType":"643","messageId":"644","endLine":2,"endColumn":34},{"ruleId":"641","severity":1,"message":"728","line":2,"column":36,"nodeType":"643","messageId":"644","endLine":2,"endColumn":41},{"ruleId":"641","severity":1,"message":"645","line":3,"column":10,"nodeType":"643","messageId":"644","endLine":3,"endColumn":16},{"ruleId":"641","severity":1,"message":"646","line":3,"column":18,"nodeType":"643","messageId":"644","endLine":3,"endColumn":23},{"ruleId":"641","severity":1,"message":"662","line":3,"column":25,"nodeType":"643","messageId":"644","endLine":3,"endColumn":29},{"ruleId":"641","severity":1,"message":"647","line":3,"column":31,"nodeType":"643","messageId":"644","endLine":3,"endColumn":44},{"ruleId":"641","severity":1,"message":"729","line":4,"column":8,"nodeType":"643","messageId":"644","endLine":4,"endColumn":13},{"ruleId":"641","severity":1,"message":"730","line":5,"column":8,"nodeType":"643","messageId":"644","endLine":5,"endColumn":12},{"ruleId":"641","severity":1,"message":"731","line":7,"column":8,"nodeType":"643","messageId":"644","endLine":7,"endColumn":17},{"ruleId":"641","severity":1,"message":"732","line":8,"column":8,"nodeType":"643","messageId":"644","endLine":8,"endColumn":18},{"ruleId":"641","severity":1,"message":"691","line":9,"column":8,"nodeType":"643","messageId":"644","endLine":9,"endColumn":14},{"ruleId":"641","severity":1,"message":"733","line":10,"column":8,"nodeType":"643","messageId":"644","endLine":10,"endColumn":19},{"ruleId":"641","severity":1,"message":"692","line":11,"column":8,"nodeType":"643","messageId":"644","endLine":11,"endColumn":16},{"ruleId":"641","severity":1,"message":"648","line":12,"column":8,"nodeType":"643","messageId":"644","endLine":12,"endColumn":15},{"ruleId":"641","severity":1,"message":"734","line":13,"column":8,"nodeType":"643","messageId":"644","endLine":13,"endColumn":14},{"ruleId":"641","severity":1,"message":"735","line":14,"column":8,"nodeType":"643","messageId":"644","endLine":14,"endColumn":19},{"ruleId":"641","severity":1,"message":"736","line":15,"column":8,"nodeType":"643","messageId":"644","endLine":15,"endColumn":12},{"ruleId":"641","severity":1,"message":"737","line":16,"column":8,"nodeType":"643","messageId":"644","endLine":16,"endColumn":11},{"ruleId":"641","severity":1,"message":"738","line":17,"column":8,"nodeType":"643","messageId":"644","endLine":17,"endColumn":22},{"ruleId":"641","severity":1,"message":"739","line":18,"column":8,"nodeType":"643","messageId":"644","endLine":18,"endColumn":15},{"ruleId":"641","severity":1,"message":"740","line":19,"column":8,"nodeType":"643","messageId":"644","endLine":19,"endColumn":11},{"ruleId":"641","severity":1,"message":"741","line":20,"column":8,"nodeType":"643","messageId":"644","endLine":20,"endColumn":14},{"ruleId":"641","severity":1,"message":"742","line":21,"column":8,"nodeType":"643","messageId":"644","endLine":21,"endColumn":12},{"ruleId":"641","severity":1,"message":"743","line":22,"column":8,"nodeType":"643","messageId":"644","endLine":22,"endColumn":12},{"ruleId":"641","severity":1,"message":"744","line":23,"column":8,"nodeType":"643","messageId":"644","endLine":23,"endColumn":19},{"ruleId":"641","severity":1,"message":"745","line":24,"column":8,"nodeType":"643","messageId":"644","endLine":24,"endColumn":19},{"ruleId":"641","severity":1,"message":"746","line":26,"column":10,"nodeType":"643","messageId":"644","endLine":26,"endColumn":20},{"ruleId":"641","severity":1,"message":"709","line":26,"column":22,"nodeType":"643","messageId":"644","endLine":26,"endColumn":32},{"ruleId":"641","severity":1,"message":"747","line":26,"column":34,"nodeType":"643","messageId":"644","endLine":26,"endColumn":44},{"ruleId":"641","severity":1,"message":"748","line":29,"column":10,"nodeType":"643","messageId":"644","endLine":29,"endColumn":20},{"ruleId":"641","severity":1,"message":"749","line":31,"column":8,"nodeType":"643","messageId":"644","endLine":31,"endColumn":17},{"ruleId":"641","severity":1,"message":"750","line":32,"column":10,"nodeType":"643","messageId":"644","endLine":32,"endColumn":14},{"ruleId":"670","severity":1,"message":"671","line":37,"column":1,"nodeType":"672","endLine":57,"endColumn":2},{"ruleId":"654","severity":1,"message":"655","line":43,"column":24,"nodeType":"656","messageId":"657","endLine":43,"endColumn":26},{"ruleId":"641","severity":1,"message":"642","line":1,"column":16,"nodeType":"643","messageId":"644","endLine":1,"endColumn":24},{"ruleId":"641","severity":1,"message":"704","line":8,"column":10,"nodeType":"643","messageId":"644","endLine":8,"endColumn":18},{"ruleId":"641","severity":1,"message":"746","line":11,"column":10,"nodeType":"643","messageId":"644","endLine":11,"endColumn":20},{"ruleId":"641","severity":1,"message":"709","line":11,"column":22,"nodeType":"643","messageId":"644","endLine":11,"endColumn":32},{"ruleId":"641","severity":1,"message":"747","line":11,"column":34,"nodeType":"643","messageId":"644","endLine":11,"endColumn":44},{"ruleId":"641","severity":1,"message":"748","line":14,"column":10,"nodeType":"643","messageId":"644","endLine":14,"endColumn":20},{"ruleId":"641","severity":1,"message":"751","line":15,"column":10,"nodeType":"643","messageId":"644","endLine":15,"endColumn":20},{"ruleId":"641","severity":1,"message":"752","line":17,"column":8,"nodeType":"643","messageId":"644","endLine":17,"endColumn":21},{"ruleId":"641","severity":1,"message":"750","line":18,"column":10,"nodeType":"643","messageId":"644","endLine":18,"endColumn":14},{"ruleId":"641","severity":1,"message":"753","line":24,"column":7,"nodeType":"643","messageId":"644","endLine":24,"endColumn":16},{"ruleId":"670","severity":1,"message":"671","line":35,"column":1,"nodeType":"672","endLine":145,"endColumn":2},{"ruleId":"641","severity":1,"message":"754","line":36,"column":11,"nodeType":"643","messageId":"644","endLine":36,"endColumn":16},{"ruleId":"654","severity":1,"message":"755","line":47,"column":22,"nodeType":"656","messageId":"657","endLine":47,"endColumn":24},{"ruleId":"641","severity":1,"message":"677","line":17,"column":20,"nodeType":"643","messageId":"644","endLine":17,"endColumn":33},{"ruleId":"641","severity":1,"message":"678","line":81,"column":10,"nodeType":"643","messageId":"644","endLine":81,"endColumn":21},{"ruleId":"641","severity":1,"message":"756","line":7,"column":8,"nodeType":"643","messageId":"644","endLine":7,"endColumn":25},{"ruleId":"670","severity":1,"message":"671","line":93,"column":1,"nodeType":"672","endLine":318,"endColumn":2},{"ruleId":"641","severity":1,"message":"757","line":136,"column":10,"nodeType":"643","messageId":"644","endLine":136,"endColumn":18},{"ruleId":"641","severity":1,"message":"758","line":136,"column":20,"nodeType":"643","messageId":"644","endLine":136,"endColumn":31},{"ruleId":"654","severity":1,"message":"655","line":141,"column":18,"nodeType":"656","messageId":"657","endLine":141,"endColumn":20},{"ruleId":"654","severity":1,"message":"655","line":204,"column":57,"nodeType":"656","messageId":"657","endLine":204,"endColumn":59},{"ruleId":"641","severity":1,"message":"677","line":17,"column":20,"nodeType":"643","messageId":"644","endLine":17,"endColumn":33},{"ruleId":"641","severity":1,"message":"678","line":81,"column":10,"nodeType":"643","messageId":"644","endLine":81,"endColumn":21},{"ruleId":"641","severity":1,"message":"677","line":17,"column":20,"nodeType":"643","messageId":"644","endLine":17,"endColumn":33},{"ruleId":"641","severity":1,"message":"678","line":81,"column":10,"nodeType":"643","messageId":"644","endLine":81,"endColumn":21},{"ruleId":"641","severity":1,"message":"675","line":3,"column":8,"nodeType":"643","messageId":"644","endLine":3,"endColumn":17},{"ruleId":"641","severity":1,"message":"676","line":6,"column":8,"nodeType":"643","messageId":"644","endLine":6,"endColumn":17},{"ruleId":"641","severity":1,"message":"645","line":3,"column":10,"nodeType":"643","messageId":"644","endLine":3,"endColumn":16},{"ruleId":"641","severity":1,"message":"646","line":3,"column":18,"nodeType":"643","messageId":"644","endLine":3,"endColumn":23},{"ruleId":"641","severity":1,"message":"662","line":3,"column":25,"nodeType":"643","messageId":"644","endLine":3,"endColumn":29},{"ruleId":"641","severity":1,"message":"647","line":3,"column":31,"nodeType":"643","messageId":"644","endLine":3,"endColumn":44},{"ruleId":"641","severity":1,"message":"731","line":7,"column":8,"nodeType":"643","messageId":"644","endLine":7,"endColumn":17},{"ruleId":"641","severity":1,"message":"734","line":13,"column":8,"nodeType":"643","messageId":"644","endLine":13,"endColumn":14},{"ruleId":"641","severity":1,"message":"735","line":14,"column":8,"nodeType":"643","messageId":"644","endLine":14,"endColumn":19},{"ruleId":"641","severity":1,"message":"742","line":21,"column":8,"nodeType":"643","messageId":"644","endLine":21,"endColumn":12},{"ruleId":"641","severity":1,"message":"746","line":29,"column":10,"nodeType":"643","messageId":"644","endLine":29,"endColumn":20},{"ruleId":"641","severity":1,"message":"709","line":29,"column":22,"nodeType":"643","messageId":"644","endLine":29,"endColumn":32},{"ruleId":"641","severity":1,"message":"747","line":29,"column":34,"nodeType":"643","messageId":"644","endLine":29,"endColumn":44},{"ruleId":"641","severity":1,"message":"751","line":33,"column":10,"nodeType":"643","messageId":"644","endLine":33,"endColumn":20},{"ruleId":"641","severity":1,"message":"750","line":35,"column":10,"nodeType":"643","messageId":"644","endLine":35,"endColumn":14},{"ruleId":"670","severity":1,"message":"671","line":114,"column":1,"nodeType":"672","endLine":393,"endColumn":2},{"ruleId":"654","severity":1,"message":"655","line":124,"column":21,"nodeType":"656","messageId":"657","endLine":124,"endColumn":23},{"ruleId":"654","severity":1,"message":"655","line":214,"column":60,"nodeType":"656","messageId":"657","endLine":214,"endColumn":62},{"ruleId":"654","severity":1,"message":"755","line":214,"column":93,"nodeType":"656","messageId":"657","endLine":214,"endColumn":95},{"ruleId":"654","severity":1,"message":"655","line":248,"column":60,"nodeType":"656","messageId":"657","endLine":248,"endColumn":62},{"ruleId":"654","severity":1,"message":"755","line":248,"column":93,"nodeType":"656","messageId":"657","endLine":248,"endColumn":95},{"ruleId":"654","severity":1,"message":"655","line":279,"column":46,"nodeType":"656","messageId":"657","endLine":279,"endColumn":48},{"ruleId":"654","severity":1,"message":"655","line":279,"column":68,"nodeType":"656","messageId":"657","endLine":279,"endColumn":70},{"ruleId":"654","severity":1,"message":"655","line":304,"column":84,"nodeType":"656","messageId":"657","endLine":304,"endColumn":86},{"ruleId":"654","severity":1,"message":"655","line":304,"column":118,"nodeType":"656","messageId":"657","endLine":304,"endColumn":120},{"ruleId":"654","severity":1,"message":"655","line":315,"column":84,"nodeType":"656","messageId":"657","endLine":315,"endColumn":86},{"ruleId":"654","severity":1,"message":"655","line":315,"column":118,"nodeType":"656","messageId":"657","endLine":315,"endColumn":120},{"ruleId":"654","severity":1,"message":"655","line":326,"column":84,"nodeType":"656","messageId":"657","endLine":326,"endColumn":86},{"ruleId":"654","severity":1,"message":"655","line":326,"column":118,"nodeType":"656","messageId":"657","endLine":326,"endColumn":120},{"ruleId":"654","severity":1,"message":"655","line":337,"column":84,"nodeType":"656","messageId":"657","endLine":337,"endColumn":86},{"ruleId":"654","severity":1,"message":"655","line":337,"column":118,"nodeType":"656","messageId":"657","endLine":337,"endColumn":120},{"ruleId":"654","severity":1,"message":"655","line":348,"column":84,"nodeType":"656","messageId":"657","endLine":348,"endColumn":86},{"ruleId":"654","severity":1,"message":"655","line":348,"column":118,"nodeType":"656","messageId":"657","endLine":348,"endColumn":120},{"ruleId":"654","severity":1,"message":"655","line":359,"column":84,"nodeType":"656","messageId":"657","endLine":359,"endColumn":86},{"ruleId":"654","severity":1,"message":"655","line":359,"column":118,"nodeType":"656","messageId":"657","endLine":359,"endColumn":120},{"ruleId":"654","severity":1,"message":"655","line":370,"column":84,"nodeType":"656","messageId":"657","endLine":370,"endColumn":86},{"ruleId":"654","severity":1,"message":"655","line":370,"column":118,"nodeType":"656","messageId":"657","endLine":370,"endColumn":120},{"ruleId":"641","severity":1,"message":"645","line":3,"column":10,"nodeType":"643","messageId":"644","endLine":3,"endColumn":16},{"ruleId":"641","severity":1,"message":"646","line":3,"column":18,"nodeType":"643","messageId":"644","endLine":3,"endColumn":23},{"ruleId":"641","severity":1,"message":"647","line":3,"column":31,"nodeType":"643","messageId":"644","endLine":3,"endColumn":44},{"ruleId":"641","severity":1,"message":"759","line":18,"column":8,"nodeType":"643","messageId":"644","endLine":18,"endColumn":16},{"ruleId":"641","severity":1,"message":"760","line":18,"column":20,"nodeType":"643","messageId":"644","endLine":18,"endColumn":30},{"ruleId":"641","severity":1,"message":"734","line":19,"column":8,"nodeType":"643","messageId":"644","endLine":19,"endColumn":14},{"ruleId":"641","severity":1,"message":"749","line":26,"column":8,"nodeType":"643","messageId":"644","endLine":26,"endColumn":17},{"ruleId":"641","severity":1,"message":"761","line":53,"column":7,"nodeType":"643","messageId":"644","endLine":53,"endColumn":19},{"ruleId":"641","severity":1,"message":"652","line":56,"column":11,"nodeType":"643","messageId":"644","endLine":56,"endColumn":22},{"ruleId":"670","severity":1,"message":"671","line":98,"column":1,"nodeType":"672","endLine":158,"endColumn":2},{"ruleId":"654","severity":1,"message":"655","line":134,"column":45,"nodeType":"656","messageId":"657","endLine":134,"endColumn":47},{"ruleId":null,"fatal":true,"severity":2,"message":"762","line":141,"column":31},{"ruleId":"641","severity":1,"message":"642","line":1,"column":16,"nodeType":"643","messageId":"644","endLine":1,"endColumn":24},{"ruleId":"641","severity":1,"message":"746","line":9,"column":10,"nodeType":"643","messageId":"644","endLine":9,"endColumn":20},{"ruleId":"641","severity":1,"message":"747","line":9,"column":34,"nodeType":"643","messageId":"644","endLine":9,"endColumn":44},{"ruleId":"641","severity":1,"message":"763","line":9,"column":46,"nodeType":"643","messageId":"644","endLine":9,"endColumn":56},{"ruleId":"641","severity":1,"message":"764","line":9,"column":58,"nodeType":"643","messageId":"644","endLine":9,"endColumn":66},{"ruleId":"641","severity":1,"message":"748","line":12,"column":10,"nodeType":"643","messageId":"644","endLine":12,"endColumn":20},{"ruleId":"641","severity":1,"message":"751","line":13,"column":10,"nodeType":"643","messageId":"644","endLine":13,"endColumn":20},{"ruleId":"641","severity":1,"message":"752","line":15,"column":8,"nodeType":"643","messageId":"644","endLine":15,"endColumn":21},{"ruleId":"641","severity":1,"message":"750","line":16,"column":10,"nodeType":"643","messageId":"644","endLine":16,"endColumn":14},{"ruleId":"670","severity":1,"message":"671","line":68,"column":1,"nodeType":"672","endLine":461,"endColumn":2},{"ruleId":"641","severity":1,"message":"652","line":71,"column":9,"nodeType":"643","messageId":"644","endLine":71,"endColumn":20},{"ruleId":"654","severity":1,"message":"755","line":78,"column":19,"nodeType":"656","messageId":"657","endLine":78,"endColumn":21},{"ruleId":"654","severity":1,"message":"655","line":133,"column":45,"nodeType":"656","messageId":"657","endLine":133,"endColumn":47},{"ruleId":"654","severity":1,"message":"655","line":186,"column":44,"nodeType":"656","messageId":"657","endLine":186,"endColumn":46},{"ruleId":"654","severity":1,"message":"655","line":204,"column":48,"nodeType":"656","messageId":"657","endLine":204,"endColumn":50},{"ruleId":"654","severity":1,"message":"655","line":220,"column":50,"nodeType":"656","messageId":"657","endLine":220,"endColumn":52},{"ruleId":"654","severity":1,"message":"655","line":259,"column":39,"nodeType":"656","messageId":"657","endLine":259,"endColumn":41},{"ruleId":"654","severity":1,"message":"655","line":277,"column":40,"nodeType":"656","messageId":"657","endLine":277,"endColumn":42},{"ruleId":"654","severity":1,"message":"655","line":298,"column":52,"nodeType":"656","messageId":"657","endLine":298,"endColumn":54},{"ruleId":"654","severity":1,"message":"655","line":315,"column":47,"nodeType":"656","messageId":"657","endLine":315,"endColumn":49},{"ruleId":"654","severity":1,"message":"655","line":333,"column":44,"nodeType":"656","messageId":"657","endLine":333,"endColumn":46},{"ruleId":"654","severity":1,"message":"655","line":352,"column":43,"nodeType":"656","messageId":"657","endLine":352,"endColumn":45},{"ruleId":"654","severity":1,"message":"655","line":367,"column":46,"nodeType":"656","messageId":"657","endLine":367,"endColumn":48},{"ruleId":"654","severity":1,"message":"655","line":382,"column":41,"nodeType":"656","messageId":"657","endLine":382,"endColumn":43},{"ruleId":"654","severity":1,"message":"655","line":403,"column":43,"nodeType":"656","messageId":"657","endLine":403,"endColumn":45},{"ruleId":"654","severity":1,"message":"655","line":417,"column":48,"nodeType":"656","messageId":"657","endLine":417,"endColumn":50},{"ruleId":"654","severity":1,"message":"655","line":431,"column":47,"nodeType":"656","messageId":"657","endLine":431,"endColumn":49},{"ruleId":"654","severity":1,"message":"655","line":446,"column":44,"nodeType":"656","messageId":"657","endLine":446,"endColumn":46},{"ruleId":"641","severity":1,"message":"642","line":1,"column":16,"nodeType":"643","messageId":"644","endLine":1,"endColumn":24},{"ruleId":"641","severity":1,"message":"765","line":2,"column":43,"nodeType":"643","messageId":"644","endLine":2,"endColumn":50},{"ruleId":"641","severity":1,"message":"766","line":20,"column":8,"nodeType":"643","messageId":"644","endLine":20,"endColumn":18},{"ruleId":"641","severity":1,"message":"704","line":23,"column":10,"nodeType":"643","messageId":"644","endLine":23,"endColumn":18},{"ruleId":"670","severity":1,"message":"671","line":73,"column":1,"nodeType":"672","endLine":123,"endColumn":2},{"ruleId":"641","severity":1,"message":"714","line":74,"column":7,"nodeType":"643","messageId":"644","endLine":74,"endColumn":14},{"ruleId":"654","severity":1,"message":"655","line":90,"column":30,"nodeType":"656","messageId":"657","endLine":90,"endColumn":32},{"ruleId":"654","severity":1,"message":"655","line":102,"column":49,"nodeType":"656","messageId":"657","endLine":102,"endColumn":51},{"ruleId":"654","severity":1,"message":"655","line":106,"column":42,"nodeType":"656","messageId":"657","endLine":106,"endColumn":44},{"ruleId":"641","severity":1,"message":"645","line":3,"column":10,"nodeType":"643","messageId":"644","endLine":3,"endColumn":16},{"ruleId":"641","severity":1,"message":"646","line":3,"column":18,"nodeType":"643","messageId":"644","endLine":3,"endColumn":23},{"ruleId":"641","severity":1,"message":"647","line":3,"column":31,"nodeType":"643","messageId":"644","endLine":3,"endColumn":44},{"ruleId":"641","severity":1,"message":"676","line":15,"column":8,"nodeType":"643","messageId":"644","endLine":15,"endColumn":17},{"ruleId":"641","severity":1,"message":"723","line":23,"column":8,"nodeType":"643","messageId":"644","endLine":23,"endColumn":20},{"ruleId":"641","severity":1,"message":"645","line":3,"column":10,"nodeType":"643","messageId":"644","endLine":3,"endColumn":16},{"ruleId":"641","severity":1,"message":"646","line":3,"column":18,"nodeType":"643","messageId":"644","endLine":3,"endColumn":23},{"ruleId":"641","severity":1,"message":"647","line":3,"column":31,"nodeType":"643","messageId":"644","endLine":3,"endColumn":44},{"ruleId":"641","severity":1,"message":"767","line":11,"column":8,"nodeType":"643","messageId":"644","endLine":11,"endColumn":13},{"ruleId":"641","severity":1,"message":"768","line":12,"column":8,"nodeType":"643","messageId":"644","endLine":12,"endColumn":18},{"ruleId":"641","severity":1,"message":"676","line":15,"column":8,"nodeType":"643","messageId":"644","endLine":15,"endColumn":17},{"ruleId":"641","severity":1,"message":"723","line":23,"column":8,"nodeType":"643","messageId":"644","endLine":23,"endColumn":20},{"ruleId":"641","severity":1,"message":"645","line":3,"column":10,"nodeType":"643","messageId":"644","endLine":3,"endColumn":16},{"ruleId":"641","severity":1,"message":"646","line":3,"column":18,"nodeType":"643","messageId":"644","endLine":3,"endColumn":23},{"ruleId":"641","severity":1,"message":"647","line":3,"column":31,"nodeType":"643","messageId":"644","endLine":3,"endColumn":44},{"ruleId":"641","severity":1,"message":"676","line":15,"column":8,"nodeType":"643","messageId":"644","endLine":15,"endColumn":17},{"ruleId":"641","severity":1,"message":"723","line":23,"column":8,"nodeType":"643","messageId":"644","endLine":23,"endColumn":20},{"ruleId":"641","severity":1,"message":"677","line":17,"column":20,"nodeType":"643","messageId":"644","endLine":17,"endColumn":33},{"ruleId":"641","severity":1,"message":"678","line":81,"column":10,"nodeType":"643","messageId":"644","endLine":81,"endColumn":21},{"ruleId":"641","severity":1,"message":"677","line":17,"column":20,"nodeType":"643","messageId":"644","endLine":17,"endColumn":33},{"ruleId":"641","severity":1,"message":"678","line":81,"column":10,"nodeType":"643","messageId":"644","endLine":81,"endColumn":21},{"ruleId":"641","severity":1,"message":"677","line":17,"column":20,"nodeType":"643","messageId":"644","endLine":17,"endColumn":33},{"ruleId":"641","severity":1,"message":"678","line":81,"column":10,"nodeType":"643","messageId":"644","endLine":81,"endColumn":21},{"ruleId":"641","severity":1,"message":"769","line":2,"column":8,"nodeType":"643","messageId":"644","endLine":2,"endColumn":12},"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'Switch' is defined but never used.","'Route' is defined but never used.","'BrowserRouter' is defined but never used.","'Divider' is defined but never used.","'Collapse' is defined but never used.","'homeSettingsStatus' is defined but never used.","'ScanOnProgress' is assigned a value but never used.","'handleClick' is assigned a value but never used.","'isEmpty' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'scanTime' is assigned a value but never used.","'currentDate' is assigned a value but never used.","'reset' is assigned a value but never used.","'setReset' is assigned a value but never used.","'Link' is defined but never used.","'List' is defined but never used.","'ListItem' is defined but never used.","'ListItemProps' is defined but never used.","'ListItemIcon' is defined but never used.","'ListItemText' is defined but never used.","'modeData' is defined but never used.","'AddNewMode' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'handleDeleteMode' is assigned a value but never used.","'handleChange' is assigned a value but never used.","'FormGroup' is defined but never used.","'FormLabel' is defined but never used.","'CheckboxProps' is defined but never used.","'handleClick' is defined but never used.","no-native-reassign",["770"],"no-negated-in-lhs",["771"],["770"],["771"],["770"],["771"],["770"],["771"],["770"],["771"],"'Select' is defined but never used.","'MenuItem' is defined but never used.",["770"],["771"],"'ListSubheader' is defined but never used.","'InboxIcon' is defined but never used.","'DraftsIcon' is defined but never used.","'SendIcon' is defined but never used.","'DynamicFeedIcon' is defined but never used.","'StarBorder' is defined but never used.","'ExtensionIcon' is defined but never used.",["770"],["771"],"'observer' is defined but never used.","'Result' is defined but never used.","'scanMode' is defined but never used.","'Checkbox' is defined but never used.","'cveDetection' is defined but never used.","'targetData' is defined but never used.","'setRangeBtnState' is assigned a value but never used.","'setSetRangeBtnState' is assigned a value but never used.","'handleAuto' is assigned a value but never used.","'handleCve' is assigned a value but never used.","'classes' is assigned a value but never used.","'autoArray' is assigned a value but never used.",["770"],["771"],"'bull' is assigned a value but never used.",["770"],["771"],"'MailIcon' is defined but never used.","'HomeIcon' is defined but never used.","'ScanModeIcon' is defined but never used.",["770"],["771"],"'makeStyles' is defined but never used.","'createStyles' is defined but never used.","'Theme' is defined but never used.","'Paper' is defined but never used.","'Grid' is defined but never used.","'TextField' is defined but never used.","'InputLabel' is defined but never used.","'FormControl' is defined but never used.","'Button' is defined but never used.","'ButtonGroup' is defined but never used.","'Tabs' is defined but never used.","'Tab' is defined but never used.","'LinearProgress' is defined but never used.","'Tooltip' is defined but never used.","'Box' is defined but never used.","'AppBar' is defined but never used.","'Chip' is defined but never used.","'Card' is defined but never used.","'CardActions' is defined but never used.","'CardContent' is defined but never used.","'scanTarget' is defined but never used.","'targetTime' is defined but never used.","'isScanning' is defined but never used.","'scannedIn' is defined but never used.","'rows' is defined but never used.","'pureOutput' is defined but never used.","'scannedTarget' is defined but never used.","'useStyles' is assigned a value but never used.","'datas' is assigned a value but never used.","Expected '!==' and instead saw '!='.","'DialogContentText' is defined but never used.","'theArray' is assigned a value but never used.","'setTheArray' is assigned a value but never used.","'MuiAlert' is defined but never used.","'AlertProps' is defined but never used.","'DoneScanning' is assigned a value but never used.","Parsing error: '=>' expected.","'chosenMode' is defined but never used.","'scanDate' is defined but never used.","'lighten' is defined but never used.","'NmapOutput' is defined but never used.","'Radio' is defined but never used.","'RadioGroup' is defined but never used.","'logo' is defined but never used.","no-global-assign","no-unsafe-negation"]